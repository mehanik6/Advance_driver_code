#############################Ctp Start#################################
/* Copyright Statement:
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein
 * is confidential and proprietary to MediaTek Inc. and/or its licensors.
 * Without the prior written permission of MediaTek inc. and/or its licensors,
 * any reproduction, modification, use or disclosure of MediaTek Software,
 * and information contained herein, in whole or in part, shall be strictly prohibited.
 *
 * MediaTek Inc. (C) 2010. All rights reserved.
 *
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
 * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
 * AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
 * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
 * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
 * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
 * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
 * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
 * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
 * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
 * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
 * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
 * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
 * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 *
 * The following software/firmware and/or related documentation ("MediaTek Software")
 * have been modified by MediaTek Inc. All revisions are subject to any receiver's
 * applicable license agreements with MediaTek Inc.
 */

#include <linux/init.h>
#include <linux/module.h>
#include <linux/delay.h>
#include <linux/i2c.h>
#include <linux/input.h>
#include <linux/slab.h>
#include <linux/gpio.h>
#include <linux/sched.h>
#include <linux/kthread.h>
#include <linux/bitops.h>
#include <linux/kernel.h>
#include <linux/delay.h>
#include <linux/byteorder/generic.h>
#ifdef CONFIG_HAS_EARLYSUSPEND
#include <linux/earlysuspend.h>
#endif 
#include <linux/interrupt.h>
#include <linux/time.h>
#include <linux/rtpm_prio.h>

#include <linux/proc_fs.h>
#include <asm/uaccess.h>

#include "tpd_custom_gt818b.h" 
#ifdef MT6575
#include <mach/mt6575_pm_ldo.h>
#include <mach/mt6575_typedefs.h>
#include <mach/mt6575_boot.h>
#endif

#include "tpd.h"
#include <cust_eint.h>
#include <linux/jiffies.h>

#ifndef TPD_NO_GPIO 
#include "cust_gpio_usage.h"
#endif

#include "gt818_fw.h"

extern struct tpd_device *tpd;

static int tpd_flag = 0;
static int tpd_halt=0;
static int i2c_clock = 400;
static struct task_struct *thread = NULL;
static DECLARE_WAIT_QUEUE_HEAD(waiter);

#ifdef TPD_HAVE_BUTTON 
static int tpd_keys_local[TPD_KEY_COUNT] = TPD_KEYS;
static int tpd_keys_dim_local[TPD_KEY_COUNT][4] = TPD_KEYS_DIM;
#endif
#if (defined(TPD_WARP_START) && defined(TPD_WARP_END))
static int tpd_wb_start_local[TPD_WARP_CNT] = TPD_WARP_START;
static int tpd_wb_end_local[TPD_WARP_CNT]   = TPD_WARP_END;
#endif
#if (defined(TPD_HAVE_CALIBRATION) && !defined(TPD_CUSTOM_CALIBRATION))
static int tpd_calmat_local[8]     = TPD_CALIBRATION_MATRIX;
static int tpd_def_calmat_local[8] = TPD_CALIBRATION_MATRIX;
#endif

static void tpd_eint_interrupt_handler(void);
static int touch_event_handler(void *unused);
static int tpd_i2c_probe(struct i2c_client *client, const struct i2c_device_id *id);
// ynn modify for ics
//static int tpd_i2c_detect(struct i2c_client *client, int kind, struct i2c_board_info *info);
static int tpd_i2c_detect(struct i2c_client *client, struct i2c_board_info *info);

static int tpd_i2c_remove(struct i2c_client *client);
extern void mt65xx_eint_unmask(unsigned int line);
extern void mt65xx_eint_mask(unsigned int line);
extern void mt65xx_eint_set_hw_debounce(kal_uint8 eintno, kal_uint32 ms);
extern kal_uint32 mt65xx_eint_set_sens(kal_uint8 eintno, kal_bool sens);
extern void mt65xx_eint_registration(kal_uint8 eintno, kal_bool Dbounce_En,
                                     kal_bool ACT_Polarity, void (EINT_FUNC_PTR)(void),
                                     kal_bool auto_umask);

extern int  gt818_downloader( struct i2c_client *client, unsigned short ver, unsigned char * data );
#define TPD_DITO_SENSOR
//#define TPD_CONDITION_SWITCH
#define TPD_RESET_ISSUE_WORKAROUND
#define TPD_MAX_RESET_COUNT 3
#define TPD_FREQ_HOPPING
//#define TPD_SLOW_SCAN_RATE
//#define TPD_HW_REVISION_D
//#define TPD_RAW_DATA_DEBUG

#define TPD_OK 0

#define TPD_CONFIG_REG_BASE           0x6A2
#define TPD_FREQ_CAL_RESULT           0x70F
#define TPD_TOUCH_INFO_REG_BASE       0x712
#define TPD_KEY_INFO_REG_BASE       0x721
#define TPD_POINT_INFO_REG_BASE       0x722
#define TPD_VERSION_INFO_REG          0x713
#define TPD_POWER_MODE_REG            0x692
#define TPD_HANDSHAKING_START_REG     0xFFF
#define TPD_HANDSHAKING_END_REG       0x8000
#define TPD_FREQ_REG                  0x1522
#define TPD_SOFT_RESET_MODE     0x01
#define TPD_POINT_INFO_LEN      8
#define TPD_MAX_POINTS          5
#define MAX_TRANSACTION_LENGTH 8
#define I2C_DEVICE_ADDRESS_LEN 2
#define I2C_MASTER_CLOCK       400
#define TPD_CONFIG_SIZE        106

#define TPD_X_RES 480
#define TPD_Y_RES 800

#define CHR_CON0        (0xF7000000+0x2FA00)
#define TPD_WARP_Y(y) ( TPD_Y_RES - 1 - y )
//#define TPD_WARP_Y(y) (y)
#define TPD_WARP_X(x) ( TPD_X_RES - 1 - x )
//#define TPD_WARP_X(x) (x)
 
#define MAX_I2C_TRANSFER_SIZE (MAX_TRANSACTION_LENGTH - I2C_DEVICE_ADDRESS_LEN)

#define GT818_CONFIG_PROC_FILE "gt818_config"
#define GT818_CONFIG_I2C_PROC_FILE "gt818_config_i2c"

struct tpd_info_t
{
    u8 vendor_id_1;
    u8 vendor_id_2;
    u8 product_id_1;
    u8 product_id_2;
    u8 version_1;
    u8 version_2;
};
#if 0
//instead, tpd_keys_local
const unsigned int touch_key_array[]=
	{									  
		KEY_MENU,				//MENU									  
		KEY_HOME,
		KEY_BACK,				//HOME									  
		KEY_SEARCH				//CALL									
	}; 
#endif


#ifdef TPD_SLOW_SCAN_RATE
//dito_drive_277KHz_scan_50Hz.gtx
//dito_drive_277KHz_scan_50Hz.gtx
#else
#ifdef TPD_DITO_SENSOR
//6573_dito_D_version.gtx
//here
//GT818_6573_DITO_config.gtx
//mudong
static u8 cfg_data_version_b_mudong[] =
{
0x00,0x02,0x04,0x06,0x08,0x0A,0x0C,0x0E,0x10,0x12,0xF1,0x11,0xE1,0x11,0xD1,0x11,
0xC1,0x11,0xB1,0x11,0xA1,0x11,0x91,0x11,0x81,0x11,0x71,0x11,0x61,0x11,0x51,0x11,
0x41,0x11,0x31,0x11,0x21,0x11,0x11,0x11,0x01,0x11,0x1B,0x03,0x08,0x08,0x08,0x23,
0x23,0x23,0x10,0x0F,0x0A,0x40,0x25,0x01,0x03,0x00,0x05,0xE0,0x01,0x20,0x03,0x00,
0x00,0x40,0x40,0x5A,0x58,0x00,0x00,0x04,0x14,0x05,0x04,0x00,0x00,0x00,0x00,0x00,
0x14,0x10,0xAC,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x19,0x41,0x6A,0x93,0x0F,0x40,
0x25,0x35,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x01

};
//ofeiguang
static u8 cfg_data_version_b_ofeiguang[] =
{
/*
 0x00,0x02,0x04,0x06,0x08,0x0A,0x0C,0x0E,0x10,0x12,0xF1,0x11,0xE1,0x11,0xD1,0x11,
 0xC1,0x11,0xB1,0x11,0xA1,0x11,0x91,0x11,0x81,0x11,0x71,0x11,0x61,0x11,0x51,0x11,
 0x41,0x11,0x31,0x11,0x21,0x11,0x11,0x11,0x01,0x11,0x17,0x03,0x88,0x88,0x88,0x18,
 0x18,0x18,0x10,0x0F,0x0A,0x45,0x35,0x01,0x03,0x00,0x05,0xE0,0x01,0x20,0x03,0x00,
 0x00,0x56,0x54,0x5A,0x58,0x00,0x00,0x04,0x14,0x00,0x08,0x00,0x00,0x00,0x00,0x00,
 0x14,0x10,0xAC,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x19,0x41,0x6A,0x93,0x0C,0x40,
 0x30,0x20,0x14,0x00,0x00,0x00,0x00,0x00,0x00,0x01*/ //before time 0306
/*
	0x00,0x02,0x04,0x06,0x08,0x0A,0x0C,0x0E,0x10,0x12,0xF1,0x11,0xE1,0x11,0xD1,0x11,
	0xC1,0x11,0xB1,0x11,0xA1,0x11,0x91,0x11,0x81,0x11,0x71,0x11,0x61,0x11,0x51,0x11,
	0x41,0x11,0x31,0x11,0x21,0x11,0x11,0x11,0x01,0x11,0x1B,0x03,0x08,0x08,0x08,0x23,
	0x23,0x23,0x10,0x0F,0x0A,0x40,0x25,0x01,0x03,0x00,0x05,0xE0,0x01,0x20,0x03,0x00,
	0x00,0x40,0x40,0x5A,0x58,0x00,0x00,0x04,0x14,0x05,0x04,0x00,0x00,0x00,0x00,0x00,
	0x14,0x10,0xAC,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x19,0x41,0x6A,0x93,0x0C,0x40,
	0x25,0x20,0x14,0x00,0x00,0x00,0x00,0x00,0x00,0x01
*/
//K
/*0x00,0x02,0x04,0x06,0x08,0x0A,0x0C,0x0E,0x10,0x12,
0xF0,0x00,0xE0,0x00,0xD0,0x00,0xC0,0x00,0xB0,0x00,
0xA0,0x00,0x90,0x00,0x80,0x00,0x70,0x00,0x60,0x00,
0x50,0x00,0x40,0x00,0x30,0x00,0x20,0x00,0x10,0x00,
0x00,0x00,0x07,0x03,0x10,0x10,0x10,0x24,0x24,0x24,
0x10,0x0F,0x0A,0x40,0x28,0x01,0x03,0x00,0x05,0xE0,
0x01,0x20,0x03,0x00,0x00,0x56,0x53,0x5A,0x56,0x00,
0x00,0x14,0x14,0x15,0x05,0x00,0x00,0x00,0x00,0x00,
0x10,0x10,0xA1,0x03,0x00,0x00,0x00,0x00,0x00,0x00,
0x1C,0x41,0x6A,0x93,0x0B,0x40,0x30,0x25,0x20,0x00,
0x00,0x00,0x00,0x00,0x00,0x01*/
//U
0x00,0x02,0x04,0x06,0x08,0x0A,0x0C,0x0E,0x10,0x12,
0xF0,0x00,0xE0,0x00,0xD0,0x00,0xC0,0x00,0xB0,0x00,
0xA0,0x00,0x90,0x00,0x80,0x00,0x70,0x00,0x60,0x00,
0x50,0x00,0x40,0x00,0x30,0x00,0x20,0x00,0x10,0x00,
0x00,0x00,0x07,0x03,0x10,0x10,0x10,0x24,0x24,0x24,
0x10,0x0F,0x0A,0x40,0x30,0x01,0x03,0x00,0x05,0xE0,
0x01,0x20,0x03,0x00,0x00,0x56,0x53,0x5A,0x56,0x00,
0x00,0x14,0x14,0x15,0x05,0x00,0x00,0x00,0x00,0x00,
0x10,0x10,0xA1,0x03,0x00,0x00,0x00,0x00,0x00,0x00,
0x1C,0x45,0x70,0x98,0x0F,0x40,0x30,0x25,0x20,0x00,
0x00,0x00,0x00,0x00,0x00,0x01
};
//yanghua
static u8 cfg_data_version_b_yanghua[] =
{
0x00,0x02,0x04,0x06,0x08,0x0A,0x0C,0x0E,0x10,0x12,0xF2,0x22,0xE2,0x22,0xD2,0x22,
0xC2,0x22,0xB2,0x22,0xA2,0x22,0x92,0x22,0x82,0x22,0x72,0x22,0x62,0x22,0x52,0x22,
0x42,0x22,0x32,0x22,0x22,0x22,0x12,0x22,0x02,0x22,0x3B,0x03,0x88,0x88,0x88,0x1C,
0x1C,0x1C,0x10,0x0F,0x0A,0x40,0x30,0x05,0x03,0x00,0x05,0xE0,0x01,0x20,0x03,0x00,
0x00,0x55,0x4E,0x58,0x51,0x00,0x00,0x23,0x14,0x05,0x06,0x00,0x00,0x00,0x00,0x00,
0x14,0x10,0x69,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x1E,0x46,0x72,0x91,0x0E,0x40,
0x30,0x3C,0x28,0x00,0x00,0x00,0x00,0x00,0x00,0x01
};

//xinhao
static u8 cfg_data_version_b_xinhao[] =
{
/*0x00,0x02,0x04,0x06,0x08,0x0A,0x0C,0x0E,0x10,0x12,0x62,0x22,0x52,0x22,0x42,0x22,
0x32,0x22,0x22,0x22,0x12,0x22,0x02,0x22,0xF2,0x22,0xE2,0x22,0xD2,0x22,0xC2,0x22,
0xB2,0x22,0xA2,0x22,0x92,0x22,0x82,0x22,0x72,0x22,0x37,0x03,0x88,0x88,0x88,0x15,
0x15,0x15,0x10,0x0F,0x0A,0x40,0x30,0x05,0x03,0x00,0x05,0xE0,0x01,0x20,0x03,0x00,
0x00,0x55,0x4E,0x58,0x51,0x00,0x00,0x24,0x14,0x05,0x08,0x00,0x00,0x00,0x00,0x00,
0x14,0x10,0x69,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x1E,0x46,0x72,0x91,0x0E,0x40,
0x30,0x3C,0x28,0x00,0x00,0x00,0x00,0x00,0x00,0x01	*/
0x00,0x02,0x04,0x06,0x08,0x0A,0x0C,0x0E,0x10,0x12,0x62,0x22,0x52,0x22,0x42,0x22,
0x32,0x22,0x22,0x22,0x12,0x22,0x02,0x22,0xF2,0x22,0xE2,0x22,0xD2,0x22,0xC2,0x22,
0xB2,0x22,0xA2,0x22,0x92,0x22,0x82,0x22,0x72,0x22,0x37,0x03,0x48,0x48,0x48,0x15,
0x15,0x15,0x10,0x0F,0x0A,0x40,0x30,0x05,0x03,0x00,0x05,0xE0,0x01,0x20,0x03,0x00,
0x00,0x55,0x4E,0x58,0x51,0x00,0x00,0x14,0x14,0x45,0x03,0x00,0x00,0x00,0x00,0x00,
0x14,0x10,0x69,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x1E,0x46,0x72,0x91,0x0E,0x40,
0x30,0x3C,0x28,0x00,0x00,0x00,0x00,0x00,0x00,0x01
};


//dijing for A51 Vollo X93
static u8 cfg_data_version_b_dijing[] =
{
0x00,0x02,0x04,0x06,0x08,0x0A,0x0C,0x0E,0x10,0x12,
0xF1,0x11,0xE1,0x11,0xD1,0x11,0xC1,0x11,0xB1,0x11,
0xA1,0x11,0x91,0x11,0x81,0x11,0x71,0x11,0x61,0x11,
0x51,0x11,0x41,0x11,0x31,0x11,0x21,0x11,0x11,0x11,
0x01,0x11,0x07,0x03,0x50,0x50,0x50,0x23,0x23,0x23,
0x10,0x0F,0x0A,0x40,0x25,0x11,0x03,0x00,0x05,0xE0,
0x01,0x20,0x03,0x00,0x00,0x62,0x58,0x5C,0x53,0x00,
0x00,0x24,0x14,0x05,0x08,0x00,0x00,0x00,0x00,0x00,
0x14,0x10,0xD4,0x03,0x00,0x00,0x00,0x00,0x00,0x00,
0x20,0x40,0x70,0x90,0x0B,0x40,0x30,0x20,0x14,0x00,
0x00,0x00,0x00,0x00,0x00,0x01
};

//zhenghai for A51
static u8 cfg_data_version_b_zhenghai[] =
{
0x00,0x02,0x04,0x06,0x08,0x0A,0x0C,0x0E,0x10,0x12,
0xF1,0x11,0xE1,0x11,0xD1,0x11,0xC1,0x11,0xB1,0x11,
0xA1,0x11,0x91,0x11,0x81,0x11,0x71,0x11,0x61,0x11,
0x51,0x11,0x41,0x11,0x31,0x11,0x21,0x11,0x11,0x11,
0x01,0x11,0x07,0x03,0x10,0x10,0x10,0x24,0x24,0x24,
0x10,0x0F,0x0A,0x50,0x30,0x01,0x03,0x00,0x05,0xE0,
0x01,0x20,0x03,0x00,0x00,0x68,0x67,0x61,0x60,0x00,
0x00,0x25,0x19,0x25,0x05,0x00,0x00,0x00,0x00,0x00,
0x19,0x14,0x10,0x04,0x00,0x00,0x00,0x00,0x00,0x00,
0x10,0x40,0x70,0xA0,0x0C,0x45,0x30,0x35,0x20,0x00,
0x00,0x00,0x00,0x00,0x00,0x01
};
// GT818_6573_DITO_charger_577K.gtx

static u8 *cfg_data_version_b = NULL;
static u8 sensor_type = 0;

#else //SITO
// 6573_SITO_config.gtx


static u8 *cfg_data_version_d = cfg_data_version_b;
//static u8 *cfg_data_with_charger_version_d = cfg_data_with_charger_version_b;
#endif
#endif

static struct i2c_client *i2c_client = NULL;
static const struct i2c_device_id tpd_i2c_id[] = {{"gt818b_a51",0},{}};
static unsigned short force[] = {0, 0xBA, I2C_CLIENT_END,I2C_CLIENT_END};
static const unsigned short * const forces[] = { force, NULL };
//static struct i2c_client_address_data addr_data = { .forces = forces,};// ynn modify for a51 ics compile
 static struct i2c_board_info __initdata i2c_tpd={ I2C_BOARD_INFO("gt818b_a51", (0xBA>>1))};//ynn modify for a51 ics
static struct i2c_driver tpd_i2c_driver =
{                       
    .probe = tpd_i2c_probe,                                   
    .remove = tpd_i2c_remove,                           
    .detect = tpd_i2c_detect,                           
    .driver.name = "gt818b_a51", 
    .id_table = tpd_i2c_id,                             
    //.address_data = &addr_data,  // ynn modify to following for a51 ics compile. 
    .address_list = (const unsigned short*) forces, // ynn modify for a51 ics compile.                     
}; 
struct tpd_info_t tpd_info;

static u8 *cfg_data = NULL;
static u8 *cfg_data_with_charger = NULL;

#ifdef TPD_FREQ_HOPPING
static u8 freq_base_value = 0;
#endif
/* proc file system */
static int i2c_write_bytes( struct i2c_client *client, u16 addr, u8 *txbuf, int len );
static int i2c_write_dummy( struct i2c_client *client, u16 addr );

static struct proc_dir_entry *gt818_config_proc = NULL;

static int gt818_config_read_proc(char *page, char **start, off_t off, int count, int *eof, void *data)
{
    char *ptr = page;
    int i;
	// ynn add 
	if(0 == sensor_type)
	{		
      ptr += sprintf(ptr,"############### CTP sensor modul is mudong ############\n");
	}else if(1 == sensor_type)
        {
      ptr += sprintf(ptr,"############### CTP sensor modul is zhenghai ############\n");
	}else if(2 == sensor_type)
        {
      ptr += sprintf(ptr,"############### CTP sensor modul is oufeiguang ############\n");
	}
	TPD_DMESG("==== GT818 normal config ====\n");

    ptr += sprintf( ptr, "==== GT818 normal config ====\n" );

    for ( i = 0 ; i < TPD_CONFIG_SIZE ; i++ )
    {
        ptr += sprintf( ptr, "0x%02X ", cfg_data[i] );

        if ( i%8 == 7 )
            ptr += sprintf( ptr, "\n" );
    }    

    ptr += sprintf( ptr, "\n" );
	TPD_DMESG("==== GT818 charger config ====\n");
	if(cfg_data_with_charger != NULL){ // ynn change
	    ptr += sprintf( ptr, "==== GT818 charger config ====\n" );

	    for ( i = 0 ; i < TPD_CONFIG_SIZE ; i++ )
	    {
	        ptr += sprintf( ptr, "0x%02X ", cfg_data_with_charger[i] );

	        if ( i%8 == 7 )
	            ptr += sprintf( ptr, "\n" );
	    }

	    ptr += sprintf( ptr, "\n" );
	}else{
		ptr += sprintf( ptr, "==== GT818 charger config cfg_data_with_charger is null ====\n" );
	}
    *eof = 1;
    return ( ptr - page );
}

static int gt818_config_write_proc(struct file *file, const char *buffer, unsigned long count, void *data)
{
#ifdef TPD_CONDITION_SWITCH
    u32 temp = *(volatile u32 *)CHR_CON0;
        
    temp &= (1<<13);
#endif

    TPD_DEBUG("write count %ld\n", count );

    if ( count != TPD_CONFIG_SIZE*2 )
    {
        TPD_DEBUG("size not match [%d:%ld]\n", TPD_CONFIG_SIZE*2, count );
        return -EFAULT;
    }

    if (copy_from_user( cfg_data, buffer, count/2))
    {
        TPD_DEBUG("copy from user fail\n");
        return -EFAULT;
    }
    
    if (copy_from_user( cfg_data_with_charger, buffer + TPD_CONFIG_SIZE, count/2))
    {
        TPD_DEBUG("copy from user fail\n");
        return -EFAULT;
    }

    i2c_write_dummy( i2c_client, TPD_HANDSHAKING_START_REG );

#ifdef TPD_CONDITION_SWITCH
    if ( temp )
        i2c_write_bytes( i2c_client, TPD_CONFIG_REG_BASE, cfg_data_with_charger, TPD_CONFIG_SIZE );
    else
#endif
        i2c_write_bytes( i2c_client, TPD_CONFIG_REG_BASE, cfg_data, sizeof( cfg_data ) );

    i2c_write_dummy( i2c_client, TPD_HANDSHAKING_END_REG );
    return count;
}

static struct proc_dir_entry *gt818_config_i2c_proc = NULL;

static int gt818_config_i2c_read_proc(char *page, char **start, off_t off, int count, int *eof, void *data)
{
    char *ptr = page;

    TPD_DMESG("i2c clock %d\n", i2c_clock );
    ptr += sprintf( ptr, "i2c clock %d\n", i2c_clock );

    *eof = 1;

    return ( ptr - page );
}

static int gt818_config_i2c_write_proc(struct file *file, const char *buffer, unsigned long count, void *data)
{
    char ch;
    int value;

    if (copy_from_user( &ch, buffer, 1))
    {
        TPD_DMESG("copy from user fail\n");
        return -EFAULT;
    }

    value = ch - '0';

    TPD_DMESG( "set i2c clock %d\n", value );

    if ( value > 0 && value < 5 )
        i2c_clock = value*100;
    else
        return -EFAULT;

    return count;
}


static int i2c_read_bytes( struct i2c_client *client, u16 addr, u8 *rxbuf, int len )
{
    u8 buffer[I2C_DEVICE_ADDRESS_LEN];
    u8 retry;
    u16 left = len;
    u16 offset = 0;

    struct i2c_msg msg[2] =
    {
        {
            .addr = client->addr,
            .flags = 0,
            .buf = buffer,
            .len = I2C_DEVICE_ADDRESS_LEN,
            .timing = I2C_MASTER_CLOCK
        },
        {
            .addr = client->addr,
            .flags = I2C_M_RD,
            .timing = I2C_MASTER_CLOCK
        },
    };

    if ( rxbuf == NULL )
        return -1;

    TPD_DEBUG("i2c_read_bytes to device %02X address %04X len %d\n", client->addr, addr, len );

    while ( left > 0 )
    {
        buffer[0] = ( ( addr+offset ) >> 8 ) & 0xFF;
        buffer[1] = ( addr+offset ) & 0xFF;

        msg[1].buf = &rxbuf[offset];

        if ( left > MAX_TRANSACTION_LENGTH )
        {
            msg[1].len = MAX_TRANSACTION_LENGTH;
            left -= MAX_TRANSACTION_LENGTH;
            offset += MAX_TRANSACTION_LENGTH;
        }
        else
        {
            msg[1].len = left;
            left = 0;
        }

        retry = 0;

        while ( i2c_transfer( client->adapter, &msg[0], 2 ) != 2 )
        {
            retry++;

            if ( retry == 20 )
            {
                TPD_DEBUG("I2C read 0x%X length=%d failed\n", addr + offset, len);
                return -1;
            }
        }
    }

    return 0;
}

static int i2c_write_bytes( struct i2c_client *client, u16 addr, u8 *txbuf, int len )
{
    u8 buffer[MAX_TRANSACTION_LENGTH];
    u16 left = len;
    u16 offset = 0;
    u8 retry = 0;

    struct i2c_msg msg = 
    {
        .addr = client->addr,
        .flags = 0,
        .buf = buffer,
        .timing = I2C_MASTER_CLOCK
    };


    if ( txbuf == NULL )
        return -1;

    TPD_DEBUG("i2c_write_bytes to device %02X address %04X len %d\n", client->addr, addr, len );

    while ( left > 0 )
    {
        retry = 0;

        buffer[0] = ( (addr+offset) >> 8 ) & 0xFF;
        buffer[1] = ( addr+offset ) & 0xFF;

        if ( left > MAX_I2C_TRANSFER_SIZE )
        {
            memcpy( &buffer[I2C_DEVICE_ADDRESS_LEN], &txbuf[offset], MAX_I2C_TRANSFER_SIZE );
            msg.len = MAX_TRANSACTION_LENGTH;
            left -= MAX_I2C_TRANSFER_SIZE;
            offset += MAX_I2C_TRANSFER_SIZE;
        }
        else
        {
            memcpy( &buffer[I2C_DEVICE_ADDRESS_LEN], &txbuf[offset], left );
            msg.len = left + I2C_DEVICE_ADDRESS_LEN;
            left = 0;
        }

        TPD_DEBUG("byte left %d offset %d\n", left, offset );

        while ( i2c_transfer( client->adapter, &msg, 1 ) != 1 )
        {
            retry++;

            if ( retry == 20 )
            {
                TPD_DEBUG("I2C write 0x%X%X length=%d failed\n", buffer[0], buffer[1], len);
                return -1;
            }
            else
                 TPD_DEBUG("I2C write retry %d addr 0x%X%X\n", retry, buffer[0], buffer[1]);

        }
    }

    return 0;
}

static int i2c_write_dummy( struct i2c_client *client, u16 addr )
{
    u8 buffer[MAX_TRANSACTION_LENGTH];

    struct i2c_msg msg =
    {
        .addr = client->addr,
        .flags = 0,
        .buf = buffer,
        .timing = I2C_MASTER_CLOCK,
        .len = 2
    };

    TPD_DEBUG("i2c_write_dummy to device %02X address %04X\n", client->addr, addr );

    buffer[0] = (addr >> 8) & 0xFF;
    buffer[1] = (addr) & 0xFF;

    i2c_transfer( client->adapter, &msg, 1 ); 

    return 0;
}

#ifdef TPD_RAW_DATA_DEBUG

#define GT818_RAW_DATA_PROC_FILE "gt818_raw_data"
#define MAX_DRIVING_CHANNEL 16
#define MAX_SENSING_CHANNLE 10
#define TPD_SYNC_REG 0x711
static struct proc_dir_entry *gt818_raw_data_proc = NULL;
static u8 tpd_raw_data[ MAX_DRIVING_CHANNEL*MAX_SENSING_CHANNLE*4 + 2]; // max driving * max sensing * 2 ( raw + diff )

static int gt818_raw_data_read_proc(char *page, char **start, off_t off, int count, int *eof, void *data)
{
    char *ptr = (u8 *)page;
    u8 driving_line = cfg_data[50];
    u8 sensing_line = cfg_data[52];
    u8 mode = 1;
    u8 row,col;

    *(ptr++) = driving_line;
    *(ptr++) = sensing_line;
    // disable interrupt
    i2c_write_dummy( i2c_client, TPD_HANDSHAKING_START_REG );
    i2c_write_bytes( i2c_client, TPD_SYNC_REG, &mode, 1 );
    i2c_write_dummy( i2c_client, TPD_HANDSHAKING_END_REG );
    msleep(20);
    i2c_write_dummy( i2c_client, TPD_HANDSHAKING_START_REG );
    i2c_read_bytes( i2c_client, 0xD80, tpd_raw_data, 320 );
    i2c_write_dummy( i2c_client, TPD_HANDSHAKING_END_REG );

    i2c_write_dummy( i2c_client, TPD_HANDSHAKING_START_REG );
    mode = 0;
    i2c_write_bytes( i2c_client, TPD_SYNC_REG, &mode, 1 );

    i2c_write_dummy( i2c_client, TPD_HANDSHAKING_END_REG );

    for ( row = 0 ; row < MAX_DRIVING_CHANNEL ; row++ )
    {
        memcpy( ptr, &tpd_raw_data[row*MAX_SENSING_CHANNLE*2], MAX_SENSING_CHANNLE );
        ptr += MAX_SENSING_CHANNLE;

        for ( col = 0 ; col < MAX_SENSING_CHANNLE ; col++ )
        {
            printk( "%02X ", tpd_raw_data[row*MAX_SENSING_CHANNLE*2+col]);
        }
        printk("\n");
    }
    //memcpy( ptr, tpd_raw_data, MAX_DRIVING_CHANNEL*MAX_SENSING_CHANNLE*2 );
    *eof = 1;
   
    return ptr - page;
}

static int gt818_raw_data_write_proc(struct file *file, const char *buffer, unsigned long count, void *data)
{
    printk("count = %ld, %02X\n", count, buffer[0] );

    return count;
}
#endif

static int tpd_i2c_detect(struct i2c_client *client, struct i2c_board_info *info)
{
    strcpy(info->type, "mtk-tpd");
    return 0;
}

//
/*void tpd_reset_fuc(struct i2c_client *client)
{

    int err=0;
	TPD_DMESG("[mtk-tpd] tpd_reset_fuc: \n");
   //power off, need confirm with SA
    hwPowerDown(MT65XX_POWER_LDO_VGP2,  "TP");
    hwPowerDown(MT65XX_POWER_LDO_VGP,  "TP");
	msleep(20);
	
   //power on, need confirm with SA
    hwPowerOn(MT65XX_POWER_LDO_VGP2, VOL_2800, "TP");
    hwPowerOn(MT65XX_POWER_LDO_VGP, VOL_1800, "TP");

	
	// reset
	mt_set_gpio_mode(GPIO_CTP_RST_PIN, GPIO_CTP_RST_PIN_M_GPIO);
	mt_set_gpio_dir(GPIO_CTP_RST_PIN, GPIO_DIR_OUT);
	mt_set_gpio_out(GPIO_CTP_RST_PIN, GPIO_OUT_ZERO);
    msleep(1);
	
	mt_set_gpio_out(GPIO_CTP_RST_PIN, GPIO_OUT_ONE);
	msleep(20);

	
	//i2c_write_dummy( client, TPD_HANDSHAKING_START_REG );
	err = i2c_read_bytes( client, TPD_VERSION_INFO_REG, (u8 *)&tpd_info, sizeof( struct tpd_info_t ) );
	//i2c_write_dummy( client, TPD_HANDSHAKING_END_REG ); 	
	if ( err )
	{
			TPD_DMESG(TPD_DEVICE " fail to get tpd info %d\n", err );

			//return err;
	}
	else
	{
			TPD_DMESG( "TPD info\n");
			TPD_DMESG( "vendor %02X %02X\n", tpd_info.vendor_id_1, tpd_info.vendor_id_2 );
			TPD_DMESG( "product %02X %02X\n", tpd_info.product_id_1, tpd_info.product_id_2 );
			TPD_DMESG( "version %02X %02X\n", tpd_info.version_1, tpd_info.version_2 );
	
	}


	    // setting resolution, RES_X, RES_Y
#ifdef RES_AUTO_CONFIG
    cfg_data[59] = cfg_data_with_charger[59] = (TPD_X_RES&0xff);//(TPD_RES_X&0xff);
    cfg_data[60] = cfg_data_with_charger[60] = ((TPD_X_RES>>8)&0xff);//((TPD_RES_X>>8)&0xff);
    cfg_data[61] = cfg_data_with_charger[61] = (TPD_Y_RES&0xff);//(TPD_RES_Y&0xff);
    cfg_data[62] = cfg_data_with_charger[62] = ((TPD_Y_RES>>8)&0xff);//((TPD_RES_Y>>8)&0xff);    
#endif 
    //i2c_write_dummy( client, TPD_HANDSHAKING_START_REG );
    err = i2c_write_bytes( client, TPD_CONFIG_REG_BASE, cfg_data, CONFIG_LEN );
   // i2c_write_dummy( client, TPD_HANDSHAKING_END_REG );	

	TPD_DMESG("[mtk-tpd] tpd_reset_fuc: done\n");
}
*/

static int tpd_i2c_probe(struct i2c_client *client, const struct i2c_device_id *id)
{  
	TPD_DMESG("ynn MediaTek gt818 tpd_i2c_probe \n");

    int err = 0;
    char *crash = 0;
#ifdef TPD_RESET_ISSUE_WORKAROUND
    int reset_count = 0;

reset_proc:   
    // power on CTP
    #ifdef MT6573
    mt_set_gpio_mode(GPIO_CTP_EN_PIN, GPIO_CTP_EN_PIN_M_GPIO);
    mt_set_gpio_dir(GPIO_CTP_EN_PIN, GPIO_DIR_OUT);
    mt_set_gpio_out(GPIO_CTP_EN_PIN, GPIO_OUT_ONE);
    #endif
    #ifdef MT6575
    //power on, need confirm with SA
    hwPowerOn(MT65XX_POWER_LDO_VGP2, VOL_2800, "TP");
    hwPowerOn(MT65XX_POWER_LDO_VGP, VOL_1800, "TP");      
    #endif
    // set INT mode
    mt_set_gpio_mode(GPIO_CTP_EINT_PIN, GPIO_CTP_EINT_PIN_M_GPIO);
    mt_set_gpio_dir(GPIO_CTP_EINT_PIN, GPIO_DIR_IN);
    mt_set_gpio_pull_enable(GPIO_CTP_EINT_PIN, GPIO_PULL_DISABLE);

    // reset
    mt_set_gpio_mode(GPIO_CTP_RST_PIN, GPIO_CTP_RST_PIN_M_GPIO);
    mt_set_gpio_dir(GPIO_CTP_RST_PIN, GPIO_DIR_OUT);
    mt_set_gpio_out(GPIO_CTP_RST_PIN, GPIO_OUT_ZERO);
    msleep(1);

    mt_set_gpio_out(GPIO_CTP_RST_PIN, GPIO_OUT_ONE);
    msleep(20);

#else
    // set deep sleep off
    mt_set_gpio_mode(GPIO_CTP_RST_PIN, GPIO_CTP_RST_PIN_M_GPIO);
    mt_set_gpio_dir(GPIO_CTP_RST_PIN, GPIO_DIR_OUT);
    mt_set_gpio_out(GPIO_CTP_RST_PIN, GPIO_OUT_ONE);  
    msleep(10);  

    // power down CTP
    #ifdef MT6573
    mt_set_gpio_mode(GPIO_CTP_EN_PIN, GPIO_CTP_EN_PIN_M_GPIO);
    mt_set_gpio_dir(GPIO_CTP_EN_PIN, GPIO_DIR_OUT);
    mt_set_gpio_out(GPIO_CTP_EN_PIN, GPIO_OUT_ZERO);
    
    msleep(10);

    // power on CTP
    mt_set_gpio_mode(GPIO_CTP_EN_PIN, GPIO_CTP_EN_PIN_M_GPIO);
    mt_set_gpio_dir(GPIO_CTP_EN_PIN, GPIO_DIR_OUT);
    mt_set_gpio_out(GPIO_CTP_EN_PIN, GPIO_OUT_ONE);
    msleep(10);
    #endif
    
#endif
     
    memset( &tpd_info, 0, sizeof( struct tpd_info_t ) );
    i2c_write_dummy( client, TPD_HANDSHAKING_START_REG );
    err = i2c_read_bytes( client, TPD_VERSION_INFO_REG, (u8 *)&tpd_info, sizeof( struct tpd_info_t ) );

    if ( err )
    {
        TPD_DMESG(TPD_DEVICE " fail to get tpd info %d\n", err );
        return err;
    }
    else
    {
#ifdef TPD_FREQ_HOPPING
        err = i2c_read_bytes( client, TPD_FREQ_REG, &freq_base_value, 1 );
        TPD_DMESG( "TPD FREQ BASE %02X\n", freq_base_value);
#endif

        TPD_DMESG( "TPD info\n");
        TPD_DMESG( "vendor %02X %02X\n", tpd_info.vendor_id_1, tpd_info.vendor_id_2 );
        TPD_DMESG( "product %02X %02X\n", tpd_info.product_id_1, tpd_info.product_id_2 );
        TPD_DMESG( "version %02X %02X\n", tpd_info.version_1, tpd_info.version_2 );

        // check if upgradable
        gt818_downloader( client, tpd_info.version_2*256 + tpd_info.version_1, goodix_gt818_firmware );
    }

#ifdef TPD_RESET_ISSUE_WORKAROUND
    if ( err )
    {
        if ( reset_count < TPD_MAX_RESET_COUNT )
        {
            reset_count++;
            goto reset_proc;
        }
        
        return err;
    }
#endif

    i2c_client = client;
   
    // Create proc file system
    gt818_config_proc = create_proc_entry( GT818_CONFIG_PROC_FILE, 0666, NULL);

    if ( gt818_config_proc == NULL )
    {
        TPD_DEBUG("create_proc_entry %s failed\n", GT818_CONFIG_PROC_FILE );
    }
    else 
    {
        gt818_config_proc->read_proc = gt818_config_read_proc;
        gt818_config_proc->write_proc = gt818_config_write_proc;
    }

    gt818_config_i2c_proc = create_proc_entry( GT818_CONFIG_I2C_PROC_FILE, 0666, NULL);

    if ( gt818_config_i2c_proc == NULL )
    {
        TPD_DEBUG("create_proc_entry %s failed\n", GT818_CONFIG_I2C_PROC_FILE );
    }
    else
    {
        gt818_config_i2c_proc->read_proc = gt818_config_i2c_read_proc;
        gt818_config_i2c_proc->write_proc = gt818_config_i2c_write_proc;
    }

#ifdef TPD_RAW_DATA_DEBUG
    // Create proc file system
    gt818_raw_data_proc = create_proc_entry( GT818_RAW_DATA_PROC_FILE, 0666, NULL);

    if ( gt818_raw_data_proc == NULL )
    {
        TPD_DEBUG("create_proc_entry %s failed\n", GT818_RAW_DATA_PROC_FILE );
    }
    else
    {
        gt818_raw_data_proc->read_proc = gt818_raw_data_read_proc;
        gt818_raw_data_proc->write_proc = gt818_raw_data_write_proc;
    }
#endif

	/*ergate*/
	/*check module type*/
	{
		u8 module_type;
		err = i2c_read_bytes( client, 0x710, &module_type, 1 );
		TPD_DMESG(TPD_DEVICE "TP module_type**********:%d\n",module_type);
		sensor_type=module_type;
		//module_type=0;
		if(module_type == 0)
		{
			cfg_data_version_b = cfg_data_version_b_mudong;// ynn modify mudong bit0-bit2 no connect
		}
		else if(module_type == 2)
		{
			cfg_data_version_b = cfg_data_version_b_ofeiguang;// ynn modify ofeiguang bit0-bit2  connect to GND
		}
		else if(module_type == 1)
		{
			//cfg_data_version_b = cfg_data_version_b_dijing;//Huangyisong add, dijing for A51 Vollo X93, connect to VDDIO
                        cfg_data_version_b = cfg_data_version_b_zhenghai;//wangzong add, zhenghai for A51, connect to VDDIO
		}
		else //xumin add xinhao for yusun
		{
		    cfg_data_version_b=cfg_data_version_b_xinhao;
		}
		
		if(cfg_data_version_b == NULL)
		{
			TPD_DMESG(TPD_DEVICE "unknown TP module\n");
			return -1;
		}
	}

///////////////////////////////////kuuga modify start//////////////////////////////////////////////////////
    if ( tpd_info.version_1 < 0x7a ) // Chip version B    kuuga change 11082401
    {
        TPD_DMESG(TPD_DEVICE " C version %02X\n", tpd_info.version_1 );
        cfg_data = cfg_data_version_b;
        //cfg_data_with_charger = cfg_data_with_charger_version_b;
    }
    else //if ( tpd_info.version_1 < 0x80 )  kuuga change 11082401
    {
        TPD_DMESG(TPD_DEVICE " D version %02X\n", tpd_info.version_1 );
        cfg_data = cfg_data_version_b;//cfg_data_version_d;
        //cfg_data_with_charger = cfg_data_with_charger_version_d;
    }
    //////////////////////////////////kuuga modify end///////////////////////////////////////////////////////
    // setting resolution, RES_X, RES_Y
    #if 0  //kaka_debug_only
    cfg_data[59] = TPD_X_RES&0xff;
    cfg_data[60] = (TPD_X_RES>>8)&0xff;
    cfg_data[61] = TPD_Y_RES&0xff;
    cfg_data[62] = (TPD_Y_RES>>8)&0xff;    
    #endif
    cfg_data[73] = (cfg_data[73] & 0x1f) | 0x40; //for ESD test
    err = i2c_write_bytes( client, TPD_CONFIG_REG_BASE, cfg_data, TPD_CONFIG_SIZE );

    if ( err )
    {
        TPD_DMESG(TPD_DEVICE " fail to write tpd cfg %d\n", err );
        *crash = 0;
        return err;
    }
    i2c_write_dummy( client, TPD_HANDSHAKING_END_REG );

    thread = kthread_run(touch_event_handler, 0, TPD_DEVICE);

    if (IS_ERR(thread))
    {         
        err = PTR_ERR(thread);
        TPD_DMESG(TPD_DEVICE " failed to create kernel thread: %d\n", err);
        *crash = 0;
        return err;
    }
 

#ifndef TPD_RESET_ISSUE_WORKAROUND
    mt_set_gpio_out(GPIO_CTP_RST_PIN, GPIO_OUT_ZERO);
    msleep(10);
#endif

    // set INT mode
    mt_set_gpio_mode(GPIO_CTP_EINT_PIN, GPIO_CTP_EINT_PIN_M_EINT);
    mt_set_gpio_dir(GPIO_CTP_EINT_PIN, GPIO_DIR_IN);
    mt_set_gpio_pull_enable(GPIO_CTP_EINT_PIN, GPIO_PULL_DISABLE);
    //mt_set_gpio_pull_select(GPIO_CTP_EINT_PIN, GPIO_PULL_UP);

    msleep(50);

    mt65xx_eint_set_sens(CUST_EINT_TOUCH_PANEL_NUM, CUST_EINT_TOUCH_PANEL_SENSITIVE);
    mt65xx_eint_set_hw_debounce(CUST_EINT_TOUCH_PANEL_NUM, CUST_EINT_TOUCH_PANEL_DEBOUNCE_CN);
    //mt65xx_eint_registration(CUST_EINT_TOUCH_PANEL_NUM, CUST_EINT_TOUCH_PANEL_DEBOUNCE_EN, CUST_EINT_TOUCH_PANEL_POLARITY, tpd_eint_interrupt_handler, 1);
    mt65xx_eint_registration(CUST_EINT_TOUCH_PANEL_NUM, CUST_EINT_TOUCH_PANEL_DEBOUNCE_EN, CUST_EINT_POLARITY_LOW, tpd_eint_interrupt_handler, 1);
    mt65xx_eint_unmask(CUST_EINT_TOUCH_PANEL_NUM);

#ifndef TPD_RESET_ISSUE_WORKAROUND
    mt_set_gpio_out(GPIO_CTP_RST_PIN, GPIO_OUT_ONE);
#endif

    tpd_load_status = 1;
    
    return 0;
}

static void tpd_eint_interrupt_handler(void)
{ 
    TPD_DEBUG_PRINT_INT;
    tpd_flag=1;
    wake_up_interruptible(&waiter);
} 
static int tpd_i2c_remove(struct i2c_client *client)
{
    return 0;
}

static void tpd_down(int id, int x, int y, int size)
{
    input_report_abs(tpd->dev, ABS_PRESSURE, 128);
    input_report_key(tpd->dev, BTN_TOUCH, 1);
    input_report_abs(tpd->dev, ABS_MT_TOUCH_MAJOR, 128);
    input_report_abs(tpd->dev, ABS_MT_WIDTH_MAJOR, 128);
    input_report_abs(tpd->dev, ABS_MT_POSITION_X, x);
    input_report_abs(tpd->dev, ABS_MT_POSITION_Y, y);
    input_report_abs(tpd->dev, ABS_MT_TRACKING_ID, id - 1);
    input_mt_sync(tpd->dev);
    //TPD_DEBUG_PRINT_POINT( x, y, 1 );
    TPD_EM_PRINT(x, y, x, y, size, 1);
}

static void tpd_up(int id, int x, int y)
{
    //input_report_abs(tpd->dev, ABS_PRESSURE, 0);
    input_report_key(tpd->dev, BTN_TOUCH, 0);
    //input_report_abs(tpd->dev, ABS_MT_TOUCH_MAJOR, 0);
    //input_report_abs(tpd->dev, ABS_MT_WIDTH_MAJOR, 0);
    //input_report_abs(tpd->dev, ABS_MT_POSITION_X, x);
    //input_report_abs(tpd->dev, ABS_MT_POSITION_Y, y);
    //input_report_abs(tpd->dev, ABS_MT_TRACKING_ID, id - 1);
    input_mt_sync(tpd->dev);
    TPD_EM_PRINT(x, y, x, y, 0, 0);
    //TPD_DEBUG_PRINT_POINT( x, y, 0 );
}

static int touch_event_handler(void *unused)
{
    struct sched_param param = { .sched_priority = RTPM_PRIO_TPD }; 
    int x, y, id, size, finger_num = 0;
    static u8 buffer[ TPD_POINT_INFO_LEN*TPD_MAX_POINTS ];
    static char buf_status;
    static u8 id_mask = 0;
    u8 cur_mask;
    int idx;
    static int x_history[TPD_MAX_POINTS+1];
    static int y_history[TPD_MAX_POINTS+1];

    static u8  last_key = 0;	
    u8  curr_key = 0;
    unsigned int  count = 0;
	
#if 1 //def TPD_CONDITION_SWITCH
    u8 charger_plug = 0;
    u8 *cfg;
    u32 temp;    
#endif
    u8 number_of_key;
    sched_setscheduler(current, SCHED_RR, &param); 

    do
    {
        set_current_state(TASK_INTERRUPTIBLE);

        while ( tpd_halt )
        {
            tpd_flag = 0;
            msleep(20);
        }

        wait_event_interruptible(waiter, tpd_flag != 0);
        tpd_flag = 0;
        TPD_DEBUG_SET_TIME;
        set_current_state(TASK_RUNNING); 
        
        i2c_write_dummy( i2c_client, TPD_HANDSHAKING_START_REG );

#ifdef TPD_CONDITION_SWITCH
        /* Workaround for common mode noise */
        temp = *(volatile u32 *)CHR_CON0;
        temp &= (1<<13);
        cfg = NULL;

        if ( temp ) // charger is on
        {
            if ( charger_plug == 0 )
            {
                TPD_DEBUG("update configure for charger\n");
                charger_plug = 1;
                cfg = cfg_data_with_charger;            
            }
        }
        else
        {
            if ( charger_plug == 1 )
            {
                TPD_DEBUG("update configure for no charger\n");
                charger_plug = 0;
                cfg = cfg_data;
            }
        }

        if ( cfg )
        {
            i2c_write_bytes( i2c_client, TPD_CONFIG_REG_BASE, cfg, TPD_CONFIG_SIZE );
            i2c_write_dummy( i2c_client, TPD_HANDSHAKING_END_REG );
            continue;
        }
#endif

        i2c_read_bytes( i2c_client, TPD_TOUCH_INFO_REG_BASE, buffer, 1);
	 i2c_read_bytes( i2c_client, TPD_KEY_INFO_REG_BASE, &curr_key, 1);
        printk("[mtk-tpd] STATUS : %x,%X\n", buffer[0],curr_key);
        
        finger_num = buffer[0] & 0x0f;
        buf_status = buffer[0] & 0xf0;
	 curr_key = curr_key&0X0F;
	 
  ///////////////////////////kuuga modify start/////////////////////////////////////////////////////   
        if ( tpd == NULL || tpd->dev == NULL )
        {
             i2c_write_dummy( i2c_client, TPD_HANDSHAKING_END_REG );  //kuuga  add 11082401
            continue;
        }
        
        if ( finger_num == 0x0f )        //ESD-TEST reset, send cfg again!!
                {
                    cfg = cfg_data;
                    i2c_write_bytes( i2c_client, TPD_CONFIG_REG_BASE, cfg, TPD_CONFIG_SIZE );
                     i2c_write_dummy( i2c_client, TPD_HANDSHAKING_END_REG );  //kuuga  add 11082401
                    continue;
                }
        
         if ( (buf_status&0x30) != 0x20 )        //data not ready，so return
        {
             i2c_write_dummy( i2c_client, TPD_HANDSHAKING_END_REG );  //kuuga  add 11082401
            continue;
        }

        
        
        if ( finger_num > 5 )        //abnormal state ，so return
        {
             i2c_write_dummy( i2c_client, TPD_HANDSHAKING_END_REG );  //kuuga  add 11082401
            continue;
        }
   ///////////////////////////kuuga modify end/////////////////////////////////////////////////////          
        if ( finger_num )
        {
            i2c_read_bytes( i2c_client, TPD_POINT_INFO_REG_BASE, buffer, finger_num*TPD_POINT_INFO_LEN);
#if 0
            {
                u8 buf_tmp[ TPD_POINT_INFO_LEN*TPD_MAX_POINTS ];
                int loop = 0;

                for ( loop = 0 ; loop < 20 ; loop++ )
                {
                    i2c_read_bytes( i2c_client, TPD_POINT_INFO_REG_BASE, buf_tmp, finger_num*TPD_POINT_INFO_LEN);
                }
            }
#endif
        }
        else
        {
            //In order to release INT
            i2c_read_bytes( i2c_client, TPD_POINT_INFO_REG_BASE, buffer, 1);
        }
        
        cur_mask = 0;

        for ( idx = 0 ; idx < finger_num ; idx++ )
        {
            u8 *ptr = &buffer[ idx*TPD_POINT_INFO_LEN ];
            id = ptr[0];

            if ( id < TPD_MAX_POINTS+1 )
            {
                x = ptr[1] + (((int)ptr[2]) << 8);
                y = ptr[3] + (((int)ptr[4]) << 8);
                size = ptr[5] + (((int)ptr[6]) << 8);

                //if ( x == 0 )
                //    x = 1;

                //kaka_debug_only

                if(y >= 835){
                	printk("\n\n y:%d\n\n\n",y);
                	continue;
                }

                if(y >= 800){
                	y = 799;
                }
                	

                tpd_down( id, (x), (y), size );
                printk("get press point [%d]:(%d,%d)\n",idx, (x),(y));

                cur_mask |= ( 1 << id );
                x_history[id] = x;
                y_history[id] = y;
            }
            else
                TPD_DEBUG("Invalid id %d\n", id );
        }         
               
        if ( cur_mask != id_mask )
        {
            u8 diff = cur_mask^id_mask;
            idx = 0;

            while ( diff )
            {
                if ( ( ( diff & 0x01 ) == 1 ) &&
                     ( ( cur_mask >> idx ) & 0x01 ) == 0 )
                {
                    // check if key release
                    tpd_up( idx, (x_history[idx]), (y_history[idx]) );                    
                }

                diff = ( diff >> 1 );
                idx++;
            }
            id_mask = cur_mask;
        }


	if((last_key == 0)&&(curr_key == 0))	
		;
	else	
		{		
			for(count = 0; count < 4; count++)		
			{	
				//if(last_key&(0x01<<count) != curr_key&(0x01<<count))		
				input_report_key(tpd->dev, tpd_keys_local[count], !!(curr_key&(0x01<<count)));
				//i2c_read_bytes( i2c_client, 0x721, &number_of_key, 1 );
				 printk("###############the sensor type %d  ############\n",sensor_type);
				//tpd_button(tpd_keys_dim_local[count][0],tpd_keys_dim_local[count][1],!!(curr_key&(0x01<<count)));
			}	
		}			
	last_key = curr_key;

        if ( tpd != NULL && tpd->dev != NULL )
            input_sync(tpd->dev);

        i2c_write_dummy( i2c_client, TPD_HANDSHAKING_END_REG );

    } while ( !kthread_should_stop() ); 

    return 0;
}

static int tpd_local_init(void) 
{
	TPD_DMESG("ynn MediaTek gt818 tpd_local_init\n");

    if(i2c_add_driver(&tpd_i2c_driver)!=0)
    {
        TPD_DMESG("unable to add i2c driver.\n");
        return -1;
    }
    if(tpd_load_status == 0)
    {
    	TPD_DMESG("add error touch panel driver.\n");
    	i2c_del_driver(&tpd_i2c_driver);
    	return -1;
    }

#ifdef TPD_HAVE_BUTTON     
    tpd_button_setting(TPD_KEY_COUNT, tpd_keys_local, tpd_keys_dim_local);// initialize tpd button data
#endif   
  
#if (defined(TPD_WARP_START) && defined(TPD_WARP_END))    
    TPD_DO_WARP = 1;
    memcpy(tpd_wb_start, tpd_wb_start_local, TPD_WARP_CNT*4);
    memcpy(tpd_wb_end, tpd_wb_start_local, TPD_WARP_CNT*4);
#endif 

#if (defined(TPD_HAVE_CALIBRATION) && !defined(TPD_CUSTOM_CALIBRATION))
    memcpy(tpd_calmat, tpd_def_calmat_local, 8*4);
    memcpy(tpd_def_calmat, tpd_def_calmat_local, 8*4);	
#endif  

    // set vendor string
    tpd->dev->id.vendor =  (tpd_info.vendor_id_2 << 8 ) | tpd_info.vendor_id_1;
    tpd->dev->id.product = (tpd_info.product_id_2 << 8 ) | tpd_info.product_id_1;
    tpd->dev->id.version = (tpd_info.version_2 << 8 ) | tpd_info.version_1;

    TPD_DMESG("end %s, %d\n", __FUNCTION__, __LINE__);  
    tpd_type_cap = 1;

    return 0;
}

/* Function to manage low power suspend */
//void tpd_suspend(struct i2c_client *client, pm_message_t message)
static void tpd_suspend( struct early_suspend *h )
{
    u8 mode = 0x01;
    i2c_write_dummy( i2c_client, TPD_HANDSHAKING_START_REG );
    i2c_write_bytes( i2c_client, TPD_POWER_MODE_REG, &mode, 1 );
    i2c_write_dummy( i2c_client, TPD_HANDSHAKING_END_REG );
    tpd_halt = 1;
    mt65xx_eint_mask(CUST_EINT_TOUCH_PANEL_NUM);
    //mt_set_gpio_out(GPIO_CTP_RST_PIN, GPIO_OUT_ZERO);
    //return 0;
}

/* Function to manage power-on resume */
//void tpd_resume(struct i2c_client *client)
static void tpd_resume( struct early_suspend *h )
{
#ifdef TPD_RESET_ISSUE_WORKAROUND
    struct tpd_info_t tpd_info;
    int err;
    char *crash = 0;
    // use raising edge of INT to wakeup
    mt_set_gpio_mode(GPIO_CTP_EINT_PIN, GPIO_CTP_EINT_PIN_M_GPIO);
    mt_set_gpio_dir(GPIO_CTP_EINT_PIN, GPIO_DIR_OUT);
    mt_set_gpio_out(GPIO_CTP_EINT_PIN, GPIO_OUT_ZERO);
    msleep(1);
    //////////////////////////kuuga modify start/////////////////////////////////////////
    mt_set_gpio_out(GPIO_CTP_EINT_PIN, GPIO_OUT_ONE);
    msleep(1);
    mt_set_gpio_out(GPIO_CTP_EINT_PIN, GPIO_OUT_ZERO);
    msleep(1);
    mt_set_gpio_out(GPIO_CTP_EINT_PIN, GPIO_OUT_ONE);
       //////////////////////////kuuga modify end/////////////////////////////////////////
    mt_set_gpio_mode(GPIO_CTP_EINT_PIN, GPIO_CTP_EINT_PIN_M_EINT);
    mt_set_gpio_dir(GPIO_CTP_EINT_PIN, GPIO_DIR_IN);
#endif

    mt65xx_eint_unmask(CUST_EINT_TOUCH_PANEL_NUM); 
    //mt_set_gpio_out(GPIO_CTP_RST_PIN, GPIO_OUT_ONE);

#ifdef TPD_RESET_ISSUE_WORKAROUND

    i2c_write_dummy( i2c_client, TPD_HANDSHAKING_START_REG );

    //TODO: Remove the code after the stabliity test is passed
    memset( &tpd_info, 0, sizeof( struct tpd_info_t ) );
    err = i2c_read_bytes( i2c_client, TPD_VERSION_INFO_REG, (u8 *)&tpd_info, sizeof( struct tpd_info_t ) );

    if ( err )
    {
        TPD_DMESG(TPD_DEVICE " fail to get tpd info %d\n", err );
        *crash = 0;
    }
    else
    {
        TPD_DMESG( "TPD info\n");
        TPD_DMESG( "vendor %02X %02X\n", tpd_info.vendor_id_1, tpd_info.vendor_id_2 );
        TPD_DMESG( "product %02X %02X\n", tpd_info.product_id_1, tpd_info.product_id_2 );
        TPD_DMESG( "version %02X %02X\n", tpd_info.version_1, tpd_info.version_2 );
    }

    i2c_write_dummy( i2c_client, TPD_HANDSHAKING_END_REG );
#endif
    tpd_halt = 0;
    //return 0;
}

static struct tpd_driver_t tpd_device_driver =
{
    .tpd_device_name = "gt818_a51",
    .tpd_local_init = tpd_local_init,
    .suspend = tpd_suspend,
    .resume = tpd_resume,
#ifdef TPD_HAVE_BUTTON
    .tpd_have_button = 1,
#else
    .tpd_have_button = 0,
#endif		
};

/* called when loaded into kernel */
static int __init tpd_driver_init(void)
{
    TPD_DMESG("ynn88 MediaTek gt818 touch panel driver init\n");
    i2c_register_board_info(0, &i2c_tpd, 1);// ynn add for a51 ics
    TPD_DMESG("ynn MediaTek gt818 touch panel driver init 1\n");
    if ( tpd_driver_add(&tpd_device_driver) < 0)
        TPD_DMESG("add generic driver failed\n");

    return 0;
}

/* should never be called */
static void __exit tpd_driver_exit(void)
{
    TPD_DMESG("MediaTek gt818 touch panel driver exit\n");
    //input_unregister_device(tpd->dev);
    tpd_driver_remove(&tpd_device_driver);
}

#ifdef TPD_FREQ_HOPPING
void tpd_get_fm_frequency( int16_t freq )
{
    #define FREQ_85MHZ_HOPPING_OFFSET  ( freq_base_value + 8 )
    #define FREQ_95MHZ_HOPPING_OFFSET  ( freq_base_value + 7 )
    #define FREQ_105MHZ_HOPPING_OFFSET ( freq_base_value + 8 )
    #define FREQ_115MHZ_HOPPING_OFFSET ( freq_base_value + 6 )
    
    u8 target_freq;
    u8 result;
    static u8 current_value = 0;

    // adjust clock
    if ( freq >= 784 && freq <= 816 ) //80Mhz
    {
        // hopping to 85M
        target_freq = FREQ_85MHZ_HOPPING_OFFSET;
    }
    else if ( freq >= 882 && freq <= 918 ) //90Mhz
    {
        // hopping to 95M
        target_freq = FREQ_95MHZ_HOPPING_OFFSET;
    }    
    else if ( freq >= 980 && freq <= 1020 ) //100Mhz
    {
        // hopping to 105M
        target_freq = FREQ_105MHZ_HOPPING_OFFSET;
    }
    else if ( freq >= 1078 && freq <= 1122 ) //110Mhz
    {
        // hopping to 115M
        target_freq = FREQ_115MHZ_HOPPING_OFFSET;
    }
    else 
        target_freq = freq_base_value;

    if ( current_value != target_freq )
    {
        TPD_DMESG("Change base value %d to %d\n", current_value, target_freq );

        i2c_write_dummy( i2c_client, TPD_HANDSHAKING_START_REG );
        i2c_write_bytes( i2c_client, TPD_FREQ_REG, &target_freq, 1 );
        msleep(50);   
        i2c_read_bytes( i2c_client, TPD_FREQ_CAL_RESULT, &result, 1 );
        i2c_write_dummy( i2c_client, TPD_HANDSHAKING_END_REG );
        current_value = target_freq;
        TPD_DMESG("Result: %02X\n", result );
    }
    else
    {
        TPD_DMESG("Skip freq change\n");
    }
}

EXPORT_SYMBOL( tpd_get_fm_frequency );
#endif

module_init(tpd_driver_init);
module_exit(tpd_driver_exit);


/* Copyright Statement:
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein
 * is confidential and proprietary to MediaTek Inc. and/or its licensors.
 * Without the prior written permission of MediaTek inc. and/or its licensors,
 * any reproduction, modification, use or disclosure of MediaTek Software,
 * and information contained herein, in whole or in part, shall be strictly prohibited.
 */
/* MediaTek Inc. (C) 2010. All rights reserved.
 *
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
 * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
 * AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
 * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
 * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
 * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
 * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
 * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
 * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
 * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
 * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
 * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
 * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
 * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 *
 * The following software/firmware and/or related documentation ("MediaTek Software")
 * have been modified by MediaTek Inc. All revisions are subject to any receiver's
 * applicable license agreements with MediaTek Inc.
 */
/*ergate-001*/


#ifndef TOUCHPANEL_H
#define TOUCHPANEL_H

#define TPD_TYPE_CAPACITIVE
//#define TPD_TYPE_RESISTIVE
#define TPD_POWER_SOURCE         MT6573_POWER_NONE
#define TPD_I2C_NUMBER           0
#define TPD_WAKEUP_TRIAL         15
#define TPD_WAKEUP_DELAY         100

#define TPD_DELAY                (2*HZ/100)
#define TPD_RES_X                480
#define TPD_RES_Y                800

/* to turn on calibration, unmark these two lines */
#define TPD_CALIBRATION_MATRIX  {962,0,0,0,1600,0,0,0};
#define TPD_HAVE_CALIBRATION
//#define TPD_CUSTOM_CALIBRATION

#define TPD_HAVE_POWER_ON_OFF

#define TPD_WARP_START          {11,0,300,470};
#define TPD_WARP_END            {7,0,314,475};

#define TPD_HAVE_BUTTON
#define TPD_BUTTON_HEIGHT	480
#define TPD_KEY_COUNT           4
#ifndef HQ_CTP_VIRTUAL_KEY 
#define TPD_KEYS                {KEY_MENU, KEY_HOME, KEY_BACK, KEY_SEARCH}
#else
#define TPD_KEYS                {KEY_HOME, KEY_MENU, KEY_BACK, KEY_SEARCH}
#endif
#define TPD_KEYS_DIM            {{40,505,80,50},{120,505,80,50},{200,505,80,50},{280,505,80,50}}

#define TPD_HAVE_TREMBLE_ELIMINATION
#define TPD_CUSTOM_TREMBLE_TOLERANCE
#define PRESSURE_FACTOR	10

//#define HAVE_SLEEP_NORMAL_MODE
//#define HAVE_SINGLE_MULTIPLE_SCAN_MODE

#endif
##############################Ctp End################################
##############################Camera Start ##########################
/* Copyright Statement:
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein
 * is confidential and proprietary to MediaTek Inc. and/or its licensors.
 * Without the prior written permission of MediaTek inc. and/or its licensors,
 * any reproduction, modification, use or disclosure of MediaTek Software,
 * and information contained herein, in whole or in part, shall be strictly prohibited.
 */
/* MediaTek Inc. (C) 2010. All rights reserved.
 *
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
 * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
 * AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
 * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
 * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
 * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
 * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
 * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
 * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
 * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
 * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
 * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
 * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
 * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 *
 * The following software/firmware and/or related documentation ("MediaTek Software")
 * have been modified by MediaTek Inc. All revisions are subject to any receiver's
 * applicable license agreements with MediaTek Inc.
 */

/*****************************************************************************
*  Copyright Statement:
*  --------------------
*  This software is protected by Copyright and the information contained
*  herein is confidential. The software may not be copied and the information
*  contained herein may not be used or disclosed except with the written
*  permission of MediaTek Inc. (C) 2008
*
*  BY OPENING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
*  THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
*  RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON
*  AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
*  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
*  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
*  NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
*  SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
*  SUPPLIED WITH THE MEDIATEK SOFTWARE, AND BUYER AGREES TO LOOK ONLY TO SUCH
*  THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. MEDIATEK SHALL ALSO
*  NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE RELEASES MADE TO BUYER'S
*  SPECIFICATION OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.
*
*  BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE
*  LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
*  AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
*  OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY BUYER TO
*  MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
*
*  THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE
*  WITH THE LAWS OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF
*  LAWS PRINCIPLES.  ANY DISPUTES, CONTROVERSIES OR CLAIMS ARISING THEREOF AND
*  RELATED THERETO SHALL BE SETTLED BY ARBITRATION IN SAN FRANCISCO, CA, UNDER
*  THE RULES OF THE INTERNATIONAL CHAMBER OF COMMERCE (ICC).
*
*****************************************************************************/
/*****************************************************************************
 *
 * Filename:
 * ---------
 *   sensor.c
 *
 * Project:
 * --------
 *   YUSU
 *
 * Description:
 * ------------
 *   Source code of Sensor driver
 *
 *
 * Author:
 * -------
 *   Jackie Su (MTK02380)
 *
 *============================================================================
 *             HISTORY
 * Below this line, this part is controlled by CC/CQ. DO NOT MODIFY!!
 *------------------------------------------------------------------------------
 * $Revision:$
 * $Modtime:$
 * $Log:$
 *
 * 09 25 2012 jianrong.zhang
 * NULL
 * Sensor settings from Aptina FAE.
 *
 * 09 25 2012 jianrong.zhang
 * NULL
 * Modify capture setting.
 *
 * 09 19 2012 jianrong.zhang
 * NULL
 * Add ov5650 mipi raw.
 *
 * 09 17 2012 jianrong.zhang
 * NULL
 * Slew rate to be 0xA880.
 *
 * 09 16 2012 jianrong.zhang
 * NULL
 * Fix build erro.
 *
 * 09 16 2012 jianrong.zhang
 * NULL
 * Fix build error.
 *
 * 09 16 2012 jianrong.zhang
 * NULL
 * Add logs.
 *
 * 09 14 2012 jianrong.zhang
 * NULL
 * Add sensor driver a5141_raw.
 *
 * 02 19 2012 koli.lin
 * [ALPS00237768] [A52][??]ŠZžmcamera a5141 AF?µJºC
 * [Camera] Modify the isp delay frame to synchrnoize with sensor exposure time and sensor gain.
 *
 
 *------------------------------------------------------------------------------
 * Upper this line, this part is controlled by CC/CQ. DO NOT MODIFY!!
 *============================================================================
 ****************************************************************************/
#include <linux/videodev2.h>
#include <linux/i2c.h>
#include <linux/platform_device.h>
#include <linux/delay.h>
#include <linux/cdev.h>
#include <linux/uaccess.h>
#include <linux/fs.h>
#include <asm/atomic.h>
#include <linux/slab.h>


#include "kd_camera_hw.h"
#include "kd_imgsensor.h"
#include "kd_imgsensor_define.h"
#include "kd_imgsensor_errcode.h"

#include "a5141_Sensor.h"
#include "a5141_Camera_Sensor_para.h"
#include "a5141_CameraCustomized.h"


#define CAPTURE_15FPS

#define A5141_DEBUG
#ifdef A5141_DEBUG
#define LOG_TAG "[SENSOR_DRV]"
#define SENSORDB(fmt,arg...) printk(LOG_TAG "%s: " fmt "\n", __FUNCTION__ ,##arg)
#else
#define SENSORDB(fmt,arg...)  
#endif


#define AUTO_FLICKER_NO 10

kal_bool A5141_Auto_Flicker_mode = KAL_FALSE;
kal_bool A5141_MPEG4_encode_mode = KAL_FALSE;
kal_uint16 A5141_Frame_Length_preview = 0;

A5141_SENSOR_STRUCT A5141_sensor= 
{	
	.i2c_write_id = 0x6c,
	.i2c_read_id  = 0x6d,
	.preview_vt_clk = 1128, //520,
	.capture_vt_clk = 1128, //910,
	.u16ImgMirror = 0,
};

static kal_uint8 A5141_i2c_addr[] = {A5141_WRITE_ID_1, A5141_WRITE_ID_2, 0x6C, 0x6E}; 

kal_uint16 A5141_dummy_pixels=0, A5141_dummy_lines=0;
kal_uint16 A5141_PV_dummy_pixels=0,A5141_PV_dummy_lines=0;

kal_uint16 A5141_exposure_lines=0x100;
kal_uint16 A5141_sensor_global_gain=BASEGAIN, A5141_sensor_gain_base=BASEGAIN;
kal_uint16 A5141_sensor_gain_array[2][5]={{0x0204,0x0208, 0x0206, 0x020C, 0x020A},{0x08,0x8, 0x8, 0x8, 0x8}};


MSDK_SENSOR_CONFIG_STRUCT A5141SensorConfigData;
kal_uint32 A5141_FAC_SENSOR_REG;

/* FIXME: old factors and DIDNOT use now. s*/
SENSOR_REG_STRUCT A5141SensorCCT[FACTORY_END_ADDR]=CAMERA_SENSOR_CCT_DEFAULT_VALUE;
SENSOR_REG_STRUCT A5141SensorReg[ENGINEER_END]=CAMERA_SENSOR_REG_DEFAULT_VALUE;
/* FIXME: old factors and DIDNOT use now. e*/
MSDK_SCENARIO_ID_ENUM A5141_CurrentScenarioId = ACDK_SCENARIO_ID_CAMERA_PREVIEW;


A5141_MODE g_iA5141_Mode = A5141_MODE_PREVIEW;

//*************************** +FUNCTION DECLARATION****************************//
extern int iReadRegI2C(u8 *a_pSendData , u16 a_sizeSendData, u8 * a_pRecvData, u16 a_sizeRecvData, u16 i2cId);
extern int iWriteRegI2C(u8 *a_pSendData , u16 a_sizeSendData, u16 i2cId);
static UINT32  A5141SetMaxFrameRate(A5141_MODE eSensorMode,UINT16 u2FrameRate);
static UINT32 A5141GetSensorID(UINT32 *sensorID);
//*************************** _FUNCTION DECLARATION****************************//

kal_uint16 A5141_read_cmos_sensor(kal_uint32 addr)
{
	kal_uint16 get_byte=0;
    char puSendCmd[2] = {(char)(addr >> 8) , (char)(addr & 0xFF) };
	iReadRegI2C(puSendCmd , 2, (u8*)&get_byte,2,A5141_sensor.i2c_write_id);
    return ((get_byte<<8)&0xff00)|((get_byte>>8)&0x00ff);
}

void A5141_write_cmos_sensor(kal_uint32 addr, kal_uint32 para)
{
	char puSendCmd[4] = {(char)(addr >> 8) , (char)(addr & 0xFF) ,(char)(para >> 8),(char)(para & 0xFF)};
	iWriteRegI2C(puSendCmd , 4,A5141_sensor.i2c_write_id);
}

kal_uint16 A5141_read_cmos_sensor_8(kal_uint32 addr)
{
	kal_uint16 get_byte=0;
    char puSendCmd[2] = {(char)(addr >> 8) , (char)(addr & 0xFF) };
	iReadRegI2C(puSendCmd , 2, (u8*)&get_byte,1,A5141_sensor.i2c_write_id);
    return get_byte;
}

void A5141_write_cmos_sensor_8(kal_uint32 addr, kal_uint32 para)
{
	char puSendCmd[4] = {(char)(addr >> 8) , (char)(addr & 0xFF) ,(char)(para & 0xFF)};
	iWriteRegI2C(puSendCmd , 3,A5141_sensor.i2c_write_id);
}


/*******************************************************************************
* 
********************************************************************************/
static kal_uint16 A5141reg2gain(kal_uint16 reg_gain)
{
    kal_uint16 gain;
	kal_uint16 collumn_gain, asc1_gain, initial_gain;
	kal_uint16 collumn_gain_shift = 10, asc1_gain_shift = 8;
	kal_uint16 collumn_gain_value = 1, asc1_gain_value = 1;

    collumn_gain = (reg_gain & (0x03 << collumn_gain_shift)) >> collumn_gain_shift;
	asc1_gain = (reg_gain & (0x03 << asc1_gain_shift)) >> asc1_gain_shift;
	initial_gain = reg_gain & 0x7F;

	if (collumn_gain == 0) {
		collumn_gain_value = 1;
	} else if (collumn_gain == 1) {
		collumn_gain_value = 3;
	} else if (collumn_gain == 2) {
		collumn_gain_value = 2;
	} else if (collumn_gain == 3) {
		collumn_gain_value = 4;
	}

	if (asc1_gain == 0) {
		asc1_gain_value = 1;
	} else if (asc1_gain == 1) {
		asc1_gain_value = 0xFFFF;
	} else if (asc1_gain == 2) {
		asc1_gain_value = 2;
	} else {
		// not exist
		SENSORDB("error gain setting");
	}

	if ( asc1_gain_value == 0xFFFF) {
		gain = BASEGAIN * initial_gain * collumn_gain_value * 4 / (32 * 3);
	} else {
		gain = BASEGAIN * initial_gain * collumn_gain_value * asc1_gain_value / (32);
	}

    return gain;
}


/*******************************************************************************
* 
********************************************************************************/
static kal_uint16 A5141gain2reg(kal_uint16 gain)
{
    kal_uint16 reg_gain;
	kal_uint16 collumn_gain = 0, asc1_gain = 0, initial_gain = 0;
	kal_uint16 collumn_gain_shift = 10, asc1_gain_shift = 8;


	// a5141 min reg gain 0x112E , mtk gain 122, so here block litter than min gian value
	/*	
	if (gain < (4 * BASEGAIN) / 3) {
		collumn_gain = (0x00&0x03) << collumn_gain_shift;
		asc1_gain = (0x00&0x03) << asc1_gain_shift;
		initial_gain = (32 * gain / BASEGAIN) & 0x7F;
	*/
	if (gain <= 122) {
		collumn_gain = (0x00&0x03) << collumn_gain_shift;
		asc1_gain = (0x01&0x03) << asc1_gain_shift;
		initial_gain = 0x2E;
	} else if (gain < 2 * BASEGAIN) {
		collumn_gain = (0x00&0x03) << collumn_gain_shift;
		asc1_gain = (0x01&0x03) << asc1_gain_shift;
		initial_gain = (32 * gain * 3 / (BASEGAIN * 4)) & 0x7F;
	} else if (gain < (8 * BASEGAIN)/3 + 1) {
		collumn_gain = (0x02&0x03) << collumn_gain_shift;
		asc1_gain = (0x00&0x03) << asc1_gain_shift;
		initial_gain = (32 * gain / (BASEGAIN * 2)) & 0x7F;
	} else if (gain < 3 * BASEGAIN) {
		collumn_gain = (0x02&0x03) << collumn_gain_shift;
		asc1_gain = (0x01&0x03) << asc1_gain_shift;
		initial_gain = (32 * gain * 3 / (BASEGAIN * 2 * 4)) & 0x7F;
	} else if (gain < 4 * BASEGAIN) {
		collumn_gain = (0x01&0x03) << collumn_gain_shift;
		asc1_gain = (0x00&0x03) << asc1_gain_shift;
		initial_gain = (32 * gain / (BASEGAIN * 3)) & 0x7F;
	} else if (gain < (16 * BASEGAIN) / 3 + 1) {
		collumn_gain = (0x03&0x03) << collumn_gain_shift;
		asc1_gain = (0x00&0x03) << asc1_gain_shift;
		initial_gain = (32 * gain / (BASEGAIN * 4)) & 0x7F;
	} else if (gain < 8 * BASEGAIN) {
		collumn_gain = (0x03&0x03) << collumn_gain_shift;
		asc1_gain = (0x01&0x03) << asc1_gain_shift;
		initial_gain = (32 * gain * 3 / (BASEGAIN * 4 * 4)) & 0x7F;
	} else if (gain < 32 * BASEGAIN) {
		collumn_gain = (0x03&0x03) << collumn_gain_shift;
		asc1_gain = (0x02&0x03) << asc1_gain_shift;
		initial_gain = (32 * gain / (BASEGAIN * 4 * 2)) & 0x7F;
	} else {
		// not exist
		SENSORDB("error gain setting");
	}

	reg_gain = collumn_gain | asc1_gain | initial_gain;
	SENSORDB("reg_gain=%d",reg_gain);
    return reg_gain;
}

/*************************************************************************
* FUNCTION
*    read_A5141_gain
*
* DESCRIPTION
*    This function is to set global gain to sensor.
*
* PARAMETERS
*    None
*
* RETURNS
*    gain : sensor global gain(base: 0x40)
*
* GLOBALS AFFECTED
*
*************************************************************************/
kal_uint16 read_A5141_gain(void)
{
	volatile signed char i;
    kal_uint16 temp_reg=0, sensor_gain=0,temp_reg_base=0;
    
	temp_reg_base=A5141SensorCCT[SENSOR_BASEGAIN].Para;

	for(i=0;i<4;i++)
	{
		temp_reg=A5141SensorCCT[PRE_GAIN_R_INDEX+i].Para;

		if(temp_reg>=0x08 && temp_reg<=0x78)  // 0x78 is 15 by 8 ,means max gain is 15 multiple
			A5141_sensor_gain_array[1][PRE_GAIN_R_INDEX+i]=((((temp_reg*BASEGAIN)/8)*temp_reg_base)/8); //change to MTK basegain
		else if(temp_reg>0x78)
		    SENSORDB("error gain setting");
	}

	sensor_gain=(temp_reg_base*BASEGAIN)/8;

	return sensor_gain;   //mtk gain unit
	
}

/*******************************************************************************
* 
********************************************************************************/
void write_A5141_gain(kal_uint16 gain)
{
	SENSORDB("gain=%d",gain);	
    kal_uint16 reg_gain;
  
	A5141_write_cmos_sensor_8(0x0104, 0x01);		//parameter_hold
	if(gain >= BASEGAIN && gain <= 32*BASEGAIN)
	{
		if (gain < 122)
			gain = 122;
		
		reg_gain = 8 * gain/BASEGAIN;        //change mtk gain base to aptina gain base
	    A5141_write_cmos_sensor(0x0204,reg_gain);
	}
	else
	{
	    SENSORDB("error gain setting");
		return;
	}
	A5141_write_cmos_sensor_8(0x0104, 0x00);		//parameter_hold
}


/*************************************************************************
* FUNCTION
* set_A5141_gain
*
* DESCRIPTION
* This function is to set global gain to sensor.
*
* PARAMETERS
* gain : sensor global gain(base: 0x40)
*
* RETURNS
* the actually gain set to sensor.
*
* GLOBALS AFFECTED
*
*************************************************************************/
kal_uint16 A5141_Set_gain(kal_uint16 gain)
{
	write_A5141_gain(gain);
}

/*******************************************************************************
* 
********************************************************************************/
void A5141_camera_para_to_sensor(void)
{
    kal_uint32    i;

	
    for(i=0; 0xFFFFFFFF!=A5141SensorReg[i].Addr; i++)
    {
        A5141_write_cmos_sensor(A5141SensorReg[i].Addr, A5141SensorReg[i].Para);
    }
    for(i=ENGINEER_START_ADDR; 0xFFFFFFFF!=A5141SensorReg[i].Addr; i++)
    {
        A5141_write_cmos_sensor(A5141SensorReg[i].Addr, A5141SensorReg[i].Para);
    }
    for(i=FACTORY_START_ADDR; i<FACTORY_END_ADDR; i++)
    {
        A5141_write_cmos_sensor(A5141SensorCCT[i].Addr, A5141SensorCCT[i].Para);
    }
}


/*************************************************************************
* FUNCTION
*    A5141_sensor_to_camera_para
*
* DESCRIPTION
*    // update camera_para from sensor register
*
* PARAMETERS
*    None
*
* RETURNS
*    gain : sensor global gain(base: 0x40)
*
* GLOBALS AFFECTED
*
*************************************************************************/
void A5141_sensor_to_camera_para(void)
{
    kal_uint32    i;
	
    for(i=0; 0xFFFFFFFF!=A5141SensorReg[i].Addr; i++)
    {
        A5141SensorReg[i].Para = A5141_read_cmos_sensor(A5141SensorReg[i].Addr);
    }
    for(i=ENGINEER_START_ADDR; 0xFFFFFFFF!=A5141SensorReg[i].Addr; i++)
    {
        A5141SensorReg[i].Para = A5141_read_cmos_sensor(A5141SensorReg[i].Addr);
    }
}


/*************************************************************************
* FUNCTION
*    A5141_get_sensor_group_count
*
* DESCRIPTION
*    //
*
* PARAMETERS
*    None
*
* RETURNS
*    gain : sensor global gain(base: 0x40)
*
* GLOBALS AFFECTED
*
*************************************************************************/
kal_int32  A5141_get_sensor_group_count(void)
{
    return GROUP_TOTAL_NUMS;
}

void A5141_get_sensor_group_info(kal_uint16 group_idx, kal_int8* group_name_ptr, kal_int32* item_count_ptr)
{
   	switch (group_idx)
   	{
        case PRE_GAIN:
            sprintf((char *)group_name_ptr, "CCT");
            *item_count_ptr = 5;
            break;
        case CMMCLK_CURRENT:
            sprintf((char *)group_name_ptr, "CMMCLK Current");
            *item_count_ptr = 1;
            break;
        case FRAME_RATE_LIMITATION:
            sprintf((char *)group_name_ptr, "Frame Rate Limitation");
            *item_count_ptr = 2;
            break;
        case REGISTER_EDITOR:
            sprintf((char *)group_name_ptr, "Register Editor");
            *item_count_ptr = 2;
            break;
        default:
            ASSERT(0);
	}
}

void A5141_get_sensor_item_info(kal_uint16 group_idx,kal_uint16 item_idx, MSDK_SENSOR_ITEM_INFO_STRUCT* info_ptr)
{
    kal_int16 temp_reg=0;
    kal_uint16 temp_gain=0, temp_addr=0, temp_para=0;
	
    switch (group_idx)
    {
        case PRE_GAIN:
           switch (item_idx)
          {
              case 0:
                sprintf((char *)info_ptr->ItemNamePtr,"Pregain-R");
                  temp_addr = PRE_GAIN_R_INDEX;
              break;
              case 1:
                sprintf((char *)info_ptr->ItemNamePtr,"Pregain-Gr");
                  temp_addr = PRE_GAIN_Gr_INDEX;
              break;
              case 2:
                sprintf((char *)info_ptr->ItemNamePtr,"Pregain-Gb");
                  temp_addr = PRE_GAIN_Gb_INDEX;
              break;
              case 3:
                sprintf((char *)info_ptr->ItemNamePtr,"Pregain-B");
                  temp_addr = PRE_GAIN_B_INDEX;
              break;
              case 4:
                 sprintf((char *)info_ptr->ItemNamePtr,"SENSOR_BASEGAIN");
                 temp_addr = SENSOR_BASEGAIN;
              break;
              default:
                 ASSERT(0);
          }

            temp_para=A5141SensorCCT[temp_addr].Para;

		   if(temp_para>=0x08 && temp_para<=0x78)
				temp_gain=(temp_para*BASEGAIN)/8;
			else
				ASSERT(0);

            temp_gain=(temp_gain*1000)/BASEGAIN;

            info_ptr->ItemValue=temp_gain;
            info_ptr->IsTrueFalse=KAL_FALSE;
            info_ptr->IsReadOnly=KAL_FALSE;
            info_ptr->IsNeedRestart=KAL_FALSE;
            info_ptr->Min=1000;
            info_ptr->Max=15000;
            break;
        case CMMCLK_CURRENT:
            switch (item_idx)
            {
                case 0:
                    sprintf((char *)info_ptr->ItemNamePtr,"Drv Cur[2,4,6,8]mA");
                
                    //temp_reg=A5141SensorReg[CMMCLK_CURRENT_INDEX].Para;
                    temp_reg = ISP_DRIVING_2MA;
                    if(temp_reg==ISP_DRIVING_2MA)
                    {
                        info_ptr->ItemValue=2;
                    }
                    else if(temp_reg==ISP_DRIVING_4MA)
                    {
                        info_ptr->ItemValue=4;
                    }
                    else if(temp_reg==ISP_DRIVING_6MA)
                    {
                        info_ptr->ItemValue=6;
                    }
                    else if(temp_reg==ISP_DRIVING_8MA)
                    {
                        info_ptr->ItemValue=8;
                    }
                
                    info_ptr->IsTrueFalse=KAL_FALSE;
                    info_ptr->IsReadOnly=KAL_FALSE;
                    info_ptr->IsNeedRestart=KAL_TRUE;
                    info_ptr->Min=2;
                    info_ptr->Max=8;
                    break;
                default:
                    ASSERT(0);
            }
            break;
        case FRAME_RATE_LIMITATION:
            switch (item_idx)
            {
                case 0:
                    sprintf((char *)info_ptr->ItemNamePtr,"Max Exposure Lines");
                    info_ptr->ItemValue=    111;  //A5141_MAX_EXPOSURE_LINES;
                    info_ptr->IsTrueFalse=KAL_FALSE;
                    info_ptr->IsReadOnly=KAL_TRUE;
                    info_ptr->IsNeedRestart=KAL_FALSE;
                    info_ptr->Min=0;
                    info_ptr->Max=0;
                    break;
                case 1:
                    sprintf((char *)info_ptr->ItemNamePtr,"Min Frame Rate");
                    info_ptr->ItemValue=12;
                    info_ptr->IsTrueFalse=KAL_FALSE;
                    info_ptr->IsReadOnly=KAL_TRUE;
                    info_ptr->IsNeedRestart=KAL_FALSE;
                    info_ptr->Min=0;
                    info_ptr->Max=0;
                    break;
                default:
                    ASSERT(0);
            }
            break;
        case REGISTER_EDITOR:
            switch (item_idx)
            {
                case 0:
                    sprintf((char *)info_ptr->ItemNamePtr,"REG Addr.");
                    info_ptr->ItemValue=0;
                    info_ptr->IsTrueFalse=KAL_FALSE;
                    info_ptr->IsReadOnly=KAL_FALSE;
                    info_ptr->IsNeedRestart=KAL_FALSE;
                    info_ptr->Min=0;
                    info_ptr->Max=0xFFFF;
                    break;
                case 1:
                    sprintf((char *)info_ptr->ItemNamePtr,"REG Value");
                    info_ptr->ItemValue=0;
                    info_ptr->IsTrueFalse=KAL_FALSE;
                    info_ptr->IsReadOnly=KAL_FALSE;
                    info_ptr->IsNeedRestart=KAL_FALSE;
                    info_ptr->Min=0;
                    info_ptr->Max=0xFFFF;
                    break;
                default:
                ASSERT(0);
            }
            break;
        default:
            ASSERT(0);
    }
}



kal_bool A5141_set_sensor_item_info(kal_uint16 group_idx, kal_uint16 item_idx, kal_int32 ItemValue)
{
//   kal_int16 temp_reg;
   kal_uint16  temp_gain=0,temp_addr=0, temp_para=0;

   switch (group_idx)
    {
        case PRE_GAIN:
            switch (item_idx)
            {
              case 0:
                temp_addr = PRE_GAIN_R_INDEX;
              break;
              case 1:
                temp_addr = PRE_GAIN_Gr_INDEX;
              break;
              case 2:
                temp_addr = PRE_GAIN_Gb_INDEX;
              break;
              case 3:
                temp_addr = PRE_GAIN_B_INDEX;
              break;
              case 4:
                temp_addr = SENSOR_BASEGAIN;
              break;
              default:
                 ASSERT(0);
          }

			temp_gain=((ItemValue*BASEGAIN+500)/1000);			//+500:get closed integer value

		  if(temp_gain>=1*BASEGAIN && temp_gain<=15*BASEGAIN)
          {
             temp_para=(temp_gain*8+BASEGAIN/2)/BASEGAIN;
          }          
          else
			  ASSERT(0);

            A5141SensorCCT[temp_addr].Para = temp_para;
            A5141_write_cmos_sensor(A5141SensorCCT[temp_addr].Addr,temp_para);

           A5141_sensor_gain_base=read_A5141_gain();

            break;
        case CMMCLK_CURRENT:
            switch (item_idx)
            {
                case 0:
                    //no need to apply this item for driving current
                    break;
                default:
                    ASSERT(0);
            }
            break;
        case FRAME_RATE_LIMITATION:
            ASSERT(0);
            break;
        case REGISTER_EDITOR:
            switch (item_idx)
            {
                case 0:
                    A5141_FAC_SENSOR_REG=ItemValue;
                    break;
                case 1:
                    A5141_write_cmos_sensor(A5141_FAC_SENSOR_REG,ItemValue);
                    break;
                default:
                    ASSERT(0);
            }
            break;
        default:
            ASSERT(0);
    }
   
    return KAL_TRUE;
}


/*******************************************************************************
*
********************************************************************************/
static void A5141_Init_setting(void)
{
    kal_uint16 status = 0;
	
	SENSORDB("enter!");
	A5141_write_cmos_sensor_8(0x0100, 0x00 	); // MODE_SELECT

	//parallel_interface
	//LOAD=DEMO2_hardware_reset
	A5141_write_cmos_sensor(0x301A, 0x10C8 	); // RESET_REGISTER
	A5141_write_cmos_sensor(0x3064, 0x5840 	); // SMIA_TEST
	A5141_write_cmos_sensor(0x31AE, 0x0101 	); // SERIAL_FORMAT

	//REV1_recommended_settings
	A5141_write_cmos_sensor(0x316A, 0x8400 	); // DAC_FBIAS
	A5141_write_cmos_sensor(0x316C, 0x8400 	); // DAC_TXLO
	A5141_write_cmos_sensor(0x316E, 0x8400 	); // DAC_ECL
	A5141_write_cmos_sensor(0x3EFA, 0x1A1F 	); // DAC_LD_ECL
	A5141_write_cmos_sensor(0x3ED2, 0xD965 	); // DAC_LD_6_7
	A5141_write_cmos_sensor(0x3ED8, 0x7F1B 	); // DAC_LD_12_13
	A5141_write_cmos_sensor(0x3EDA, 0x2F11 	); // DAC_LD_14_15
	A5141_write_cmos_sensor(0x3EE2, 0x0060 	); // DAC_LD_22_23
	A5141_write_cmos_sensor(0x3EF2, 0xD965 	); // DAC_LP_6_7
	A5141_write_cmos_sensor(0x3EF8, 0x797F 	); // DAC_LD_TXHI
	A5141_write_cmos_sensor(0x3EFC, 0x286F 	); // DAC_LD_FBIAS
	A5141_write_cmos_sensor(0x3EFE, 0x2C01 	); // DAC_LD_TXLO
	A5141_write_cmos_sensor(0x3E00, 0x042F 	); // DYNAMIC_SEQRAM_00
	A5141_write_cmos_sensor(0x3E02, 0xFFFF 	); // DYNAMIC_SEQRAM_02
	A5141_write_cmos_sensor(0x3E04, 0xFFFF 	); // DYNAMIC_SEQRAM_04
	A5141_write_cmos_sensor(0x3E06, 0xFFFF 	); // DYNAMIC_SEQRAM_06
	A5141_write_cmos_sensor(0x3E08, 0x8071 	); // DYNAMIC_SEQRAM_08
	A5141_write_cmos_sensor(0x3E0A, 0x7281 	); // DYNAMIC_SEQRAM_0A
	A5141_write_cmos_sensor(0x3E0C, 0x4011 	); // DYNAMIC_SEQRAM_0C
	A5141_write_cmos_sensor(0x3E0E, 0x8010 	); // DYNAMIC_SEQRAM_0E
	A5141_write_cmos_sensor(0x3E10, 0x60A5 	); // DYNAMIC_SEQRAM_10
	A5141_write_cmos_sensor(0x3E12, 0x4080 	); // DYNAMIC_SEQRAM_12
	A5141_write_cmos_sensor(0x3E14, 0x4180 	); // DYNAMIC_SEQRAM_14
	A5141_write_cmos_sensor(0x3E16, 0x0018 	); // DYNAMIC_SEQRAM_16
	A5141_write_cmos_sensor(0x3E18, 0x46B7 	); // DYNAMIC_SEQRAM_18
	A5141_write_cmos_sensor(0x3E1A, 0x4994 	); // DYNAMIC_SEQRAM_1A
	A5141_write_cmos_sensor(0x3E1C, 0x4997 	); // DYNAMIC_SEQRAM_1C
	A5141_write_cmos_sensor(0x3E1E, 0x4682 	); // DYNAMIC_SEQRAM_1E
	A5141_write_cmos_sensor(0x3E20, 0x0018 	); // DYNAMIC_SEQRAM_20
	A5141_write_cmos_sensor(0x3E22, 0x4241 	); // DYNAMIC_SEQRAM_22
	A5141_write_cmos_sensor(0x3E24, 0x8000 	); // DYNAMIC_SEQRAM_24
	A5141_write_cmos_sensor(0x3E26, 0x1880 	); // DYNAMIC_SEQRAM_26
	A5141_write_cmos_sensor(0x3E28, 0x4785 	); // DYNAMIC_SEQRAM_28
	A5141_write_cmos_sensor(0x3E2A, 0x4992 	); // DYNAMIC_SEQRAM_2A
	A5141_write_cmos_sensor(0x3E2C, 0x4997 	); // DYNAMIC_SEQRAM_2C
	A5141_write_cmos_sensor(0x3E2E, 0x4780 	); // DYNAMIC_SEQRAM_2E
	A5141_write_cmos_sensor(0x3E30, 0x4D80 	); // DYNAMIC_SEQRAM_30
	A5141_write_cmos_sensor(0x3E32, 0x100C 	); // DYNAMIC_SEQRAM_32
	A5141_write_cmos_sensor(0x3E34, 0x8000 	); // DYNAMIC_SEQRAM_34
	A5141_write_cmos_sensor(0x3E36, 0x184A 	); // DYNAMIC_SEQRAM_36
	A5141_write_cmos_sensor(0x3E38, 0x8042 	); // DYNAMIC_SEQRAM_38
	A5141_write_cmos_sensor(0x3E3A, 0x001A 	); // DYNAMIC_SEQRAM_3A
	A5141_write_cmos_sensor(0x3E3C, 0x9610 	); // DYNAMIC_SEQRAM_3C
	A5141_write_cmos_sensor(0x3E3E, 0x0C80 	); // DYNAMIC_SEQRAM_3E
	A5141_write_cmos_sensor(0x3E40, 0x4DC6 	); // DYNAMIC_SEQRAM_40
	A5141_write_cmos_sensor(0x3E42, 0x4A80 	); // DYNAMIC_SEQRAM_42
	A5141_write_cmos_sensor(0x3E44, 0x0018 	); // DYNAMIC_SEQRAM_44
	A5141_write_cmos_sensor(0x3E46, 0x8042 	); // DYNAMIC_SEQRAM_46
	A5141_write_cmos_sensor(0x3E48, 0x8041 	); // DYNAMIC_SEQRAM_48
	A5141_write_cmos_sensor(0x3E4A, 0x0018 	); // DYNAMIC_SEQRAM_4A
	A5141_write_cmos_sensor(0x3E4C, 0x804B 	); // DYNAMIC_SEQRAM_4C
	A5141_write_cmos_sensor(0x3E4E, 0xB74B 	); // DYNAMIC_SEQRAM_4E
	A5141_write_cmos_sensor(0x3E50, 0x8010 	); // DYNAMIC_SEQRAM_50
	A5141_write_cmos_sensor(0x3E52, 0x6056 	); // DYNAMIC_SEQRAM_52
	A5141_write_cmos_sensor(0x3E54, 0x001C 	); // DYNAMIC_SEQRAM_54
	A5141_write_cmos_sensor(0x3E56, 0x8211 	); // DYNAMIC_SEQRAM_56
	A5141_write_cmos_sensor(0x3E58, 0x8056 	); // DYNAMIC_SEQRAM_58
	A5141_write_cmos_sensor(0x3E5A, 0x827C 	); // DYNAMIC_SEQRAM_5A
	A5141_write_cmos_sensor(0x3E5C, 0x0970 	); // DYNAMIC_SEQRAM_5C
	A5141_write_cmos_sensor(0x3E5E, 0x8082 	); // DYNAMIC_SEQRAM_5E
	A5141_write_cmos_sensor(0x3E60, 0x7281 	); // DYNAMIC_SEQRAM_60
	A5141_write_cmos_sensor(0x3E62, 0x4C40 	); // DYNAMIC_SEQRAM_62
	A5141_write_cmos_sensor(0x3E64, 0x8E4D 	); // DYNAMIC_SEQRAM_64
	A5141_write_cmos_sensor(0x3E66, 0x8110 	); // DYNAMIC_SEQRAM_66
	A5141_write_cmos_sensor(0x3E68, 0x0CAF 	); // DYNAMIC_SEQRAM_68
	A5141_write_cmos_sensor(0x3E6A, 0x4D80 	); // DYNAMIC_SEQRAM_6A
	A5141_write_cmos_sensor(0x3E6C, 0x100C 	); // DYNAMIC_SEQRAM_6C
	A5141_write_cmos_sensor(0x3E6E, 0x8440 	); // DYNAMIC_SEQRAM_6E
	A5141_write_cmos_sensor(0x3E70, 0x4C81 	); // DYNAMIC_SEQRAM_70
	A5141_write_cmos_sensor(0x3E72, 0x7C5F 	); // DYNAMIC_SEQRAM_72
	A5141_write_cmos_sensor(0x3E74, 0x7000 	); // DYNAMIC_SEQRAM_74
	A5141_write_cmos_sensor(0x3E76, 0x0000 	); // DYNAMIC_SEQRAM_76
	A5141_write_cmos_sensor(0x3E78, 0x0000 	); // DYNAMIC_SEQRAM_78
	A5141_write_cmos_sensor(0x3E7A, 0x0000 	); // DYNAMIC_SEQRAM_7A
	A5141_write_cmos_sensor(0x3E7C, 0x0000 	); // DYNAMIC_SEQRAM_7C
	A5141_write_cmos_sensor(0x3E7E, 0x0000 	); // DYNAMIC_SEQRAM_7E
	A5141_write_cmos_sensor(0x3E80, 0x0000 	); // DYNAMIC_SEQRAM_80
	A5141_write_cmos_sensor(0x3E82, 0x0000 	); // DYNAMIC_SEQRAM_82
	A5141_write_cmos_sensor(0x3E84, 0x0000 	); // DYNAMIC_SEQRAM_84
	A5141_write_cmos_sensor(0x3E86, 0x0000 	); // DYNAMIC_SEQRAM_86
	A5141_write_cmos_sensor(0x3E88, 0x0000 	); // DYNAMIC_SEQRAM_88
	A5141_write_cmos_sensor(0x3E8A, 0x0000 	); // DYNAMIC_SEQRAM_8A
	A5141_write_cmos_sensor(0x3E8C, 0x0000 	); // DYNAMIC_SEQRAM_8C
	A5141_write_cmos_sensor(0x3E8E, 0x0000 	); // DYNAMIC_SEQRAM_8E
	A5141_write_cmos_sensor(0x3E90, 0x0000 	); // DYNAMIC_SEQRAM_90
	A5141_write_cmos_sensor(0x3E92, 0x0000 	); // DYNAMIC_SEQRAM_92
	A5141_write_cmos_sensor(0x3E94, 0x0000 	); // DYNAMIC_SEQRAM_94
	A5141_write_cmos_sensor(0x3E96, 0x0000 	); // DYNAMIC_SEQRAM_96
	A5141_write_cmos_sensor(0x3E98, 0x0000 	); // DYNAMIC_SEQRAM_98
	A5141_write_cmos_sensor(0x3E9A, 0x0000 	); // DYNAMIC_SEQRAM_9A
	A5141_write_cmos_sensor(0x3E9C, 0x0000 	); // DYNAMIC_SEQRAM_9C
	A5141_write_cmos_sensor(0x3E9E, 0x0000 	); // DYNAMIC_SEQRAM_9E
	A5141_write_cmos_sensor(0x3EA0, 0x0000 	); // DYNAMIC_SEQRAM_A0
	A5141_write_cmos_sensor(0x3EA2, 0x0000 	); // DYNAMIC_SEQRAM_A2
	A5141_write_cmos_sensor(0x3EA4, 0x0000 	); // DYNAMIC_SEQRAM_A4
	A5141_write_cmos_sensor(0x3EA6, 0x0000 	); // DYNAMIC_SEQRAM_A6
	A5141_write_cmos_sensor(0x3EA8, 0x0000 	); // DYNAMIC_SEQRAM_A8
	A5141_write_cmos_sensor(0x3EAA, 0x0000 	); // DYNAMIC_SEQRAM_AA
	A5141_write_cmos_sensor(0x3EAC, 0x0000 	); // DYNAMIC_SEQRAM_AC
	A5141_write_cmos_sensor(0x3EAE, 0x0000 	); // DYNAMIC_SEQRAM_AE
	A5141_write_cmos_sensor(0x3EB0, 0x0000 	); // DYNAMIC_SEQRAM_B0
	A5141_write_cmos_sensor(0x3EB2, 0x0000 	); // DYNAMIC_SEQRAM_B2
	A5141_write_cmos_sensor(0x3EB4, 0x0000 	); // DYNAMIC_SEQRAM_B4
	A5141_write_cmos_sensor(0x3EB6, 0x0000 	); // DYNAMIC_SEQRAM_B6
	A5141_write_cmos_sensor(0x3EB8, 0x0000 	); // DYNAMIC_SEQRAM_B8
	A5141_write_cmos_sensor(0x3EBA, 0x0000 	); // DYNAMIC_SEQRAM_BA
	A5141_write_cmos_sensor(0x3EBC, 0x0000 	); // DYNAMIC_SEQRAM_BC
	A5141_write_cmos_sensor(0x3EBE, 0x0000 	); // DYNAMIC_SEQRAM_BE
	A5141_write_cmos_sensor(0x3EC0, 0x0000 	); // DYNAMIC_SEQRAM_C0
	A5141_write_cmos_sensor(0x3EC2, 0x0000 	); // DYNAMIC_SEQRAM_C2
	A5141_write_cmos_sensor(0x3EC4, 0x0000 	); // DYNAMIC_SEQRAM_C4
	A5141_write_cmos_sensor(0x3EC6, 0x0000 	); // DYNAMIC_SEQRAM_C6
	A5141_write_cmos_sensor(0x3EC8, 0x0000 	); // DYNAMIC_SEQRAM_C8
	A5141_write_cmos_sensor(0x3ECA, 0x0000 	); // DYNAMIC_SEQRAM_CA
	A5141_write_cmos_sensor(0x3170, 0x2150 	); // ANALOG_CONTROL
	A5141_write_cmos_sensor(0x317A, 0x0150 	); // ANALOG_CONTROL6
	A5141_write_cmos_sensor(0x3ECC, 0x2200 	); // DAC_LD_0_1
	A5141_write_cmos_sensor(0x3174, 0x0000 	); // ANALOG_CONTROL3
	A5141_write_cmos_sensor(0x3176, 0x0000 	); // ANALOG_CONTROL4
	A5141_write_cmos_sensor(0x30BC, 0x0384 	); // CALIB_GLOBAL
	A5141_write_cmos_sensor(0x30C0, 0x1220 	); // CALIB_CONTROL
	A5141_write_cmos_sensor(0x30D4, 0x9200 	); // COLUMN_CORRECTION
	A5141_write_cmos_sensor(0x30B2, 0xC000 	); // CALIB_TIED_OFFSET
	A5141_write_cmos_sensor(0x31B0, 0x00C4 	); // FRAME_PREAMBLE
	A5141_write_cmos_sensor(0x31B2, 0x0064 	); // LINE_PREAMBLE
	A5141_write_cmos_sensor(0x31B4, 0x0E77 	); // MIPI_TIMING_0
	A5141_write_cmos_sensor(0x31B6, 0x0D24 	); // MIPI_TIMING_1
	A5141_write_cmos_sensor(0x31B8, 0x020E 	); // MIPI_TIMING_2
	A5141_write_cmos_sensor(0x31BA, 0x0710 	); // MIPI_TIMING_3
	A5141_write_cmos_sensor(0x31BC, 0x2A0D 	); // MIPI_TIMING_4
	A5141_write_cmos_sensor(0x31BE, 0xC007 	); // MIPI_CONFIG_STATUS
	A5141_write_cmos_sensor(0x305E, 0x1127 	); // GLOBAL_GAIN
	A5141_write_cmos_sensor(0x30F0, 0x8000);  	// enable AF

	A5141_write_cmos_sensor(0x3ECE, 0x000A 	); // DAC_LD_2_3

	A5141_write_cmos_sensor(0x0400, 0x0000 	); // SCALING_MODE
	A5141_write_cmos_sensor(0x0404, 0x0010 	); // SCALE_M

	//[PLL_Configuration_24MHz_EXTCLK_84MHz_PIXCLK]
	//for parallel, CCP2 and single lane MIPI interface
	A5141_write_cmos_sensor(0x0300, 0xF ); //vt_pix_clk_div				
	A5141_write_cmos_sensor(0x0302, 0x1 ); //vt_sys_clk_div				
	A5141_write_cmos_sensor(0x0304, 0x2 ); //pre_pll_clk_div				
	A5141_write_cmos_sensor(0x0306, 0x41 ); //pll_multipler				
	A5141_write_cmos_sensor(0x0308, 0xA ); //op_pix_clk_div				
	A5141_write_cmos_sensor(0x030A, 0x1 ); //op_sys_clk_div				
	mdelay(5);		

	//PLL MLCK=26MHz, VT=112.67MHz, OP=52MHz
	//A5141_write_cmos_sensor(0x0300, 0x0009 	); // VT_PIX_CLK_DIV
	//A5141_write_cmos_sensor(0x0302, 0x0001 	); // VT_SYS_CLK_DIV
	//A5141_write_cmos_sensor(0x0304, 0x0002 	); // PRE_PLL_CLK_DIV
	//A5141_write_cmos_sensor(0x0306, 0x0028 	); // PLL_MULTIPLIER
	//A5141_write_cmos_sensor(0x0308, 0x000A 	); // OP_PIX_CLK_DIV
	//A5141_write_cmos_sensor(0x030A, 0x0001 	); // OP_SYS_CLK_DIV
	mdelay(5);	

	 //Timing
	A5141_write_cmos_sensor_8(0x0104, 0x01 	); // GROUPED_PARAMETER_HOLD
	A5141_write_cmos_sensor(0x3004, 0x0008 	); // X_ADDR_START_
	A5141_write_cmos_sensor(0x3008, 0x0A25 	); // X_ADDR_END_
	A5141_write_cmos_sensor(0x3002, 0x0008 	); // Y_ADDR_START_
	A5141_write_cmos_sensor(0x3006, 0x079D 	); // Y_ADDR_END_
	A5141_write_cmos_sensor(0x3040, 0x04C3 	); // READ_MODE
	A5141_write_cmos_sensor(0x034C, 0x0510 	); // X_OUTPUT_SIZE
	A5141_write_cmos_sensor(0x034E, 0x03CC 	); // Y_OUTPUT_SIZE
	A5141_write_cmos_sensor(0x300C, 0x0C4C 	); // LINE_LENGTH_PCK_
	A5141_write_cmos_sensor(0x300A, 0x04A8 	); // FRAME_LENGTH_LINES_
	A5141_write_cmos_sensor(0x3012, 0x0414 	); // COARSE_INTEGRATION_TIME_
	A5141_write_cmos_sensor(0x3014, 0x0908 	); // FINE_INTEGRATION_TIME_
	A5141_write_cmos_sensor(0x3010, 0x0184 	); // FINE_CORRECTION
	A5141_write_cmos_sensor_8(0x0104, 0x00 	); // GROUPED_PARAMETER_HOLD
	A5141_write_cmos_sensor_8(0x0100, 0x01 	); // MODE_SELECT
}   /*  A5141_Sensor_Init  */

/*************************************************************************
* FUNCTION
*   A5141Open
*
* DESCRIPTION
*   This function initialize the registers of CMOS sensor
*
* PARAMETERS
*   None
*
* RETURNS
*   None
*
* GLOBALS AFFECTED
*
*************************************************************************/

UINT32 A5141Open(void)
{
	UINT32 sensor_id = 0;
	
	A5141GetSensorID(&sensor_id) ;
	
    if (sensor_id != A5141_SENSOR_ID)
        return ERROR_SENSOR_CONNECT_FAIL;

    A5141_Init_setting();

    A5141_sensor_gain_base = read_A5141_gain();
	
    return ERROR_NONE;
}


/*************************************************************************
* FUNCTION
*   A5141GetSensorID
*
* DESCRIPTION
*   This function get the sensor ID 
*
* PARAMETERS
*   *sensorID : return the sensor ID 
*
* RETURNS
*   None
*
* GLOBALS AFFECTED
*
*************************************************************************/
static UINT32 A5141GetSensorID(UINT32 *sensorID) 
{
	kal_uint16 sensor_id = 0xffff;
	kal_uint16 i;
	kal_uint8 ucTempAddr;
	
	//try each slave address
	for(i = 0; i < sizeof(A5141_i2c_addr) / sizeof(A5141_i2c_addr[0]); i++)
	{
		A5141_sensor.i2c_write_id = A5141_i2c_addr[i];	
		sensor_id = A5141_read_cmos_sensor(0x0000);	
		SENSORDB("sensor_id=0x%x",sensor_id);
		
		if(sensor_id == A5141_SENSOR_ID)
		{
			//move the correct slave address to the first
			ucTempAddr=A5141_i2c_addr[0];
			A5141_i2c_addr[0]=A5141_i2c_addr[i];
			A5141_i2c_addr[i]=ucTempAddr;
			SENSORDB("slave address=0x%x", A5141_sensor.i2c_write_id);
			break;
		}
	}
	
	*sensorID=sensor_id;
    if (*sensorID != A5141_SENSOR_ID) 
	{
        *sensorID = 0xFFFFFFFF; 
		SENSORDB("Read sensor id fail!");
        return ERROR_SENSOR_CONNECT_FAIL;
    }	
    return ERROR_NONE;
}


static void A5141_WriteShutter(kal_uint16 iShutter)
{
	SENSORDB("iShutter=%d",iShutter);

	if(A5141_exposure_lines == iShutter){
		return;
	}
	A5141_exposure_lines=iShutter;
	A5141_write_cmos_sensor_8(0x0104, 0x01); 	// GROUPED_PARAMETER_HOLD
	A5141_write_cmos_sensor(0x0202, iShutter);  /* course_integration_time */
	A5141_write_cmos_sensor_8(0x0104, 0x00); 	// GROUPED_PARAMETER_HOLD
}

static void A5141_SetShutter(kal_uint16 iShutter)
{
	A5141_WriteShutter(iShutter);
}



/*************************************************************************
* FUNCTION
*   A5141_read_shutter
*
* DESCRIPTION
*   This function to  Get exposure time.
*
* PARAMETERS
*   None
*
* RETURNS
*   shutter : exposured lines
*
* GLOBALS AFFECTED
*
*************************************************************************/
UINT16 A5141_read_shutter(void)
{
    kal_uint16 iShutter;
	
	iShutter = A5141_read_cmos_sensor(0x0202); /* course_integration_time */
	SENSORDB("iShutter=%d",iShutter);
	return iShutter;
}

/*************************************************************************
* FUNCTION
*   A5141_night_mode
*
* DESCRIPTION
*   This function night mode of A5141.
*
* PARAMETERS
*   none
*
* RETURNS
*   None
*
* GLOBALS AFFECTED
*
*************************************************************************/
void A5141_NightMode(kal_bool bEnable)
{
    // frame rate will be control by AE table
    
}



/*************************************************************************
* FUNCTION
*   A5141Close
*
* DESCRIPTION
*   This function is to turn off sensor module power.
*
* PARAMETERS
*   None
*
* RETURNS
*   None
*
* GLOBALS AFFECTED
*
*************************************************************************/
UINT32 A5141Close(void)
{
    return ERROR_NONE;
}	/* A5141Close() */

void A5141_Set_Mirror_Flip(kal_uint8 image_mirror)
{
	SENSORDB("image_mirror=%d",image_mirror);
	A5141_sensor.u16ImgMirror=image_mirror;
	switch (image_mirror)
	{
		case IMAGE_NORMAL:
			A5141_write_cmos_sensor_8(0x0101,0x00);
		break;
		case IMAGE_H_MIRROR:
			A5141_write_cmos_sensor_8(0x0101,0x01);
		break;
		case IMAGE_V_MIRROR:
			A5141_write_cmos_sensor_8(0x0101,0x02);
		break;
		case IMAGE_HV_MIRROR:
			A5141_write_cmos_sensor_8(0x0101,0x03);
		break;
	}
}

static void A5141_preview_setting(void)
{
	kal_uint16 temp;
	SENSORDB("enter!");
	//stop_streaming
	A5141_write_cmos_sensor_8( 0x0100, 0x00 	); // MODE_SELECT

	//Timing
	A5141_write_cmos_sensor_8(0x0104, 0x01 ); //group parameter Hold				
	A5141_write_cmos_sensor(0x3004, 0x8 ); //x_addr_start				
	A5141_write_cmos_sensor(0x3008, 0xA25 ); //x_addr_end				
	A5141_write_cmos_sensor(0x3002, 0x8 ); //y_start_addr				
	A5141_write_cmos_sensor(0x3006, 0x79D ); //y_addr_end				
	A5141_write_cmos_sensor(0x3040, 0x4C3); //read_mode				
	A5141_write_cmos_sensor(0x034C, 0x510 ); //x_output_size				
	A5141_write_cmos_sensor(0x034E, 0x3CC ); //y_output_size				
	A5141_write_cmos_sensor(0x300C, 0xC4C ); //line_length_pck				
	A5141_write_cmos_sensor(0x300A, 0x4A8 ); //frame_length_lines				
	A5141_write_cmos_sensor(0x3012, 0x414 ); //coarse_integration_time				
	A5141_write_cmos_sensor(0x3014, 0x908 ); //fine_integration_time				
	A5141_write_cmos_sensor(0x3010, 0x184 ); //fine_correction				
	A5141_write_cmos_sensor_8(0x0104, 0x00 ); //group parameter Hold	

	//start_streaming
	A5141_write_cmos_sensor_8( 0x0100, 0x01 	); // MODE_SELECT
}

static void A5141_capture_setting(void)
{
	kal_uint16 temp;
	SENSORDB("enter!");
	//stop_streaming
	//A5141_write_cmos_sensor_8( 0x0100, 0x00 	); // MODE_SELECT

	A5141_write_cmos_sensor_8(0x0104, 0x01 ); //group parameter Hold				
	A5141_write_cmos_sensor(0x3004, 0x8 ); //x_addr_start				
	A5141_write_cmos_sensor(0x3008, 0xA27 ); //x_addr_end				
	A5141_write_cmos_sensor(0x3002, 0x8 ); //y_start_addr				
	A5141_write_cmos_sensor(0x3006, 0x79F ); //y_addr_end				
	A5141_write_cmos_sensor(0x3040, 0x41); //read_mode				
	A5141_write_cmos_sensor(0x034C, 0xA20 ); //x_output_size				
	A5141_write_cmos_sensor(0x034E, 0x798 ); //y_output_size				
	A5141_write_cmos_sensor(0x300C, 0xE70 ); //line_length_pck				
	A5141_write_cmos_sensor(0x300A, 0x7E5 ); //frame_length_lines				
	A5141_write_cmos_sensor(0x3012, 0x7E4 ); //coarse_integration_time				
	A5141_write_cmos_sensor(0x3014, 0xC8C ); //fine_integration_time				
	A5141_write_cmos_sensor(0x3010, 0xA0 ); //fine_correction				
	A5141_write_cmos_sensor_8(0x0104, 0x00 ); //group parameter Hold	

	//start_streaming
	//A5141_write_cmos_sensor_8( 0x0100, 0x01 	); // MODE_SELECT
}


/*************************************************************************
* FUNCTION
*   A5141_SetDummy
*
* DESCRIPTION
*   This function initialize the registers of CMOS sensor
*
* PARAMETERS
*   mode  ture : preview mode
*             false : capture mode
*
* RETURNS
*   None
*
* GLOBALS AFFECTED
*
*************************************************************************/

static void A5141_SetDummy(kal_bool mode,const kal_uint16 iDummyPixels, const kal_uint16 iDummyLines)
{
    kal_uint16 line_length, frame_length;
	
    A5141_PV_dummy_pixels=iDummyPixels;
	A5141_PV_dummy_lines=iDummyLines;
	
	if(mode == KAL_TRUE) //preview
	{
		line_length   = A5141_PV_PERIOD_PIXEL_NUMS + iDummyPixels;
		frame_length = A5141_PV_PERIOD_LINE_NUMS  + iDummyLines;

		A5141_Frame_Length_preview = frame_length;
	}
	else   //capture
	{
		line_length   = A5141_FULL_PERIOD_PIXEL_NUMS + iDummyPixels;
		frame_length = A5141_FULL_PERIOD_LINE_NUMS  + iDummyLines;
	}
	A5141_sensor.i16current_frame_length==frame_length;
	
    SENSORDB("line_length=%d, frame_length=%d",line_length,frame_length);

	A5141_write_cmos_sensor_8(0x0104, 0x01);// GROUPED_PARAMETER_HOLD
	A5141_write_cmos_sensor(0x0340, frame_length);
	A5141_write_cmos_sensor(0x0342, line_length);
	A5141_write_cmos_sensor_8(0x0104, 0x00); //Grouped Parameter Hold = 0x00
	
}   /*  A5141_SetDummy */


/*************************************************************************
* FUNCTION
*   A5141Preview
*
* DESCRIPTION
*   This function start the sensor preview.
*
* PARAMETERS
*   *image_window : address pointer of pixel numbers in one period of HSYNC
*  *sensor_config_data : address pointer of line numbers in one period of VSYNC
*
* RETURNS
*   None
*
* GLOBALS AFFECTED
*
*************************************************************************/
UINT32 A5141Preview(MSDK_SENSOR_EXPOSURE_WINDOW_STRUCT *image_window,
                                                MSDK_SENSOR_CONFIG_STRUCT *sensor_config_data)
{
    A5141_PV_dummy_pixels = 0;
	A5141_PV_dummy_lines  = 0;
	SENSORDB("enter!");
	if(sensor_config_data->SensorOperationMode == MSDK_SENSOR_OPERATION_MODE_VIDEO)
    {
        A5141_MPEG4_encode_mode = KAL_TRUE;
    }
    else
    {
        A5141_MPEG4_encode_mode = KAL_FALSE;
    }

	A5141_preview_setting();

	//A5141_Set_Mirror_Flip((sensor_config_data->SensorImageMirror+IMAGE_HV_MIRROR)%4);
	A5141_Set_Mirror_Flip(IMAGE_NORMAL);

	A5141_SetDummy(KAL_TRUE, A5141_PV_dummy_pixels, A5141_PV_dummy_lines);

    image_window->GrabStartX= A5141_PV_START_X;
    image_window->GrabStartY= A5141_PV_START_Y;
    image_window->ExposureWindowWidth= A5141_IMAGE_SENSOR_PV_WIDTH;
    image_window->ExposureWindowHeight= A5141_IMAGE_SENSOR_PV_HEIGHT;

	g_iA5141_Mode = A5141_MODE_PREVIEW;
	A5141_write_cmos_sensor_8(0x0104, 0x01); 	// GROUPED_PARAMETER_HOLD
	A5141_write_cmos_sensor(0x0202, A5141_exposure_lines); /* course_integration_time */
	A5141_write_cmos_sensor_8(0x0104, 0x00); 	// GROUPED_PARAMETER_HOLD

	memcpy(&A5141SensorConfigData, sensor_config_data, sizeof(MSDK_SENSOR_CONFIG_STRUCT));

    return ERROR_NONE;
}	/* A5141Preview() */

UINT32 A5141ZSDPreview(MSDK_SENSOR_EXPOSURE_WINDOW_STRUCT *image_window,
                                                MSDK_SENSOR_CONFIG_STRUCT *sensor_config_data)
{
    kal_uint32 shutter = A5141_exposure_lines;

	A5141_Auto_Flicker_mode = KAL_FALSE;
	A5141_MPEG4_encode_mode = KAL_FALSE;
	SENSORDB("enter!");	
	g_iA5141_Mode = A5141_MODE_ZSD_PREVIEW;
	A5141_dummy_pixels = 0;
	A5141_dummy_lines  = 0;
	
	A5141_capture_setting();
	
	A5141_SetDummy(KAL_FALSE,A5141_dummy_pixels,A5141_dummy_lines);

	image_window->GrabStartX           = A5141_FULL_START_X;
    image_window->GrabStartY           = A5141_FULL_START_Y;
    image_window->ExposureWindowWidth  = A5141_IMAGE_SENSOR_FULL_WIDTH;
    image_window->ExposureWindowHeight = A5141_IMAGE_SENSOR_FULL_HEIGHT;

	memcpy(&A5141SensorConfigData, sensor_config_data, sizeof(MSDK_SENSOR_CONFIG_STRUCT));	
    return ERROR_NONE;
}	/* A5141Capture() */
	

UINT32 A5141Capture(MSDK_SENSOR_EXPOSURE_WINDOW_STRUCT *image_window,
                                                MSDK_SENSOR_CONFIG_STRUCT *sensor_config_data)
{
    kal_uint32 shutter = A5141_exposure_lines;

	SENSORDB("enter!");

	A5141_Auto_Flicker_mode = KAL_FALSE;
	A5141_MPEG4_encode_mode = KAL_FALSE;
	g_iA5141_Mode = A5141_MODE_CAPTURE;
	A5141_dummy_pixels = 0;
	A5141_dummy_lines  = 0;
	
	A5141_capture_setting();
	//A5141_Set_Mirror_Flip((sensor_config_data->SensorImageMirror+IMAGE_HV_MIRROR)%4);
	A5141_Set_Mirror_Flip(IMAGE_NORMAL);
	
	A5141_SetDummy(KAL_FALSE,A5141_dummy_pixels,A5141_dummy_lines);

	SENSORDB("preview shutter =%d",shutter);

	shutter = shutter * (A5141_PV_PERIOD_PIXEL_NUMS + A5141_PV_dummy_pixels)/(A5141_FULL_PERIOD_PIXEL_NUMS +A5141_dummy_pixels);
	shutter = shutter * A5141_sensor.capture_vt_clk / A5141_sensor.preview_vt_clk;

	SENSORDB("capture shutter =%d",shutter);

	image_window->GrabStartX           = A5141_FULL_START_X;
    image_window->GrabStartY           = A5141_FULL_START_Y;
    image_window->ExposureWindowWidth  = A5141_IMAGE_SENSOR_FULL_WIDTH;
    image_window->ExposureWindowHeight = A5141_IMAGE_SENSOR_FULL_HEIGHT;

	if(shutter < 1)
	    shutter = 1;
	
    A5141_SetShutter(shutter);
	
	memcpy(&A5141SensorConfigData, sensor_config_data, sizeof(MSDK_SENSOR_CONFIG_STRUCT));	
    return ERROR_NONE;
}	/* A5141Capture() */

UINT32 A5141GetResolution(MSDK_SENSOR_RESOLUTION_INFO_STRUCT *pSensorResolution)
{
    pSensorResolution->SensorFullWidth     =  A5141_IMAGE_SENSOR_FULL_WIDTH;
    pSensorResolution->SensorFullHeight    =  A5141_IMAGE_SENSOR_FULL_HEIGHT;
    pSensorResolution->SensorPreviewWidth  =  A5141_IMAGE_SENSOR_PV_WIDTH;
    pSensorResolution->SensorPreviewHeight =  A5141_IMAGE_SENSOR_PV_HEIGHT;

    return ERROR_NONE;
}   /* A5141GetResolution() */

UINT32 A5141GetInfo(MSDK_SCENARIO_ID_ENUM ScenarioId,
                                                MSDK_SENSOR_INFO_STRUCT *pSensorInfo,
                                                MSDK_SENSOR_CONFIG_STRUCT *pSensorConfigData)
{
	SENSORDB("ScenarioId=%d",ScenarioId);
	switch(ScenarioId)
	{
		case MSDK_SCENARIO_ID_CAMERA_ZSD:
			pSensorInfo->SensorPreviewResolutionX=A5141_IMAGE_SENSOR_FULL_WIDTH;
			pSensorInfo->SensorPreviewResolutionY=A5141_IMAGE_SENSOR_FULL_HEIGHT;
			pSensorInfo->SensorCameraPreviewFrameRate=15;
		break;

		default:
        	pSensorInfo->SensorPreviewResolutionX=A5141_IMAGE_SENSOR_PV_WIDTH;
       		pSensorInfo->SensorPreviewResolutionY=A5141_IMAGE_SENSOR_PV_HEIGHT;
			pSensorInfo->SensorCameraPreviewFrameRate=30;
		break;
	}
    pSensorInfo->SensorFullResolutionX    =  A5141_IMAGE_SENSOR_FULL_WIDTH;
    pSensorInfo->SensorFullResolutionY    =  A5141_IMAGE_SENSOR_FULL_HEIGHT;

    pSensorInfo->SensorVideoFrameRate=30;
    pSensorInfo->SensorStillCaptureFrameRate=15;
    pSensorInfo->SensorWebCamCaptureFrameRate=15;
    pSensorInfo->SensorResetActiveHigh=FALSE;
    pSensorInfo->SensorResetDelayCount=5;
    pSensorInfo->SensorOutputDataFormat     = SENSOR_OUTPUT_FORMAT_RAW_B;
    pSensorInfo->SensorClockPolarity        = SENSOR_CLOCK_POLARITY_LOW;
    pSensorInfo->SensorClockFallingPolarity = SENSOR_CLOCK_POLARITY_LOW;
    pSensorInfo->SensorHsyncPolarity        = SENSOR_CLOCK_POLARITY_LOW;
    pSensorInfo->SensorVsyncPolarity        = SENSOR_CLOCK_POLARITY_HIGH;
    pSensorInfo->SensorInterruptDelayLines  = 1;  	
	pSensorInfo->SensroInterfaceType		= SENSOR_INTERFACE_TYPE_PARALLEL;  
	
    pSensorInfo->SensorDriver3D = 0;   // the sensor driver is 2D
    pSensorInfo->SensorISOBinningInfo.ISOBinningInfo[ISO_100_MODE].MaxWidth=CAM_SIZE_2M_WIDTH;
    pSensorInfo->SensorISOBinningInfo.ISOBinningInfo[ISO_100_MODE].MaxHeight=CAM_SIZE_2M_HEIGHT;
    pSensorInfo->SensorISOBinningInfo.ISOBinningInfo[ISO_100_MODE].ISOSupported=TRUE;
    pSensorInfo->SensorISOBinningInfo.ISOBinningInfo[ISO_100_MODE].BinningEnable=FALSE;

    pSensorInfo->SensorISOBinningInfo.ISOBinningInfo[ISO_200_MODE].MaxWidth=CAM_SIZE_2M_WIDTH;
    pSensorInfo->SensorISOBinningInfo.ISOBinningInfo[ISO_200_MODE].MaxHeight=CAM_SIZE_2M_HEIGHT;
    pSensorInfo->SensorISOBinningInfo.ISOBinningInfo[ISO_200_MODE].ISOSupported=TRUE;
    pSensorInfo->SensorISOBinningInfo.ISOBinningInfo[ISO_200_MODE].BinningEnable=FALSE;

    pSensorInfo->SensorISOBinningInfo.ISOBinningInfo[ISO_400_MODE].MaxWidth=CAM_SIZE_2M_WIDTH;
    pSensorInfo->SensorISOBinningInfo.ISOBinningInfo[ISO_400_MODE].MaxHeight=CAM_SIZE_2M_HEIGHT;
    pSensorInfo->SensorISOBinningInfo.ISOBinningInfo[ISO_400_MODE].ISOSupported=FALSE;
    pSensorInfo->SensorISOBinningInfo.ISOBinningInfo[ISO_400_MODE].BinningEnable=FALSE;

    pSensorInfo->SensorISOBinningInfo.ISOBinningInfo[ISO_800_MODE].MaxWidth=CAM_SIZE_05M_WIDTH;
    pSensorInfo->SensorISOBinningInfo.ISOBinningInfo[ISO_800_MODE].MaxHeight=CAM_SIZE_1M_HEIGHT;
    pSensorInfo->SensorISOBinningInfo.ISOBinningInfo[ISO_800_MODE].ISOSupported=FALSE;
    pSensorInfo->SensorISOBinningInfo.ISOBinningInfo[ISO_800_MODE].BinningEnable=TRUE;

    pSensorInfo->SensorISOBinningInfo.ISOBinningInfo[ISO_1600_MODE].MaxWidth=CAM_SIZE_05M_WIDTH;
    pSensorInfo->SensorISOBinningInfo.ISOBinningInfo[ISO_1600_MODE].MaxHeight=CAM_SIZE_05M_HEIGHT;
    pSensorInfo->SensorISOBinningInfo.ISOBinningInfo[ISO_1600_MODE].ISOSupported=FALSE;
    pSensorInfo->SensorISOBinningInfo.ISOBinningInfo[ISO_1600_MODE].BinningEnable=TRUE;

    pSensorInfo->CaptureDelayFrame = 2; 
    pSensorInfo->PreviewDelayFrame = 2; 
    pSensorInfo->VideoDelayFrame = 5; 
    pSensorInfo->SensorMasterClockSwitch = 0; 
    pSensorInfo->SensorDrivingCurrent = ISP_DRIVING_6MA;      
    pSensorInfo->AEShutDelayFrame = 0;		    /* The frame of setting shutter default 0 for TG int */
    pSensorInfo->AESensorGainDelayFrame = 1; // 1;    /* The frame of setting sensor gain */
    pSensorInfo->AEISPGainDelayFrame = 2;	// 2;
	   
    switch (ScenarioId)
    {
        case MSDK_SCENARIO_ID_CAMERA_PREVIEW:
        case MSDK_SCENARIO_ID_VIDEO_PREVIEW:
        case MSDK_SCENARIO_ID_VIDEO_CAPTURE_MPEG4:
            pSensorInfo->SensorClockFreq=26;
            pSensorInfo->SensorClockDividCount=	3;
            pSensorInfo->SensorClockRisingCount= 0;
            pSensorInfo->SensorClockFallingCount= 2;
            pSensorInfo->SensorPixelClockCount= 3;
            pSensorInfo->SensorDataLatchCount= 2;
            pSensorInfo->SensorGrabStartX = A5141_PV_START_X; 
            pSensorInfo->SensorGrabStartY = A5141_PV_START_Y;    
            
			#ifdef MIPI_INTERFACE
	            pSensorInfo->SensorMIPILaneNumber = SENSOR_MIPI_2_LANE;			
	            pSensorInfo->MIPIDataLowPwr2HighSpeedTermDelayCount = 0; 
		        pSensorInfo->MIPIDataLowPwr2HighSpeedSettleDelayCount = 14; 
		        pSensorInfo->MIPICLKLowPwr2HighSpeedTermDelayCount = 0;
	            pSensorInfo->SensorWidthSampling = 0;  // 0 is default 1x
	            pSensorInfo->SensorHightSampling = 0;   // 0 is default 1x 
	            pSensorInfo->SensorPacketECCOrder = 1;
	        #endif
            break;
        case MSDK_SCENARIO_ID_CAMERA_CAPTURE_JPEG:
        case MSDK_SCENARIO_ID_CAMERA_CAPTURE_MEM:
		case MSDK_SCENARIO_ID_CAMERA_ZSD:
            pSensorInfo->SensorClockFreq=26;
            pSensorInfo->SensorClockDividCount=	3;
            pSensorInfo->SensorClockRisingCount= 0;
            pSensorInfo->SensorClockFallingCount= 2;
            pSensorInfo->SensorPixelClockCount= 3;
            pSensorInfo->SensorDataLatchCount= 2;
            pSensorInfo->SensorGrabStartX = A5141_FULL_START_X; 
            pSensorInfo->SensorGrabStartY = A5141_FULL_START_X;   
            
			#ifdef MIPI_INTERFACE
	            pSensorInfo->SensorMIPILaneNumber = SENSOR_MIPI_2_LANE;			
	            pSensorInfo->MIPIDataLowPwr2HighSpeedTermDelayCount = 0; 
	            pSensorInfo->MIPIDataLowPwr2HighSpeedSettleDelayCount = 14; 
	            pSensorInfo->MIPICLKLowPwr2HighSpeedTermDelayCount = 0; 
	            pSensorInfo->SensorWidthSampling = 0;  // 0 is default 1x
	            pSensorInfo->SensorHightSampling = 0;   // 0 is default 1x
	            pSensorInfo->SensorPacketECCOrder = 1;
	        #endif
            break;
        default:
            pSensorInfo->SensorClockFreq=26;
            pSensorInfo->SensorClockDividCount=	3;
            pSensorInfo->SensorClockRisingCount= 0;
            pSensorInfo->SensorClockFallingCount= 2;
            pSensorInfo->SensorPixelClockCount= 3;
            pSensorInfo->SensorDataLatchCount= 2;
            pSensorInfo->SensorGrabStartX = A5141_PV_START_X; 
            pSensorInfo->SensorGrabStartY = A5141_PV_START_X;             
            break;
    }

   // A5141PixelClockDivider=pSensorInfo->SensorPixelClockCount;
    memcpy(pSensorConfigData, &A5141SensorConfigData, sizeof(MSDK_SENSOR_CONFIG_STRUCT));

    return ERROR_NONE;
}   /* A5141GetInfo() */


UINT32 A5141Control(MSDK_SCENARIO_ID_ENUM ScenarioId, MSDK_SENSOR_EXPOSURE_WINDOW_STRUCT *pImageWindow,
                                                MSDK_SENSOR_CONFIG_STRUCT *pSensorConfigData)
{
	SENSORDB("ScenarioId=%d",ScenarioId);
	A5141_CurrentScenarioId = ScenarioId;
    switch (ScenarioId)
    {
        case MSDK_SCENARIO_ID_CAMERA_PREVIEW:
        case MSDK_SCENARIO_ID_VIDEO_PREVIEW:
        case MSDK_SCENARIO_ID_VIDEO_CAPTURE_MPEG4:
            A5141Preview(pImageWindow, pSensorConfigData);
		break;
        case MSDK_SCENARIO_ID_CAMERA_CAPTURE_JPEG:
        case MSDK_SCENARIO_ID_CAMERA_CAPTURE_MEM:
			A5141Capture(pImageWindow, pSensorConfigData);
		break;
		case MSDK_SCENARIO_ID_CAMERA_ZSD:
			A5141ZSDPreview(pImageWindow, pSensorConfigData);
		break;
        default:
            return ERROR_INVALID_SCENARIO_ID;        
    }
    return 1;
} /* A5141Control() */

static UINT32  A5141SetMaxFrameRate(A5141_MODE eSensorMode,UINT16 u2FrameRate)
{
	kal_int16 dummy_line;
	kal_int16 frame_height=A5141_PV_PERIOD_LINE_NUMS+A5141_PV_dummy_lines;
	unsigned long flags;

	SENSORDB("eSensorMode=%d,u2FrameRate=%d",eSensorMode,u2FrameRate);
	
	if(u2FrameRate >300)
	{
		u2FrameRate=300;
	}
	else if(u2FrameRate<50)
	{
		return;
	}
	
	if(eSensorMode<A5141_MODE_PV_END)
	{
		frame_height=(10*A5141_sensor.preview_vt_clk)/(A5141_PV_PERIOD_PIXEL_NUMS+A5141_PV_dummy_pixels)/u2FrameRate;
		dummy_line=(frame_height>A5141_PV_PERIOD_LINE_NUMS)?(frame_height-A5141_PV_PERIOD_LINE_NUMS):0;
		A5141_SetDummy(KAL_TRUE,A5141_PV_dummy_pixels,dummy_line);

	}
	else if(eSensorMode<A5141_MODE_CAP_END)
	{
		frame_height=(10*A5141_sensor.capture_vt_clk)/(A5141_FULL_PERIOD_PIXEL_NUMS+A5141_PV_dummy_pixels)/u2FrameRate;
		dummy_line=(frame_height>A5141_FULL_PERIOD_LINE_NUMS)?(frame_height-A5141_FULL_PERIOD_LINE_NUMS):0;
		A5141_SetDummy(KAL_FALSE,A5141_PV_dummy_pixels,dummy_line);
	}
	
	
}

UINT32 A5141SetVideoMode(UINT16 u2FrameRate)
{
	kal_uint16 max_frame_length =0;

	SENSORDB("u2FrameRate=%d",u2FrameRate);
	A5141_MPEG4_encode_mode = KAL_TRUE;

	if(u2FrameRate >30)
	{
		u2FrameRate=30;
	}
	else if(u2FrameRate<5)
	{
		return 1;
	}
	g_iA5141_Mode=A5141_MODE_VIDEO_AUTO;
	if(15==u2FrameRate)
	{
		g_iA5141_Mode=A5141_MODE_VIDEO_NIGHT;
	}
	
	A5141SetMaxFrameRate(g_iA5141_Mode,u2FrameRate*10);		
    return 1;
}

UINT32 A5141SetAutoFlickerMode(kal_bool bEnable, UINT16 u2FrameRate)
{
    SENSORDB("bEnable=%d,u2FrameRate=%d",bEnable,u2FrameRate);
    if(bEnable) 
	{   // enable auto flicker   
        A5141_Auto_Flicker_mode = KAL_TRUE;
        //if(A5141_MPEG4_encode_mode == KAL_TRUE) 
		{   
			// in the video mode, reset the frame rate
			A5141_write_cmos_sensor_8(0x0104, 1);       
			A5141_write_cmos_sensor(0x0340,A5141_sensor.i16current_frame_length+AUTO_FLICKER_NO);
            A5141_write_cmos_sensor_8(0x0104, 0);        	
        }
    } 
	else 
    {
        A5141_Auto_Flicker_mode = KAL_FALSE; 
        if(A5141_MODE_VIDEO_NIGHT==g_iA5141_Mode) 
		{
			A5141SetMaxFrameRate(g_iA5141_Mode,150);
		}
		else if(A5141_MODE_VIDEO_AUTO==g_iA5141_Mode)
		{
			A5141SetMaxFrameRate(g_iA5141_Mode,300);
		}
    }
    return 1;
}


UINT32 A5141FeatureControl(MSDK_SENSOR_FEATURE_ENUM FeatureId,
                                                                UINT8 *pFeaturePara,UINT32 *pFeatureParaLen)
{    
    UINT16 *pFeatureReturnPara16=(UINT16 *) pFeaturePara;
    UINT16 *pFeatureData16=(UINT16 *) pFeaturePara;
    UINT32 *pFeatureReturnPara32=(UINT32 *) pFeaturePara;
    UINT32 *pFeatureData32=(UINT32 *) pFeaturePara;
    UINT32 SensorRegNumber;
    UINT32 i;
    PNVRAM_SENSOR_DATA_STRUCT pSensorDefaultData=(PNVRAM_SENSOR_DATA_STRUCT) pFeaturePara;
    MSDK_SENSOR_CONFIG_STRUCT *pSensorConfigData=(MSDK_SENSOR_CONFIG_STRUCT *) pFeaturePara;
    MSDK_SENSOR_REG_INFO_STRUCT *pSensorRegData=(MSDK_SENSOR_REG_INFO_STRUCT *) pFeaturePara;
    MSDK_SENSOR_GROUP_INFO_STRUCT *pSensorGroupInfo=(MSDK_SENSOR_GROUP_INFO_STRUCT *) pFeaturePara;
    MSDK_SENSOR_ITEM_INFO_STRUCT *pSensorItemInfo=(MSDK_SENSOR_ITEM_INFO_STRUCT *) pFeaturePara;
    MSDK_SENSOR_ENG_INFO_STRUCT	*pSensorEngInfo=(MSDK_SENSOR_ENG_INFO_STRUCT *) pFeaturePara;
	SENSORDB("FeatureId=%d",FeatureId);
    switch (FeatureId)
    {
        case SENSOR_FEATURE_GET_RESOLUTION:
            *pFeatureReturnPara16++=A5141_IMAGE_SENSOR_FULL_WIDTH;
            *pFeatureReturnPara16=A5141_IMAGE_SENSOR_FULL_HEIGHT;
            *pFeatureParaLen=4;
            break;
        case SENSOR_FEATURE_GET_PERIOD:
			switch(A5141_CurrentScenarioId)
			{
				case MSDK_SCENARIO_ID_CAMERA_ZSD:
        		case MSDK_SCENARIO_ID_CAMERA_CAPTURE_JPEG:
	            	*pFeatureReturnPara16++= A5141_FULL_PERIOD_PIXEL_NUMS + A5141_dummy_pixels;//A5141_PV_PERIOD_PIXEL_NUMS+A5141_dummy_pixels;
	            	*pFeatureReturnPara16=A5141_FULL_PERIOD_LINE_NUMS+A5141_dummy_lines;
	           		*pFeatureParaLen=4;
				     break;

				default:
					 *pFeatureReturnPara16++= A5141_PV_PERIOD_PIXEL_NUMS + A5141_PV_dummy_pixels;//A5141_PV_PERIOD_PIXEL_NUMS+A5141_dummy_pixels;
	            	*pFeatureReturnPara16=A5141_PV_PERIOD_LINE_NUMS+A5141_PV_dummy_lines;
	           		*pFeatureParaLen=4;
				     break;
			}
            break;
        case SENSOR_FEATURE_GET_PIXEL_CLOCK_FREQ:
			switch(A5141_CurrentScenarioId)
			{
				case MSDK_SCENARIO_ID_CAMERA_ZSD:
        		case MSDK_SCENARIO_ID_CAMERA_CAPTURE_JPEG:
	            	*pFeatureReturnPara32 = A5141_sensor.capture_vt_clk * 100000;
	           		*pFeatureParaLen=4;
					break;
				default:
					*pFeatureReturnPara32 = A5141_sensor.preview_vt_clk * 100000;
	           		*pFeatureParaLen=4;
					break;
			}
            break;
        case SENSOR_FEATURE_SET_ESHUTTER:
            A5141_SetShutter(*pFeatureData16);
            break;
        case SENSOR_FEATURE_SET_NIGHTMODE:
            A5141_NightMode((BOOL) *pFeatureData16);
            break;
        case SENSOR_FEATURE_SET_GAIN:
            A5141_Set_gain((UINT16) *pFeatureData16);
            break;
        case SENSOR_FEATURE_SET_FLASHLIGHT:
            break;
        case SENSOR_FEATURE_SET_ISP_MASTER_CLOCK_FREQ:
           // A5141_isp_master_clock=*pFeatureData32;
            break;
        case SENSOR_FEATURE_SET_REGISTER:
			SENSORDB("RegAddr=%d,RegData=%d",pSensorRegData->RegAddr,pSensorRegData->RegData);
            A5141_write_cmos_sensor(pSensorRegData->RegAddr, pSensorRegData->RegData);
            break;
        case SENSOR_FEATURE_GET_REGISTER:
            pSensorRegData->RegData = A5141_read_cmos_sensor(pSensorRegData->RegAddr);
            break;
        case SENSOR_FEATURE_SET_CCT_REGISTER:
            SensorRegNumber=FACTORY_END_ADDR;
            for (i=0;i<SensorRegNumber;i++)
            {
                A5141SensorCCT[i].Addr=*pFeatureData32++;
                A5141SensorCCT[i].Para=*pFeatureData32++;
            }
            break;
        case SENSOR_FEATURE_GET_CCT_REGISTER:
            SensorRegNumber=FACTORY_END_ADDR;
            if (*pFeatureParaLen<(SensorRegNumber*sizeof(SENSOR_REG_STRUCT)+4))
                return FALSE;
            *pFeatureData32++=SensorRegNumber;
            for (i=0;i<SensorRegNumber;i++)
            {
                *pFeatureData32++=A5141SensorCCT[i].Addr;
                *pFeatureData32++=A5141SensorCCT[i].Para;
            }
            break;
        case SENSOR_FEATURE_SET_ENG_REGISTER:
            SensorRegNumber=ENGINEER_END;
            for (i=0;i<SensorRegNumber;i++)
            {
                A5141SensorReg[i].Addr=*pFeatureData32++;
                A5141SensorReg[i].Para=*pFeatureData32++;
            }
            break;
        case SENSOR_FEATURE_GET_ENG_REGISTER:
            SensorRegNumber=ENGINEER_END;
            if (*pFeatureParaLen<(SensorRegNumber*sizeof(SENSOR_REG_STRUCT)+4))
                return FALSE;
            *pFeatureData32++=SensorRegNumber;
            for (i=0;i<SensorRegNumber;i++)
            {
                *pFeatureData32++=A5141SensorReg[i].Addr;
                *pFeatureData32++=A5141SensorReg[i].Para;
            }
            break;
        case SENSOR_FEATURE_GET_REGISTER_DEFAULT:
            if (*pFeatureParaLen>=sizeof(NVRAM_SENSOR_DATA_STRUCT))
            {
                pSensorDefaultData->Version=NVRAM_CAMERA_SENSOR_FILE_VERSION;
                pSensorDefaultData->SensorId=A5141_SENSOR_ID;
                memcpy(pSensorDefaultData->SensorEngReg, A5141SensorReg, sizeof(SENSOR_REG_STRUCT)*ENGINEER_END);
                memcpy(pSensorDefaultData->SensorCCTReg, A5141SensorCCT, sizeof(SENSOR_REG_STRUCT)*FACTORY_END_ADDR);
            }
            else
                return FALSE;
            *pFeatureParaLen=sizeof(NVRAM_SENSOR_DATA_STRUCT);
            break;
        case SENSOR_FEATURE_GET_CONFIG_PARA:
            memcpy(pSensorConfigData, &A5141SensorConfigData, sizeof(MSDK_SENSOR_CONFIG_STRUCT));
            *pFeatureParaLen=sizeof(MSDK_SENSOR_CONFIG_STRUCT);
            break;
        case SENSOR_FEATURE_CAMERA_PARA_TO_SENSOR:
            A5141_camera_para_to_sensor();
            break;

        case SENSOR_FEATURE_SENSOR_TO_CAMERA_PARA:
            A5141_sensor_to_camera_para();
            break;
        case SENSOR_FEATURE_GET_GROUP_COUNT:
            *pFeatureReturnPara32++=A5141_get_sensor_group_count();
            *pFeatureParaLen=4;
            break;
        case SENSOR_FEATURE_GET_GROUP_INFO:
            A5141_get_sensor_group_info(pSensorGroupInfo->GroupIdx, pSensorGroupInfo->GroupNamePtr, &pSensorGroupInfo->ItemCount);
            *pFeatureParaLen=sizeof(MSDK_SENSOR_GROUP_INFO_STRUCT);
            break;
        case SENSOR_FEATURE_GET_ITEM_INFO:
            A5141_get_sensor_item_info(pSensorItemInfo->GroupIdx,pSensorItemInfo->ItemIdx, pSensorItemInfo);
            *pFeatureParaLen=sizeof(MSDK_SENSOR_ITEM_INFO_STRUCT);
            break;

        case SENSOR_FEATURE_SET_ITEM_INFO:
            A5141_set_sensor_item_info(pSensorItemInfo->GroupIdx, pSensorItemInfo->ItemIdx, pSensorItemInfo->ItemValue);
            *pFeatureParaLen=sizeof(MSDK_SENSOR_ITEM_INFO_STRUCT);
            break;

        case SENSOR_FEATURE_GET_ENG_INFO:
            pSensorEngInfo->SensorId = 221;
            pSensorEngInfo->SensorType = CMOS_SENSOR;
            pSensorEngInfo->SensorOutputDataFormat=SENSOR_OUTPUT_FORMAT_RAW_B;
            *pFeatureParaLen=sizeof(MSDK_SENSOR_ENG_INFO_STRUCT);
            break;
        case SENSOR_FEATURE_GET_LENS_DRIVER_ID:
            // get the lens driver ID from EEPROM or just return LENS_DRIVER_ID_DO_NOT_CARE
            // if EEPROM does not exist in camera module.
            *pFeatureReturnPara32=LENS_DRIVER_ID_DO_NOT_CARE;
            *pFeatureParaLen=4;
            break;
        case SENSOR_FEATURE_SET_VIDEO_MODE:
            A5141SetVideoMode(*pFeatureData16);
            break;
        case SENSOR_FEATURE_CHECK_SENSOR_ID:
            A5141GetSensorID(pFeatureReturnPara32); 
            break; 
		case SENSOR_FEATURE_SET_AUTO_FLICKER_MODE:
			A5141SetAutoFlickerMode((BOOL) *pFeatureData16, *(pFeatureData16 + 1));
   			break; 
        default:
            break;
    }
	
    return ERROR_NONE;
}	/* A5141FeatureControl() */


SENSOR_FUNCTION_STRUCT	SensorFuncA5141=
{
    A5141Open,
    A5141GetInfo,
    A5141GetResolution,
    A5141FeatureControl,
    A5141Control,
    A5141Close
};

UINT32 A5141_RAW_SensorInit(PSENSOR_FUNCTION_STRUCT *pfFunc)
{
    /* To Do : Check Sensor status here */
    if (pfFunc!=NULL)
        *pfFunc=&SensorFuncA5141;

    return ERROR_NONE;
}   /* SensorInit() */

/* Copyright Statement:
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein
 * is confidential and proprietary to MediaTek Inc. and/or its licensors.
 * Without the prior written permission of MediaTek inc. and/or its licensors,
 * any reproduction, modification, use or disclosure of MediaTek Software,
 * and information contained herein, in whole or in part, shall be strictly prohibited.
 */
/* MediaTek Inc. (C) 2010. All rights reserved.
 *
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
 * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
 * AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
 * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
 * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
 * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
 * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
 * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
 * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
 * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
 * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
 * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
 * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
 * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 *
 * The following software/firmware and/or related documentation ("MediaTek Software")
 * have been modified by MediaTek Inc. All revisions are subject to any receiver's
 * applicable license agreements with MediaTek Inc.
 */

/*****************************************************************************
*  Copyright Statement:
*  --------------------
*  This software is protected by Copyright and the information contained
*  herein is confidential. The software may not be copied and the information
*  contained herein may not be used or disclosed except with the written
*  permission of MediaTek Inc. (C) 2008
*
*  BY OPENING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
*  THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
*  RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON
*  AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
*  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
*  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
*  NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
*  SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
*  SUPPLIED WITH THE MEDIATEK SOFTWARE, AND BUYER AGREES TO LOOK ONLY TO SUCH
*  THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. MEDIATEK SHALL ALSO
*  NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE RELEASES MADE TO BUYER'S
*  SPECIFICATION OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.
*
*  BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE
*  LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
*  AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
*  OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY BUYER TO
*  MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
*
*  THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE
*  WITH THE LAWS OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF
*  LAWS PRINCIPLES.  ANY DISPUTES, CONTROVERSIES OR CLAIMS ARISING THEREOF AND
*  RELATED THERETO SHALL BE SETTLED BY ARBITRATION IN SAN FRANCISCO, CA, UNDER
*  THE RULES OF THE INTERNATIONAL CHAMBER OF COMMERCE (ICC).
*
*****************************************************************************/
/*****************************************************************************
 *
 * Filename:
 * ---------
 *   A5141_Sensor.h
 *
 * Project:
 * --------
 *   YUSU
 *
 * Description:
 * ------------
 *   Header file of Sensor driver
 *
 *
 * Author:
 * -------
 *   Guangye Yang (mtk70662)
 *
 *============================================================================
 *             HISTORY
 * Below this line, this part is controlled by CC/CQ. DO NOT MODIFY!!
 *------------------------------------------------------------------------------
 * $Revision:$
 * $Modtime:$
 * $Log:$
 *
 * 09 25 2012 jianrong.zhang
 * NULL
 * Sensor settings from Aptina FAE.
 *
 * 09 16 2012 jianrong.zhang
 * NULL
 * Add logs.
 *
 * 09 14 2012 jianrong.zhang
 * NULL
 * Add sensor driver a5141_raw.
 *
 *
 *
 *------------------------------------------------------------------------------
 * Upper this line, this part is controlled by CC/CQ. DO NOT MODIFY!!
 *============================================================================
 ****************************************************************************/
#ifndef _A5141_SENSOR_H
#define _A5141_SENSOR_H

typedef enum group_enum {
    PRE_GAIN=0,
    CMMCLK_CURRENT,
    FRAME_RATE_LIMITATION,
    REGISTER_EDITOR,
    GROUP_TOTAL_NUMS
} FACTORY_GROUP_ENUM;


#define ENGINEER_START_ADDR 10
#define FACTORY_START_ADDR 0


typedef enum register_index
{
	SENSOR_BASEGAIN=FACTORY_START_ADDR,
	PRE_GAIN_R_INDEX,
	PRE_GAIN_Gr_INDEX,
	PRE_GAIN_Gb_INDEX,
	PRE_GAIN_B_INDEX,
	FACTORY_END_ADDR
} FACTORY_REGISTER_INDEX;

typedef enum engineer_index
{
    CMMCLK_CURRENT_INDEX=ENGINEER_START_ADDR,
    ENGINEER_END
} FACTORY_ENGINEER_INDEX;



typedef struct
{
    SENSOR_REG_STRUCT	Reg[ENGINEER_END];
    SENSOR_REG_STRUCT	CCT[FACTORY_END_ADDR];
} SENSOR_DATA_STRUCT, *PSENSOR_DATA_STRUCT;

typedef enum
{
  A5141_MODE_PREVIEW,  
  A5141_MODE_VIDEO_AUTO,
  A5141_MODE_VIDEO_NIGHT,
  A5141_MODE_PV_END,
  A5141_MODE_CAPTURE,
  A5141_MODE_ZSD_PREVIEW,
  A5141_MODE_CAP_END
} A5141_MODE;


#define CURRENT_MAIN_SENSOR                A5141_MICRON
//if define RAW10, MIPI_INTERFACE must be defined
//if MIPI_INTERFACE is marked, RAW10 must be marked too
//#define MIPI_INTERFACE
//#define RAW10

#define A5141_WRITE_ID_1	0x20
#define A5141_READ_ID_1		0x21
#define A5141_WRITE_ID_2	0x30
#define A5141_READ_ID_2		0x31

#define A5141_IMAGE_SENSOR_FULL_HACTIVE		0xA20 //0xA20=2592
#define A5141_IMAGE_SENSOR_FULL_VACTIVE		0x798 //0xA20=1944
#define A5141_IMAGE_SENSOR_PV_HACTIVE		0x510 //0x510=1296
#define A5141_IMAGE_SENSOR_PV_VACTIVE		0x3cc //0x3cc=972

#define A5141_FULL_START_X					6
#define A5141_FULL_START_Y					6
#define A5141_IMAGE_SENSOR_FULL_WIDTH		(A5141_IMAGE_SENSOR_FULL_HACTIVE - 32)  //2592-32 2560
#define A5141_IMAGE_SENSOR_FULL_HEIGHT		(A5141_IMAGE_SENSOR_FULL_VACTIVE - 24)  //1944 -24 1920

#define A5141_PV_START_X					2
#define A5141_PV_START_Y					2
#define A5141_IMAGE_SENSOR_PV_WIDTH			(A5141_IMAGE_SENSOR_PV_HACTIVE - 16)	//1296 -16 1280
#define A5141_IMAGE_SENSOR_PV_HEIGHT		(A5141_IMAGE_SENSOR_PV_VACTIVE - 12)	//972 -12 960


#define A5141_IMAGE_SENSOR_FULL_HBLANKING 	0x450 //0x450=1104
#define A5141_IMAGE_SENSOR_FULL_VBLANKING	0x4D //0x4D=77
#define	A5141_IMAGE_SENSOR_PV_HBLANKING		0x73C //0x73C=1852
#define A5141_IMAGE_SENSOR_PV_VBLANKING		0xDC //0xDC=220


#define A5141_FULL_PERIOD_PIXEL_NUMS		(A5141_IMAGE_SENSOR_FULL_HACTIVE + A5141_IMAGE_SENSOR_FULL_HBLANKING)  //2592+200= 3696
#define A5141_FULL_PERIOD_LINE_NUMS			(A5141_IMAGE_SENSOR_FULL_VACTIVE + A5141_IMAGE_SENSOR_FULL_VBLANKING)  //1944+150 = 2021
#define A5141_PV_PERIOD_PIXEL_NUMS			(A5141_IMAGE_SENSOR_PV_HACTIVE + A5141_IMAGE_SENSOR_PV_HBLANKING)	   //1296 +1852 =3148
#define A5141_PV_PERIOD_LINE_NUMS			(A5141_IMAGE_SENSOR_PV_VACTIVE + A5141_IMAGE_SENSOR_PV_VBLANKING)    //972 + 128 =1192


#define A5141_FRAME_RATE_UNIT		10
#define A5141_set_frame_rate(a) 	(a * A5141_FRAME_RATE_UNIT)
#define A5141_1X_ZOOM_IN_CAPTURE_FRAME	9


/* SENSOR PRIVATE STRUCT */
typedef struct A5141_SENSOR_STRUCT
{
	kal_uint8 i2c_write_id;
	kal_uint8 i2c_read_id;
	kal_uint16 preview_vt_clk;
	kal_uint16 capture_vt_clk;
	kal_uint16 i16current_frame_length;
	kal_uint16 u16ImgMirror;
}A5141_SENSOR_STRUCT;


/* FRAME RATE */
#define A5141_FPS(x)                          ((kal_uint32)(10 * (x)))

#endif /* _A5141_SENSOR_H */

/* Copyright Statement:
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein
 * is confidential and proprietary to MediaTek Inc. and/or its licensors.
 * Without the prior written permission of MediaTek inc. and/or its licensors,
 * any reproduction, modification, use or disclosure of MediaTek Software,
 * and information contained herein, in whole or in part, shall be strictly prohibited.
 */
/* MediaTek Inc. (C) 2010. All rights reserved.
 *
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
 * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
 * AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
 * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
 * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
 * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
 * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
 * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
 * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
 * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
 * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
 * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
 * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
 * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 */

/*****************************************************************************
*  Copyright Statement:
*  --------------------
*  This software is protected by Copyright and the information contained
*  herein is confidential. The software may not be copied and the information
*  contained herein may not be used or disclosed except with the written
*  permission of MediaTek Inc. (C) 2008
*
*  BY OPENING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
*  THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
*  RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON
*  AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
*  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
*  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
*  NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
*  SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
*  SUPPLIED WITH THE MEDIATEK SOFTWARE, AND BUYER AGREES TO LOOK ONLY TO SUCH
*  THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. MEDIATEK SHALL ALSO
*  NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE RELEASES MADE TO BUYER'S
*  SPECIFICATION OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.
*
*  BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE
*  LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
*  AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
*  OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY BUYER TO
*  MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
*
*  THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE
*  WITH THE LAWS OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF
*  LAWS PRINCIPLES.  ANY DISPUTES, CONTROVERSIES OR CLAIMS ARISING THEREOF AND
*  RELATED THERETO SHALL BE SETTLED BY ARBITRATION IN SAN FRANCISCO, CA, UNDER
*  THE RULES OF THE INTERNATIONAL CHAMBER OF COMMERCE (ICC).
*
*****************************************************************************/
/*****************************************************************************
 *
 * Filename:
 * ---------
 *   sensor.h
 *
 * Project:
 * --------
 *   DUMA
 *
 * Description:
 * ------------
 *   Header file of camera customized parameters.
 *
 *
 * Author:
 * -------
 *   PC Huang (MTK02204)
 *
 *============================================================================
 *             HISTORY
 * Below this line, this part is controlled by CC/CQ. DO NOT MODIFY!!
 *------------------------------------------------------------------------------
 * $Revision:$
 * $Modtime:$
 * $Log:$
 *
 * 09 14 2012 jianrong.zhang
 * NULL
 * Add sensor driver a5141_raw.
 *
 * Feb 9 2010 mtk80461
 * [DUMA00154355] JPeg Orientation feature check in
 *
 *
 * Oct 27 2009 mtk02204
 * [DUMA00015869] [Camera Driver] Modifiy camera related drivers for dual/backup sensor/lens drivers.
 *
 *
 * Sep 24 2009 mtk02204
 * [DUMA00134387] [LTK][GW616][Camera]4040 Camera:Camera Quality Test failed.
 *
 *
 * Jul 8 2009 mtk02204
 * [DUMA00008051] [Camera Driver] Add drivers for camera high ISO binning mode.
 *
 *
 * Jul 8 2009 mtk02204
 * [DUMA00008051] [Camera Driver] Add drivers for camera high ISO binning mode.
 *
 *
 * Jul 7 2009 mtk02204
 * [DUMA00008051] [Camera Driver] Add drivers for camera high ISO binning mode.
 *
 *
 * Jun 6 2009 mtk02204
 * [DUMA00119628] MTK camera_recorded video only contain audio but no video with Jean effect
 *
 *
 * Apr 10 2009 mtk02204
 * [DUMA00004178] [Camera] Check in for MTK camera integration
 *
 *
 * Mar 13 2009 mtk02204
 * [DUMA00001084] First Check in of MT6516 multimedia drivers
 *
 *
 * Mar 2 2009 mtk02204
 * [DUMA00001084] First Check in of MT6516 multimedia drivers
 *
 *
 * Feb 6 2009 mtk02204
 * [DUMA00001084] First Check in of MT6516 multimedia drivers
 *
 *
 *------------------------------------------------------------------------------
 * Upper this line, this part is controlled by CC/CQ. DO NOT MODIFY!!
 *============================================================================
 ****************************************************************************/

#ifndef __CAMERA_CUSTOMIZED_H
#define __CAMERA_CUSTOMIZED_H

// the angle between handset and sensor placement in clockwise, should be one of 0, 90, 270
#define MAIN_SENSOR_ORIENTATION_ANGLE  90
#define SUB_SENSOR_ORIENTATION_ANGLE  0    // do not care if the sub sensor does not exist


// First, we think you hold the cell phone vertical.
// Second, we suppose the direction of upward is 0
// Third, it is 90, 180, 270 in clockwise
// here we define the main sensor and sub sensor angles to deal with the jpeg orientation
#define MAIN_SENSOR_TO_PHONE_ANGLE  90
#define SUB_SENSOR_TO_PHONE_ANGLE  0


#define CAM_SIZE_QVGA_WIDTH   320
#define CAM_SIZE_QVGA_HEIGHT   240
#define CAM_SIZE_VGA_WIDTH     640
#define CAM_SIZE_VGA_HEIGHT   480
#define CAM_SIZE_05M_WIDTH     800
#define CAM_SIZE_05M_HEIGHT   600
#define CAM_SIZE_1M_WIDTH     1280
#define CAM_SIZE_1M_HEIGHT     960
#define CAM_SIZE_2M_WIDTH     1600
#define CAM_SIZE_2M_HEIGHT     1200
#define CAM_SIZE_3M_WIDTH     2048
#define CAM_SIZE_3M_HEIGHT     1536
#define CAM_SIZE_5M_WIDTH     2592
#define CAM_SIZE_5M_HEIGHT     1944

// for main sensor
#define MAIN_NUM_OF_PREVIEW_RESOLUTION 3
#define MAIN_NUM_OF_VIDEO_RESOLUTION 4
#define MAIN_NUM_OF_STILL_RESOLUTION 7
#define MAIN_VIDEO_RESOLUTION_PROFILE    {{176,144},{320,240},{640,480},{720,480}}
#define MAIN_PREVIEW_RESOLUTION_PROFILE  {{232,174},{320,240},{240,320}}
#define MAIN_STILL_RESOLUTION_PROFILE    {{CAM_SIZE_QVGA_WIDTH,CAM_SIZE_QVGA_HEIGHT}, \
                   {CAM_SIZE_VGA_WIDTH,CAM_SIZE_VGA_HEIGHT}, \
                   {CAM_SIZE_05M_WIDTH,CAM_SIZE_05M_HEIGHT}, \
                   {CAM_SIZE_1M_WIDTH,CAM_SIZE_1M_HEIGHT}, \
                   {CAM_SIZE_2M_WIDTH,CAM_SIZE_2M_HEIGHT}, \
                   {CAM_SIZE_3M_WIDTH,CAM_SIZE_3M_HEIGHT}, \
                   {CAM_SIZE_5M_WIDTH,CAM_SIZE_5M_HEIGHT}}

// if sub sensor does not exist, set all the parameters as 0
#define SUB_NUM_OF_PREVIEW_RESOLUTION 0
#define SUB_NUM_OF_VIDEO_RESOLUTION 0
#define SUB_NUM_OF_STILL_RESOLUTION 0
#define SUB_VIDEO_RESOLUTION_PROFILE    {{0,0}}
#define SUB_PREVIEW_RESOLUTION_PROFILE    {{0,0}}
#define SUB_STILL_RESOLUTION_PROFILE    {{0,0}}

//#define NUM_OF_PREVIEW_RESOLUTION   max(MAIN_NUM_OF_PREVIEW_RESOLUTION,SUB_NUM_OF_PREVIEW_RESOLUTION)
//#define NUM_OF_VIDEO_RESOLUTION   max(MAIN_NUM_OF_VIDEO_RESOLUTION,SUB_NUM_OF_VIDEO_RESOLUTION)
//#define NUM_OF_STILL_RESOLUTION   max(MAIN_NUM_OF_STILL_RESOLUTION,SUB_NUM_OF_STILL_RESOLUTION)

#define NUM_OF_VIDEO_STREAM_BUFF  8  // Maximun is 8
#endif

/* Copyright Statement:
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein
 * is confidential and proprietary to MediaTek Inc. and/or its licensors.
 * Without the prior written permission of MediaTek inc. and/or its licensors,
 * any reproduction, modification, use or disclosure of MediaTek Software,
 * and information contained herein, in whole or in part, shall be strictly prohibited.
 */
/* MediaTek Inc. (C) 2010. All rights reserved.
 *
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
 * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
 * AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
 * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
 * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
 * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
 * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
 * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
 * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
 * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
 * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
 * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
 * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
 * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 *
 * The following software/firmware and/or related documentation ("MediaTek Software")
 * have been modified by MediaTek Inc. All revisions are subject to any receiver's
 * applicable license agreements with MediaTek Inc.
 */

/*****************************************************************************
*  Copyright Statement:
*  --------------------
*  This software is protected by Copyright and the information contained
*  herein is confidential. The software may not be copied and the information
*  contained herein may not be used or disclosed except with the written
*  permission of MediaTek Inc. (C) 2008
*
*  BY OPENING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
*  THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
*  RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON
*  AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
*  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
*  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
*  NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
*  SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
*  SUPPLIED WITH THE MEDIATEK SOFTWARE, AND BUYER AGREES TO LOOK ONLY TO SUCH
*  THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. MEDIATEK SHALL ALSO
*  NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE RELEASES MADE TO BUYER'S
*  SPECIFICATION OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.
*
*  BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE
*  LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
*  AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
*  OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY BUYER TO
*  MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
*
*  THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE
*  WITH THE LAWS OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF
*  LAWS PRINCIPLES.  ANY DISPUTES, CONTROVERSIES OR CLAIMS ARISING THEREOF AND
*  RELATED THERETO SHALL BE SETTLED BY ARBITRATION IN SAN FRANCISCO, CA, UNDER
*  THE RULES OF THE INTERNATIONAL CHAMBER OF COMMERCE (ICC).
*
*****************************************************************************/
/*****************************************************************************
 *
 * Filename:
 * ---------
 *   camera_sensor_para.h
 *
 * Project:
 * --------
 *   DUMA
 *
 * Description:
 * ------------
 *   Header file of Sensor tuning parameters that should be generated by CCT
 *
 *
 * Author:
 * -------
 *
 *============================================================================
 *             HISTORY
 * Below this line, this part is controlled by CC/CQ. DO NOT MODIFY!!
 *------------------------------------------------------------------------------
 * $Revision:$
 * $Modtime:$
 * $Log:$
 *
 * 09 14 2012 jianrong.zhang
 * NULL
 * Add sensor driver a5141_raw.
 *
 * Apr 7 2009 mtk02204
 * [DUMA00004012] [Camera] Restructure and rename camera related custom folders and folder name of came
 * 
 *
 * Feb 24 2009 mtk02204
 * [DUMA00001084] First Check in of MT6516 multimedia drivers
 * 
 *
 *------------------------------------------------------------------------------
 * Upper this line, this part is controlled by CC/CQ. DO NOT MODIFY!!
 *============================================================================
 ****************************************************************************/
/* SENSOR FULL SIZE */
#ifndef __CAMERA_SENSOR_PARA_H
#define __CAMERA_SENSOR_PARA_H

#define CAMERA_SENSOR_REG_DEFAULT_VALUE  \
    /* ARRAY: SENSOR.reg[11] */\
    {\
        /* STRUCT: SENSOR.reg[0] */\
        {\
            /* SENSOR.reg[0].addr */ 0xFFFFFFFF, /* SENSOR.reg[0].para */ 0xFFFFFFFF\
        },\
        /* STRUCT: SENSOR.reg[1] */\
        {\
            /* SENSOR.reg[1].addr */ 0xFFFFFFFF, /* SENSOR.reg[1].para */ 0xFFFFFFFF\
        },\
        /* STRUCT: SENSOR.reg[2] */\
        {\
            /* SENSOR.reg[2].addr */ 0xFFFFFFFF, /* SENSOR.reg[2].para */ 0xFFFFFFFF\
        },\
        /* STRUCT: SENSOR.reg[3] */\
        {\
            /* SENSOR.reg[3].addr */ 0xFFFFFFFF, /* SENSOR.reg[3].para */ 0xFFFFFFFF\
        },\
        /* STRUCT: SENSOR.reg[4] */\
        {\
            /* SENSOR.reg[4].addr */ 0xFFFFFFFF, /* SENSOR.reg[4].para */ 0xFFFFFFFF\
        },\
        /* STRUCT: SENSOR.reg[5] */\
        {\
            /* SENSOR.reg[5].addr */ 0xFFFFFFFF, /* SENSOR.reg[5].para */ 0xFFFFFFFF\
        },\
        /* STRUCT: SENSOR.reg[6] */\
        {\
            /* SENSOR.reg[6].addr */ 0xFFFFFFFF, /* SENSOR.reg[6].para */ 0xFFFFFFFF\
        },\
        /* STRUCT: SENSOR.reg[7] */\
        {\
            /* SENSOR.reg[7].addr */ 0xFFFFFFFF, /* SENSOR.reg[7].para */ 0xFFFFFFFF\
        },\
        /* STRUCT: SENSOR.reg[8] */\
        {\
            /* SENSOR.reg[8].addr */ 0xFFFFFFFF, /* SENSOR.reg[8].para */ 0xFFFFFFFF\
        },\
        /* STRUCT: SENSOR.reg[9] */\
        {\
            /* SENSOR.reg[9].addr */ 0xFFFFFFFF, /* SENSOR.reg[9].para */ 0xFFFFFFFF\
        },\
        /* STRUCT: SENSOR.reg[10] */\
        {\
            /* SENSOR.reg[10].addr */ 0xFFFFFFFF, /* SENSOR.reg[10].para */ 0xFFFFFFFF\
        }\
}

#define CAMERA_SENSOR_CCT_DEFAULT_VALUE {{ 0x0204, 0x08 } ,{ 0x0208, 0x0008 } ,{ 0x0206, 0x0008 } ,{ 0x020C, 0x0008 } ,{ 0x020A, 0x0008 }}
//gobal gain , Red ,  GreenR ,  GreenB , Blue
#endif /* __CAMERA_SENSOR_PARA_H */

/* Copyright Statement:
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein
 * is confidential and proprietary to MediaTek Inc. and/or its licensors.
 * Without the prior written permission of MediaTek inc. and/or its licensors,
 * any reproduction, modification, use or disclosure of MediaTek Software,
 * and information contained herein, in whole or in part, shall be strictly prohibited.
 */
/* MediaTek Inc. (C) 2010. All rights reserved.
 *
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
 * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
 * AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
 * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
 * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
 * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
 * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
 * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
 * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
 * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
 * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
 * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
 * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
 * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 *
 * The following software/firmware and/or related documentation ("MediaTek Software")
 * have been modified by MediaTek Inc. All revisions are subject to any receiver's
 * applicable license agreements with MediaTek Inc.
 */

/*****************************************************************************
*  Copyright Statement:
*  --------------------
*  This software is protected by Copyright and the information contained
*  herein is confidential. The software may not be copied and the information
*  contained herein may not be used or disclosed except with the written
*  permission of MediaTek Inc. (C) 2008
*
*  BY OPENING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
*  THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
*  RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON
*  AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
*  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
*  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
*  NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
*  SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
*  SUPPLIED WITH THE MEDIATEK SOFTWARE, AND BUYER AGREES TO LOOK ONLY TO SUCH
*  THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. MEDIATEK SHALL ALSO
*  NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE RELEASES MADE TO BUYER'S
*  SPECIFICATION OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.
*
*  BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE
*  LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
*  AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
*  OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY BUYER TO
*  MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
*
*  THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE
*  WITH THE LAWS OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF
*  LAWS PRINCIPLES.  ANY DISPUTES, CONTROVERSIES OR CLAIMS ARISING THEREOF AND
*  RELATED THERETO SHALL BE SETTLED BY ARBITRATION IN SAN FRANCISCO, CA, UNDER
*  THE RULES OF THE INTERNATIONAL CHAMBER OF COMMERCE (ICC).
*
*****************************************************************************/
/*****************************************************************************
 *
 * Filename:
 * ---------
 *   sensor.c
 *
 * Project:
 * --------
 *   DUMA
 *
 * Description:
 * ------------
 *   Source code of Sensor driver
 *
 *
 * Author:
 * -------
 *   PC Huang (MTK02204)
 *
 *============================================================================
 *             HISTORY
 * Below this line, this part is controlled by CC/CQ. DO NOT MODIFY!!
 *------------------------------------------------------------------------------
 * $Revision:$
 * $Modtime:$
 * $Log:$
 *
 * 07 11 2011 jun.pei
 * [ALPS00059464] hi704 sensor check in
 * .
 *
 *
 *------------------------------------------------------------------------------
 * Upper this line, this part is controlled by CC/CQ. DO NOT MODIFY!!
 *============================================================================
 ****************************************************************************/
#include <linux/videodev2.h>
#include <linux/i2c.h>
#include <linux/platform_device.h>
#include <linux/delay.h>
#include <linux/cdev.h>
#include <linux/uaccess.h>
#include <linux/fs.h>
#include <asm/atomic.h>
//#include <mach/mt6516_pll.h>

#include "kd_camera_hw.h"
#include "kd_imgsensor.h"
#include "kd_imgsensor_define.h"
#include "kd_imgsensor_errcode.h"
#include "kd_camera_feature.h"

#include "hi704yuv_Sensor.h"
#include "hi704yuv_Camera_Sensor_para.h"
#include "hi704yuv_CameraCustomized.h"

#define HI704YUV_DEBUG
#ifdef HI704YUV_DEBUG
#define SENSORDB printk
#else
#define SENSORDB(x,...)
#endif

#if 0
extern int iReadReg(u16 a_u2Addr , u8 * a_puBuff , u16 i2cId);
extern int iWriteReg(u16 a_u2Addr , u32 a_u4Data , u32 a_u4Bytes , u16 i2cId);
static int sensor_id_fail = 0; 
#define HI704_write_cmos_sensor(addr, para) iWriteReg((u16) addr , (u32) para ,1,HI704_WRITE_ID)
#define HI704_write_cmos_sensor_2(addr, para, bytes) iWriteReg((u16) addr , (u32) para ,bytes,HI704_WRITE_ID)
kal_uint16 HI704_read_cmos_sensor(kal_uint32 addr)
{
kal_uint16 get_byte=0;
    iReadReg((u16) addr ,(u8*)&get_byte,HI704_WRITE_ID);
    return get_byte;
}

#endif
extern int iReadRegI2C(u8 *a_pSendData , u16 a_sizeSendData, u8 * a_pRecvData, u16 a_sizeRecvData, u16 i2cId);
extern int iWriteRegI2C(u8 *a_pSendData , u16 a_sizeSendData, u16 i2cId);
kal_uint16 HI704_write_cmos_sensor(kal_uint8 addr, kal_uint8 para)
{
    char puSendCmd[2] = {(char)(addr & 0xFF) , (char)(para & 0xFF)};
	
	iWriteRegI2C(puSendCmd , 2,HI704_WRITE_ID);

}
kal_uint16 HI704_read_cmos_sensor(kal_uint8 addr)
{
	kal_uint16 get_byte=0;
    char puSendCmd = { (char)(addr & 0xFF) };
	iReadRegI2C(&puSendCmd , 1, (u8*)&get_byte,1,HI704_WRITE_ID);
	
    return get_byte;
}


/*******************************************************************************
* // Adapter for Winmo typedef 
********************************************************************************/
#define WINMO_USE 0

#define Sleep(ms) mdelay(ms)
#define RETAILMSG(x,...)
#define TEXT


/*******************************************************************************
* follow is define by jun
********************************************************************************/
MSDK_SENSOR_CONFIG_STRUCT HI704SensorConfigData;

static struct HI704_sensor_STRUCT HI704_sensor;
static kal_uint32 HI704_zoom_factor = 0; 
static int sensor_id_fail = 0;	
const HI704_SENSOR_INIT_INFO HI704_Initial_Setting_Info[] =
{
#ifdef HQ_PROJECT_A51
    {0x01, 0xf1},
    {0x01, 0xf3},
    {0x01, 0xf1},

    {0x03, 0x20},
    {0x10, 0x1c},
    {0x03, 0x22},
    {0x10, 0x6a},
                                                         
    //page 00
    {0x03, 0x00},
    {0x11, 0x90},
    {0x12, 0x04},
    {0x20, 0x00},
    {0x21, 0x04},
    {0x22, 0x00},
    {0x23, 0x04},
    {0x24, 0x01},
    {0x25, 0xe0},
    {0x26, 0x02},
    {0x27, 0x80},

    {0x40, 0x01}, //Hblank 328
    {0x41, 0x58}, 
    {0x42, 0x00}, //Vblank 20
    {0x43, 0x14}, 


    //{0x50, 0x01}, //xumin 
    //BLC
    {0x80, 0x2e},
    {0x81, 0x7e},
    {0x82, 0x90},
    {0x83, 0x30},
    {0x84, 0x2c},
    {0x85, 0x4b},
    {0x89, 0x48},
    {0x90, 0x0b},
    {0x91, 0x0b},
    {0x92, 0x48},
    {0x93, 0x48},
    {0x98, 0x38},
    {0x99, 0x43},
    {0xa0, 0x00},

    {0xa8, 0x43},

    //Page 2
    {0x03, 0x02},
    {0x13, 0x40},
    {0x14, 0x04},
    {0x1a, 0x00},
    {0x1b, 0x08},
    {0x20, 0x33},
    {0x21, 0xaa},
    {0x22, 0xa7},
    {0x23, 0x32},
    {0x3b, 0x48},
    {0x50, 0x21},
    {0x52, 0xa2},
    {0x53, 0x0a},
    {0x54, 0x30},
    {0x55, 0x10},
    {0x56, 0x0c},
    {0x59, 0x0F},

    {0x60, 0xca},
    {0x61, 0xdb},
    {0x62, 0xca},
    {0x63, 0xda},
    {0x64, 0xca},
    {0x65, 0xda},
    {0x72, 0xcb},
    {0x73, 0xd8},
    {0x74, 0xcb},
    {0x75, 0xd8},
    {0x80, 0x02},
    {0x81, 0xbd},
    {0x82, 0x24},
    {0x83, 0x3e},
    {0x84, 0x24},
    {0x85, 0x3e},
    {0x92, 0x72},
    {0x93, 0x8c},
    {0x94, 0x72},
    {0x95, 0x8c},
    {0xa0, 0x03},
    {0xa1, 0xbb},
    {0xa4, 0xbb},
    {0xa5, 0x03},
    {0xa8, 0x44},
    {0xa9, 0x6a},
    {0xaa, 0x92},
    {0xab, 0xb7},
    {0xb8, 0xc9},
    {0xb9, 0xd0},
    {0xbc, 0x20},
    {0xbd, 0x28},
    {0xc0, 0xDE},
    {0xc1, 0xEC},
    {0xc2, 0xDE},
    {0xc3, 0xEC},
    {0xc4, 0xE0},
    {0xc5, 0xEA},
    {0xc6, 0xE0},
    {0xc7, 0xEa},

    {0xc8, 0xe1},
    {0xc9, 0xe8},
    {0xca, 0xe1},
    {0xcb, 0xe8},
    {0xcc, 0xe2},
    {0xcd, 0xe7},
    {0xce, 0xe2},
    {0xcf, 0xe7},
    {0xd0, 0xc8},
    {0xd1, 0xef},

    //Page 10
    {0x03, 0x10},
    {0x10, 0x02},
    {0x11, 0x43},
    {0x12, 0x30},
    {0x40, 0x00},  
    {0x41, 0x00},

    {0x48, 0xa4},
    {0x50, 0x48}, 

    {0x60, 0x7f},
    {0x61, 0x00},

    {0x62, 0x7c},
    {0x63, 0x7c},

    {0x64, 0x48},
    {0x66, 0x90},
    {0x67, 0x34},

    //LPF
    {0x03, 0x11},
    {0x10, 0x25},
    {0x11, 0x1f},
    {0x20, 0x00},
    {0x21, 0x38},
    {0x23, 0x0a},
    {0x60, 0x10},

    {0x61, 0x82},
    {0x62, 0x00},
    {0x63, 0x83},
    {0x64, 0x80},	

    {0x67, 0xF0},	
    {0x68, 0x30},	
    {0x69, 0x10},	

    //2D
    {0x03, 0x12},
    {0x40, 0xe9},	
    {0x41, 0x09},	
    {0x50, 0x18},	
    {0x51, 0x24},	
    {0x70, 0x1f},	
    {0x71, 0x00},	
    {0x72, 0x00},	
    {0x73, 0x00},	
    {0x74, 0x10},	
    {0x75, 0x10},	
    {0x76, 0x20},	
    {0x77, 0x80},	
    {0x78, 0x88},	
    {0x79, 0x18},	
    {0xb0, 0x7d},  

    //Edge
    {0x03, 0x13},
    {0x10, 0x01},	
    {0x11, 0x89},	
    {0x12, 0x14},	
    {0x13, 0x19},	
    {0x14, 0x08},	

    {0x20, 0x08},
    {0x21, 0x06},

    {0x23, 0x30},	
    {0x24, 0x33},	
    {0x25, 0x08},	
    {0x26, 0x18},	
    {0x27, 0x00},	
    {0x28, 0x08},	
    {0x29, 0x50},	
    {0x2a, 0xe0},	
    {0x2b, 0x10},	
    {0x2c, 0x28},	
    {0x2d, 0x40},	
    {0x2e, 0x00},	
    {0x2f, 0x00},	
    {0x30, 0x11},	                        
    {0x80, 0x03},	
    {0x81, 0x07},	

    {0x90, 0x05},  
    {0x91, 0x03},	

    {0x92, 0x00},	
    {0x93, 0x20},	
    {0x94, 0x42},	
    {0x95, 0x60},	

    //Shading
    {0x03, 0x14},
    {0x10, 0x01},
    {0x20, 0x80},
    {0x21, 0x80}, 

    {0x22, 0x60}, 
    {0x23, 0x4d}, 
    {0x24, 0x44},

    //Page 15 CMC
    {0x03, 0x15}, 
    {0x10, 0x03},

    {0x14, 0x3c},
    {0x16, 0x2c},
    {0x17, 0x2f},

    {0x30, 0xcb},
    {0x31, 0x61},
    {0x32, 0x16},
    {0x33, 0x23},
    {0x34, 0xce},
    {0x35, 0x2b},
    {0x36, 0x01},
    {0x37, 0x34},
    {0x38, 0x75},

    {0x40, 0x87},
    {0x41, 0x18},
    {0x42, 0x91},
    {0x43, 0x94},
    {0x44, 0x9f},
    {0x45, 0x33},
    {0x46, 0x00},
    {0x47, 0x94},
    {0x48, 0x14},
#if 1
    {0x03, 0x16},
    {0x10, 0x01},
    {0x30, 0x00},
    {0x31, 0x0a},
    {0x32, 0x1b},
    {0x33, 0x2e},
    {0x34, 0x5c},
    {0x35, 0x79},
    {0x36, 0x95},
    {0x37, 0xa4},
    {0x38, 0xb1},
    {0x39, 0xbd},
    {0x3a, 0xc8},
    {0x3b, 0xd9},
    {0x3c, 0xe8},
    {0x3d, 0xf5},
    {0x3e, 0xff},
 
#else


    {0x03, 	0x16},
    {0x30,	0x00},
    {0x31,	0x0d},
    {0x32,	0x16},
    {0x33,	0x25},
    {0x34,	0x3f},
    {0x35,	0x57},
    {0x36,	0x6e},
    {0x37,	0x82},
    {0x38,	0x95},
    {0x39,	0xa7},
    {0x3a,	0xb6},
    {0x3b,	0xd0},
    {0x3c,	0xe5},
    {0x3d,	0xf4},
    {0x3e,	0xff},

#endif
    //page 17 
    {0x03, 0x17},

    //page 20 
    {0x03, 0x20},
    {0x10, 0x0c},
    {0x11, 0x04},

    {0x20, 0x01},
    {0x28, 0x27},
    {0x29, 0xa1},

    {0x2a, 0xf0},
    {0x2b, 0x34},
    {0x2c, 0x2b},

    {0x30, 0xf8},

    {0x39, 0x22},
    {0x3a, 0xde},
    {0x3b, 0x22}, 
    {0x3c, 0xde},

    {0x60, 0xb5},
    {0x68, 0x3c},
    {0x69, 0x64},
    {0x6A, 0x28},
    {0x6B, 0xc8},

    {0x70, 0x4a},

    {0x76, 0x22},
    {0x77, 0x02},

    {0x78, 0x12},
    {0x79, 0x26},
    {0x7a, 0x23},

    {0x7c, 0x1c},
    {0x7d, 0x22},

    {0x83, 0x00}, //EXP Normal 10 fps 
    {0x84, 0xbe}, 
    {0x85, 0x6e}, 

    {0x86, 0x00}, //EXPMin 6605.69 fps
    {0x87, 0xfa}, 

    {0x88, 0x03}, //EXP Max 10 fps 
    {0x89, 0x78}, 
    {0x8a, 0xac}, 

    //{0x91, 0x01}, //EXP Max 10 fps 
    //{0x92, 0x33}, 
    //{0x93, 0x80}, 



    {0x8B, 0x3f}, //EXP100 
    {0x8C, 0x7a}, 
    {0x8D, 0x34}, //EXP120 
    {0x8E, 0xbc}, 

    {0x9c, 0x06}, //EXP Limit 943.67 fps 
    {0x9d, 0xd6}, 
    {0x9e, 0x00}, //EXP Unit 
    {0x9f, 0xfa}, 

    {0x94, 0x01}, 
    {0x95, 0xb7},
    {0x96, 0x74},

    {0x98, 0x8C},
    {0x99, 0x23},

    {0xb1, 0x14},
    {0xb2, 0x50},// 50
    {0xb4, 0x14},
    {0xb5, 0x38},
    {0xb6, 0x26},
    {0xb7, 0x20},
    {0xb8, 0x1d},
    {0xb9, 0x1b},
    {0xba, 0x1a},
    {0xbb, 0x19},
    {0xbc, 0x19},
    {0xbd, 0x18},

    {0xc0, 0x1a},
    {0xc3, 0xd8},// 88  
    {0xc4, 0xd8},// 88

    //page 22
    {0x03, 0x22},//auto wHIte balance
    {0x10, 0xe2},
    {0x11, 0x26},
    {0x21, 0x40},

    {0x30, 0x81},// 80
    {0x31, 0x7f},// 80
    {0x38, 0x12},
    {0x39, 0x33},
    {0x40, 0xf0},
    {0x41, 0x33},// 33
    {0x42, 0x33},// 33
    {0x43, 0xf3},
    {0x44, 0x88},//88
    {0x45, 0x66},//66
    {0x46, 0x02},

    {0x80, 0x3a},// 45
    {0x81, 0x20},
    {0x82, 0x40},

    {0x83, 0x52},
    {0x84, 0x18},
    {0x85, 0x5e},
    {0x86, 0x35},

    {0x87, 0x42},
    {0x88, 0x38},
    {0x89, 0x3e},
    {0x8a, 0x29},
    {0x8b, 0x02}, //OUT TH
    {0x8d, 0x22},
    {0x8e, 0x71},

    {0x8f, 0x5c},
    {0x90, 0x59},
    {0x91, 0x55},
    {0x92, 0x50},
    {0x93, 0x48},
    {0x94, 0x3e},
    {0x95, 0x37},
    {0x96, 0x30},
    {0x97, 0x29},
    {0x98, 0x26},
    {0x99, 0x29},
    {0x9a, 0x26},
    {0x9b, 0x08},

    {0x03, 0x22},
    {0x10, 0xea},//0xfb

    {0x03, 0x20},
    {0x10, 0x9c},

    {0x01, 0xf0},
    {0xff,0xff}

#else
	{0x01, 0xf1},
	{0x01, 0xf3},
	{0x01, 0xf1},

	{0x03, 0x00},
	{0x10, 0x00},
	{0x11, 0x93},
	{0x12, 0x04},     //0x00_20120214
	{0x20, 0x00},
	{0x21, 0x04},
	{0x22, 0x00},
	{0x23, 0x04},

	{0x40, 0x01},
	{0x41, 0x58},

	{0x42, 0x01}, //max fps 15
	{0x43, 0x13},   //0x14_20120214
	//BLC
	{0x80, 0x2e},
	{0x81, 0x7e},
	{0x82, 0x90},
	{0x83, 0x30},
	{0x84, 0x20},
	{0x85, 0x0b},
	{0x89, 0x48},//BLC hold
	{0x90, 0x0b},//TIME_IN
	{0x91, 0x0b},//TIME_OUT

	{0x92, 0x48},//AG_IN
	{0x93, 0x48},//AG_OUT
	{0x98, 0x38},
	{0x99, 0x40}, //Out BLC 		 //0x48_20110812
	{0xa0, 0x40}, //Dark BLC		//0x48_20110812
	{0xa8, 0x40}, //Normal BLC	   //0x48_20110812

	//Page 2  Last Update 10_03_12
	{0x03, 0x02},
	{0x20, 0x33},
	{0x21, 0x77},
	{0x22, 0xa7},
	{0x23, 0x32},
	{0x52, 0xa2},
	{0x53, 0x0a},
	{0x55, 0x18},
	{0x56, 0x0c},
	{0x60, 0xca},
	{0x61, 0xdb},
	{0x62, 0xca},
	{0x63, 0xda},
	{0x64, 0xca},
	{0x65, 0xda},

	{0x72, 0xcb},
	{0x73, 0xd8},
	{0x74, 0xcb},
	{0x75, 0xd8},
	{0x80, 0x02},
	{0x81, 0xbd},
	{0x82, 0x24},
	{0x83, 0x3e},
	{0x84, 0x24},
	{0x85, 0x3e},
	{0x92, 0x72},
	{0x93, 0x8c},
	{0x94, 0x72},
	{0x95, 0x8c},
	{0xa0, 0x03},
	{0xa1, 0xbb},
	{0xa5, 0x03},
	{0xa4, 0xbb},
	{0xa8, 0x44},
	{0xa9, 0x6a},
	{0xaa, 0x92},
	{0xab, 0xb7},
	{0xb8, 0xc9},
	{0xb9, 0xd0},
	{0xbc, 0x20},
	{0xbd, 0x28},
	{0xc0, 0xe0},
	{0xc1, 0xea},
	{0xc2, 0xe0},
	{0xc3, 0xea},
	{0xc4, 0xe1},
	{0xc5, 0xe9},
	{0xc6, 0xe1},
	{0xc7, 0xe9},
	{0xc8, 0xe1},
	{0xc9, 0xe8},
	{0xca, 0xe1},
	{0xcb, 0xe8},
	{0xcc, 0xe2},
	{0xcd, 0xe7},
	{0xce, 0xe2},
	{0xcf, 0xe7},
	{0xd0, 0xc8},
	{0xd1, 0xef},


	//Page 10
	{0x03, 0x10},
	{0x10, 0x02}, //03, //ISPCTL1, YUV ORDER(FIX)
	{0x11, 0x43},
	{0x12, 0x30}, //Y offet, dy offseet enable
	{0x40, 0x10},
	{0x41, 0x10},                   //0x10_20110812
	{0x48, 0x98}, //Contrast    //0x80_20110812  //0xa8_20120214
	{0x50, 0x48}, //AGBRT

	{0x60, 0x7f},
	{0x61, 0x00}, //Use default
	{0x62, 0x90}, //SATB  (1.4x)   //0x98_20120214
	{0x63, 0xa0}, //SATR  (1.2x)   //0x98_20120214
	{0x64, 0x48}, //AGSAT
	{0x66, 0x90}, //wht_th2
	{0x67, 0x34}, //wht_gain  Dark (0.4x}, Normal (0.75x)//36

	//LPF
	{0x03, 0x11},
	{0x10, 0x25},	//LPF_CTL1 //0x01
	{0x11, 0x1f},	//Test Setting
	{0x20, 0x00},	//LPF_AUTO_CTL
	{0x21, 0x38},	//LPF_PGA_TH
	{0x23, 0x10},	//LPF_TIME_TH
	{0x60, 0x10},	//ZARA_SIGMA_TH //40->10	  //0x0a_20110812
	{0x61, 0x82},
	{0x62, 0x00},	//ZARA_HLVL_CTL
	{0x63, 0x80},	//ZARA_LLVL_CTL  
	{0x64, 0x83},	//ZARA_DY_CTL

	{0x67, 0x60},	//Dark
	{0x68, 0x10},	//Middle
	{0x69, 0x10},	//High

	//2D
	{0x03, 0x12},
	{0x40, 0xe9},	//YC2D_LPF_CTL1
	{0x41, 0x09},	//YC2D_LPF_CTL2
	{0x50, 0x18},	//Test Setting
	{0x51, 0x24},	//Test Setting
	{0x70, 0x1f},	//GBGR_CTL1 //0x1f
	{0x71, 0x00},	//Test Setting
	{0x72, 0x00},	//Test Setting
	{0x73, 0x00},	//Test Setting
	{0x74, 0x10},	//GBGR_G_UNIT_TH
	{0x75, 0x10},	//GBGR_RB_UNIT_TH
	{0x76, 0x20},	//GBGR_EDGE_TH
	{0x77, 0x80},	//GBGR_HLVL_TH
	{0x78, 0x88},	//GBGR_HLVL_COMP
	{0x79, 0x18},	//Test Setting
	{0xb0, 0x7d},	//dpc

	//Edge
	{0x03, 0x13},
	{0x10, 0x01},	
	{0x11, 0x89},	
	{0x12, 0x14},	
	{0x13, 0x19},	
	{0x14, 0x08},	//Test Setting
	{0x20, 0x06},	//SHARP_Negative      //0x07_20110812
	{0x21, 0x03},	//SHARP_Positive       //0x04_20110812
	{0x23, 0x30},	//SHARP_DY_CTL
	{0x24, 0x33},	//40->33
	{0x25, 0x08},	//SHARP_PGA_TH
	{0x26, 0x18},	//Test Setting
	{0x27, 0x00},	//Test Setting
	{0x28, 0x08},	//Test Setting
	{0x29, 0x50},	//AG_TH
	{0x2a, 0xe0},	//HI704_write_cmos_sensorion ratio
	{0x2b, 0x10},	//Test Setting
	{0x2c, 0x28},	//Test Setting
	{0x2d, 0x40},	//Test Setting
	{0x2e, 0x00},	//Test Setting
	{0x2f, 0x00},	//Test Setting
	{0x30, 0x11},	//Test Setting
	{0x80, 0x03},	//SHARP2D_CTL
	{0x81, 0x07},	//Test Setting
	{0x90, 0x04},	//SHARP2D_SLOPE 			 //0x06_20110812
	{0x91, 0x02},	//SHARP2D_DIFF_CTL		   //0x04_20110812
	{0x92, 0x00},	//SHARP2D_HI_CLIP
	{0x93, 0x20},	//SHARP2D_DY_CTL
	{0x94, 0x42},	//Test Setting
	{0x95, 0x60},	//Test Setting

	//Shading
	{0x03, 0x14},
	{0x10, 0x01},
	{0x20, 0x90}, //XCEN
	{0x21, 0x78}, //YCEN
	{0x22, 0x60}, //66
	{0x23, 0x50}, //50
	{0x24, 0x44}, //44

	//Page 15 CMC
	{0x03, 0x15}, 
	{0x10, 0x03},

	{0x14, 0x3c},
	{0x16, 0x2c},
	{0x17, 0x2f},

	{0x30, 0xcb},
	{0x31, 0x61},
	{0x32, 0x16},
	{0x33, 0x23},
	{0x34, 0xce},
	{0x35, 0x2b},
	{0x36, 0x01},
	{0x37, 0x34},
	{0x38, 0x75},

	{0x40, 0x87},
	{0x41, 0x18},
	{0x42, 0x91},
	{0x43, 0x94},
	{0x44, 0x9f},
	{0x45, 0x33},
	{0x46, 0x00},
	{0x47, 0x94},
	{0x48, 0x14},

	//Gamma
	//normal
	{0x03, 0x16},
	{0x30, 0x00},
	{0x31, 0x0a},
	{0x32, 0x1b},
	{0x33, 0x2e},
	{0x34, 0x5c},
	{0x35, 0x79},
	{0x36, 0x97},
	{0x37, 0xa7},
	{0x38, 0xb5},
	{0x39, 0xc3},
	{0x3a, 0xcf},
	{0x3b, 0xe1},
	{0x3c, 0xf2},
	{0x3d, 0xff},
	{0x3e, 0xff},

	//Page 17 AE 
	{0x03, 0x17},
	{0xc4, 0x3c},
	{0xc5, 0x32},

	//Page 20 AE 
	{0x03, 0x20},
	{0x10, 0x0c},
	{0x11, 0x04},

	{0x20, 0x01},
	{0x28, 0x27},
	{0x29, 0xa1},

	{0x2a, 0xf0},
	{0x2b, 0x34},

	{0x30, 0xf8},

	{0x39, 0x22},
	{0x3a, 0xde},
	{0x3b, 0x23}, 
	{0x3c, 0xde},

	{0x60, 0x95}, 
	{0x68, 0x3c},
	{0x69, 0x64},
	{0x6A, 0x28},
	{0x6B, 0xc8},

	{0x70, 0x42},//Y Target 42

	{0x76, 0x22}, //Unlock bnd1
	{0x77, 0x02}, //Unlock bnd2

	{0x78, 0x12}, //Yth 1
	{0x79, 0x26}, //Yth 2
	{0x7a, 0x23}, //Yth 3

	{0x7c, 0x1c},
	{0x7d, 0x22},

	//50Hz
	{0x83, 0x00},//ExpTime 30fps
	{0x84, 0xbe},   //0xaf_20120214
	{0x85, 0x6e},   //0xc8_20120214

	{0x86, 0x00},//ExpMin
	{0x87, 0xfa},

	//50Hz_8fps
	{0x88, 0x02},//ExpMax 8fps(8fps)   //0x02_20110812
	{0x89, 0xf9},							//0x49_20110812
	{0x8a, 0xb8},							//0xf0_20110812

	{0x8b, 0x3f},//Exp100
	{0x8c, 0x7a},

	{0x8d, 0x34},//Exp120
	{0x8e, 0xbc},

	{0x91, 0x02},
	{0x92, 0xdc},
	{0x93, 0x6c},

	{0x94, 0x01}, //fix_step
	{0x95, 0xb7},
	{0x96, 0x74},

	{0x98, 0x8C},
	{0x99, 0x23},

	{0x9c, 0x0b}, //4shared limit	 //0x0b_20110812
	{0x9d, 0xb8},						//0x3b_20110812
	{0x9e, 0x00}, //4shared Unit
	{0x9f, 0xfa},	

	{0xb1, 0x14},
	{0xb2, 0x4a},
	{0xb4, 0x14},
	{0xb5, 0x38},
	{0xb6, 0x26},
	{0xb7, 0x20},
	{0xb8, 0x1d},
	{0xb9, 0x1b},
	{0xba, 0x1a},
	{0xbb, 0x19},
	{0xbc, 0x19},
	{0xbd, 0x18},

	{0xc0, 0x1a},
	{0xc3, 0x48},
	{0xc4, 0x48},


	//Page 22 AWB
	{0x03, 0x22},
	{0x10, 0xe2},
	{0x11, 0x26},
	{0x20, 0x34},
	{0x21, 0x40},

	{0x30, 0x80},
	{0x31, 0x80},
	{0x38, 0x12},
	{0x39, 0x33},
	{0x40, 0xf0},
	{0x41, 0x44},
	{0x42, 0x44},
	{0x43, 0xf3},
	{0x44, 0x88},
	{0x45, 0x66},
	{0x46, 0x02},

	{0x80, 0x3a},
	{0x81, 0x20},
	{0x82, 0x40},
	{0x83, 0x5e}, //RMAX Default : 50 -> 48 -> 52 
	{0x84, 0x1e}, //RMIN Default : 20
	{0x85, 0x5e}, //BMAX Default : 50, 5a -> 58 -> 55
	{0x86, 0x25}, //RMAXB Default : 50, 4d
	{0x87, 0x4d},
	{0x88, 0x42}, //RMINB Default : 3e, 45 --> 42
	{0x89, 0x30}, //BMAXB Default : 2e, 2d --> 30
	{0x8a, 0x29}, //BMINB Default : 20, 22 --> 26 --> 29
	{0x8b, 0x02}, //OUT TH
	{0x8d, 0x22},
	{0x8e, 0x71},

	{0x8f, 0x5c},
	{0x90, 0x59},
	{0x91, 0x55},
	{0x92, 0x50},
	{0x93, 0x48},
	{0x94, 0x3e},
	{0x95, 0x37},
	{0x96, 0x30},
	{0x97, 0x29},
	{0x98, 0x26},
	{0x99, 0x20},
	{0x9a, 0x1a},
	{0x9b, 0x0b},

	{0x03, 0x22},
	{0x10, 0xfb},

	{0x03, 0x20},
	{0x10, 0x9c},

	{0x01, 0xf0},
	{0xff, 0xff}	//End of Initial Setting
#endif
};
static void HI704_Initial_Setting(void)
{
	kal_uint32 iEcount;
	for(iEcount=0;(!((0xff==(HI704_Initial_Setting_Info[iEcount].address))&&(0xff==(HI704_Initial_Setting_Info[iEcount].data))));iEcount++)
	{	
		HI704_write_cmos_sensor(HI704_Initial_Setting_Info[iEcount].address, HI704_Initial_Setting_Info[iEcount].data);
	}
}

static void HI704_Init_Parameter(void)
{
    HI704_sensor.first_init = KAL_TRUE;
    HI704_sensor.pv_mode = KAL_TRUE;
    HI704_sensor.night_mode = KAL_FALSE;
    HI704_sensor.MPEG4_Video_mode = KAL_FALSE;
    
    HI704_sensor.cp_pclk = HI704_sensor.pv_pclk;
    
    HI704_sensor.pv_dummy_pixels = 0;
    HI704_sensor.pv_dummy_lines = 0;
	HI704_sensor.cp_dummy_pixels = 0;
	HI704_sensor.cp_dummy_lines = 0;

    HI704_sensor.wb = 0;
    HI704_sensor.exposure = 0;
    HI704_sensor.effect = 0;
    HI704_sensor.banding = AE_FLICKER_MODE_50HZ;

    HI704_sensor.pv_line_length = 640;
    HI704_sensor.pv_frame_height = 480;
    HI704_sensor.cp_line_length = 640;
    HI704_sensor.cp_frame_height = 480;
    
}

static kal_uint8 HI704_power_on(void)
{
    kal_uint8 HI704_sensor_id = 0;

	HI704_sensor.pv_pclk = 13000000;
    //Software Reset
    HI704_write_cmos_sensor(0x01,0xf1);
    HI704_write_cmos_sensor(0x01,0xf3);
    HI704_write_cmos_sensor(0x01,0xf1);

    /* Read Sensor ID  */
	HI704_sensor_id = HI704_read_cmos_sensor(0x04);
    SENSORDB("[HI704YUV]:read Sensor ID:%x\n",HI704_sensor_id);
	
	return HI704_sensor_id;
}


/*************************************************************************
* FUNCTION
*	HI704Open
*
* DESCRIPTION
*	This function initialize the registers of CMOS sensor
*
* PARAMETERS
*	None
*
* RETURNS
*	None
*
* GLOBALS AFFECTED
*
*************************************************************************/
UINT32 HI704Open(void)
{
   
       sensor_id_fail = 0; 
	   
       SENSORDB("[Enter]:HI704 Open func:");

	 if (HI704_power_on() != HI704_SENSOR_ID) 
	 	{
	 	   SENSORDB("[HI704]Error:read sensor ID fail\n");
		   sensor_id_fail = 1;
		   return ERROR_SENSOR_CONNECT_FAIL;
	 	}
    
      
    /* Apply sensor initail setting*/
     HI704_Initial_Setting();
	 HI704_Init_Parameter(); 
	
	 SENSORDB("[Exit]:HI704 Open func\n");
     
	return ERROR_NONE;
}	/* HI704Open() */

/*************************************************************************
* FUNCTION
*	HI704_GetSensorID
*
* DESCRIPTION
*	This function get the sensor ID
*
* PARAMETERS
*	None
*
* RETURNS
*	None
*
* GLOBALS AFFECTED
*
*************************************************************************/
static kal_uint32 HI704_GetSensorID(kal_uint32 *sensorID)

{
	SENSORDB("[Enter]:HI704 Open func ");
	*sensorID = HI704_power_on() ;

     if (*sensorID != HI704_SENSOR_ID) 
 	{
 	   
	  SENSORDB("[HI704]Error:read sensor ID fail\n");
	  sensor_id_fail = 1;
	  
	  *sensorID = 0xFFFFFFFF; 
	  return ERROR_SENSOR_CONNECT_FAIL;
   }
	   

    return ERROR_NONE;    
}   /* HI704Open  */


/*************************************************************************
* FUNCTION
*	HI704Close
*
* DESCRIPTION
*	This function is to turn off sensor module power.
*
* PARAMETERS
*	None
*
* RETURNS
*	None
*
* GLOBALS AFFECTED
*
*************************************************************************/
UINT32 HI704Close(void)
{

	return ERROR_NONE;
}	/* HI704Close() */


static void HI704_Set_Mirror_Flip(kal_uint8 image_mirror)
{
  /********************************************************
    * Page Mode 0: Reg 0x0011 bit[1:0] = [Y Flip : X Flip]
    * 0: Off; 1: On.
    *********************************************************/    
    SENSORDB("[Enter]:HI704 set Mirror_flip func:image_mirror=%d\n",image_mirror);
	
    HI704_write_cmos_sensor(0x03,0x00);     //Page 0	
    HI704_sensor.mirror = (HI704_read_cmos_sensor(0x11) & 0xfc); 

    switch (image_mirror) 
    {
     #ifdef HQ_PROJECT_A61_HUAWEI
        case IMAGE_NORMAL:
		    HI704_sensor.mirror |= 0x03;
	        break;
	    case IMAGE_H_MIRROR:
		    HI704_sensor.mirror |= 0x01;
	        break;
	    case IMAGE_V_MIRROR:
		    HI704_sensor.mirror |= 0x02;
	        break;
    	case IMAGE_HV_MIRROR:
		    HI704_sensor.mirror |= 0x00;
	        break;
    	default:
	        HI704_sensor.mirror |= 0x03;
     #else
	 case IMAGE_NORMAL:
                    HI704_sensor.mirror |= 0x00;
                break;
            case IMAGE_H_MIRROR:
                    HI704_sensor.mirror |= 0x01;
                break;
            case IMAGE_V_MIRROR:
                    HI704_sensor.mirror |= 0x02;
                break;
        case IMAGE_HV_MIRROR:
                    HI704_sensor.mirror |= 0x03;
                break;
        default:
                HI704_sensor.mirror |= 0x00;
     #endif
    }
    HI704_write_cmos_sensor(0x11, HI704_sensor.mirror);

	SENSORDB("[Exit]:HI704 set Mirror_flip func\n");

}

static void HI704_set_dummy(kal_uint16 dummy_pixels,kal_uint16 dummy_lines)
{	
	HI704_write_cmos_sensor(0x03, 0x00);                        //Page 0
	HI704_write_cmos_sensor(0x40,((dummy_pixels & 0x0F00))>>8);       //HBLANK
	HI704_write_cmos_sensor(0x41,(dummy_pixels & 0xFF));
	HI704_write_cmos_sensor(0x42,((dummy_lines & 0xFF00)>>8));       //VBLANK ( Vsync Type 1)
	HI704_write_cmos_sensor(0x43,(dummy_lines & 0xFF));
}  


// 640 * 480
static void HI704_Set_VGA_mode(void)
{
    HI704_write_cmos_sensor(0x01, HI704_read_cmos_sensor(0x01)|0x01);   //Sleep: For Write Reg

    HI704_write_cmos_sensor(0x03, 0x00);
    HI704_write_cmos_sensor(0x10, 0x00);        //VGA Size

    HI704_write_cmos_sensor(0x20, 0x00);
    HI704_write_cmos_sensor(0x21, 0x04);

    HI704_write_cmos_sensor(0x40, 0x01);        
    HI704_write_cmos_sensor(0x41, 0x58);
    HI704_write_cmos_sensor(0x42, 0x00);   
#ifdef HQ_PROJECT_A51
	HI704_write_cmos_sensor(0x43, 0x14);
#else    
    HI704_write_cmos_sensor(0x43, 0x13);
#endif

    HI704_write_cmos_sensor(0x03, 0x11);
    HI704_write_cmos_sensor(0x10, 0x25);  

    HI704_write_cmos_sensor(0x03, 0x20);

#ifdef HQ_PROJECT_A51
	HI704_write_cmos_sensor(0x10, HI704_read_cmos_sensor(0x10)&0x7f);
#else
    HI704_write_cmos_sensor(0x10, 0x1c);   //Close AE
#endif	
    HI704_write_cmos_sensor(0x18, HI704_read_cmos_sensor(0x18)|0x08);   //Reset AE
	
    //HI704_write_cmos_sensor(0x83, 0x00);
    //HI704_write_cmos_sensor(0x84, 0xbe);
    //HI704_write_cmos_sensor(0x85, 0x6e);
	
    HI704_write_cmos_sensor(0x86, 0x00);
    HI704_write_cmos_sensor(0x87, 0xfa);

    HI704_write_cmos_sensor(0x8b, 0x3f);
    HI704_write_cmos_sensor(0x8c, 0x7a);
    HI704_write_cmos_sensor(0x8d, 0x34);
    HI704_write_cmos_sensor(0x8e, 0xbc);

#ifdef HQ_PROJECT_A51
    HI704_write_cmos_sensor(0x9c, 0x06);
    HI704_write_cmos_sensor(0x9d, 0xd6);
#else
    HI704_write_cmos_sensor(0x9c, 0x0b);
    HI704_write_cmos_sensor(0x9d, 0xb8);
#endif	
    HI704_write_cmos_sensor(0x9e, 0x00);
    HI704_write_cmos_sensor(0x9f, 0xfa);

    HI704_write_cmos_sensor(0x01, HI704_read_cmos_sensor(0x01)&0xfe);   //Exit Sleep: For Write Reg

    HI704_write_cmos_sensor(0x03, 0x20);
#ifdef HQ_PROJECT_A51
	HI704_write_cmos_sensor(0x10, HI704_read_cmos_sensor(0x10)|0x80);
#else
    HI704_write_cmos_sensor(0x10, 0x9c);   //Open AE
#endif
    HI704_write_cmos_sensor(0x18, HI704_read_cmos_sensor(0x18)&0xf7);   //Reset AE

}

static void HI704_Cal_Min_Frame_Rate(kal_uint16 min_framerate)
{

}


static void HI704_Fix_Video_Frame_Rate(kal_uint16 fix_framerate)
{
#ifdef HQ_PROJECT_A51
    kal_uint32 HI704_expfix;
    kal_uint32 HI704_expfix_temp;
    kal_uint32 HI704_expmax;
    kal_uint32 HI704_expbanding;
    
  
    SENSORDB("[Enter]HI704 Fix_video_frame_rate func: fix_fps=%d\n",fix_framerate);


	HI704_sensor.video_current_frame_rate = fix_framerate;
    // Fixed Framerate
    HI704_write_cmos_sensor(0x01, HI704_read_cmos_sensor(0x01)|0x01);   //Sleep: For Write Reg

    HI704_write_cmos_sensor(0x03, 0x00);
    HI704_write_cmos_sensor(0x11, HI704_read_cmos_sensor(0x11)|0x04);

    HI704_write_cmos_sensor(0x03, 0x20);
    HI704_write_cmos_sensor(0x10, HI704_read_cmos_sensor(0x10)&0x7f);   //Close AE
    
    HI704_write_cmos_sensor(0x11, 0x00);
    HI704_write_cmos_sensor(0x18, HI704_read_cmos_sensor(0x18)|0x08);   //Reset AE
    HI704_write_cmos_sensor(0x2a, 0x00);
    HI704_write_cmos_sensor(0x2b, 0x35);

    HI704_write_cmos_sensor(0x03, 0x00);
    HI704_sensor.pv_dummy_pixels = ((HI704_read_cmos_sensor(0x40)<<8)|HI704_read_cmos_sensor(0x41));
    

    HI704_sensor.pv_line_length = HI704_VGA_DEFAULT_PIXEL_NUMS + HI704_sensor.pv_dummy_pixels ;
    
    
    HI704_sensor.pv_dummy_lines = ((HI704_read_cmos_sensor(0x42)<<8)|HI704_read_cmos_sensor(0x43));
    
    
    HI704_expfix_temp = ((HI704_sensor.pv_pclk*10/fix_framerate)-(HI704_sensor.pv_line_length*HI704_sensor.pv_dummy_lines))/8;
    
    HI704_expfix = ((HI704_expfix_temp*8/HI704_sensor.pv_line_length)*HI704_sensor.pv_line_length)/8;
    

    HI704_write_cmos_sensor(0x03, 0x20);
    HI704_write_cmos_sensor(0x91, (HI704_expfix>>16)&0xff);
    HI704_write_cmos_sensor(0x92, (HI704_expfix>>8)&0xff);
    HI704_write_cmos_sensor(0x93, (HI704_expfix>>0)&0xff);

    if(HI704_sensor.banding == AE_FLICKER_MODE_50HZ)
    {
        HI704_expbanding = ((HI704_read_cmos_sensor(0x8b)<<8)|HI704_read_cmos_sensor(0x8c));
    }
    else if(HI704_sensor.banding == AE_FLICKER_MODE_60HZ)
    {
        HI704_expbanding = ((HI704_read_cmos_sensor(0x8d)<<8)|HI704_read_cmos_sensor(0x8e));
    }
    else
    {
        SENSORDB("[HI704]Wrong Banding Setting!!!...");
    }
    HI704_expmax = ((HI704_expfix_temp-HI704_expbanding)/HI704_expbanding)*HI704_expbanding;

    
    
    HI704_write_cmos_sensor(0x03, 0x20);
    HI704_write_cmos_sensor(0x88, (HI704_expmax>>16)&0xff);
    HI704_write_cmos_sensor(0x89, (HI704_expmax>>8)&0xff);
    HI704_write_cmos_sensor(0x8a, (HI704_expmax>>0)&0xff);

    HI704_write_cmos_sensor(0x01, HI704_read_cmos_sensor(0x01)&0xfe);   //Exit Sleep: For Write Reg

    HI704_write_cmos_sensor(0x03, 0x20);
    HI704_write_cmos_sensor(0x10, HI704_read_cmos_sensor(0x10)|0x80);   //Open AE
    HI704_write_cmos_sensor(0x18, HI704_read_cmos_sensor(0x18)&0xf7);   //Reset AE

#endif

}


// 320 * 240
static void HI704_Set_QVGA_mode(void)
{
    HI704_write_cmos_sensor(0x01, HI704_read_cmos_sensor(0x01)|0x01);   //Sleep: For Write Reg
    
    HI704_write_cmos_sensor(0x03, 0x00);
    HI704_write_cmos_sensor(0x10, 0x01);        //QVGA Size: 0x10 -> 0x01

    HI704_write_cmos_sensor(0x20, 0x00);
    HI704_write_cmos_sensor(0x21, 0x02);

    HI704_write_cmos_sensor(0x40, 0x01);        //HBLANK:  0x0158 = 344
    HI704_write_cmos_sensor(0x41, 0x58);
    HI704_write_cmos_sensor(0x42, 0x00);        //VBLANK:  0x14 = 20
#ifdef HQ_PROJECT_A51
	HI704_write_cmos_sensor(0x43, 0x14);
#else	
    HI704_write_cmos_sensor(0x43, 0x13);
#endif	

    HI704_write_cmos_sensor(0x03, 0x11);        //QVGA Fixframerate
    HI704_write_cmos_sensor(0x10, 0x21);  

    HI704_write_cmos_sensor(0x03, 0x20);
    HI704_write_cmos_sensor(0x10, HI704_read_cmos_sensor(0x10)&0x7f);   //Close AE
    HI704_write_cmos_sensor(0x18, HI704_read_cmos_sensor(0x18)|0x08);   //Reset AE

  //  HI704_write_cmos_sensor(0x83, 0x00);
  //  HI704_write_cmos_sensor(0x84, 0xbe);
  //  HI704_write_cmos_sensor(0x85, 0x6e);
    HI704_write_cmos_sensor(0x86, 0x00);
    HI704_write_cmos_sensor(0x87, 0xfa);

    HI704_write_cmos_sensor(0x8b, 0x3f);
    HI704_write_cmos_sensor(0x8c, 0x7a);
    HI704_write_cmos_sensor(0x8d, 0x34);
    HI704_write_cmos_sensor(0x8e, 0xbc);

#ifdef HQ_PROJECT_A51
    HI704_write_cmos_sensor(0x9c, 0x06);
    HI704_write_cmos_sensor(0x9d, 0xd6);
#else
    HI704_write_cmos_sensor(0x9c, 0x0b);
    HI704_write_cmos_sensor(0x9d, 0xb8);
#endif	
    HI704_write_cmos_sensor(0x9e, 0x00);
    HI704_write_cmos_sensor(0x9f, 0xfa);

    HI704_write_cmos_sensor(0x01, HI704_read_cmos_sensor(0x01)&0xfe);   //Exit Sleep: For Write Reg

    HI704_write_cmos_sensor(0x03, 0x20);
    HI704_write_cmos_sensor(0x10, HI704_read_cmos_sensor(0x10)|0x80);   //Open AE
    HI704_write_cmos_sensor(0x18, HI704_read_cmos_sensor(0x18)&0xf7);   //Reset AE

}
void HI704_night_mode(kal_bool enable)
{

	SENSORDB("[Enter]HI704 night mode func:enable = %d\n",enable);
	SENSORDB("HI704_sensor.video_mode = %d\n",HI704_sensor.MPEG4_Video_mode); 
        SENSORDB("HI704_sensor.night_mode = %d\n",HI704_sensor.night_mode);

	HI704_sensor.night_mode = enable;

#ifdef HQ_PROJECT_A51
    if(HI704_sensor.MPEG4_Video_mode == KAL_TRUE)
	    return;

	if(enable)
	{
        //HI704_Cal_Min_Frame_Rate(HI704_MIN_FRAMERATE_5);   
		HI704_write_cmos_sensor(0x03, 0x00);
		HI704_write_cmos_sensor(0x01, 0xf1);

		HI704_write_cmos_sensor(0x03, 0x20);
		HI704_write_cmos_sensor(0x10, 0x1c);			
		HI704_write_cmos_sensor(0x18, 0x38);		

		//HI704_write_cmos_sensor(0x83, 0x00);
		//HI704_write_cmos_sensor(0x84, 0xbe);
		//HI704_write_cmos_sensor(0x85, 0x6e);

		HI704_write_cmos_sensor(0x88, 0x04);
		HI704_write_cmos_sensor(0x89, 0xf5);
		HI704_write_cmos_sensor(0x8a, 0x88);		

		HI704_write_cmos_sensor(0x01, 0xf0);

		HI704_write_cmos_sensor(0x10, 0x9c);
		HI704_write_cmos_sensor(0x18, 0x30);
	}
	else
    {
	    //HI704_Cal_Min_Frame_Rate(HI704_MIN_FRAMERATE_10);
		HI704_write_cmos_sensor(0x03, 0x00);
		HI704_write_cmos_sensor(0x01, 0xf1);

		HI704_write_cmos_sensor(0x03, 0x20);
		HI704_write_cmos_sensor(0x10, 0x1c);			
		HI704_write_cmos_sensor(0x18, 0x38);		

		//HI704_write_cmos_sensor(0x83, 0x00);
		//HI704_write_cmos_sensor(0x84, 0xbe);
		//HI704_write_cmos_sensor(0x85, 0x6e);

		HI704_write_cmos_sensor(0x88, 0x03);
		HI704_write_cmos_sensor(0x89, 0x78);
		HI704_write_cmos_sensor(0x8a, 0xac);		

		HI704_write_cmos_sensor(0x01, 0xf0);

		HI704_write_cmos_sensor(0x10, 0x9c);
		HI704_write_cmos_sensor(0x18, 0x30);
	}		
#else		

	if(enable)
	{
/*
           if(HI704_sensor.MPEG4_Video_mode == KAL_TRUE)
           {
 	    HI704_write_cmos_sensor(0x01, HI704_read_cmos_sensor(0x01)|0x01);   //Sleep: For Write Reg
            HI704_write_cmos_sensor(0x03, 0x00);
    	    HI704_write_cmos_sensor(0x11, HI704_read_cmos_sensor(0x11)|0x04);

   	    HI704_write_cmos_sensor(0x03, 0x20);
            HI704_write_cmos_sensor(0x10, 0x1c);   //Close AE
            HI704_write_cmos_sensor(0x11, 0x00);
            HI704_write_cmos_sensor(0x18, 0x38);   //Reset AE

	    HI704_write_cmos_sensor(0x03, 0x20);
	    HI704_write_cmos_sensor(0x2a, 0x00);
	    HI704_write_cmos_sensor(0x2b, 0x35); 

	    HI704_write_cmos_sensor(0x03, 0x20);
	    HI704_write_cmos_sensor(0x83, 0x00);
	    HI704_write_cmos_sensor(0x84, 0xbe);
	    HI704_write_cmos_sensor(0x85, 0x6e);
	    HI704_write_cmos_sensor(0x86, 0x00);
	    HI704_write_cmos_sensor(0x87, 0xfa);
 	    HI704_write_cmos_sensor(0x88, 0x00);
	    HI704_write_cmos_sensor(0x89, 0xbe);
	    HI704_write_cmos_sensor(0x8a, 0x6e);

	    HI704_write_cmos_sensor(0x91, 0x03);
	    HI704_write_cmos_sensor(0x92, 0x10);
	    HI704_write_cmos_sensor(0x93, 0x2e);


	    HI704_write_cmos_sensor(0x9c, 0x0b);
	    HI704_write_cmos_sensor(0x9d, 0xb8);
	    HI704_write_cmos_sensor(0x9e, 0x00);
	    HI704_write_cmos_sensor(0x9f, 0xfa);   
    
	    HI704_write_cmos_sensor(0x03, 0x00);
	    HI704_write_cmos_sensor(0x01, HI704_read_cmos_sensor(0x01)&0xfe);   //Exit Sleep: For Write Reg

	    HI704_write_cmos_sensor(0x03, 0x20);
	    HI704_write_cmos_sensor(0x10, 0x9c);   //Open AE
	    HI704_write_cmos_sensor(0x18, 0x30);   //Reset AE
            }
	   else
*/
		{
        //HI704_Cal_Min_Frame_Rate(HI704_MIN_FRAMERATE_5); 
		HI704_write_cmos_sensor(0x03, 0x00); 	
		HI704_write_cmos_sensor(0x01, 0xf1);
		
		HI704_write_cmos_sensor(0x03, 0x20);
		HI704_write_cmos_sensor(0x10, 0x1c);
		
		HI704_write_cmos_sensor(0x03, 0x20);
		HI704_write_cmos_sensor(0x18, 0x38);

		//HI704_write_cmos_sensor(0x83, 0x00);
		//HI704_write_cmos_sensor(0x84, 0xbe);
		//HI704_write_cmos_sensor(0x85, 0x6e);

		HI704_write_cmos_sensor(0x88, 0x04);
		HI704_write_cmos_sensor(0x89, 0xf5);
		HI704_write_cmos_sensor(0x8a, 0x88);
			
		HI704_write_cmos_sensor(0x03, 0x00); 	
		HI704_write_cmos_sensor(0x01, 0xf0);

		HI704_write_cmos_sensor(0x03, 0x20);
		HI704_write_cmos_sensor(0x10, 0x9c);

		HI704_write_cmos_sensor(0x18, 0x30);
		}
       }
	else
	{
/*
 	   if(HI704_sensor.MPEG4_Video_mode == KAL_TRUE)
           {
 	    HI704_write_cmos_sensor(0x01, HI704_read_cmos_sensor(0x01)|0x01);   //Sleep: For Write Reg
            HI704_write_cmos_sensor(0x03, 0x00);
    	    HI704_write_cmos_sensor(0x11, HI704_read_cmos_sensor(0x11)|0x04);

   	    HI704_write_cmos_sensor(0x03, 0x20);
            HI704_write_cmos_sensor(0x10, 0x1c);   //Close AE
            HI704_write_cmos_sensor(0x11, 0x00);
            HI704_write_cmos_sensor(0x18, 0x38);   //Reset AE

	    HI704_write_cmos_sensor(0x03, 0x20);
	    HI704_write_cmos_sensor(0x2a, 0x00);
	    HI704_write_cmos_sensor(0x2b, 0x35); 

	    HI704_write_cmos_sensor(0x03, 0x20);
	    HI704_write_cmos_sensor(0x83, 0x00);
	    HI704_write_cmos_sensor(0x84, 0xbe);
	    HI704_write_cmos_sensor(0x85, 0x6e);
	    HI704_write_cmos_sensor(0x86, 0x00);
	    HI704_write_cmos_sensor(0x87, 0xfa);
 	    HI704_write_cmos_sensor(0x88, 0x00);
	    HI704_write_cmos_sensor(0x89, 0xbe);
	    HI704_write_cmos_sensor(0x8a, 0x6e);

	    HI704_write_cmos_sensor(0x91, 0x02);
	    HI704_write_cmos_sensor(0x92, 0x07);
	    HI704_write_cmos_sensor(0x93, 0x88);


	    HI704_write_cmos_sensor(0x9c, 0x0b);
	    HI704_write_cmos_sensor(0x9d, 0xb8);
	    HI704_write_cmos_sensor(0x9e, 0x00);
	    HI704_write_cmos_sensor(0x9f, 0xfa);   
    
	    HI704_write_cmos_sensor(0x03, 0x00);
	    HI704_write_cmos_sensor(0x01, HI704_read_cmos_sensor(0x01)&0xfe);   //Exit Sleep: For Write Reg

	    HI704_write_cmos_sensor(0x03, 0x20);
	    HI704_write_cmos_sensor(0x10, 0x9c);   //Open AE
	    HI704_write_cmos_sensor(0x18, 0x30);   //Reset AE
            }
	   else
*/
    	    {
	    //HI704_Cal_Min_Frame_Rate(HI704_MIN_FRAMERATE_10);
		HI704_write_cmos_sensor(0x03, 0x00); 	
		HI704_write_cmos_sensor(0x01, 0xf1);
		
		HI704_write_cmos_sensor(0x03, 0x20);
		HI704_write_cmos_sensor(0x10, 0x1c);
		
		HI704_write_cmos_sensor(0x03, 0x20);
		HI704_write_cmos_sensor(0x18, 0x38);

		//HI704_write_cmos_sensor(0x83, 0x00);
		//HI704_write_cmos_sensor(0x84, 0xbe);
		//HI704_write_cmos_sensor(0x85, 0x6e);

		HI704_write_cmos_sensor(0x88, 0x02);
		HI704_write_cmos_sensor(0x89, 0xf9);
		HI704_write_cmos_sensor(0x8a, 0xb8);
			
		HI704_write_cmos_sensor(0x03, 0x00); 	
		HI704_write_cmos_sensor(0x01, 0xf0);

		HI704_write_cmos_sensor(0x03, 0x20);
		HI704_write_cmos_sensor(0x10, 0x9c);

		HI704_write_cmos_sensor(0x18, 0x30);
	   }
    }
#endif	
}

/*************************************************************************
* FUNCTION
*	HI704Preview
*
* DESCRIPTION
*	This function start the sensor preview.
*
* PARAMETERS
*	*image_window : address pointer of pixel numbers in one period of HSYNC
*  *sensor_config_data : address pointer of line numbers in one period of VSYNC
*
* RETURNS
*	None
*
* GLOBALS AFFECTED
*
*************************************************************************/
static UINT32 HI704Preview(MSDK_SENSOR_EXPOSURE_WINDOW_STRUCT *image_window,
					  MSDK_SENSOR_CONFIG_STRUCT *sensor_config_data)
{
	
	if(HI704_sensor.first_init == KAL_TRUE)
		HI704_sensor.MPEG4_Video_mode = HI704_sensor.MPEG4_Video_mode;
	else
		HI704_sensor.MPEG4_Video_mode = !HI704_sensor.MPEG4_Video_mode;

	
	SENSORDB("[Enter]:HI704 preview func:");		
	SENSORDB("HI704_sensor.video_mode = %d\n",HI704_sensor.MPEG4_Video_mode); 

       HI704_sensor.first_init = KAL_FALSE;
	HI704_sensor.pv_mode = KAL_TRUE;		
 
	{   
	    SENSORDB("[HI704]preview set_VGA_mode\n");
		HI704_Set_VGA_mode();
   	}
   
	HI704_Set_Mirror_Flip(sensor_config_data->SensorImageMirror);

	SENSORDB("[Exit]:HI704 preview func\n");
    return TRUE; 
}	/* HI704_Preview */


UINT32 HI704Capture(MSDK_SENSOR_EXPOSURE_WINDOW_STRUCT *image_window,
					  MSDK_SENSOR_CONFIG_STRUCT *sensor_config_data)
{	

	SENSORDB("[HI704][Enter]HI704_capture_func\n");
	
	HI704_sensor.pv_mode = KAL_FALSE;	
		
	return ERROR_NONE;
}	/* HM3451Capture() */


UINT32 HI704GetResolution(MSDK_SENSOR_RESOLUTION_INFO_STRUCT *pSensorResolution)
{
    SENSORDB("[Enter]:HI704 get Resolution func\n");
	
	pSensorResolution->SensorFullWidth=HI704_IMAGE_SENSOR_FULL_WIDTH - 10;  
	pSensorResolution->SensorFullHeight=HI704_IMAGE_SENSOR_FULL_HEIGHT - 10-10;
	pSensorResolution->SensorPreviewWidth=HI704_IMAGE_SENSOR_PV_WIDTH - 16;
	pSensorResolution->SensorPreviewHeight=HI704_IMAGE_SENSOR_PV_HEIGHT - 12-10;

    SENSORDB("[Exit]:HI704 get Resolution func\n");
	
	return ERROR_NONE;
}	/* HI704GetResolution() */

UINT32 HI704GetInfo(MSDK_SCENARIO_ID_ENUM ScenarioId,
					  MSDK_SENSOR_INFO_STRUCT *pSensorInfo,
					  MSDK_SENSOR_CONFIG_STRUCT *pSensorConfigData)
{
    SENSORDB("[Enter]:HI704 getInfo func:ScenarioId = %d\n",ScenarioId);
   
	pSensorInfo->SensorPreviewResolutionX=HI704_IMAGE_SENSOR_PV_WIDTH;
#ifdef HQ_PROJECT_A51
	pSensorInfo->SensorPreviewResolutionY=HI704_IMAGE_SENSOR_PV_HEIGHT-1;
#else
	pSensorInfo->SensorPreviewResolutionY=HI704_IMAGE_SENSOR_PV_HEIGHT;
#endif	
	pSensorInfo->SensorFullResolutionX=HI704_IMAGE_SENSOR_FULL_WIDTH;
	pSensorInfo->SensorFullResolutionY=HI704_IMAGE_SENSOR_FULL_HEIGHT;

	pSensorInfo->SensorCameraPreviewFrameRate=30;
	pSensorInfo->SensorVideoFrameRate=30;
#ifdef HQ_PROJECT_A51
	pSensorInfo->SensorStillCaptureFrameRate=10;// ynn 30;
#else	
	pSensorInfo->SensorStillCaptureFrameRate=30;
#endif	
	pSensorInfo->SensorWebCamCaptureFrameRate=15;
	pSensorInfo->SensorResetActiveHigh=FALSE;//low is to reset 
	pSensorInfo->SensorResetDelayCount=4;  //4ms 
	pSensorInfo->SensorOutputDataFormat=SENSOR_OUTPUT_FORMAT_YVYU;
	pSensorInfo->SensorClockPolarity=SENSOR_CLOCK_POLARITY_LOW;	
	pSensorInfo->SensorClockFallingPolarity=SENSOR_CLOCK_POLARITY_LOW;
	pSensorInfo->SensorHsyncPolarity = SENSOR_CLOCK_POLARITY_LOW;
	pSensorInfo->SensorVsyncPolarity = SENSOR_CLOCK_POLARITY_LOW;
	pSensorInfo->SensorInterruptDelayLines = 1; 
	pSensorInfo->SensroInterfaceType=SENSOR_INTERFACE_TYPE_PARALLEL;

	pSensorInfo->SensorISOBinningInfo.ISOBinningInfo[ISO_100_MODE].MaxWidth=CAM_SIZE_VGA_WIDTH; //???
	pSensorInfo->SensorISOBinningInfo.ISOBinningInfo[ISO_100_MODE].MaxHeight=CAM_SIZE_VGA_HEIGHT;
	pSensorInfo->SensorISOBinningInfo.ISOBinningInfo[ISO_100_MODE].ISOSupported=TRUE;
	pSensorInfo->SensorISOBinningInfo.ISOBinningInfo[ISO_100_MODE].BinningEnable=FALSE;

	pSensorInfo->SensorISOBinningInfo.ISOBinningInfo[ISO_200_MODE].MaxWidth=CAM_SIZE_VGA_WIDTH;
	pSensorInfo->SensorISOBinningInfo.ISOBinningInfo[ISO_200_MODE].MaxHeight=CAM_SIZE_VGA_HEIGHT;
	pSensorInfo->SensorISOBinningInfo.ISOBinningInfo[ISO_200_MODE].ISOSupported=TRUE;
	pSensorInfo->SensorISOBinningInfo.ISOBinningInfo[ISO_200_MODE].BinningEnable=FALSE;

	pSensorInfo->SensorISOBinningInfo.ISOBinningInfo[ISO_400_MODE].MaxWidth=CAM_SIZE_VGA_WIDTH;
	pSensorInfo->SensorISOBinningInfo.ISOBinningInfo[ISO_400_MODE].MaxHeight=CAM_SIZE_VGA_HEIGHT;
	pSensorInfo->SensorISOBinningInfo.ISOBinningInfo[ISO_400_MODE].ISOSupported=TRUE;
	pSensorInfo->SensorISOBinningInfo.ISOBinningInfo[ISO_400_MODE].BinningEnable=FALSE;

	pSensorInfo->SensorISOBinningInfo.ISOBinningInfo[ISO_800_MODE].MaxWidth=CAM_SIZE_VGA_WIDTH;
	pSensorInfo->SensorISOBinningInfo.ISOBinningInfo[ISO_800_MODE].MaxHeight=CAM_SIZE_VGA_HEIGHT;
	pSensorInfo->SensorISOBinningInfo.ISOBinningInfo[ISO_800_MODE].ISOSupported=TRUE;
	pSensorInfo->SensorISOBinningInfo.ISOBinningInfo[ISO_800_MODE].BinningEnable=TRUE;

	pSensorInfo->SensorISOBinningInfo.ISOBinningInfo[ISO_1600_MODE].MaxWidth=CAM_SIZE_VGA_WIDTH;
	pSensorInfo->SensorISOBinningInfo.ISOBinningInfo[ISO_1600_MODE].MaxHeight=CAM_SIZE_VGA_HEIGHT;
	pSensorInfo->SensorISOBinningInfo.ISOBinningInfo[ISO_1600_MODE].ISOSupported=TRUE;
	pSensorInfo->SensorISOBinningInfo.ISOBinningInfo[ISO_1600_MODE].BinningEnable=TRUE;

#ifdef HQ_PROJECT_A51
    pSensorInfo->CaptureDelayFrame = 2;// ynn 4; 
	pSensorInfo->PreviewDelayFrame = 3;// ynn 10; 
	pSensorInfo->VideoDelayFrame = 4;// ynn 0; 
#else
	pSensorInfo->CaptureDelayFrame = 4; 
	pSensorInfo->PreviewDelayFrame = 10; 
	pSensorInfo->VideoDelayFrame = 0; 
#endif	
	pSensorInfo->SensorMasterClockSwitch = 0; 
       pSensorInfo->SensorDrivingCurrent = ISP_DRIVING_8MA;   		
	switch (ScenarioId)
	{
		case MSDK_SCENARIO_ID_CAMERA_PREVIEW:
		case MSDK_SCENARIO_ID_VIDEO_PREVIEW:
		case MSDK_SCENARIO_ID_VIDEO_CAPTURE_MPEG4:
			pSensorInfo->SensorClockFreq=26;
			pSensorInfo->SensorClockDividCount=	3;
			pSensorInfo->SensorClockRisingCount= 0;
			pSensorInfo->SensorClockFallingCount= 2;
			pSensorInfo->SensorPixelClockCount= 3;
			pSensorInfo->SensorDataLatchCount= 2;
	        pSensorInfo->SensorGrabStartX = 1; 
	        pSensorInfo->SensorGrabStartY = 10;  			
			
		break;
		case MSDK_SCENARIO_ID_CAMERA_CAPTURE_JPEG:
		case MSDK_SCENARIO_ID_CAMERA_CAPTURE_MEM:
			pSensorInfo->SensorClockFreq=26;
			pSensorInfo->SensorClockDividCount=	3;
			pSensorInfo->SensorClockRisingCount= 0;
			pSensorInfo->SensorClockFallingCount= 2;
			pSensorInfo->SensorPixelClockCount= 3;
			pSensorInfo->SensorDataLatchCount= 2;
            pSensorInfo->SensorGrabStartX = 1; 
            pSensorInfo->SensorGrabStartY = 10;//1;     			
		break;
		default:
			pSensorInfo->SensorClockFreq=26;
			pSensorInfo->SensorClockDividCount=3;
			pSensorInfo->SensorClockRisingCount=0;
			pSensorInfo->SensorClockFallingCount=2;
			pSensorInfo->SensorPixelClockCount=3;
			pSensorInfo->SensorDataLatchCount=2;
            pSensorInfo->SensorGrabStartX = 1; 
            pSensorInfo->SensorGrabStartY = 10;//1;     			
		break;
	}
//	HI704_PixelClockDivider=pSensorInfo->SensorPixelClockCount;
	memcpy(pSensorConfigData, &HI704SensorConfigData, sizeof(MSDK_SENSOR_CONFIG_STRUCT));

	SENSORDB("[Exit]:HI704 getInfo func\n");
	
	return ERROR_NONE;
}	/* HI704GetInfo() */


UINT32 HI704Control(MSDK_SCENARIO_ID_ENUM ScenarioId, MSDK_SENSOR_EXPOSURE_WINDOW_STRUCT *pImageWindow,
					  MSDK_SENSOR_CONFIG_STRUCT *pSensorConfigData)
{
   SENSORDB("[Enter]:HI704 Control func:ScenarioId = %d\n",ScenarioId);

	switch (ScenarioId)
	{
		case MSDK_SCENARIO_ID_CAMERA_PREVIEW:
		case MSDK_SCENARIO_ID_VIDEO_PREVIEW:
		case MSDK_SCENARIO_ID_VIDEO_CAPTURE_MPEG4:
		 	 HI704Preview(pImageWindow, pSensorConfigData); 
			 break;
		case MSDK_SCENARIO_ID_CAMERA_CAPTURE_JPEG:
		case MSDK_SCENARIO_ID_CAMERA_CAPTURE_MEM:
			 HI704Capture(pImageWindow, pSensorConfigData); 
			 break;
		default:
		     break; 
	}

   SENSORDB("[Exit]:HI704 Control func\n");
	
	return TRUE;
}	/* HI704Control() */


/*************************************************************************
* FUNCTION
*	HI704_set_param_wb
*
* DESCRIPTION
*	wb setting.
*
* PARAMETERS
*	none
*
* RETURNS
*	None
*
* GLOBALS AFFECTED
*
*************************************************************************/
BOOL HI704_set_param_wb(UINT16 para)
{
	
    //This sensor need more time to balance AWB, 
    //we suggest higher fps or drop some frame to avoid garbage color when preview initial
   SENSORDB("[Enter]HI704 set_param_wb func:para = %d\n",para);
	
   if(HI704_sensor.wb == para) return KAL_TRUE;	

	HI704_sensor.wb = para;
	
	switch (para)
	{            
		case AWB_MODE_AUTO:
			{
		        HI704_write_cmos_sensor(0x03, 0x22);			
		        HI704_write_cmos_sensor(0x11, 0x2e);				
		        HI704_write_cmos_sensor(0x80, 0x38);
	            	HI704_write_cmos_sensor(0x82, 0x38);				
		        HI704_write_cmos_sensor(0x83, 0x5e);   
		        HI704_write_cmos_sensor(0x84, 0x18);   //0x1e_20120214
				#ifdef HQ_PROJECT_A51
				HI704_write_cmos_sensor(0x85, 0x5e);   //0x52
		        HI704_write_cmos_sensor(0x86, 0x30);
				#else
	            HI704_write_cmos_sensor(0x85, 0x4f);  //0x52_20120214
		        HI704_write_cmos_sensor(0x86, 0x1c);
				#endif				
            }                
		    break;
		case AWB_MODE_CLOUDY_DAYLIGHT:
			{
		        HI704_write_cmos_sensor(0x03, 0x22);
	            HI704_write_cmos_sensor(0x11, 0x28);
		        HI704_write_cmos_sensor(0x80, 0x71);
		        HI704_write_cmos_sensor(0x82, 0x2b);
		        HI704_write_cmos_sensor(0x83, 0x72);
		        HI704_write_cmos_sensor(0x84, 0x70);
		        HI704_write_cmos_sensor(0x85, 0x2b);
	            HI704_write_cmos_sensor(0x86, 0x28);
	        }			   
		    break;
		case AWB_MODE_DAYLIGHT:
		    {
	            HI704_write_cmos_sensor(0x03, 0x22);
	            HI704_write_cmos_sensor(0x11, 0x28);          
	            HI704_write_cmos_sensor(0x80, 0x59);
	            HI704_write_cmos_sensor(0x82, 0x29);
	            HI704_write_cmos_sensor(0x83, 0x60);
	            HI704_write_cmos_sensor(0x84, 0x50);
	            HI704_write_cmos_sensor(0x85, 0x2f);
	            HI704_write_cmos_sensor(0x86, 0x23);
            }      
		    break;
		case AWB_MODE_INCANDESCENT:	
		    {
		        HI704_write_cmos_sensor(0x03, 0x22);
		        HI704_write_cmos_sensor(0x11, 0x28);          
		        HI704_write_cmos_sensor(0x80, 0x29);
		        HI704_write_cmos_sensor(0x82, 0x54);
		        HI704_write_cmos_sensor(0x83, 0x2e);
		        HI704_write_cmos_sensor(0x84, 0x23);
				#ifdef HQ_PROJECT_A51
				HI704_write_cmos_sensor(0x85, 0x40);//0x58
		        HI704_write_cmos_sensor(0x86, 0x30);//0x4f
				#else
		        HI704_write_cmos_sensor(0x85, 0x58);
		        HI704_write_cmos_sensor(0x86, 0x4f);
				#endif
            }		
		    break;  
		case AWB_MODE_FLUORESCENT:
		    {
	            HI704_write_cmos_sensor(0x03, 0x22);
	            HI704_write_cmos_sensor(0x11, 0x28);
	            HI704_write_cmos_sensor(0x80, 0x41);
	            HI704_write_cmos_sensor(0x82, 0x42);
	            HI704_write_cmos_sensor(0x83, 0x44);
	            HI704_write_cmos_sensor(0x84, 0x34);
	            HI704_write_cmos_sensor(0x85, 0x46);
	            HI704_write_cmos_sensor(0x86, 0x3a);
            }	
		    break;  
		case AWB_MODE_TUNGSTEN:
		   {
	            HI704_write_cmos_sensor(0x03, 0x22);
	            HI704_write_cmos_sensor(0x80, 0x24);
	            HI704_write_cmos_sensor(0x81, 0x20);
	            HI704_write_cmos_sensor(0x82, 0x58);
	            HI704_write_cmos_sensor(0x83, 0x27);
	            HI704_write_cmos_sensor(0x84, 0x22);
	            HI704_write_cmos_sensor(0x85, 0x58);
	            HI704_write_cmos_sensor(0x86, 0x52);
           }
		    break;

		default:
			return FALSE;
	}

	return TRUE;
	
} /* HI704_set_param_wb */

/*************************************************************************
* FUNCTION
*	HI704_set_param_effect
*
* DESCRIPTION
*	effect setting.
*
* PARAMETERS
*	none
*
* RETURNS
*	None
*
* GLOBALS AFFECTED
*
*************************************************************************/
BOOL HI704_set_param_effect(UINT16 para)
{

   SENSORDB("[Enter]HI704 set_param_effect func:para = %d\n",para);
   
   if(HI704_sensor.effect == para) return KAL_TRUE;
    HI704_sensor.effect = para;
	
	switch (para)
	{
		case MEFFECT_OFF:
			{
	            HI704_write_cmos_sensor(0x03, 0x10);
	            HI704_write_cmos_sensor(0x11, 0x03);
	            HI704_write_cmos_sensor(0x12, 0x30);
	            HI704_write_cmos_sensor(0x13, 0x00);
	            HI704_write_cmos_sensor(0x44, 0x80);
	            HI704_write_cmos_sensor(0x45, 0x80);

	            HI704_write_cmos_sensor(0x47, 0x7f);
	            HI704_write_cmos_sensor(0x03, 0x13);
				#ifdef HQ_PROJECT_A51
				HI704_write_cmos_sensor(0x20, 0x08);
				#else
	            HI704_write_cmos_sensor(0x20, 0x07);
				#endif
	            HI704_write_cmos_sensor(0x21, 0x07);
            }
	        break;
		case MEFFECT_SEPIA:
			{
	            HI704_write_cmos_sensor(0x03, 0x10);
	            HI704_write_cmos_sensor(0x11, 0x03);
	            HI704_write_cmos_sensor(0x12, 0x23);
	            HI704_write_cmos_sensor(0x13, 0x00);
	            HI704_write_cmos_sensor(0x44, 0x70);
	            HI704_write_cmos_sensor(0x45, 0x98);

	            HI704_write_cmos_sensor(0x47, 0x7f);
	            HI704_write_cmos_sensor(0x03, 0x13);
	            HI704_write_cmos_sensor(0x20, 0x07);
	            HI704_write_cmos_sensor(0x21, 0x07);
            }	
			break;  
		case MEFFECT_NEGATIVE:
			{
	            HI704_write_cmos_sensor(0x03, 0x10);
	            HI704_write_cmos_sensor(0x11, 0x03);
	            HI704_write_cmos_sensor(0x12, 0x08);
	            HI704_write_cmos_sensor(0x13, 0x00);
	            HI704_write_cmos_sensor(0x14, 0x00);
            }
			break; 
		case MEFFECT_SEPIAGREEN:		
			{
	            HI704_write_cmos_sensor(0x03, 0x10);
	            HI704_write_cmos_sensor(0x11, 0x03);
	            HI704_write_cmos_sensor(0x12, 0x03);
	            HI704_write_cmos_sensor(0x40, 0x00);
	            HI704_write_cmos_sensor(0x13, 0x00);
	            HI704_write_cmos_sensor(0x44, 0x30);
	            HI704_write_cmos_sensor(0x45, 0x50);
            }	
			break;
		case MEFFECT_SEPIABLUE:
			{
			  	HI704_write_cmos_sensor(0x03, 0x10);
				HI704_write_cmos_sensor(0x11, 0x03);
				HI704_write_cmos_sensor(0x12, 0x03);
				HI704_write_cmos_sensor(0x40, 0x00);
				HI704_write_cmos_sensor(0x13, 0x00);
				HI704_write_cmos_sensor(0x44, 0xb0);
				HI704_write_cmos_sensor(0x45, 0x40);
		    }     
			break;        
		case MEFFECT_MONO:			
			{
				HI704_write_cmos_sensor(0x03, 0x10);
				HI704_write_cmos_sensor(0x11, 0x03);
				HI704_write_cmos_sensor(0x12, 0x03);
				HI704_write_cmos_sensor(0x40, 0x00);
				HI704_write_cmos_sensor(0x44, 0x80);
				HI704_write_cmos_sensor(0x45, 0x80);
            }
			break;

		default:
			return KAL_FALSE;
	}

	return KAL_TRUE;

} /* HI704_set_param_effect */

/*************************************************************************
* FUNCTION
*	HI704_set_param_banding
*
* DESCRIPTION
*	banding setting.
*
* PARAMETERS
*	none
*
* RETURNS
*	None
*
* GLOBALS AFFECTED
*
*************************************************************************/
BOOL HI704_set_param_banding(UINT16 para)
{


	SENSORDB("[Enter]HI704 set_param_banding func:para = %d\n",para);

	
	if(HI704_sensor.banding == para) return KAL_TRUE;

	  HI704_sensor.banding = para;

	switch (para)
	{
		case AE_FLICKER_MODE_50HZ:
		    {
				HI704_write_cmos_sensor(0x03,0x20);
				HI704_write_cmos_sensor(0x10,0x9c);
		    }
			break;

		case AE_FLICKER_MODE_60HZ:
		    {
				HI704_write_cmos_sensor(0x03,0x20);
				HI704_write_cmos_sensor(0x10,0x8c);
		    }
			break;

	     default:
	          return KAL_FALSE;
	}


	return KAL_TRUE;
} /* HI704_set_param_banding */




/*************************************************************************
* FUNCTION
*	HI704_set_param_exposure
*
* DESCRIPTION
*	exposure setting.
*
* PARAMETERS
*	none
*
* RETURNS
*	None
*
* GLOBALS AFFECTED
*
*************************************************************************/
BOOL HI704_set_param_exposure(UINT16 para)
{


	SENSORDB("[Enter]HI704 set_param_exposure func:para = %d\n",para);

	
	if(HI704_sensor.exposure == para) return KAL_TRUE;

	  HI704_sensor.exposure = para;

	   HI704_write_cmos_sensor(0x03,0x10);
	   HI704_write_cmos_sensor(0x12,HI704_read_cmos_sensor(0x12)|0x10);
	switch (para)
	{
		case AE_EV_COMP_13:  //+4 EV
			HI704_write_cmos_sensor(0x40,0x60);
			break;  
		case AE_EV_COMP_10:  //+3 EV
			HI704_write_cmos_sensor(0x40,0x48);
			break;    
		case AE_EV_COMP_07:  //+2 EV
			HI704_write_cmos_sensor(0x40,0x30);
			break;    
		case AE_EV_COMP_03:	 //	+1 EV	
			HI704_write_cmos_sensor(0x40,0x18);	
			break;    
		case AE_EV_COMP_00:  // +0 EV
		#ifdef HQ_PROJECT_A51
			HI704_write_cmos_sensor(0x40,0x84);  //0x88
		#else
		    HI704_write_cmos_sensor(0x40,0x08);   //0x00_20120214
		#endif	
			break;    
		case AE_EV_COMP_n03:  // -1 EV
			HI704_write_cmos_sensor(0x40,0x98);
			break;    
		case AE_EV_COMP_n07:	// -2 EV		
			HI704_write_cmos_sensor(0x40,0xb0);	
			break;    
		case AE_EV_COMP_n10:   //-3 EV
			HI704_write_cmos_sensor(0x40,0xc8);
			break;
		case AE_EV_COMP_n13:  // -4 EV
			HI704_write_cmos_sensor(0x40,0xe0);
			break;
		default:
			return FALSE;
	}

	return TRUE;
	
} /* HI704_set_param_exposure */


UINT32 HI704YUVSensorSetting(FEATURE_ID iCmd, UINT32 iPara)
{
    SENSORDB("[Enter]HI704YUVSensorSetting func:cmd = %d\n",iCmd);
	
	switch (iCmd) {
	case FID_SCENE_MODE:	    //auto mode or night mode

		    if (iPara == SCENE_MODE_OFF)//auto mode
		    {
		        HI704_night_mode(FALSE); 
		    }
		    else if (iPara == SCENE_MODE_NIGHTSCENE)//night mode
		    {
	            HI704_night_mode(TRUE); 
		    }	
			
	     break; 	    
	case FID_AWB_MODE:
           HI704_set_param_wb(iPara);
	     break;
	case FID_COLOR_EFFECT:
           HI704_set_param_effect(iPara);
	     break;
	case FID_AE_EV:	    	    
           HI704_set_param_exposure(iPara);
	     break;
	case FID_AE_FLICKER:	    	    	    
           HI704_set_param_banding(iPara);
	     break;
	case FID_ZOOM_FACTOR:
	     HI704_zoom_factor = iPara; 		
	     break; 
	default:
	     break;
	}
	return TRUE;
}   /* HI704YUVSensorSetting */

UINT32 HI704YUVSetVideoMode(UINT16 u2FrameRate)
{
   HI704_sensor.MPEG4_Video_mode = KAL_TRUE;
    SENSORDB("[Enter]HI704 Set Video Mode:FrameRate= %d\n",u2FrameRate);
	SENSORDB("HI704_sensor.video_mode = %d\n",HI704_sensor.MPEG4_Video_mode);

    //if(u2FrameRate == 30) u2FrameRate = 25;
   
	
	//HI704_sensor.fix_framerate = u2FrameRate * 10;
    
    if(HI704_sensor.fix_framerate <= 300 )
    {
     // HI704_Fix_Video_Frame_Rate(HI704_sensor.fix_framerate); 
    }
    else 
    {
       // SENSORDB("Wrong Frame Rate"); 
    }
    
    
    return TRUE;
}

UINT32 HI704FeatureControl(MSDK_SENSOR_FEATURE_ENUM FeatureId,
							 UINT8 *pFeaturePara,UINT32 *pFeatureParaLen)
{
    UINT16 u2Temp = 0; 
	UINT16 *pFeatureReturnPara16=(UINT16 *) pFeaturePara;
	UINT16 *pFeatureData16=(UINT16 *) pFeaturePara;
	UINT32 *pFeatureReturnPara32=(UINT32 *) pFeaturePara;
	UINT32 *pFeatureData32=(UINT32 *) pFeaturePara;
	MSDK_SENSOR_CONFIG_STRUCT *pSensorConfigData=(MSDK_SENSOR_CONFIG_STRUCT *) pFeaturePara;
	MSDK_SENSOR_REG_INFO_STRUCT *pSensorRegData=(MSDK_SENSOR_REG_INFO_STRUCT *) pFeaturePara;

	switch (FeatureId)
	{
		case SENSOR_FEATURE_GET_RESOLUTION:
			*pFeatureReturnPara16++=HI704_IMAGE_SENSOR_FULL_WIDTH;
			*pFeatureReturnPara16=HI704_IMAGE_SENSOR_FULL_HEIGHT;
			*pFeatureParaLen=4;
		     break;
		case SENSOR_FEATURE_GET_PERIOD:
			*pFeatureReturnPara16++=HI704_IMAGE_SENSOR_PV_WIDTH;//+HI704_sensor.pv_dummy_pixels;
			*pFeatureReturnPara16=HI704_IMAGE_SENSOR_PV_HEIGHT;//+HI704_sensor.pv_dummy_lines;
			*pFeatureParaLen=4;
		     break;
		case SENSOR_FEATURE_GET_PIXEL_CLOCK_FREQ:
			//*pFeatureReturnPara32 = HI704_sensor_pclk/10;
			*pFeatureParaLen=4;
		     break;
		case SENSOR_FEATURE_SET_ESHUTTER:
	
		     break;
		case SENSOR_FEATURE_SET_NIGHTMODE:
			 HI704_night_mode((BOOL) *pFeatureData16);
		     break;
		case SENSOR_FEATURE_SET_GAIN:
			 break; 
		case SENSOR_FEATURE_SET_FLASHLIGHT:
		     break;
		case SENSOR_FEATURE_SET_ISP_MASTER_CLOCK_FREQ:
		     break;
		case SENSOR_FEATURE_SET_REGISTER:
			 HI704_write_cmos_sensor(pSensorRegData->RegAddr, pSensorRegData->RegData);
		     break;
		case SENSOR_FEATURE_GET_REGISTER:
			 pSensorRegData->RegData = HI704_read_cmos_sensor(pSensorRegData->RegAddr);
		     break;
		case SENSOR_FEATURE_GET_CONFIG_PARA:
			 memcpy(pSensorConfigData, &HI704SensorConfigData, sizeof(MSDK_SENSOR_CONFIG_STRUCT));
			 *pFeatureParaLen=sizeof(MSDK_SENSOR_CONFIG_STRUCT);
		     break;
		case SENSOR_FEATURE_SET_CCT_REGISTER:
		case SENSOR_FEATURE_GET_CCT_REGISTER:
		case SENSOR_FEATURE_SET_ENG_REGISTER:
		case SENSOR_FEATURE_GET_ENG_REGISTER:
		case SENSOR_FEATURE_GET_REGISTER_DEFAULT:
		case SENSOR_FEATURE_CAMERA_PARA_TO_SENSOR:
		case SENSOR_FEATURE_SENSOR_TO_CAMERA_PARA:
		case SENSOR_FEATURE_GET_GROUP_INFO:
		case SENSOR_FEATURE_GET_ITEM_INFO:
		case SENSOR_FEATURE_SET_ITEM_INFO:
		case SENSOR_FEATURE_GET_ENG_INFO:
		     break;
		case SENSOR_FEATURE_GET_GROUP_COUNT:
	               // *pFeatureReturnPara32++=0;
			//*pFeatureParaLen=4;
		     break; 
		
		case SENSOR_FEATURE_GET_LENS_DRIVER_ID:
			// get the lens driver ID from EEPROM or just return LENS_DRIVER_ID_DO_NOT_CARE
			// if EEPROM does not exist in camera module.
			*pFeatureReturnPara32=LENS_DRIVER_ID_DO_NOT_CARE;
			*pFeatureParaLen=4;
		     break;
		case SENSOR_FEATURE_SET_YUV_CMD:
			 HI704YUVSensorSetting((FEATURE_ID)*pFeatureData32, *(pFeatureData32+1));
		     break;	
		case SENSOR_FEATURE_SET_VIDEO_MODE:
		     HI704YUVSetVideoMode(*pFeatureData16);
		     break; 
		case SENSOR_FEATURE_CHECK_SENSOR_ID:
			HI704_GetSensorID(pFeatureData32); 
			break; 
		default:
			 break;			
	}
	return ERROR_NONE;
}	/* HI704FeatureControl() */


SENSOR_FUNCTION_STRUCT	SensorFuncHI704=
{
	HI704Open,
	HI704GetInfo,
	HI704GetResolution,
	HI704FeatureControl,
	HI704Control,
	HI704Close
};

UINT32 HI704_YUV_SensorInit(PSENSOR_FUNCTION_STRUCT *pfFunc)
{
	/* To Do : Check Sensor status here */
	if (pfFunc!=NULL)
		*pfFunc=&SensorFuncHI704;

	return ERROR_NONE;
}	/* SensorInit() */

/* Copyright Statement:
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein
 * is confidential and proprietary to MediaTek Inc. and/or its licensors.
 * Without the prior written permission of MediaTek inc. and/or its licensors,
 * any reproduction, modification, use or disclosure of MediaTek Software,
 * and information contained herein, in whole or in part, shall be strictly prohibited.
 */
/* MediaTek Inc. (C) 2010. All rights reserved.
 *
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
 * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
 * AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
 * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
 * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
 * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
 * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
 * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
 * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
 * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
 * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
 * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
 * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
 * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 *
 * The following software/firmware and/or related documentation ("MediaTek Software")
 * have been modified by MediaTek Inc. All revisions are subject to any receiver's
 * applicable license agreements with MediaTek Inc.
 */

/*****************************************************************************
*  Copyright Statement:
*  --------------------
*  This software is protected by Copyright and the information contained
*  herein is confidential. The software may not be copied and the information
*  contained herein may not be used or disclosed except with the written
*  permission of MediaTek Inc. (C) 2008
*
*  BY OPENING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
*  THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
*  RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON
*  AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
*  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
*  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
*  NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
*  SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
*  SUPPLIED WITH THE MEDIATEK SOFTWARE, AND BUYER AGREES TO LOOK ONLY TO SUCH
*  THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. MEDIATEK SHALL ALSO
*  NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE RELEASES MADE TO BUYER'S
*  SPECIFICATION OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.
*
*  BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE
*  LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
*  AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
*  OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY BUYER TO
*  MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
*
*  THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE
*  WITH THE LAWS OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF
*  LAWS PRINCIPLES.  ANY DISPUTES, CONTROVERSIES OR CLAIMS ARISING THEREOF AND
*  RELATED THERETO SHALL BE SETTLED BY ARBITRATION IN SAN FRANCISCO, CA, UNDER
*  THE RULES OF THE INTERNATIONAL CHAMBER OF COMMERCE (ICC).
*
*****************************************************************************/
/*****************************************************************************
 *
 * Filename:
 * ---------
 *   sensor.h
 *
 * Project:
 * --------
 *   DUMA
 *
 * Description:
 * ------------
 *   Header file of Sensor driver
 *
 *
 * Author:
 * -------
 *   PC Huang (MTK02204)
 *
 *============================================================================
 *             HISTORY
 * Below this line, this part is controlled by CC/CQ. DO NOT MODIFY!!
 *------------------------------------------------------------------------------
 * $Revision:$
 * $Modtime:$
 * $Log:$
 *
 * 07 11 2011 jun.pei
 * [ALPS00059464] hi704 sensor check in
 * .
 * 
 *
 *
 *------------------------------------------------------------------------------
 * Upper this line, this part is controlled by CC/CQ. DO NOT MODIFY!!
 *============================================================================
 ****************************************************************************/
/* SENSOR FULL SIZE */
#ifndef __SENSOR_H
#define __SENSOR_H

	//follow is define by jun
	/* SENSOR READ/WRITE ID */

#define HI704_IMAGE_SENSOR_QVGA_WIDTH       (320)
#define HI704_IMAGE_SENSOR_QVGA_HEIGHT      (240)
#define HI704_IMAGE_SENSOR_VGA_WIDTH        (640)
#define HI704_IMAGE_SENSOR_VGA_HEIGHT       (480)
#define HI704_IMAGE_SENSOR_SXGA_WIDTH       (1280)
#define HI704_IMAGE_SENSOR_SXGA_HEIGHT      (1024)

#define HI704_IMAGE_SENSOR_FULL_WIDTH	   HI704_IMAGE_SENSOR_VGA_WIDTH  
#define HI704_IMAGE_SENSOR_FULL_HEIGHT	   HI704_IMAGE_SENSOR_VGA_HEIGHT    

#define HI704_IMAGE_SENSOR_PV_WIDTH   HI704_IMAGE_SENSOR_VGA_WIDTH   
#define HI704_IMAGE_SENSOR_PV_HEIGHT  HI704_IMAGE_SENSOR_VGA_HEIGHT

//SENSOR PIXEL/LINE NUMBERS IN ONE PERIOD
#define HI704_VGA_DEFAULT_PIXEL_NUMS		   (656)	
#define HI704_VGA_DEFAULT_LINE_NUMS 		   (500)

#define HI704_QVGA_DEFAULT_PIXEL_NUMS		   (656)	 
#define HI704_QVGA_DEFAULT_LINE_NUMS		   (254)

/* MAX/MIN FRAME RATE (FRAMES PER SEC.) */
#define HI704_MIN_FRAMERATE_5					(50)
#define HI704_MIN_FRAMERATE_7_5 				(75)
#define HI704_MIN_FRAMERATE_10					(100)

//Video Fixed Framerate
#define HI704_VIDEO_FIX_FRAMERATE_5 			(50)
#define HI704_VIDEO_FIX_FRAMERATE_7_5			(75)
#define HI704_VIDEO_FIX_FRAMERATE_10			(100)
#define HI704_VIDEO_FIX_FRAMERATE_15			(150)
#define HI704_VIDEO_FIX_FRAMERATE_20			(200)
#define HI704_VIDEO_FIX_FRAMERATE_25			(250)
#define HI704_VIDEO_FIX_FRAMERATE_30			(300)


#define HI704_WRITE_ID		0x60
#define HI704_READ_ID		0x61

	//#define HI704_SCCB_SLAVE_ADDR 0x60

typedef struct _SENSOR_INIT_INFO
{
	  kal_uint8 address;
	  kal_uint8 data;
}HI704_SENSOR_INIT_INFO;
typedef enum __VIDEO_MODE__
{
	  HI704_VIDEO_NORMAL = 0,
	  HI704_VIDEO_MPEG4,	  
	  HI704_VIDEO_MAX
} HI704_VIDEO_MODE;

struct HI704_sensor_STRUCT
{    
      kal_bool first_init;
	  kal_bool pv_mode;                 //True: Preview Mode; False: Capture Mode
	  kal_bool night_mode;              //True: Night Mode; False: Auto Mode
	  kal_bool MPEG4_Video_mode;      //Video Mode: MJPEG or MPEG4
	  kal_uint8 mirror;
	  kal_uint32 pv_pclk;               //Preview Pclk
	  kal_uint32 cp_pclk;               //Capture Pclk
	  kal_uint16 pv_dummy_pixels;          //Dummy Pixels
	  kal_uint16 pv_dummy_lines;           //Dummy Lines
	  kal_uint16 cp_dummy_pixels;          //Dummy Pixels
	  kal_uint16 cp_dummy_lines;           //Dummy Lines         
	  kal_uint16 fix_framerate;         //Fixed Framerate
	  kal_uint32 wb;
	  kal_uint32 exposure;
	  kal_uint32 effect;
	  kal_uint32 banding;
	  kal_uint16 pv_line_length;
	  kal_uint16 pv_frame_height;
	  kal_uint16 cp_line_length;
	  kal_uint16 cp_frame_height;
	  kal_uint16 video_current_frame_rate;
};


//export functions
UINT32 HI704Open(void);
UINT32 HI704GetResolution(MSDK_SENSOR_RESOLUTION_INFO_STRUCT *pSensorResolution);
UINT32 HI704GetInfo(MSDK_SCENARIO_ID_ENUM ScenarioId, MSDK_SENSOR_INFO_STRUCT *pSensorInfo, MSDK_SENSOR_CONFIG_STRUCT *pSensorConfigData);
UINT32 HI704Control(MSDK_SCENARIO_ID_ENUM ScenarioId, MSDK_SENSOR_EXPOSURE_WINDOW_STRUCT *pImageWindow, MSDK_SENSOR_CONFIG_STRUCT *pSensorConfigData);
UINT32 HI704FeatureControl(MSDK_SENSOR_FEATURE_ENUM FeatureId, UINT8 *pFeaturePara,UINT32 *pFeatureParaLen);
UINT32 HI704Close(void);


#endif /* __SENSOR_H */

/* Copyright Statement:
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein
 * is confidential and proprietary to MediaTek Inc. and/or its licensors.
 * Without the prior written permission of MediaTek inc. and/or its licensors,
 * any reproduction, modification, use or disclosure of MediaTek Software,
 * and information contained herein, in whole or in part, shall be strictly prohibited.
 */
/* MediaTek Inc. (C) 2010. All rights reserved.
 *
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
 * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
 * AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
 * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
 * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
 * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
 * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
 * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
 * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
 * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
 * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
 * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
 * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
 * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 *
 * The following software/firmware and/or related documentation ("MediaTek Software")
 * have been modified by MediaTek Inc. All revisions are subject to any receiver's
 * applicable license agreements with MediaTek Inc.
 */

/*****************************************************************************
*  Copyright Statement:
*  --------------------
*  This software is protected by Copyright and the information contained
*  herein is confidential. The software may not be copied and the information
*  contained herein may not be used or disclosed except with the written
*  permission of MediaTek Inc. (C) 2008
*
*  BY OPENING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
*  THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
*  RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON
*  AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
*  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
*  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
*  NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
*  SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
*  SUPPLIED WITH THE MEDIATEK SOFTWARE, AND BUYER AGREES TO LOOK ONLY TO SUCH
*  THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. MEDIATEK SHALL ALSO
*  NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE RELEASES MADE TO BUYER'S
*  SPECIFICATION OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.
*
*  BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE
*  LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
*  AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
*  OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY BUYER TO
*  MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
*
*  THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE
*  WITH THE LAWS OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF
*  LAWS PRINCIPLES.  ANY DISPUTES, CONTROVERSIES OR CLAIMS ARISING THEREOF AND
*  RELATED THERETO SHALL BE SETTLED BY ARBITRATION IN SAN FRANCISCO, CA, UNDER
*  THE RULES OF THE INTERNATIONAL CHAMBER OF COMMERCE (ICC).
*
*****************************************************************************/
/*****************************************************************************
 *
 * Filename:
 * ---------
 *   camera_sensor_para.h
 *
 * Project:
 * --------
 *   DUMA
 *
 * Description:
 * ------------
 *   Header file of Sensor tuning parameters that should be generated by CCT
 *
 *
 * Author:
 * -------
 *
 *============================================================================
 *             HISTORY
 * Below this line, this part is controlled by CC/CQ. DO NOT MODIFY!!
 *------------------------------------------------------------------------------
 * $Revision:$
 * $Modtime:$
 * $Log:$
 *
 * 07 11 2011 jun.pei
 * [ALPS00059464] hi704 sensor check in
 * .
 *
 * 05 25 2010 sean.cheng
 * [ALPS00001357][Meta]CameraTool 
 * .
 * Add HI704 YUV sensor driver support
 *
 * Mar 4 2010 mtk70508
 * [DUMA00154792] Sensor driver
 * 
 *
 * Feb 24 2010 mtk01118
 * [DUMA00025869] [Camera][YUV I/F & Query feature] check in camera code
 * 
 *
 * Apr 7 2009 mtk02204
 * [DUMA00004012] [Camera] Restructure and rename camera related custom folders and folder name of came
 * 
 *
 * Feb 24 2009 mtk02204
 * [DUMA00001084] First Check in of MT6516 multimedia drivers
 * 
 *
 *------------------------------------------------------------------------------
 * Upper this line, this part is controlled by CC/CQ. DO NOT MODIFY!!
 *============================================================================
 ****************************************************************************/
/* SENSOR FULL SIZE */
#ifndef __CAMERA_SENSOR_PARA_H
#define __CAMERA_SENSOR_PARA_H

#define CAMERA_SENSOR_REG_DEFAULT_VALUE  \
		/* ARRAY: SENSOR.reg[11] */\
		{\
			/* STRUCT: SENSOR.reg[0] */\
			{\
				/* SENSOR.reg[0].addr */ 0x00000304, /* SENSOR.reg[0].para */ 0x00000000\
			},\
			/* STRUCT: SENSOR.reg[1] */\
			{\
				/* SENSOR.reg[1].addr */ 0x00000305, /* SENSOR.reg[1].para */ 0x0000000D\
			},\
			/* STRUCT: SENSOR.reg[2] */\
			{\
				/* SENSOR.reg[2].addr */ 0x00000306, /* SENSOR.reg[2].para */ 0x00000000\
			},\
			/* STRUCT: SENSOR.reg[3] */\
			{\
				/* SENSOR.reg[3].addr */ 0x00000307, /* SENSOR.reg[3].para */ 0x000000C0\
			},\
			/* STRUCT: SENSOR.reg[4] */\
			{\
				/* SENSOR.reg[4].addr */ 0x00000300, /* SENSOR.reg[4].para */ 0x00000000\
			},\
			/* STRUCT: SENSOR.reg[5] */\
			{\
				/* SENSOR.reg[5].addr */ 0x00000301, /* SENSOR.reg[5].para */ 0x00000004\
			},\
			/* STRUCT: SENSOR.reg[6] */\
			{\
				/* SENSOR.reg[6].addr */ 0x0000030A, /* SENSOR.reg[6].para */ 0x00000000\
			},\
			/* STRUCT: SENSOR.reg[7] */\
			{\
				/* SENSOR.reg[7].addr */ 0x0000030B, /* SENSOR.reg[7].para */ 0x00000002\
			},\
			/* STRUCT: SENSOR.reg[8] */\
			{\
				/* SENSOR.reg[8].addr */ 0x00000308, /* SENSOR.reg[8].para */ 0x00000000\
			},\
			/* STRUCT: SENSOR.reg[9] */\
			{\
				/* SENSOR.reg[9].addr */ 0x00000309, /* SENSOR.reg[9].para */ 0x00000008\
			},\
			/* STRUCT: SENSOR.reg[10] */\
			{\
				/* SENSOR.reg[10].addr */ 0xFFFFFFFF, /* SENSOR.reg[10].para */ 0x00000001\
			}\
		}

#define CAMERA_SENSOR_CCT_DEFAULT_VALUE {{ 0xFFFFFFFF, 0x08 } ,{ 0x0209, 0x0008 } ,{ 0x0207, 0x0008 } ,{ 0x020D, 0x0008 } ,{ 0x020B, 0x0008 }}
#endif /* __CAMERA_SENSOR_PARA_H */

/* Copyright Statement:
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein
 * is confidential and proprietary to MediaTek Inc. and/or its licensors.
 * Without the prior written permission of MediaTek inc. and/or its licensors,
 * any reproduction, modification, use or disclosure of MediaTek Software,
 * and information contained herein, in whole or in part, shall be strictly prohibited.
 */
/* MediaTek Inc. (C) 2010. All rights reserved.
 *
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
 * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
 * AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
 * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
 * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
 * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
 * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
 * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
 * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
 * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
 * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
 * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
 * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
 * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 *
 * The following software/firmware and/or related documentation ("MediaTek Software")
 * have been modified by MediaTek Inc. All revisions are subject to any receiver's
 * applicable license agreements with MediaTek Inc.
 */

/*****************************************************************************
*  Copyright Statement:
*  --------------------
*  This software is protected by Copyright and the information contained
*  herein is confidential. The software may not be copied and the information
*  contained herein may not be used or disclosed except with the written
*  permission of MediaTek Inc. (C) 2008
*
*  BY OPENING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
*  THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
*  RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON
*  AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
*  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
*  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
*  NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
*  SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
*  SUPPLIED WITH THE MEDIATEK SOFTWARE, AND BUYER AGREES TO LOOK ONLY TO SUCH
*  THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. MEDIATEK SHALL ALSO
*  NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE RELEASES MADE TO BUYER'S
*  SPECIFICATION OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.
*
*  BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE
*  LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
*  AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
*  OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY BUYER TO
*  MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
*
*  THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE
*  WITH THE LAWS OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF
*  LAWS PRINCIPLES.  ANY DISPUTES, CONTROVERSIES OR CLAIMS ARISING THEREOF AND
*  RELATED THERETO SHALL BE SETTLED BY ARBITRATION IN SAN FRANCISCO, CA, UNDER
*  THE RULES OF THE INTERNATIONAL CHAMBER OF COMMERCE (ICC).
*
*****************************************************************************/
/*****************************************************************************
 *
 * Filename:
 * ---------
 *   sensor.h
 *
 * Project:
 * --------
 *   DUMA
 *
 * Description:
 * ------------
 *   Header file of camera customized parameters.
 *
 *
 * Author:
 * -------
 *   PC Huang (MTK02204)
 *
 *============================================================================
 *             HISTORY
 * Below this line, this part is controlled by CC/CQ. DO NOT MODIFY!!
 *------------------------------------------------------------------------------
 * $Revision:$
 * $Modtime:$
 * $Log:$
 *
 * 07 11 2011 jun.pei
 * [ALPS00059464] hi704 sensor check in
 * .
 *
 * .
 * Add HI704 YUV sensor driver support
 *
 *
 *------------------------------------------------------------------------------
 * Upper this line, this part is controlled by CC/CQ. DO NOT MODIFY!!
 *============================================================================
 ****************************************************************************/

#ifndef __CAMERA_CUSTOMIZED_H
#define __CAMERA_CUSTOMIZED_H

// the angle between handset and sensor placement in clockwise, should be one of 0, 90, 270
#define MAIN_SENSOR_ORIENTATION_ANGLE	90
#define SUB_SENSOR_ORIENTATION_ANGLE	0		// do not care if the sub sensor does not exist


// First, we think you hold the cell phone vertical.
// Second, we suppose the direction of upward is 0
// Third, it is 90, 180, 270 in clockwise
// here we define the main sensor and sub sensor angles to deal with the jpeg orientation
#define MAIN_SENSOR_TO_PHONE_ANGLE	90
#define SUB_SENSOR_TO_PHONE_ANGLE	0


#define CAM_SIZE_QVGA_WIDTH 	320
#define CAM_SIZE_QVGA_HEIGHT 	240
#define CAM_SIZE_VGA_WIDTH 		640
#define CAM_SIZE_VGA_HEIGHT 	480
/*
#define CAM_SIZE_05M_WIDTH 		800
#define CAM_SIZE_05M_HEIGHT 	600
#define CAM_SIZE_1M_WIDTH 		1280
#define CAM_SIZE_1M_HEIGHT 		960
#define CAM_SIZE_2M_WIDTH 		1600
#define CAM_SIZE_2M_HEIGHT 		1200
#define CAM_SIZE_3M_WIDTH 		2048
#define CAM_SIZE_3M_HEIGHT 		1536
#define CAM_SIZE_5M_WIDTH 		2592
#define CAM_SIZE_5M_HEIGHT 		1944
*/
// for main sensor
#define MAIN_NUM_OF_PREVIEW_RESOLUTION 3
#define MAIN_NUM_OF_VIDEO_RESOLUTION 3
#define MAIN_NUM_OF_STILL_RESOLUTION 2
#define MAIN_VIDEO_RESOLUTION_PROFILE		{{176,144},{320,240},{640,480}/*,{720,480}*/}
#define MAIN_PREVIEW_RESOLUTION_PROFILE	{{232,174},{320,240},{240,320}}
#define MAIN_STILL_RESOLUTION_PROFILE		{{CAM_SIZE_QVGA_WIDTH,CAM_SIZE_QVGA_HEIGHT}, \
									 {CAM_SIZE_VGA_WIDTH,CAM_SIZE_VGA_HEIGHT}, \
									/* {CAM_SIZE_05M_WIDTH,CAM_SIZE_05M_HEIGHT}, \
									 {CAM_SIZE_1M_WIDTH,CAM_SIZE_1M_HEIGHT}, \
									 {CAM_SIZE_2M_WIDTH,CAM_SIZE_2M_HEIGHT}, \
									 {CAM_SIZE_3M_WIDTH,CAM_SIZE_3M_HEIGHT}, \
									 {CAM_SIZE_5M_WIDTH,CAM_SIZE_5M_HEIGHT}*/}

// if sub sensor does not exist, set all the parameters as 0
#define SUB_NUM_OF_PREVIEW_RESOLUTION 0
#define SUB_NUM_OF_VIDEO_RESOLUTION 0
#define SUB_NUM_OF_STILL_RESOLUTION 0
#define SUB_VIDEO_RESOLUTION_PROFILE		{{0,0}}
#define SUB_PREVIEW_RESOLUTION_PROFILE		{{0,0}}
#define SUB_STILL_RESOLUTION_PROFILE		{{0,0}}


#define NUM_OF_VIDEO_STREAM_BUFF	8	// Maximun is 8
#endif
/* Copyright Statement:
*
* This software/firmware and related documentation ("MediaTek Software") are
* protected under relevant copyright laws. The information contained herein
* is confidential and proprietary to MediaTek Inc. and/or its licensors.
* Without the prior written permission of MediaTek inc. and/or its licensors,
* any reproduction, modification, use or disclosure of MediaTek Software,
* and information contained herein, in whole or in part, shall be strictly prohibited.
*/
/* MediaTek Inc. (C) 2010. All rights reserved. 
*
* BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
* THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
* RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
* AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
* NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
* SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
* SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
* THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
* THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
* CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
* SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
* STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
* CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
* AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
* OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
* MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
*
* The following software/firmware and/or related documentation ("MediaTek Software")
* have been modified by MediaTek Inc. All revisions are subject to any receiver's
 * applicable license agreements with MediaTek Inc. 
*/

/*
**
** Copyright 2008, The Android Open Source Project
**
** Licensed under the Apache License, Version 2.0 (the 'License');
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**     http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an 'AS IS' BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
*/

#ifndef _CAMERA_AE_PLINETABLE_A5141_H
#define _CAMERA_AE_PLINETABLE_A5141_H

#include "aaa_param.h"
static strEvSetting sPreviewPLineTable_60Hz[130] =
{
    {155,1664,1024, 0, 0, 0},  //TV = 12.66(5 lines)  AV=2.00  SV=4.70  BV=9.96
    {155,1664,1056, 0, 0, 0},  //TV = 12.66(5 lines)  AV=2.00  SV=4.74  BV=9.91
    {155,1792,1048, 0, 0, 0},  //TV = 12.66(5 lines)  AV=2.00  SV=4.84  BV=9.81
    {186,1536,1104, 0, 0, 0},  //TV = 12.39(6 lines)  AV=2.00  SV=4.69  BV=9.70
    {186,1664,1088, 0, 0, 0},  //TV = 12.39(6 lines)  AV=2.00  SV=4.79  BV=9.60
    {217,1536,1080, 0, 0, 0},  //TV = 12.17(7 lines)  AV=2.00  SV=4.66  BV=9.51
    {217,1664,1064, 0, 0, 0},  //TV = 12.17(7 lines)  AV=2.00  SV=4.76  BV=9.41
    {248,1536,1088, 0, 0, 0},  //TV = 11.98(8 lines)  AV=2.00  SV=4.67  BV=9.30
    {248,1664,1072, 0, 0, 0},  //TV = 11.98(8 lines)  AV=2.00  SV=4.77  BV=9.21
    {279,1536,1104, 0, 0, 0},  //TV = 11.81(9 lines)  AV=2.00  SV=4.69  BV=9.11
    {310,1536,1072, 0, 0, 0},  //TV = 11.66(10 lines)  AV=2.00  SV=4.65  BV=9.00
    {341,1536,1040, 0, 0, 0},  //TV = 11.52(11 lines)  AV=2.00  SV=4.61  BV=8.91
    {341,1664,1032, 0, 0, 0},  //TV = 11.52(11 lines)  AV=2.00  SV=4.71  BV=8.81
    {372,1536,1104, 0, 0, 0},  //TV = 11.39(12 lines)  AV=2.00  SV=4.69  BV=8.70
    {403,1536,1088, 0, 0, 0},  //TV = 11.28(13 lines)  AV=2.00  SV=4.67  BV=8.60
    {434,1536,1088, 0, 0, 0},  //TV = 11.17(14 lines)  AV=2.00  SV=4.67  BV=8.50
    {465,1536,1080, 0, 0, 0},  //TV = 11.07(15 lines)  AV=2.00  SV=4.66  BV=8.41
    {496,1536,1088, 0, 0, 0},  //TV = 10.98(16 lines)  AV=2.00  SV=4.67  BV=8.30
    {558,1536,1040, 0, 0, 0},  //TV = 10.81(18 lines)  AV=2.00  SV=4.61  BV=8.20
    {589,1536,1048, 0, 0, 0},  //TV = 10.73(19 lines)  AV=2.00  SV=4.62  BV=8.11
    {620,1536,1072, 0, 0, 0},  //TV = 10.66(20 lines)  AV=2.00  SV=4.65  BV=8.00
    {682,1536,1040, 0, 0, 0},  //TV = 10.52(22 lines)  AV=2.00  SV=4.61  BV=7.91
    {713,1536,1064, 0, 0, 0},  //TV = 10.45(23 lines)  AV=2.00  SV=4.64  BV=7.81
    {775,1536,1056, 0, 0, 0},  //TV = 10.33(25 lines)  AV=2.00  SV=4.63  BV=7.70
    {837,1536,1040, 0, 0, 0},  //TV = 10.22(27 lines)  AV=2.00  SV=4.61  BV=7.62
    {899,1536,1048, 0, 0, 0},  //TV = 10.12(29 lines)  AV=2.00  SV=4.62  BV=7.50
    {961,1536,1040, 0, 0, 0},  //TV = 10.02(31 lines)  AV=2.00  SV=4.61  BV=7.42
    {1023,1536,1056, 0, 0, 0},  //TV = 9.93(33 lines)  AV=2.00  SV=4.63  BV=7.30
    {1085,1536,1064, 0, 0, 0},  //TV = 9.85(35 lines)  AV=2.00  SV=4.64  BV=7.21
    {1178,1536,1048, 0, 0, 0},  //TV = 9.73(38 lines)  AV=2.00  SV=4.62  BV=7.11
    {1271,1536,1040, 0, 0, 0},  //TV = 9.62(41 lines)  AV=2.00  SV=4.61  BV=7.01
    {1364,1536,1040, 0, 0, 0},  //TV = 9.52(44 lines)  AV=2.00  SV=4.61  BV=6.91
    {1457,1536,1040, 0, 0, 0},  //TV = 9.42(47 lines)  AV=2.00  SV=4.61  BV=6.82
    {1550,1536,1056, 0, 0, 0},  //TV = 9.33(50 lines)  AV=2.00  SV=4.63  BV=6.70
    {1674,1536,1040, 0, 0, 0},  //TV = 9.22(54 lines)  AV=2.00  SV=4.61  BV=6.62
    {1798,1536,1040, 0, 0, 0},  //TV = 9.12(58 lines)  AV=2.00  SV=4.61  BV=6.51
    {1922,1536,1040, 0, 0, 0},  //TV = 9.02(62 lines)  AV=2.00  SV=4.61  BV=6.42
    {2077,1536,1040, 0, 0, 0},  //TV = 8.91(67 lines)  AV=2.00  SV=4.61  BV=6.30
    {2201,1536,1048, 0, 0, 0},  //TV = 8.83(71 lines)  AV=2.00  SV=4.62  BV=6.21
    {2356,1536,1048, 0, 0, 0},  //TV = 8.73(76 lines)  AV=2.00  SV=4.62  BV=6.11
    {2542,1536,1040, 0, 0, 0},  //TV = 8.62(82 lines)  AV=2.00  SV=4.61  BV=6.01
    {2728,1536,1040, 0, 0, 0},  //TV = 8.52(88 lines)  AV=2.00  SV=4.61  BV=5.91
    {2914,1536,1048, 0, 0, 0},  //TV = 8.42(94 lines)  AV=2.00  SV=4.62  BV=5.80
    {3131,1536,1040, 0, 0, 0},  //TV = 8.32(101 lines)  AV=2.00  SV=4.61  BV=5.71
    {3348,1536,1040, 0, 0, 0},  //TV = 8.22(108 lines)  AV=2.00  SV=4.61  BV=5.62
    {3596,1536,1048, 0, 0, 0},  //TV = 8.12(116 lines)  AV=2.00  SV=4.62  BV=5.50
    {3875,1536,1040, 0, 0, 0},  //TV = 8.01(125 lines)  AV=2.00  SV=4.61  BV=5.40
    {4123,1536,1040, 0, 0, 0},  //TV = 7.92(133 lines)  AV=2.00  SV=4.61  BV=5.31
    {4433,1536,1040, 0, 0, 0},  //TV = 7.82(143 lines)  AV=2.00  SV=4.61  BV=5.21
    {4743,1536,1040, 0, 0, 0},  //TV = 7.72(153 lines)  AV=2.00  SV=4.61  BV=5.11
    {5115,1536,1040, 0, 0, 0},  //TV = 7.61(165 lines)  AV=2.00  SV=4.61  BV=5.00
    {5487,1536,1040, 0, 0, 0},  //TV = 7.51(177 lines)  AV=2.00  SV=4.61  BV=4.90
    {5859,1536,1040, 0, 0, 0},  //TV = 7.42(189 lines)  AV=2.00  SV=4.61  BV=4.81
    {6293,1536,1040, 0, 0, 0},  //TV = 7.31(203 lines)  AV=2.00  SV=4.61  BV=4.70
    {6727,1536,1040, 0, 0, 0},  //TV = 7.22(217 lines)  AV=2.00  SV=4.61  BV=4.61
    {7223,1536,1040, 0, 0, 0},  //TV = 7.11(233 lines)  AV=2.00  SV=4.61  BV=4.51
    {7781,1536,1040, 0, 0, 0},  //TV = 7.01(251 lines)  AV=2.00  SV=4.61  BV=4.40
    {8277,1536,1040, 0, 0, 0},  //TV = 6.92(267 lines)  AV=2.00  SV=4.61  BV=4.31
    {8308,1664,1032, 0, 0, 0},  //TV = 6.91(268 lines)  AV=2.00  SV=4.71  BV=4.20
    {8308,1792,1024, 0, 0, 0},  //TV = 6.91(268 lines)  AV=2.00  SV=4.81  BV=4.10
    {8308,1920,1024, 0, 0, 0},  //TV = 6.91(268 lines)  AV=2.00  SV=4.91  BV=4.00
    {8308,2048,1032, 0, 0, 0},  //TV = 6.91(268 lines)  AV=2.00  SV=5.01  BV=3.90
    {8308,2176,1032, 0, 0, 0},  //TV = 6.91(268 lines)  AV=2.00  SV=5.10  BV=3.81
    {8308,2304,1048, 0, 0, 0},  //TV = 6.91(268 lines)  AV=2.00  SV=5.20  BV=3.71
    {8308,2432,1064, 0, 0, 0},  //TV = 6.91(268 lines)  AV=2.00  SV=5.30  BV=3.61
    {8308,2688,1032, 0, 0, 0},  //TV = 6.91(268 lines)  AV=2.00  SV=5.40  BV=3.51
    {8308,2816,1056, 0, 0, 0},  //TV = 6.91(268 lines)  AV=2.00  SV=5.50  BV=3.41
    {8308,3072,1040, 0, 0, 0},  //TV = 6.91(268 lines)  AV=2.00  SV=5.61  BV=3.30
    {16647,1536,1104, 0, 0, 0},  //TV = 5.91(537 lines)  AV=2.00  SV=4.69  BV=3.22
    {16647,1664,1096, 0, 0, 0},  //TV = 5.91(537 lines)  AV=2.00  SV=4.80  BV=3.11
    {16647,1792,1088, 0, 0, 0},  //TV = 5.91(537 lines)  AV=2.00  SV=4.89  BV=3.01
    {16647,2048,1024, 0, 0, 0},  //TV = 5.91(537 lines)  AV=2.00  SV=5.00  BV=2.91
    {16647,2176,1032, 0, 0, 0},  //TV = 5.91(537 lines)  AV=2.00  SV=5.10  BV=2.81
    {24986,1536,1040, 0, 0, 0},  //TV = 5.32(806 lines)  AV=2.00  SV=4.61  BV=2.72
    {24986,1664,1032, 0, 0, 0},  //TV = 5.32(806 lines)  AV=2.00  SV=4.71  BV=2.61
    {24986,1792,1024, 0, 0, 0},  //TV = 5.32(806 lines)  AV=2.00  SV=4.81  BV=2.52
    {24986,1920,1024, 0, 0, 0},  //TV = 5.32(806 lines)  AV=2.00  SV=4.91  BV=2.42
    {24986,2048,1032, 0, 0, 0},  //TV = 5.32(806 lines)  AV=2.00  SV=5.01  BV=2.31
    {32674,1664,1048, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=4.73  BV=2.20
    {32674,1792,1032, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=4.82  BV=2.12
    {32674,1920,1040, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=4.93  BV=2.01
    {32674,2048,1040, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=5.02  BV=1.91
    {32674,2176,1056, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=5.13  BV=1.80
    {32674,2304,1064, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=5.23  BV=1.71
    {32674,2560,1024, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=5.32  BV=1.61
    {32674,2688,1048, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=5.43  BV=1.51
    {32674,2944,1032, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=5.53  BV=1.40
    {32674,3072,1056, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=5.63  BV=1.31
    {32674,3328,1040, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=5.72  BV=1.21
    {32674,3584,1040, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=5.83  BV=1.11
    {32674,3840,1040, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=5.93  BV=1.01
    {32674,4096,1040, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=6.02  BV=0.91
    {32674,4352,1048, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=6.12  BV=0.81
    {32674,4736,1032, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=6.22  BV=0.72
    {40858,4096,1024, 0, 0, 0},  //TV = 4.61(1318 lines)  AV=2.00  SV=6.00  BV=0.61
    {40858,4352,1032, 0, 0, 0},  //TV = 4.61(1318 lines)  AV=2.00  SV=6.10  BV=0.51
    {40858,4608,1048, 0, 0, 0},  //TV = 4.61(1318 lines)  AV=2.00  SV=6.20  BV=0.41
    {48980,4224,1024, 0, 0, 0},  //TV = 4.35(1580 lines)  AV=2.00  SV=6.04  BV=0.31
    {48980,4480,1032, 0, 0, 0},  //TV = 4.35(1580 lines)  AV=2.00  SV=6.14  BV=0.21
    {48980,4736,1048, 0, 0, 0},  //TV = 4.35(1580 lines)  AV=2.00  SV=6.24  BV=0.11
    {48980,5248,1024, 0, 0, 0},  //TV = 4.35(1580 lines)  AV=2.00  SV=6.36  BV=-0.01
    {48980,5504,1040, 0, 0, 0},  //TV = 4.35(1580 lines)  AV=2.00  SV=6.45  BV=-0.10
    {48980,5888,1040, 0, 0, 0},  //TV = 4.35(1580 lines)  AV=2.00  SV=6.55  BV=-0.19
    {48980,6400,1024, 0, 0, 0},  //TV = 4.35(1580 lines)  AV=2.00  SV=6.64  BV=-0.29
    {48980,6784,1040, 0, 0, 0},  //TV = 4.35(1580 lines)  AV=2.00  SV=6.75  BV=-0.40
    {57164,6272,1032, 0, 0, 0},  //TV = 4.13(1844 lines)  AV=2.00  SV=6.63  BV=-0.50
    {57164,6784,1024, 0, 0, 0},  //TV = 4.13(1844 lines)  AV=2.00  SV=6.73  BV=-0.60
    {65317,6272,1040, 0, 0, 0},  //TV = 3.94(2107 lines)  AV=2.00  SV=6.64  BV=-0.70
    {65317,6784,1032, 0, 0, 0},  //TV = 3.94(2107 lines)  AV=2.00  SV=6.74  BV=-0.80
    {65317,7296,1024, 0, 0, 0},  //TV = 3.94(2107 lines)  AV=2.00  SV=6.83  BV=-0.90
    {73501,6912,1032, 0, 0, 0},  //TV = 3.77(2371 lines)  AV=2.00  SV=6.77  BV=-1.00
    {81685,6656,1032, 0, 0, 0},  //TV = 3.61(2635 lines)  AV=2.00  SV=6.71  BV=-1.10
    {89807,6528,1024, 0, 0, 0},  //TV = 3.48(2897 lines)  AV=2.00  SV=6.67  BV=-1.20
    {89807,7040,1024, 0, 0, 0},  //TV = 3.48(2897 lines)  AV=2.00  SV=6.78  BV=-1.30
    {97991,6784,1040, 0, 0, 0},  //TV = 3.35(3161 lines)  AV=2.00  SV=6.75  BV=-1.40
    {97991,7296,1032, 0, 0, 0},  //TV = 3.35(3161 lines)  AV=2.00  SV=6.84  BV=-1.49
    {97991,7808,1032, 0, 0, 0},  //TV = 3.35(3161 lines)  AV=2.00  SV=6.94  BV=-1.59
    {97991,8448,1032, 0, 0, 0},  //TV = 3.35(3161 lines)  AV=2.00  SV=7.06  BV=-1.70
    {106175,8320,1032, 0, 0, 0},  //TV = 3.24(3425 lines)  AV=2.00  SV=7.03  BV=-1.80
    {114328,8320,1032, 0, 0, 0},  //TV = 3.13(3688 lines)  AV=2.00  SV=7.03  BV=-1.90
    {122512,8320,1032, 0, 0, 0},  //TV = 3.03(3952 lines)  AV=2.00  SV=7.03  BV=-2.00
    {122512,8960,1024, 0, 0, 0},  //TV = 3.03(3952 lines)  AV=2.00  SV=7.13  BV=-2.10
    {122512,9600,1024, 0, 0, 0},  //TV = 3.03(3952 lines)  AV=2.00  SV=7.23  BV=-2.20
    {130634,9600,1032, 0, 0, 0},  //TV = 2.94(4214 lines)  AV=2.00  SV=7.24  BV=-2.30
    {147002,9216,1024, 0, 0, 0},  //TV = 2.77(4742 lines)  AV=2.00  SV=7.17  BV=-2.40
    {155155,9344,1024, 0, 0, 0},  //TV = 2.69(5005 lines)  AV=2.00  SV=7.19  BV=-2.50
    {163339,9472,1032, 0, 0, 0},  //TV = 2.61(5269 lines)  AV=2.00  SV=7.22  BV=-2.61
    {179645,9216,1032, 0, 0, 0},  //TV = 2.48(5795 lines)  AV=2.00  SV=7.18  BV=-2.70
    {195982,9088,1024, 0, 0, 0},  //TV = 2.35(6322 lines)  AV=2.00  SV=7.15  BV=-2.80
    {195982,9728,1024, 0, 0, 0},  //TV = 2.35(6322 lines)  AV=2.00  SV=7.25  BV=-2.90
};

static strEvSetting sPreviewPLineTable_50Hz[130] =
{
    {155,1664,1024, 0, 0, 0},  //TV = 12.66(5 lines)  AV=2.00  SV=4.70  BV=9.96
    {155,1664,1056, 0, 0, 0},  //TV = 12.66(5 lines)  AV=2.00  SV=4.74  BV=9.91
    {155,1792,1048, 0, 0, 0},  //TV = 12.66(5 lines)  AV=2.00  SV=4.84  BV=9.81
    {186,1536,1104, 0, 0, 0},  //TV = 12.39(6 lines)  AV=2.00  SV=4.69  BV=9.70
    {186,1664,1088, 0, 0, 0},  //TV = 12.39(6 lines)  AV=2.00  SV=4.79  BV=9.60
    {217,1536,1080, 0, 0, 0},  //TV = 12.17(7 lines)  AV=2.00  SV=4.66  BV=9.51
    {217,1664,1064, 0, 0, 0},  //TV = 12.17(7 lines)  AV=2.00  SV=4.76  BV=9.41
    {248,1536,1088, 0, 0, 0},  //TV = 11.98(8 lines)  AV=2.00  SV=4.67  BV=9.30
    {248,1664,1072, 0, 0, 0},  //TV = 11.98(8 lines)  AV=2.00  SV=4.77  BV=9.21
    {279,1536,1104, 0, 0, 0},  //TV = 11.81(9 lines)  AV=2.00  SV=4.69  BV=9.11
    {310,1536,1072, 0, 0, 0},  //TV = 11.66(10 lines)  AV=2.00  SV=4.65  BV=9.00
    {341,1536,1040, 0, 0, 0},  //TV = 11.52(11 lines)  AV=2.00  SV=4.61  BV=8.91
    {341,1664,1032, 0, 0, 0},  //TV = 11.52(11 lines)  AV=2.00  SV=4.71  BV=8.81
    {372,1536,1104, 0, 0, 0},  //TV = 11.39(12 lines)  AV=2.00  SV=4.69  BV=8.70
    {403,1536,1088, 0, 0, 0},  //TV = 11.28(13 lines)  AV=2.00  SV=4.67  BV=8.60
    {434,1536,1088, 0, 0, 0},  //TV = 11.17(14 lines)  AV=2.00  SV=4.67  BV=8.50
    {465,1536,1080, 0, 0, 0},  //TV = 11.07(15 lines)  AV=2.00  SV=4.66  BV=8.41
    {496,1536,1088, 0, 0, 0},  //TV = 10.98(16 lines)  AV=2.00  SV=4.67  BV=8.30
    {558,1536,1040, 0, 0, 0},  //TV = 10.81(18 lines)  AV=2.00  SV=4.61  BV=8.20
    {589,1536,1048, 0, 0, 0},  //TV = 10.73(19 lines)  AV=2.00  SV=4.62  BV=8.11
    {620,1536,1072, 0, 0, 0},  //TV = 10.66(20 lines)  AV=2.00  SV=4.65  BV=8.00
    {682,1536,1040, 0, 0, 0},  //TV = 10.52(22 lines)  AV=2.00  SV=4.61  BV=7.91
    {713,1536,1064, 0, 0, 0},  //TV = 10.45(23 lines)  AV=2.00  SV=4.64  BV=7.81
    {775,1536,1056, 0, 0, 0},  //TV = 10.33(25 lines)  AV=2.00  SV=4.63  BV=7.70
    {837,1536,1040, 0, 0, 0},  //TV = 10.22(27 lines)  AV=2.00  SV=4.61  BV=7.62
    {899,1536,1048, 0, 0, 0},  //TV = 10.12(29 lines)  AV=2.00  SV=4.62  BV=7.50
    {961,1536,1040, 0, 0, 0},  //TV = 10.02(31 lines)  AV=2.00  SV=4.61  BV=7.42
    {1023,1536,1056, 0, 0, 0},  //TV = 9.93(33 lines)  AV=2.00  SV=4.63  BV=7.30
    {1085,1536,1064, 0, 0, 0},  //TV = 9.85(35 lines)  AV=2.00  SV=4.64  BV=7.21
    {1178,1536,1048, 0, 0, 0},  //TV = 9.73(38 lines)  AV=2.00  SV=4.62  BV=7.11
    {1271,1536,1040, 0, 0, 0},  //TV = 9.62(41 lines)  AV=2.00  SV=4.61  BV=7.01
    {1364,1536,1040, 0, 0, 0},  //TV = 9.52(44 lines)  AV=2.00  SV=4.61  BV=6.91
    {1457,1536,1040, 0, 0, 0},  //TV = 9.42(47 lines)  AV=2.00  SV=4.61  BV=6.82
    {1550,1536,1056, 0, 0, 0},  //TV = 9.33(50 lines)  AV=2.00  SV=4.63  BV=6.70
    {1674,1536,1040, 0, 0, 0},  //TV = 9.22(54 lines)  AV=2.00  SV=4.61  BV=6.62
    {1798,1536,1040, 0, 0, 0},  //TV = 9.12(58 lines)  AV=2.00  SV=4.61  BV=6.51
    {1922,1536,1040, 0, 0, 0},  //TV = 9.02(62 lines)  AV=2.00  SV=4.61  BV=6.42
    {2077,1536,1040, 0, 0, 0},  //TV = 8.91(67 lines)  AV=2.00  SV=4.61  BV=6.30
    {2201,1536,1048, 0, 0, 0},  //TV = 8.83(71 lines)  AV=2.00  SV=4.62  BV=6.21
    {2356,1536,1048, 0, 0, 0},  //TV = 8.73(76 lines)  AV=2.00  SV=4.62  BV=6.11
    {2542,1536,1040, 0, 0, 0},  //TV = 8.62(82 lines)  AV=2.00  SV=4.61  BV=6.01
    {2728,1536,1040, 0, 0, 0},  //TV = 8.52(88 lines)  AV=2.00  SV=4.61  BV=5.91
    {2914,1536,1048, 0, 0, 0},  //TV = 8.42(94 lines)  AV=2.00  SV=4.62  BV=5.80
    {3131,1536,1040, 0, 0, 0},  //TV = 8.32(101 lines)  AV=2.00  SV=4.61  BV=5.71
    {3348,1536,1040, 0, 0, 0},  //TV = 8.22(108 lines)  AV=2.00  SV=4.61  BV=5.62
    {3596,1536,1048, 0, 0, 0},  //TV = 8.12(116 lines)  AV=2.00  SV=4.62  BV=5.50
    {3875,1536,1040, 0, 0, 0},  //TV = 8.01(125 lines)  AV=2.00  SV=4.61  BV=5.40
    {4123,1536,1040, 0, 0, 0},  //TV = 7.92(133 lines)  AV=2.00  SV=4.61  BV=5.31
    {4433,1536,1040, 0, 0, 0},  //TV = 7.82(143 lines)  AV=2.00  SV=4.61  BV=5.21
    {4743,1536,1040, 0, 0, 0},  //TV = 7.72(153 lines)  AV=2.00  SV=4.61  BV=5.11
    {5115,1536,1040, 0, 0, 0},  //TV = 7.61(165 lines)  AV=2.00  SV=4.61  BV=5.00
    {5487,1536,1040, 0, 0, 0},  //TV = 7.51(177 lines)  AV=2.00  SV=4.61  BV=4.90
    {5859,1536,1040, 0, 0, 0},  //TV = 7.42(189 lines)  AV=2.00  SV=4.61  BV=4.81
    {6293,1536,1040, 0, 0, 0},  //TV = 7.31(203 lines)  AV=2.00  SV=4.61  BV=4.70
    {6727,1536,1040, 0, 0, 0},  //TV = 7.22(217 lines)  AV=2.00  SV=4.61  BV=4.61
    {7223,1536,1040, 0, 0, 0},  //TV = 7.11(233 lines)  AV=2.00  SV=4.61  BV=4.51
    {7781,1536,1040, 0, 0, 0},  //TV = 7.01(251 lines)  AV=2.00  SV=4.61  BV=4.40
    {8277,1536,1040, 0, 0, 0},  //TV = 6.92(267 lines)  AV=2.00  SV=4.61  BV=4.31
    {8928,1536,1040, 0, 0, 0},  //TV = 6.81(288 lines)  AV=2.00  SV=4.61  BV=4.20
    {9548,1536,1040, 0, 0, 0},  //TV = 6.71(308 lines)  AV=2.00  SV=4.61  BV=4.10
    {9982,1536,1056, 0, 0, 0},  //TV = 6.65(322 lines)  AV=2.00  SV=4.63  BV=4.02
    {9982,1664,1056, 0, 0, 0},  //TV = 6.65(322 lines)  AV=2.00  SV=4.74  BV=3.90
    {9982,1792,1048, 0, 0, 0},  //TV = 6.65(322 lines)  AV=2.00  SV=4.84  BV=3.81
    {9982,1920,1040, 0, 0, 0},  //TV = 6.65(322 lines)  AV=2.00  SV=4.93  BV=3.72
    {9982,2048,1056, 0, 0, 0},  //TV = 6.65(322 lines)  AV=2.00  SV=5.04  BV=3.60
    {9982,2176,1064, 0, 0, 0},  //TV = 6.65(322 lines)  AV=2.00  SV=5.14  BV=3.50
    {9982,2304,1072, 0, 0, 0},  //TV = 6.65(322 lines)  AV=2.00  SV=5.24  BV=3.41
    {9982,2560,1032, 0, 0, 0},  //TV = 6.65(322 lines)  AV=2.00  SV=5.33  BV=3.31
    {9982,2688,1056, 0, 0, 0},  //TV = 6.65(322 lines)  AV=2.00  SV=5.44  BV=3.21
    {9982,2944,1032, 0, 0, 0},  //TV = 6.65(322 lines)  AV=2.00  SV=5.53  BV=3.11
    {19995,1536,1056, 0, 0, 0},  //TV = 5.64(645 lines)  AV=2.00  SV=4.63  BV=3.01
    {19995,1664,1048, 0, 0, 0},  //TV = 5.64(645 lines)  AV=2.00  SV=4.73  BV=2.91
    {19995,1792,1040, 0, 0, 0},  //TV = 5.64(645 lines)  AV=2.00  SV=4.83  BV=2.81
    {19995,1920,1040, 0, 0, 0},  //TV = 5.64(645 lines)  AV=2.00  SV=4.93  BV=2.71
    {19995,2048,1048, 0, 0, 0},  //TV = 5.64(645 lines)  AV=2.00  SV=5.03  BV=2.61
    {19995,2176,1056, 0, 0, 0},  //TV = 5.64(645 lines)  AV=2.00  SV=5.13  BV=2.51
    {29977,1536,1072, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=4.65  BV=2.41
    {29977,1664,1056, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=4.74  BV=2.32
    {29977,1792,1056, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=4.85  BV=2.21
    {29977,1920,1056, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=4.95  BV=2.11
    {29977,2048,1064, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=5.06  BV=2.00
    {29977,2176,1072, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=5.15  BV=1.91
    {29977,2432,1024, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=5.25  BV=1.81
    {29977,2560,1048, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=5.36  BV=1.70
    {29977,2688,1064, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=5.45  BV=1.61
    {29977,2944,1040, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=5.55  BV=1.51
    {29977,3200,1032, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=5.66  BV=1.40
    {29977,3328,1056, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=5.74  BV=1.32
    {29977,3584,1056, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=5.85  BV=1.21
    {29977,3840,1056, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=5.95  BV=1.11
    {39990,3072,1064, 0, 0, 0},  //TV = 4.64(1290 lines)  AV=2.00  SV=5.64  BV=1.00
    {39990,3328,1048, 0, 0, 0},  //TV = 4.64(1290 lines)  AV=2.00  SV=5.73  BV=0.91
    {39990,3584,1040, 0, 0, 0},  //TV = 4.64(1290 lines)  AV=2.00  SV=5.83  BV=0.81
    {39990,3840,1040, 0, 0, 0},  //TV = 4.64(1290 lines)  AV=2.00  SV=5.93  BV=0.71
    {39990,4096,1048, 0, 0, 0},  //TV = 4.64(1290 lines)  AV=2.00  SV=6.03  BV=0.61
    {39990,4480,1024, 0, 0, 0},  //TV = 4.64(1290 lines)  AV=2.00  SV=6.13  BV=0.51
    {39990,4736,1040, 0, 0, 0},  //TV = 4.64(1290 lines)  AV=2.00  SV=6.23  BV=0.41
    {49972,4096,1032, 0, 0, 0},  //TV = 4.32(1612 lines)  AV=2.00  SV=6.01  BV=0.31
    {49972,4352,1040, 0, 0, 0},  //TV = 4.32(1612 lines)  AV=2.00  SV=6.11  BV=0.21
    {49972,4736,1024, 0, 0, 0},  //TV = 4.32(1612 lines)  AV=2.00  SV=6.21  BV=0.11
    {49972,5120,1032, 0, 0, 0},  //TV = 4.32(1612 lines)  AV=2.00  SV=6.33  BV=-0.01
    {49972,5504,1024, 0, 0, 0},  //TV = 4.32(1612 lines)  AV=2.00  SV=6.43  BV=-0.10
    {49972,5760,1040, 0, 0, 0},  //TV = 4.32(1612 lines)  AV=2.00  SV=6.51  BV=-0.19
    {49972,6272,1024, 0, 0, 0},  //TV = 4.32(1612 lines)  AV=2.00  SV=6.61  BV=-0.29
    {49972,6656,1040, 0, 0, 0},  //TV = 4.32(1612 lines)  AV=2.00  SV=6.72  BV=-0.40
    {59985,6016,1024, 0, 0, 0},  //TV = 4.06(1935 lines)  AV=2.00  SV=6.55  BV=-0.50
    {59985,6400,1032, 0, 0, 0},  //TV = 4.06(1935 lines)  AV=2.00  SV=6.66  BV=-0.60
    {59985,6912,1024, 0, 0, 0},  //TV = 4.06(1935 lines)  AV=2.00  SV=6.75  BV=-0.70
    {59985,7424,1024, 0, 0, 0},  //TV = 4.06(1935 lines)  AV=2.00  SV=6.86  BV=-0.80
    {69998,6784,1032, 0, 0, 0},  //TV = 3.84(2258 lines)  AV=2.00  SV=6.74  BV=-0.90
    {79980,6400,1024, 0, 0, 0},  //TV = 3.64(2580 lines)  AV=2.00  SV=6.64  BV=-1.00
    {79980,6784,1040, 0, 0, 0},  //TV = 3.64(2580 lines)  AV=2.00  SV=6.75  BV=-1.11
    {89993,6528,1024, 0, 0, 0},  //TV = 3.47(2903 lines)  AV=2.00  SV=6.67  BV=-1.20
    {89993,6912,1040, 0, 0, 0},  //TV = 3.47(2903 lines)  AV=2.00  SV=6.78  BV=-1.30
    {99975,6656,1040, 0, 0, 0},  //TV = 3.32(3225 lines)  AV=2.00  SV=6.72  BV=-1.40
    {99975,7168,1032, 0, 0, 0},  //TV = 3.32(3225 lines)  AV=2.00  SV=6.82  BV=-1.50
    {99975,7808,1024, 0, 0, 0},  //TV = 3.32(3225 lines)  AV=2.00  SV=6.93  BV=-1.61
    {99975,8320,1024, 0, 0, 0},  //TV = 3.32(3225 lines)  AV=2.00  SV=7.02  BV=-1.70
    {109988,8064,1032, 0, 0, 0},  //TV = 3.18(3548 lines)  AV=2.00  SV=6.99  BV=-1.80
    {119970,7936,1032, 0, 0, 0},  //TV = 3.06(3870 lines)  AV=2.00  SV=6.97  BV=-1.91
    {119970,8448,1032, 0, 0, 0},  //TV = 3.06(3870 lines)  AV=2.00  SV=7.06  BV=-2.00
    {119970,9088,1032, 0, 0, 0},  //TV = 3.06(3870 lines)  AV=2.00  SV=7.16  BV=-2.10
    {129983,9088,1024, 0, 0, 0},  //TV = 2.94(4193 lines)  AV=2.00  SV=7.15  BV=-2.21
    {139996,8960,1032, 0, 0, 0},  //TV = 2.84(4516 lines)  AV=2.00  SV=7.14  BV=-2.30
    {149978,8960,1032, 0, 0, 0},  //TV = 2.74(4838 lines)  AV=2.00  SV=7.14  BV=-2.40
    {159991,9088,1024, 0, 0, 0},  //TV = 2.64(5161 lines)  AV=2.00  SV=7.15  BV=-2.51
    {169973,9088,1032, 0, 0, 0},  //TV = 2.56(5483 lines)  AV=2.00  SV=7.16  BV=-2.60
    {179986,9216,1032, 0, 0, 0},  //TV = 2.47(5806 lines)  AV=2.00  SV=7.18  BV=-2.71
    {199981,8832,1032, 0, 0, 0},  //TV = 2.32(6451 lines)  AV=2.00  SV=7.12  BV=-2.80
    {199981,9472,1032, 0, 0, 0},  //TV = 2.32(6451 lines)  AV=2.00  SV=7.22  BV=-2.90
};

static strAETable g_AE_PreviewTable =
{
    AETABLE_RPEVIEW_AUTO,    //eAETableID
    130,    //u4TotalIndex
    20,    //u4StrobeTrigerBV
    100,    //i4MaxBV
    -29,    //i4MinBV
    LIB3A_AE_ISO_SPEED_AUTO, //ISO SPEED
    sPreviewPLineTable_60Hz,
    sPreviewPLineTable_50Hz,
    NULL,
};

static strEvSetting sVideoPLineTable_60Hz[105] =
{
    {155,1664,1024, 0, 0, 0},  //TV = 12.66(5 lines)  AV=2.00  SV=4.70  BV=9.96
    {155,1664,1056, 0, 0, 0},  //TV = 12.66(5 lines)  AV=2.00  SV=4.74  BV=9.91
    {155,1792,1048, 0, 0, 0},  //TV = 12.66(5 lines)  AV=2.00  SV=4.84  BV=9.81
    {186,1536,1104, 0, 0, 0},  //TV = 12.39(6 lines)  AV=2.00  SV=4.69  BV=9.70
    {186,1664,1088, 0, 0, 0},  //TV = 12.39(6 lines)  AV=2.00  SV=4.79  BV=9.60
    {217,1536,1080, 0, 0, 0},  //TV = 12.17(7 lines)  AV=2.00  SV=4.66  BV=9.51
    {217,1664,1064, 0, 0, 0},  //TV = 12.17(7 lines)  AV=2.00  SV=4.76  BV=9.41
    {248,1536,1088, 0, 0, 0},  //TV = 11.98(8 lines)  AV=2.00  SV=4.67  BV=9.30
    {248,1664,1072, 0, 0, 0},  //TV = 11.98(8 lines)  AV=2.00  SV=4.77  BV=9.21
    {279,1536,1104, 0, 0, 0},  //TV = 11.81(9 lines)  AV=2.00  SV=4.69  BV=9.11
    {310,1536,1072, 0, 0, 0},  //TV = 11.66(10 lines)  AV=2.00  SV=4.65  BV=9.00
    {341,1536,1040, 0, 0, 0},  //TV = 11.52(11 lines)  AV=2.00  SV=4.61  BV=8.91
    {341,1664,1032, 0, 0, 0},  //TV = 11.52(11 lines)  AV=2.00  SV=4.71  BV=8.81
    {372,1536,1104, 0, 0, 0},  //TV = 11.39(12 lines)  AV=2.00  SV=4.69  BV=8.70
    {403,1536,1088, 0, 0, 0},  //TV = 11.28(13 lines)  AV=2.00  SV=4.67  BV=8.60
    {434,1536,1088, 0, 0, 0},  //TV = 11.17(14 lines)  AV=2.00  SV=4.67  BV=8.50
    {465,1536,1080, 0, 0, 0},  //TV = 11.07(15 lines)  AV=2.00  SV=4.66  BV=8.41
    {496,1536,1088, 0, 0, 0},  //TV = 10.98(16 lines)  AV=2.00  SV=4.67  BV=8.30
    {558,1536,1040, 0, 0, 0},  //TV = 10.81(18 lines)  AV=2.00  SV=4.61  BV=8.20
    {589,1536,1048, 0, 0, 0},  //TV = 10.73(19 lines)  AV=2.00  SV=4.62  BV=8.11
    {620,1536,1072, 0, 0, 0},  //TV = 10.66(20 lines)  AV=2.00  SV=4.65  BV=8.00
    {682,1536,1040, 0, 0, 0},  //TV = 10.52(22 lines)  AV=2.00  SV=4.61  BV=7.91
    {713,1536,1064, 0, 0, 0},  //TV = 10.45(23 lines)  AV=2.00  SV=4.64  BV=7.81
    {775,1536,1056, 0, 0, 0},  //TV = 10.33(25 lines)  AV=2.00  SV=4.63  BV=7.70
    {837,1536,1040, 0, 0, 0},  //TV = 10.22(27 lines)  AV=2.00  SV=4.61  BV=7.62
    {899,1536,1048, 0, 0, 0},  //TV = 10.12(29 lines)  AV=2.00  SV=4.62  BV=7.50
    {961,1536,1040, 0, 0, 0},  //TV = 10.02(31 lines)  AV=2.00  SV=4.61  BV=7.42
    {1023,1536,1056, 0, 0, 0},  //TV = 9.93(33 lines)  AV=2.00  SV=4.63  BV=7.30
    {1085,1536,1064, 0, 0, 0},  //TV = 9.85(35 lines)  AV=2.00  SV=4.64  BV=7.21
    {1178,1536,1048, 0, 0, 0},  //TV = 9.73(38 lines)  AV=2.00  SV=4.62  BV=7.11
    {1271,1536,1040, 0, 0, 0},  //TV = 9.62(41 lines)  AV=2.00  SV=4.61  BV=7.01
    {1364,1536,1040, 0, 0, 0},  //TV = 9.52(44 lines)  AV=2.00  SV=4.61  BV=6.91
    {1457,1536,1040, 0, 0, 0},  //TV = 9.42(47 lines)  AV=2.00  SV=4.61  BV=6.82
    {1550,1536,1056, 0, 0, 0},  //TV = 9.33(50 lines)  AV=2.00  SV=4.63  BV=6.70
    {1674,1536,1040, 0, 0, 0},  //TV = 9.22(54 lines)  AV=2.00  SV=4.61  BV=6.62
    {1798,1536,1040, 0, 0, 0},  //TV = 9.12(58 lines)  AV=2.00  SV=4.61  BV=6.51
    {1922,1536,1040, 0, 0, 0},  //TV = 9.02(62 lines)  AV=2.00  SV=4.61  BV=6.42
    {2077,1536,1040, 0, 0, 0},  //TV = 8.91(67 lines)  AV=2.00  SV=4.61  BV=6.30
    {2201,1536,1048, 0, 0, 0},  //TV = 8.83(71 lines)  AV=2.00  SV=4.62  BV=6.21
    {2356,1536,1048, 0, 0, 0},  //TV = 8.73(76 lines)  AV=2.00  SV=4.62  BV=6.11
    {2542,1536,1040, 0, 0, 0},  //TV = 8.62(82 lines)  AV=2.00  SV=4.61  BV=6.01
    {2728,1536,1040, 0, 0, 0},  //TV = 8.52(88 lines)  AV=2.00  SV=4.61  BV=5.91
    {2914,1536,1048, 0, 0, 0},  //TV = 8.42(94 lines)  AV=2.00  SV=4.62  BV=5.80
    {3131,1536,1040, 0, 0, 0},  //TV = 8.32(101 lines)  AV=2.00  SV=4.61  BV=5.71
    {3348,1536,1040, 0, 0, 0},  //TV = 8.22(108 lines)  AV=2.00  SV=4.61  BV=5.62
    {3596,1536,1048, 0, 0, 0},  //TV = 8.12(116 lines)  AV=2.00  SV=4.62  BV=5.50
    {3875,1536,1040, 0, 0, 0},  //TV = 8.01(125 lines)  AV=2.00  SV=4.61  BV=5.40
    {4123,1536,1040, 0, 0, 0},  //TV = 7.92(133 lines)  AV=2.00  SV=4.61  BV=5.31
    {4433,1536,1040, 0, 0, 0},  //TV = 7.82(143 lines)  AV=2.00  SV=4.61  BV=5.21
    {4743,1536,1040, 0, 0, 0},  //TV = 7.72(153 lines)  AV=2.00  SV=4.61  BV=5.11
    {5115,1536,1040, 0, 0, 0},  //TV = 7.61(165 lines)  AV=2.00  SV=4.61  BV=5.00
    {5487,1536,1040, 0, 0, 0},  //TV = 7.51(177 lines)  AV=2.00  SV=4.61  BV=4.90
    {5859,1536,1040, 0, 0, 0},  //TV = 7.42(189 lines)  AV=2.00  SV=4.61  BV=4.81
    {6293,1536,1040, 0, 0, 0},  //TV = 7.31(203 lines)  AV=2.00  SV=4.61  BV=4.70
    {6727,1536,1040, 0, 0, 0},  //TV = 7.22(217 lines)  AV=2.00  SV=4.61  BV=4.61
    {7223,1536,1040, 0, 0, 0},  //TV = 7.11(233 lines)  AV=2.00  SV=4.61  BV=4.51
    {7781,1536,1040, 0, 0, 0},  //TV = 7.01(251 lines)  AV=2.00  SV=4.61  BV=4.40
    {8277,1536,1040, 0, 0, 0},  //TV = 6.92(267 lines)  AV=2.00  SV=4.61  BV=4.31
    {8308,1664,1032, 0, 0, 0},  //TV = 6.91(268 lines)  AV=2.00  SV=4.71  BV=4.20
    {8308,1792,1024, 0, 0, 0},  //TV = 6.91(268 lines)  AV=2.00  SV=4.81  BV=4.10
    {8308,1920,1024, 0, 0, 0},  //TV = 6.91(268 lines)  AV=2.00  SV=4.91  BV=4.00
    {8308,2048,1032, 0, 0, 0},  //TV = 6.91(268 lines)  AV=2.00  SV=5.01  BV=3.90
    {8308,2176,1032, 0, 0, 0},  //TV = 6.91(268 lines)  AV=2.00  SV=5.10  BV=3.81
    {8308,2304,1048, 0, 0, 0},  //TV = 6.91(268 lines)  AV=2.00  SV=5.20  BV=3.71
    {8308,2432,1064, 0, 0, 0},  //TV = 6.91(268 lines)  AV=2.00  SV=5.30  BV=3.61
    {8308,2688,1032, 0, 0, 0},  //TV = 6.91(268 lines)  AV=2.00  SV=5.40  BV=3.51
    {8308,2816,1056, 0, 0, 0},  //TV = 6.91(268 lines)  AV=2.00  SV=5.50  BV=3.41
    {8308,3072,1040, 0, 0, 0},  //TV = 6.91(268 lines)  AV=2.00  SV=5.61  BV=3.30
    {16647,1536,1104, 0, 0, 0},  //TV = 5.91(537 lines)  AV=2.00  SV=4.69  BV=3.22
    {16647,1664,1096, 0, 0, 0},  //TV = 5.91(537 lines)  AV=2.00  SV=4.80  BV=3.11
    {16647,1792,1088, 0, 0, 0},  //TV = 5.91(537 lines)  AV=2.00  SV=4.89  BV=3.01
    {16647,2048,1024, 0, 0, 0},  //TV = 5.91(537 lines)  AV=2.00  SV=5.00  BV=2.91
    {16647,2176,1032, 0, 0, 0},  //TV = 5.91(537 lines)  AV=2.00  SV=5.10  BV=2.81
    {24986,1536,1040, 0, 0, 0},  //TV = 5.32(806 lines)  AV=2.00  SV=4.61  BV=2.72
    {24986,1664,1032, 0, 0, 0},  //TV = 5.32(806 lines)  AV=2.00  SV=4.71  BV=2.61
    {24986,1792,1024, 0, 0, 0},  //TV = 5.32(806 lines)  AV=2.00  SV=4.81  BV=2.52
    {24986,1920,1024, 0, 0, 0},  //TV = 5.32(806 lines)  AV=2.00  SV=4.91  BV=2.42
    {24986,2048,1032, 0, 0, 0},  //TV = 5.32(806 lines)  AV=2.00  SV=5.01  BV=2.31
    {32674,1664,1048, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=4.73  BV=2.20
    {32674,1792,1032, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=4.82  BV=2.12
    {32674,1920,1040, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=4.93  BV=2.01
    {32674,2048,1040, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=5.02  BV=1.91
    {32674,2176,1056, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=5.13  BV=1.80
    {32674,2304,1064, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=5.23  BV=1.71
    {32674,2560,1024, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=5.32  BV=1.61
    {32674,2688,1048, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=5.43  BV=1.51
    {32674,2944,1032, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=5.53  BV=1.40
    {32674,3072,1056, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=5.63  BV=1.31
    {32674,3328,1040, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=5.72  BV=1.21
    {32674,3584,1032, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=5.82  BV=1.12
    {32674,3840,1040, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=5.93  BV=1.01
    {32674,4096,1048, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=6.03  BV=0.90
    {32674,4480,1024, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=6.13  BV=0.81
    {32674,4736,1032, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=6.22  BV=0.72
    {32674,5120,1024, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=6.32  BV=0.61
    {32674,5376,1048, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=6.43  BV=0.51
    {32674,5888,1032, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=6.53  BV=0.40
    {32674,6272,1032, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=6.63  BV=0.31
    {32674,6784,1024, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=6.73  BV=0.21
    {32674,7168,1040, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=6.83  BV=0.11
    {32674,7808,1024, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=6.93  BV=0.00
    {32674,8320,1032, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=7.03  BV=-0.10
    {32674,8960,1024, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=7.13  BV=-0.19
    {32674,9600,1024, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=7.23  BV=-0.29
    {32674,10240,1032, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=7.33  BV=-0.40
};

static strEvSetting sVideoPLineTable_50Hz[105] =
{
    {155,1664,1024, 0, 0, 0},  //TV = 12.66(5 lines)  AV=2.00  SV=4.70  BV=9.96
    {155,1664,1056, 0, 0, 0},  //TV = 12.66(5 lines)  AV=2.00  SV=4.74  BV=9.91
    {155,1792,1048, 0, 0, 0},  //TV = 12.66(5 lines)  AV=2.00  SV=4.84  BV=9.81
    {186,1536,1104, 0, 0, 0},  //TV = 12.39(6 lines)  AV=2.00  SV=4.69  BV=9.70
    {186,1664,1088, 0, 0, 0},  //TV = 12.39(6 lines)  AV=2.00  SV=4.79  BV=9.60
    {217,1536,1080, 0, 0, 0},  //TV = 12.17(7 lines)  AV=2.00  SV=4.66  BV=9.51
    {217,1664,1064, 0, 0, 0},  //TV = 12.17(7 lines)  AV=2.00  SV=4.76  BV=9.41
    {248,1536,1088, 0, 0, 0},  //TV = 11.98(8 lines)  AV=2.00  SV=4.67  BV=9.30
    {248,1664,1072, 0, 0, 0},  //TV = 11.98(8 lines)  AV=2.00  SV=4.77  BV=9.21
    {279,1536,1104, 0, 0, 0},  //TV = 11.81(9 lines)  AV=2.00  SV=4.69  BV=9.11
    {310,1536,1072, 0, 0, 0},  //TV = 11.66(10 lines)  AV=2.00  SV=4.65  BV=9.00
    {341,1536,1040, 0, 0, 0},  //TV = 11.52(11 lines)  AV=2.00  SV=4.61  BV=8.91
    {341,1664,1032, 0, 0, 0},  //TV = 11.52(11 lines)  AV=2.00  SV=4.71  BV=8.81
    {372,1536,1104, 0, 0, 0},  //TV = 11.39(12 lines)  AV=2.00  SV=4.69  BV=8.70
    {403,1536,1088, 0, 0, 0},  //TV = 11.28(13 lines)  AV=2.00  SV=4.67  BV=8.60
    {434,1536,1088, 0, 0, 0},  //TV = 11.17(14 lines)  AV=2.00  SV=4.67  BV=8.50
    {465,1536,1080, 0, 0, 0},  //TV = 11.07(15 lines)  AV=2.00  SV=4.66  BV=8.41
    {496,1536,1088, 0, 0, 0},  //TV = 10.98(16 lines)  AV=2.00  SV=4.67  BV=8.30
    {558,1536,1040, 0, 0, 0},  //TV = 10.81(18 lines)  AV=2.00  SV=4.61  BV=8.20
    {589,1536,1048, 0, 0, 0},  //TV = 10.73(19 lines)  AV=2.00  SV=4.62  BV=8.11
    {620,1536,1072, 0, 0, 0},  //TV = 10.66(20 lines)  AV=2.00  SV=4.65  BV=8.00
    {682,1536,1040, 0, 0, 0},  //TV = 10.52(22 lines)  AV=2.00  SV=4.61  BV=7.91
    {713,1536,1064, 0, 0, 0},  //TV = 10.45(23 lines)  AV=2.00  SV=4.64  BV=7.81
    {775,1536,1056, 0, 0, 0},  //TV = 10.33(25 lines)  AV=2.00  SV=4.63  BV=7.70
    {837,1536,1040, 0, 0, 0},  //TV = 10.22(27 lines)  AV=2.00  SV=4.61  BV=7.62
    {899,1536,1048, 0, 0, 0},  //TV = 10.12(29 lines)  AV=2.00  SV=4.62  BV=7.50
    {961,1536,1040, 0, 0, 0},  //TV = 10.02(31 lines)  AV=2.00  SV=4.61  BV=7.42
    {1023,1536,1056, 0, 0, 0},  //TV = 9.93(33 lines)  AV=2.00  SV=4.63  BV=7.30
    {1085,1536,1064, 0, 0, 0},  //TV = 9.85(35 lines)  AV=2.00  SV=4.64  BV=7.21
    {1178,1536,1048, 0, 0, 0},  //TV = 9.73(38 lines)  AV=2.00  SV=4.62  BV=7.11
    {1271,1536,1040, 0, 0, 0},  //TV = 9.62(41 lines)  AV=2.00  SV=4.61  BV=7.01
    {1364,1536,1040, 0, 0, 0},  //TV = 9.52(44 lines)  AV=2.00  SV=4.61  BV=6.91
    {1457,1536,1040, 0, 0, 0},  //TV = 9.42(47 lines)  AV=2.00  SV=4.61  BV=6.82
    {1550,1536,1056, 0, 0, 0},  //TV = 9.33(50 lines)  AV=2.00  SV=4.63  BV=6.70
    {1674,1536,1040, 0, 0, 0},  //TV = 9.22(54 lines)  AV=2.00  SV=4.61  BV=6.62
    {1798,1536,1040, 0, 0, 0},  //TV = 9.12(58 lines)  AV=2.00  SV=4.61  BV=6.51
    {1922,1536,1040, 0, 0, 0},  //TV = 9.02(62 lines)  AV=2.00  SV=4.61  BV=6.42
    {2077,1536,1040, 0, 0, 0},  //TV = 8.91(67 lines)  AV=2.00  SV=4.61  BV=6.30
    {2201,1536,1048, 0, 0, 0},  //TV = 8.83(71 lines)  AV=2.00  SV=4.62  BV=6.21
    {2356,1536,1048, 0, 0, 0},  //TV = 8.73(76 lines)  AV=2.00  SV=4.62  BV=6.11
    {2542,1536,1040, 0, 0, 0},  //TV = 8.62(82 lines)  AV=2.00  SV=4.61  BV=6.01
    {2728,1536,1040, 0, 0, 0},  //TV = 8.52(88 lines)  AV=2.00  SV=4.61  BV=5.91
    {2914,1536,1048, 0, 0, 0},  //TV = 8.42(94 lines)  AV=2.00  SV=4.62  BV=5.80
    {3131,1536,1040, 0, 0, 0},  //TV = 8.32(101 lines)  AV=2.00  SV=4.61  BV=5.71
    {3348,1536,1040, 0, 0, 0},  //TV = 8.22(108 lines)  AV=2.00  SV=4.61  BV=5.62
    {3596,1536,1048, 0, 0, 0},  //TV = 8.12(116 lines)  AV=2.00  SV=4.62  BV=5.50
    {3875,1536,1040, 0, 0, 0},  //TV = 8.01(125 lines)  AV=2.00  SV=4.61  BV=5.40
    {4123,1536,1040, 0, 0, 0},  //TV = 7.92(133 lines)  AV=2.00  SV=4.61  BV=5.31
    {4433,1536,1040, 0, 0, 0},  //TV = 7.82(143 lines)  AV=2.00  SV=4.61  BV=5.21
    {4743,1536,1040, 0, 0, 0},  //TV = 7.72(153 lines)  AV=2.00  SV=4.61  BV=5.11
    {5115,1536,1040, 0, 0, 0},  //TV = 7.61(165 lines)  AV=2.00  SV=4.61  BV=5.00
    {5487,1536,1040, 0, 0, 0},  //TV = 7.51(177 lines)  AV=2.00  SV=4.61  BV=4.90
    {5859,1536,1040, 0, 0, 0},  //TV = 7.42(189 lines)  AV=2.00  SV=4.61  BV=4.81
    {6293,1536,1040, 0, 0, 0},  //TV = 7.31(203 lines)  AV=2.00  SV=4.61  BV=4.70
    {6727,1536,1040, 0, 0, 0},  //TV = 7.22(217 lines)  AV=2.00  SV=4.61  BV=4.61
    {7223,1536,1040, 0, 0, 0},  //TV = 7.11(233 lines)  AV=2.00  SV=4.61  BV=4.51
    {7781,1536,1040, 0, 0, 0},  //TV = 7.01(251 lines)  AV=2.00  SV=4.61  BV=4.40
    {8277,1536,1040, 0, 0, 0},  //TV = 6.92(267 lines)  AV=2.00  SV=4.61  BV=4.31
    {8928,1536,1040, 0, 0, 0},  //TV = 6.81(288 lines)  AV=2.00  SV=4.61  BV=4.20
    {9548,1536,1040, 0, 0, 0},  //TV = 6.71(308 lines)  AV=2.00  SV=4.61  BV=4.10
    {9982,1536,1056, 0, 0, 0},  //TV = 6.65(322 lines)  AV=2.00  SV=4.63  BV=4.02
    {9982,1664,1056, 0, 0, 0},  //TV = 6.65(322 lines)  AV=2.00  SV=4.74  BV=3.90
    {9982,1792,1048, 0, 0, 0},  //TV = 6.65(322 lines)  AV=2.00  SV=4.84  BV=3.81
    {9982,1920,1040, 0, 0, 0},  //TV = 6.65(322 lines)  AV=2.00  SV=4.93  BV=3.72
    {9982,2048,1056, 0, 0, 0},  //TV = 6.65(322 lines)  AV=2.00  SV=5.04  BV=3.60
    {9982,2176,1064, 0, 0, 0},  //TV = 6.65(322 lines)  AV=2.00  SV=5.14  BV=3.50
    {9982,2304,1072, 0, 0, 0},  //TV = 6.65(322 lines)  AV=2.00  SV=5.24  BV=3.41
    {9982,2560,1032, 0, 0, 0},  //TV = 6.65(322 lines)  AV=2.00  SV=5.33  BV=3.31
    {9982,2688,1056, 0, 0, 0},  //TV = 6.65(322 lines)  AV=2.00  SV=5.44  BV=3.21
    {9982,2944,1032, 0, 0, 0},  //TV = 6.65(322 lines)  AV=2.00  SV=5.53  BV=3.11
    {19995,1536,1056, 0, 0, 0},  //TV = 5.64(645 lines)  AV=2.00  SV=4.63  BV=3.01
    {19995,1664,1048, 0, 0, 0},  //TV = 5.64(645 lines)  AV=2.00  SV=4.73  BV=2.91
    {19995,1792,1040, 0, 0, 0},  //TV = 5.64(645 lines)  AV=2.00  SV=4.83  BV=2.81
    {19995,1920,1040, 0, 0, 0},  //TV = 5.64(645 lines)  AV=2.00  SV=4.93  BV=2.71
    {19995,2048,1048, 0, 0, 0},  //TV = 5.64(645 lines)  AV=2.00  SV=5.03  BV=2.61
    {19995,2176,1056, 0, 0, 0},  //TV = 5.64(645 lines)  AV=2.00  SV=5.13  BV=2.51
    {29977,1536,1072, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=4.65  BV=2.41
    {29977,1664,1056, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=4.74  BV=2.32
    {29977,1792,1056, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=4.85  BV=2.21
    {29977,1920,1056, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=4.95  BV=2.11
    {29977,2048,1064, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=5.06  BV=2.00
    {29977,2176,1072, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=5.15  BV=1.91
    {29977,2432,1024, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=5.25  BV=1.81
    {29977,2560,1048, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=5.36  BV=1.70
    {29977,2688,1064, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=5.45  BV=1.61
    {29977,2944,1040, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=5.55  BV=1.51
    {29977,3200,1032, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=5.66  BV=1.40
    {29977,3328,1056, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=5.74  BV=1.32
    {29977,3584,1056, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=5.85  BV=1.21
    {29977,3840,1056, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=5.95  BV=1.11
    {29977,4224,1032, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=6.06  BV=1.00
    {29977,4480,1040, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=6.15  BV=0.91
    {29977,4864,1024, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=6.25  BV=0.81
    {29977,5120,1040, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=6.34  BV=0.72
    {29977,5504,1040, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=6.45  BV=0.61
    {29977,5888,1040, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=6.55  BV=0.51
    {29977,6400,1032, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=6.66  BV=0.40
    {29977,6912,1024, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=6.75  BV=0.31
    {29977,7296,1040, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=6.86  BV=0.20
    {29977,7936,1024, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=6.95  BV=0.11
    {29977,8448,1032, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=7.06  BV=0.00
    {29977,9088,1032, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=7.16  BV=-0.10
    {29977,9728,1032, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=7.26  BV=-0.20
    {29977,10240,1048, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=7.36  BV=-0.30
    {29977,10240,1128, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=7.46  BV=-0.40
};

static strAETable g_AE_VideoTable =
{
    AETABLE_VIDEO,    //eAETableID
    105,    //u4TotalIndex
    20,    //u4StrobeTrigerBV
    100,    //i4MaxBV
    -4,    //i4MinBV
    LIB3A_AE_ISO_SPEED_AUTO, //ISO SPEED
    sVideoPLineTable_60Hz,
    sVideoPLineTable_50Hz,
    NULL,
};

static strEvSetting sVideoNightPLineTable_60Hz[115] =
{
    {155,1664,1024, 0, 0, 0},  //TV = 12.66(5 lines)  AV=2.00  SV=4.70  BV=9.96
    {155,1664,1056, 0, 0, 0},  //TV = 12.66(5 lines)  AV=2.00  SV=4.74  BV=9.91
    {155,1792,1048, 0, 0, 0},  //TV = 12.66(5 lines)  AV=2.00  SV=4.84  BV=9.81
    {186,1536,1104, 0, 0, 0},  //TV = 12.39(6 lines)  AV=2.00  SV=4.69  BV=9.70
    {186,1664,1088, 0, 0, 0},  //TV = 12.39(6 lines)  AV=2.00  SV=4.79  BV=9.60
    {217,1536,1080, 0, 0, 0},  //TV = 12.17(7 lines)  AV=2.00  SV=4.66  BV=9.51
    {217,1664,1064, 0, 0, 0},  //TV = 12.17(7 lines)  AV=2.00  SV=4.76  BV=9.41
    {248,1536,1088, 0, 0, 0},  //TV = 11.98(8 lines)  AV=2.00  SV=4.67  BV=9.30
    {248,1664,1072, 0, 0, 0},  //TV = 11.98(8 lines)  AV=2.00  SV=4.77  BV=9.21
    {279,1536,1104, 0, 0, 0},  //TV = 11.81(9 lines)  AV=2.00  SV=4.69  BV=9.11
    {310,1536,1072, 0, 0, 0},  //TV = 11.66(10 lines)  AV=2.00  SV=4.65  BV=9.00
    {341,1536,1040, 0, 0, 0},  //TV = 11.52(11 lines)  AV=2.00  SV=4.61  BV=8.91
    {341,1664,1032, 0, 0, 0},  //TV = 11.52(11 lines)  AV=2.00  SV=4.71  BV=8.81
    {372,1536,1104, 0, 0, 0},  //TV = 11.39(12 lines)  AV=2.00  SV=4.69  BV=8.70
    {403,1536,1088, 0, 0, 0},  //TV = 11.28(13 lines)  AV=2.00  SV=4.67  BV=8.60
    {434,1536,1088, 0, 0, 0},  //TV = 11.17(14 lines)  AV=2.00  SV=4.67  BV=8.50
    {465,1536,1080, 0, 0, 0},  //TV = 11.07(15 lines)  AV=2.00  SV=4.66  BV=8.41
    {496,1536,1088, 0, 0, 0},  //TV = 10.98(16 lines)  AV=2.00  SV=4.67  BV=8.30
    {558,1536,1040, 0, 0, 0},  //TV = 10.81(18 lines)  AV=2.00  SV=4.61  BV=8.20
    {589,1536,1048, 0, 0, 0},  //TV = 10.73(19 lines)  AV=2.00  SV=4.62  BV=8.11
    {620,1536,1072, 0, 0, 0},  //TV = 10.66(20 lines)  AV=2.00  SV=4.65  BV=8.00
    {682,1536,1040, 0, 0, 0},  //TV = 10.52(22 lines)  AV=2.00  SV=4.61  BV=7.91
    {713,1536,1064, 0, 0, 0},  //TV = 10.45(23 lines)  AV=2.00  SV=4.64  BV=7.81
    {775,1536,1056, 0, 0, 0},  //TV = 10.33(25 lines)  AV=2.00  SV=4.63  BV=7.70
    {837,1536,1040, 0, 0, 0},  //TV = 10.22(27 lines)  AV=2.00  SV=4.61  BV=7.62
    {899,1536,1048, 0, 0, 0},  //TV = 10.12(29 lines)  AV=2.00  SV=4.62  BV=7.50
    {961,1536,1040, 0, 0, 0},  //TV = 10.02(31 lines)  AV=2.00  SV=4.61  BV=7.42
    {1023,1536,1056, 0, 0, 0},  //TV = 9.93(33 lines)  AV=2.00  SV=4.63  BV=7.30
    {1085,1536,1064, 0, 0, 0},  //TV = 9.85(35 lines)  AV=2.00  SV=4.64  BV=7.21
    {1178,1536,1048, 0, 0, 0},  //TV = 9.73(38 lines)  AV=2.00  SV=4.62  BV=7.11
    {1271,1536,1040, 0, 0, 0},  //TV = 9.62(41 lines)  AV=2.00  SV=4.61  BV=7.01
    {1364,1536,1040, 0, 0, 0},  //TV = 9.52(44 lines)  AV=2.00  SV=4.61  BV=6.91
    {1457,1536,1040, 0, 0, 0},  //TV = 9.42(47 lines)  AV=2.00  SV=4.61  BV=6.82
    {1550,1536,1056, 0, 0, 0},  //TV = 9.33(50 lines)  AV=2.00  SV=4.63  BV=6.70
    {1674,1536,1040, 0, 0, 0},  //TV = 9.22(54 lines)  AV=2.00  SV=4.61  BV=6.62
    {1798,1536,1040, 0, 0, 0},  //TV = 9.12(58 lines)  AV=2.00  SV=4.61  BV=6.51
    {1922,1536,1040, 0, 0, 0},  //TV = 9.02(62 lines)  AV=2.00  SV=4.61  BV=6.42
    {2077,1536,1040, 0, 0, 0},  //TV = 8.91(67 lines)  AV=2.00  SV=4.61  BV=6.30
    {2201,1536,1048, 0, 0, 0},  //TV = 8.83(71 lines)  AV=2.00  SV=4.62  BV=6.21
    {2356,1536,1048, 0, 0, 0},  //TV = 8.73(76 lines)  AV=2.00  SV=4.62  BV=6.11
    {2542,1536,1040, 0, 0, 0},  //TV = 8.62(82 lines)  AV=2.00  SV=4.61  BV=6.01
    {2728,1536,1040, 0, 0, 0},  //TV = 8.52(88 lines)  AV=2.00  SV=4.61  BV=5.91
    {2914,1536,1048, 0, 0, 0},  //TV = 8.42(94 lines)  AV=2.00  SV=4.62  BV=5.80
    {3131,1536,1040, 0, 0, 0},  //TV = 8.32(101 lines)  AV=2.00  SV=4.61  BV=5.71
    {3348,1536,1040, 0, 0, 0},  //TV = 8.22(108 lines)  AV=2.00  SV=4.61  BV=5.62
    {3596,1536,1048, 0, 0, 0},  //TV = 8.12(116 lines)  AV=2.00  SV=4.62  BV=5.50
    {3875,1536,1040, 0, 0, 0},  //TV = 8.01(125 lines)  AV=2.00  SV=4.61  BV=5.40
    {4123,1536,1040, 0, 0, 0},  //TV = 7.92(133 lines)  AV=2.00  SV=4.61  BV=5.31
    {4433,1536,1040, 0, 0, 0},  //TV = 7.82(143 lines)  AV=2.00  SV=4.61  BV=5.21
    {4743,1536,1040, 0, 0, 0},  //TV = 7.72(153 lines)  AV=2.00  SV=4.61  BV=5.11
    {5115,1536,1040, 0, 0, 0},  //TV = 7.61(165 lines)  AV=2.00  SV=4.61  BV=5.00
    {5487,1536,1040, 0, 0, 0},  //TV = 7.51(177 lines)  AV=2.00  SV=4.61  BV=4.90
    {5859,1536,1040, 0, 0, 0},  //TV = 7.42(189 lines)  AV=2.00  SV=4.61  BV=4.81
    {6293,1536,1040, 0, 0, 0},  //TV = 7.31(203 lines)  AV=2.00  SV=4.61  BV=4.70
    {6727,1536,1040, 0, 0, 0},  //TV = 7.22(217 lines)  AV=2.00  SV=4.61  BV=4.61
    {7223,1536,1040, 0, 0, 0},  //TV = 7.11(233 lines)  AV=2.00  SV=4.61  BV=4.51
    {7781,1536,1040, 0, 0, 0},  //TV = 7.01(251 lines)  AV=2.00  SV=4.61  BV=4.40
    {8277,1536,1040, 0, 0, 0},  //TV = 6.92(267 lines)  AV=2.00  SV=4.61  BV=4.31
    {8308,1664,1032, 0, 0, 0},  //TV = 6.91(268 lines)  AV=2.00  SV=4.71  BV=4.20
    {8308,1792,1024, 0, 0, 0},  //TV = 6.91(268 lines)  AV=2.00  SV=4.81  BV=4.10
    {8308,1920,1024, 0, 0, 0},  //TV = 6.91(268 lines)  AV=2.00  SV=4.91  BV=4.00
    {8308,2048,1032, 0, 0, 0},  //TV = 6.91(268 lines)  AV=2.00  SV=5.01  BV=3.90
    {8308,2176,1032, 0, 0, 0},  //TV = 6.91(268 lines)  AV=2.00  SV=5.10  BV=3.81
    {8308,2304,1048, 0, 0, 0},  //TV = 6.91(268 lines)  AV=2.00  SV=5.20  BV=3.71
    {8308,2432,1064, 0, 0, 0},  //TV = 6.91(268 lines)  AV=2.00  SV=5.30  BV=3.61
    {8308,2688,1032, 0, 0, 0},  //TV = 6.91(268 lines)  AV=2.00  SV=5.40  BV=3.51
    {8308,2816,1056, 0, 0, 0},  //TV = 6.91(268 lines)  AV=2.00  SV=5.50  BV=3.41
    {8308,3072,1040, 0, 0, 0},  //TV = 6.91(268 lines)  AV=2.00  SV=5.61  BV=3.30
    {16647,1536,1104, 0, 0, 0},  //TV = 5.91(537 lines)  AV=2.00  SV=4.69  BV=3.22
    {16647,1664,1096, 0, 0, 0},  //TV = 5.91(537 lines)  AV=2.00  SV=4.80  BV=3.11
    {16647,1792,1088, 0, 0, 0},  //TV = 5.91(537 lines)  AV=2.00  SV=4.89  BV=3.01
    {16647,2048,1024, 0, 0, 0},  //TV = 5.91(537 lines)  AV=2.00  SV=5.00  BV=2.91
    {16647,2176,1032, 0, 0, 0},  //TV = 5.91(537 lines)  AV=2.00  SV=5.10  BV=2.81
    {24986,1536,1040, 0, 0, 0},  //TV = 5.32(806 lines)  AV=2.00  SV=4.61  BV=2.72
    {24986,1664,1032, 0, 0, 0},  //TV = 5.32(806 lines)  AV=2.00  SV=4.71  BV=2.61
    {24986,1792,1024, 0, 0, 0},  //TV = 5.32(806 lines)  AV=2.00  SV=4.81  BV=2.52
    {24986,1920,1024, 0, 0, 0},  //TV = 5.32(806 lines)  AV=2.00  SV=4.91  BV=2.42
    {24986,2048,1032, 0, 0, 0},  //TV = 5.32(806 lines)  AV=2.00  SV=5.01  BV=2.31
    {32674,1664,1040, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=4.72  BV=2.21
    {32674,1792,1032, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=4.82  BV=2.12
    {32674,1920,1040, 0, 0, 0},  //TV = 4.94(1054 lines)  AV=2.00  SV=4.93  BV=2.01
    {40858,1664,1024, 0, 0, 0},  //TV = 4.61(1318 lines)  AV=2.00  SV=4.70  BV=1.91
    {40858,1664,1096, 0, 0, 0},  //TV = 4.61(1318 lines)  AV=2.00  SV=4.80  BV=1.81
    {48980,1536,1064, 0, 0, 0},  //TV = 4.35(1580 lines)  AV=2.00  SV=4.64  BV=1.71
    {48980,1664,1056, 0, 0, 0},  //TV = 4.35(1580 lines)  AV=2.00  SV=4.74  BV=1.61
    {48980,1792,1048, 0, 0, 0},  //TV = 4.35(1580 lines)  AV=2.00  SV=4.84  BV=1.51
    {57164,1664,1032, 0, 0, 0},  //TV = 4.13(1844 lines)  AV=2.00  SV=4.71  BV=1.42
    {57164,1792,1032, 0, 0, 0},  //TV = 4.13(1844 lines)  AV=2.00  SV=4.82  BV=1.31
    {65317,1664,1048, 0, 0, 0},  //TV = 3.94(2107 lines)  AV=2.00  SV=4.73  BV=1.20
    {65317,1792,1032, 0, 0, 0},  //TV = 3.94(2107 lines)  AV=2.00  SV=4.82  BV=1.12
    {65317,1920,1040, 0, 0, 0},  //TV = 3.94(2107 lines)  AV=2.00  SV=4.93  BV=1.01
    {65317,2048,1040, 0, 0, 0},  //TV = 3.94(2107 lines)  AV=2.00  SV=5.02  BV=0.91
    {65317,2176,1056, 0, 0, 0},  //TV = 3.94(2107 lines)  AV=2.00  SV=5.13  BV=0.80
    {65317,2304,1064, 0, 0, 0},  //TV = 3.94(2107 lines)  AV=2.00  SV=5.23  BV=0.71
    {65317,2560,1024, 0, 0, 0},  //TV = 3.94(2107 lines)  AV=2.00  SV=5.32  BV=0.61
    {65317,2688,1056, 0, 0, 0},  //TV = 3.94(2107 lines)  AV=2.00  SV=5.44  BV=0.50
    {65317,2944,1032, 0, 0, 0},  //TV = 3.94(2107 lines)  AV=2.00  SV=5.53  BV=0.40
    {65317,3072,1056, 0, 0, 0},  //TV = 3.94(2107 lines)  AV=2.00  SV=5.63  BV=0.31
    {65317,3328,1040, 0, 0, 0},  //TV = 3.94(2107 lines)  AV=2.00  SV=5.72  BV=0.21
    {65317,3584,1032, 0, 0, 0},  //TV = 3.94(2107 lines)  AV=2.00  SV=5.82  BV=0.12
    {65317,3840,1040, 0, 0, 0},  //TV = 3.94(2107 lines)  AV=2.00  SV=5.93  BV=0.01
    {65317,4096,1056, 0, 0, 0},  //TV = 3.94(2107 lines)  AV=2.00  SV=6.04  BV=-0.11
    {65317,4480,1032, 0, 0, 0},  //TV = 3.94(2107 lines)  AV=2.00  SV=6.14  BV=-0.20
    {65317,4736,1040, 0, 0, 0},  //TV = 3.94(2107 lines)  AV=2.00  SV=6.23  BV=-0.30
    {65317,5120,1032, 0, 0, 0},  //TV = 3.94(2107 lines)  AV=2.00  SV=6.33  BV=-0.40
    {65317,5504,1024, 0, 0, 0},  //TV = 3.94(2107 lines)  AV=2.00  SV=6.43  BV=-0.49
    {65317,5888,1032, 0, 0, 0},  //TV = 3.94(2107 lines)  AV=2.00  SV=6.53  BV=-0.60
    {65317,6272,1040, 0, 0, 0},  //TV = 3.94(2107 lines)  AV=2.00  SV=6.64  BV=-0.70
    {65317,6784,1032, 0, 0, 0},  //TV = 3.94(2107 lines)  AV=2.00  SV=6.74  BV=-0.80
    {65317,7296,1024, 0, 0, 0},  //TV = 3.94(2107 lines)  AV=2.00  SV=6.83  BV=-0.90
    {65317,7808,1032, 0, 0, 0},  //TV = 3.94(2107 lines)  AV=2.00  SV=6.94  BV=-1.01
    {65317,8320,1032, 0, 0, 0},  //TV = 3.94(2107 lines)  AV=2.00  SV=7.03  BV=-1.10
    {65317,8960,1024, 0, 0, 0},  //TV = 3.94(2107 lines)  AV=2.00  SV=7.13  BV=-1.19
    {65317,9600,1024, 0, 0, 0},  //TV = 3.94(2107 lines)  AV=2.00  SV=7.23  BV=-1.29
    {65317,10240,1032, 0, 0, 0},  //TV = 3.94(2107 lines)  AV=2.00  SV=7.33  BV=-1.40
};

static strEvSetting sVideoNightPLineTable_50Hz[115] =
{
    {155,1664,1024, 0, 0, 0},  //TV = 12.66(5 lines)  AV=2.00  SV=4.70  BV=9.96
    {155,1664,1056, 0, 0, 0},  //TV = 12.66(5 lines)  AV=2.00  SV=4.74  BV=9.91
    {155,1792,1048, 0, 0, 0},  //TV = 12.66(5 lines)  AV=2.00  SV=4.84  BV=9.81
    {186,1536,1104, 0, 0, 0},  //TV = 12.39(6 lines)  AV=2.00  SV=4.69  BV=9.70
    {186,1664,1088, 0, 0, 0},  //TV = 12.39(6 lines)  AV=2.00  SV=4.79  BV=9.60
    {217,1536,1080, 0, 0, 0},  //TV = 12.17(7 lines)  AV=2.00  SV=4.66  BV=9.51
    {217,1664,1064, 0, 0, 0},  //TV = 12.17(7 lines)  AV=2.00  SV=4.76  BV=9.41
    {248,1536,1088, 0, 0, 0},  //TV = 11.98(8 lines)  AV=2.00  SV=4.67  BV=9.30
    {248,1664,1072, 0, 0, 0},  //TV = 11.98(8 lines)  AV=2.00  SV=4.77  BV=9.21
    {279,1536,1104, 0, 0, 0},  //TV = 11.81(9 lines)  AV=2.00  SV=4.69  BV=9.11
    {310,1536,1072, 0, 0, 0},  //TV = 11.66(10 lines)  AV=2.00  SV=4.65  BV=9.00
    {341,1536,1040, 0, 0, 0},  //TV = 11.52(11 lines)  AV=2.00  SV=4.61  BV=8.91
    {341,1664,1032, 0, 0, 0},  //TV = 11.52(11 lines)  AV=2.00  SV=4.71  BV=8.81
    {372,1536,1104, 0, 0, 0},  //TV = 11.39(12 lines)  AV=2.00  SV=4.69  BV=8.70
    {403,1536,1088, 0, 0, 0},  //TV = 11.28(13 lines)  AV=2.00  SV=4.67  BV=8.60
    {434,1536,1088, 0, 0, 0},  //TV = 11.17(14 lines)  AV=2.00  SV=4.67  BV=8.50
    {465,1536,1080, 0, 0, 0},  //TV = 11.07(15 lines)  AV=2.00  SV=4.66  BV=8.41
    {496,1536,1088, 0, 0, 0},  //TV = 10.98(16 lines)  AV=2.00  SV=4.67  BV=8.30
    {558,1536,1040, 0, 0, 0},  //TV = 10.81(18 lines)  AV=2.00  SV=4.61  BV=8.20
    {589,1536,1048, 0, 0, 0},  //TV = 10.73(19 lines)  AV=2.00  SV=4.62  BV=8.11
    {620,1536,1072, 0, 0, 0},  //TV = 10.66(20 lines)  AV=2.00  SV=4.65  BV=8.00
    {682,1536,1040, 0, 0, 0},  //TV = 10.52(22 lines)  AV=2.00  SV=4.61  BV=7.91
    {713,1536,1064, 0, 0, 0},  //TV = 10.45(23 lines)  AV=2.00  SV=4.64  BV=7.81
    {775,1536,1056, 0, 0, 0},  //TV = 10.33(25 lines)  AV=2.00  SV=4.63  BV=7.70
    {837,1536,1040, 0, 0, 0},  //TV = 10.22(27 lines)  AV=2.00  SV=4.61  BV=7.62
    {899,1536,1048, 0, 0, 0},  //TV = 10.12(29 lines)  AV=2.00  SV=4.62  BV=7.50
    {961,1536,1040, 0, 0, 0},  //TV = 10.02(31 lines)  AV=2.00  SV=4.61  BV=7.42
    {1023,1536,1056, 0, 0, 0},  //TV = 9.93(33 lines)  AV=2.00  SV=4.63  BV=7.30
    {1085,1536,1064, 0, 0, 0},  //TV = 9.85(35 lines)  AV=2.00  SV=4.64  BV=7.21
    {1178,1536,1048, 0, 0, 0},  //TV = 9.73(38 lines)  AV=2.00  SV=4.62  BV=7.11
    {1271,1536,1040, 0, 0, 0},  //TV = 9.62(41 lines)  AV=2.00  SV=4.61  BV=7.01
    {1364,1536,1040, 0, 0, 0},  //TV = 9.52(44 lines)  AV=2.00  SV=4.61  BV=6.91
    {1457,1536,1040, 0, 0, 0},  //TV = 9.42(47 lines)  AV=2.00  SV=4.61  BV=6.82
    {1550,1536,1056, 0, 0, 0},  //TV = 9.33(50 lines)  AV=2.00  SV=4.63  BV=6.70
    {1674,1536,1040, 0, 0, 0},  //TV = 9.22(54 lines)  AV=2.00  SV=4.61  BV=6.62
    {1798,1536,1040, 0, 0, 0},  //TV = 9.12(58 lines)  AV=2.00  SV=4.61  BV=6.51
    {1922,1536,1040, 0, 0, 0},  //TV = 9.02(62 lines)  AV=2.00  SV=4.61  BV=6.42
    {2077,1536,1040, 0, 0, 0},  //TV = 8.91(67 lines)  AV=2.00  SV=4.61  BV=6.30
    {2201,1536,1048, 0, 0, 0},  //TV = 8.83(71 lines)  AV=2.00  SV=4.62  BV=6.21
    {2356,1536,1048, 0, 0, 0},  //TV = 8.73(76 lines)  AV=2.00  SV=4.62  BV=6.11
    {2542,1536,1040, 0, 0, 0},  //TV = 8.62(82 lines)  AV=2.00  SV=4.61  BV=6.01
    {2728,1536,1040, 0, 0, 0},  //TV = 8.52(88 lines)  AV=2.00  SV=4.61  BV=5.91
    {2914,1536,1048, 0, 0, 0},  //TV = 8.42(94 lines)  AV=2.00  SV=4.62  BV=5.80
    {3131,1536,1040, 0, 0, 0},  //TV = 8.32(101 lines)  AV=2.00  SV=4.61  BV=5.71
    {3348,1536,1040, 0, 0, 0},  //TV = 8.22(108 lines)  AV=2.00  SV=4.61  BV=5.62
    {3596,1536,1048, 0, 0, 0},  //TV = 8.12(116 lines)  AV=2.00  SV=4.62  BV=5.50
    {3875,1536,1040, 0, 0, 0},  //TV = 8.01(125 lines)  AV=2.00  SV=4.61  BV=5.40
    {4123,1536,1040, 0, 0, 0},  //TV = 7.92(133 lines)  AV=2.00  SV=4.61  BV=5.31
    {4433,1536,1040, 0, 0, 0},  //TV = 7.82(143 lines)  AV=2.00  SV=4.61  BV=5.21
    {4743,1536,1040, 0, 0, 0},  //TV = 7.72(153 lines)  AV=2.00  SV=4.61  BV=5.11
    {5115,1536,1040, 0, 0, 0},  //TV = 7.61(165 lines)  AV=2.00  SV=4.61  BV=5.00
    {5487,1536,1040, 0, 0, 0},  //TV = 7.51(177 lines)  AV=2.00  SV=4.61  BV=4.90
    {5859,1536,1040, 0, 0, 0},  //TV = 7.42(189 lines)  AV=2.00  SV=4.61  BV=4.81
    {6293,1536,1040, 0, 0, 0},  //TV = 7.31(203 lines)  AV=2.00  SV=4.61  BV=4.70
    {6727,1536,1040, 0, 0, 0},  //TV = 7.22(217 lines)  AV=2.00  SV=4.61  BV=4.61
    {7223,1536,1040, 0, 0, 0},  //TV = 7.11(233 lines)  AV=2.00  SV=4.61  BV=4.51
    {7781,1536,1040, 0, 0, 0},  //TV = 7.01(251 lines)  AV=2.00  SV=4.61  BV=4.40
    {8277,1536,1040, 0, 0, 0},  //TV = 6.92(267 lines)  AV=2.00  SV=4.61  BV=4.31
    {8928,1536,1040, 0, 0, 0},  //TV = 6.81(288 lines)  AV=2.00  SV=4.61  BV=4.20
    {9548,1536,1040, 0, 0, 0},  //TV = 6.71(308 lines)  AV=2.00  SV=4.61  BV=4.10
    {9982,1536,1056, 0, 0, 0},  //TV = 6.65(322 lines)  AV=2.00  SV=4.63  BV=4.02
    {9982,1664,1056, 0, 0, 0},  //TV = 6.65(322 lines)  AV=2.00  SV=4.74  BV=3.90
    {9982,1792,1048, 0, 0, 0},  //TV = 6.65(322 lines)  AV=2.00  SV=4.84  BV=3.81
    {9982,1920,1040, 0, 0, 0},  //TV = 6.65(322 lines)  AV=2.00  SV=4.93  BV=3.72
    {9982,2048,1056, 0, 0, 0},  //TV = 6.65(322 lines)  AV=2.00  SV=5.04  BV=3.60
    {9982,2176,1064, 0, 0, 0},  //TV = 6.65(322 lines)  AV=2.00  SV=5.14  BV=3.50
    {9982,2304,1072, 0, 0, 0},  //TV = 6.65(322 lines)  AV=2.00  SV=5.24  BV=3.41
    {9982,2560,1032, 0, 0, 0},  //TV = 6.65(322 lines)  AV=2.00  SV=5.33  BV=3.31
    {9982,2688,1056, 0, 0, 0},  //TV = 6.65(322 lines)  AV=2.00  SV=5.44  BV=3.21
    {9982,2944,1032, 0, 0, 0},  //TV = 6.65(322 lines)  AV=2.00  SV=5.53  BV=3.11
    {19995,1536,1056, 0, 0, 0},  //TV = 5.64(645 lines)  AV=2.00  SV=4.63  BV=3.01
    {19995,1664,1048, 0, 0, 0},  //TV = 5.64(645 lines)  AV=2.00  SV=4.73  BV=2.91
    {19995,1792,1040, 0, 0, 0},  //TV = 5.64(645 lines)  AV=2.00  SV=4.83  BV=2.81
    {19995,1920,1040, 0, 0, 0},  //TV = 5.64(645 lines)  AV=2.00  SV=4.93  BV=2.71
    {19995,2048,1048, 0, 0, 0},  //TV = 5.64(645 lines)  AV=2.00  SV=5.03  BV=2.61
    {19995,2176,1056, 0, 0, 0},  //TV = 5.64(645 lines)  AV=2.00  SV=5.13  BV=2.51
    {29977,1536,1072, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=4.65  BV=2.41
    {29977,1664,1056, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=4.74  BV=2.32
    {29977,1792,1056, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=4.85  BV=2.21
    {29977,1920,1056, 0, 0, 0},  //TV = 5.06(967 lines)  AV=2.00  SV=4.95  BV=2.11
    {39990,1536,1056, 0, 0, 0},  //TV = 4.64(1290 lines)  AV=2.00  SV=4.63  BV=2.01
    {39990,1664,1048, 0, 0, 0},  //TV = 4.64(1290 lines)  AV=2.00  SV=4.73  BV=1.91
    {39990,1792,1040, 0, 0, 0},  //TV = 4.64(1290 lines)  AV=2.00  SV=4.83  BV=1.81
    {49972,1536,1040, 0, 0, 0},  //TV = 4.32(1612 lines)  AV=2.00  SV=4.61  BV=1.72
    {49972,1664,1032, 0, 0, 0},  //TV = 4.32(1612 lines)  AV=2.00  SV=4.71  BV=1.61
    {49972,1792,1024, 0, 0, 0},  //TV = 4.32(1612 lines)  AV=2.00  SV=4.81  BV=1.52
    {59985,1536,1072, 0, 0, 0},  //TV = 4.06(1935 lines)  AV=2.00  SV=4.65  BV=1.41
    {59985,1664,1064, 0, 0, 0},  //TV = 4.06(1935 lines)  AV=2.00  SV=4.76  BV=1.30
    {59985,1792,1056, 0, 0, 0},  //TV = 4.06(1935 lines)  AV=2.00  SV=4.85  BV=1.21
    {59985,1920,1056, 0, 0, 0},  //TV = 4.06(1935 lines)  AV=2.00  SV=4.95  BV=1.11
    {59985,2048,1064, 0, 0, 0},  //TV = 4.06(1935 lines)  AV=2.00  SV=5.06  BV=1.00
    {59985,2176,1072, 0, 0, 0},  //TV = 4.06(1935 lines)  AV=2.00  SV=5.15  BV=0.91
    {59985,2432,1024, 0, 0, 0},  //TV = 4.06(1935 lines)  AV=2.00  SV=5.25  BV=0.81
    {59985,2560,1048, 0, 0, 0},  //TV = 4.06(1935 lines)  AV=2.00  SV=5.36  BV=0.70
    {59985,2688,1064, 0, 0, 0},  //TV = 4.06(1935 lines)  AV=2.00  SV=5.45  BV=0.61
    {59985,2944,1040, 0, 0, 0},  //TV = 4.06(1935 lines)  AV=2.00  SV=5.55  BV=0.51
    {59985,3200,1032, 0, 0, 0},  //TV = 4.06(1935 lines)  AV=2.00  SV=5.66  BV=0.40
    {59985,3328,1056, 0, 0, 0},  //TV = 4.06(1935 lines)  AV=2.00  SV=5.74  BV=0.31
    {59985,3584,1056, 0, 0, 0},  //TV = 4.06(1935 lines)  AV=2.00  SV=5.85  BV=0.21
    {59985,3840,1056, 0, 0, 0},  //TV = 4.06(1935 lines)  AV=2.00  SV=5.95  BV=0.11
    {59985,4224,1040, 0, 0, 0},  //TV = 4.06(1935 lines)  AV=2.00  SV=6.07  BV=-0.01
    {59985,4480,1048, 0, 0, 0},  //TV = 4.06(1935 lines)  AV=2.00  SV=6.16  BV=-0.10
    {59985,4864,1032, 0, 0, 0},  //TV = 4.06(1935 lines)  AV=2.00  SV=6.26  BV=-0.20
    {59985,5248,1024, 0, 0, 0},  //TV = 4.06(1935 lines)  AV=2.00  SV=6.36  BV=-0.30
    {59985,5632,1024, 0, 0, 0},  //TV = 4.06(1935 lines)  AV=2.00  SV=6.46  BV=-0.40
    {59985,6016,1024, 0, 0, 0},  //TV = 4.06(1935 lines)  AV=2.00  SV=6.55  BV=-0.50
    {59985,6400,1040, 0, 0, 0},  //TV = 4.06(1935 lines)  AV=2.00  SV=6.67  BV=-0.61
    {59985,6912,1032, 0, 0, 0},  //TV = 4.06(1935 lines)  AV=2.00  SV=6.77  BV=-0.71
    {59985,7424,1024, 0, 0, 0},  //TV = 4.06(1935 lines)  AV=2.00  SV=6.86  BV=-0.80
    {59985,7936,1032, 0, 0, 0},  //TV = 4.06(1935 lines)  AV=2.00  SV=6.97  BV=-0.91
    {59985,8448,1032, 0, 0, 0},  //TV = 4.06(1935 lines)  AV=2.00  SV=7.06  BV=-1.00
    {59985,9088,1032, 0, 0, 0},  //TV = 4.06(1935 lines)  AV=2.00  SV=7.16  BV=-1.10
    {59985,9728,1032, 0, 0, 0},  //TV = 4.06(1935 lines)  AV=2.00  SV=7.26  BV=-1.20
    {59985,10240,1048, 0, 0, 0},  //TV = 4.06(1935 lines)  AV=2.00  SV=7.36  BV=-1.30
    {59985,10240,1128, 0, 0, 0},  //TV = 4.06(1935 lines)  AV=2.00  SV=7.46  BV=-1.40
};

static strAETable g_AE_VideoNightTable =
{
    AETABLE_VIDEO_NIGHT,    //eAETableID
    115,    //u4TotalIndex
    20,    //u4StrobeTrigerBV
    100,    //i4MaxBV
    -14,    //i4MinBV
    LIB3A_AE_ISO_SPEED_AUTO, //ISO SPEED
    sVideoNightPLineTable_60Hz,
    sVideoNightPLineTable_50Hz,
    NULL,
};

static strEvSetting sCaptureZSDPLineTable_60Hz[101] =
{
    {986,1536,1056, 0, 0, 0},  //TV = 9.99(29 lines)  AV=2.00  SV=4.63  BV=7.36
    {1020,1536,1056, 0, 0, 0},  //TV = 9.94(30 lines)  AV=2.00  SV=4.63  BV=7.31
    {1088,1536,1056, 0, 0, 0},  //TV = 9.84(32 lines)  AV=2.00  SV=4.63  BV=7.21
    {1190,1536,1040, 0, 0, 0},  //TV = 9.71(35 lines)  AV=2.00  SV=4.61  BV=7.11
    {1258,1536,1056, 0, 0, 0},  //TV = 9.63(37 lines)  AV=2.00  SV=4.63  BV=7.01
    {1360,1536,1040, 0, 0, 0},  //TV = 9.52(40 lines)  AV=2.00  SV=4.61  BV=6.91
    {1462,1536,1040, 0, 0, 0},  //TV = 9.42(43 lines)  AV=2.00  SV=4.61  BV=6.81
    {1564,1536,1040, 0, 0, 0},  //TV = 9.32(46 lines)  AV=2.00  SV=4.61  BV=6.71
    {1666,1536,1056, 0, 0, 0},  //TV = 9.23(49 lines)  AV=2.00  SV=4.63  BV=6.60
    {1802,1536,1040, 0, 0, 0},  //TV = 9.12(53 lines)  AV=2.00  SV=4.61  BV=6.51
    {1904,1536,1056, 0, 0, 0},  //TV = 9.04(56 lines)  AV=2.00  SV=4.63  BV=6.41
    {2074,1536,1040, 0, 0, 0},  //TV = 8.91(61 lines)  AV=2.00  SV=4.61  BV=6.31
    {2210,1536,1040, 0, 0, 0},  //TV = 8.82(65 lines)  AV=2.00  SV=4.61  BV=6.21
    {2380,1536,1040, 0, 0, 0},  //TV = 8.71(70 lines)  AV=2.00  SV=4.61  BV=6.11
    {2550,1536,1040, 0, 0, 0},  //TV = 8.62(75 lines)  AV=2.00  SV=4.61  BV=6.01
    {2720,1536,1040, 0, 0, 0},  //TV = 8.52(80 lines)  AV=2.00  SV=4.61  BV=5.91
    {2924,1536,1040, 0, 0, 0},  //TV = 8.42(86 lines)  AV=2.00  SV=4.61  BV=5.81
    {3128,1536,1040, 0, 0, 0},  //TV = 8.32(92 lines)  AV=2.00  SV=4.61  BV=5.71
    {3366,1536,1040, 0, 0, 0},  //TV = 8.21(99 lines)  AV=2.00  SV=4.61  BV=5.61
    {3604,1536,1040, 0, 0, 0},  //TV = 8.12(106 lines)  AV=2.00  SV=4.61  BV=5.51
    {3842,1536,1040, 0, 0, 0},  //TV = 8.02(113 lines)  AV=2.00  SV=4.61  BV=5.42
    {4148,1536,1040, 0, 0, 0},  //TV = 7.91(122 lines)  AV=2.00  SV=4.61  BV=5.31
    {4454,1536,1040, 0, 0, 0},  //TV = 7.81(131 lines)  AV=2.00  SV=4.61  BV=5.20
    {4760,1536,1040, 0, 0, 0},  //TV = 7.71(140 lines)  AV=2.00  SV=4.61  BV=5.11
    {5100,1536,1040, 0, 0, 0},  //TV = 7.62(150 lines)  AV=2.00  SV=4.61  BV=5.01
    {5440,1536,1040, 0, 0, 0},  //TV = 7.52(160 lines)  AV=2.00  SV=4.61  BV=4.91
    {5882,1536,1040, 0, 0, 0},  //TV = 7.41(173 lines)  AV=2.00  SV=4.61  BV=4.80
    {6256,1536,1040, 0, 0, 0},  //TV = 7.32(184 lines)  AV=2.00  SV=4.61  BV=4.71
    {6698,1536,1040, 0, 0, 0},  //TV = 7.22(197 lines)  AV=2.00  SV=4.61  BV=4.61
    {7174,1536,1040, 0, 0, 0},  //TV = 7.12(211 lines)  AV=2.00  SV=4.61  BV=4.52
    {7684,1536,1040, 0, 0, 0},  //TV = 7.02(226 lines)  AV=2.00  SV=4.61  BV=4.42
    {8296,1536,1040, 0, 0, 0},  //TV = 6.91(244 lines)  AV=2.00  SV=4.61  BV=4.31
    {8330,1536,1104, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=4.69  BV=4.21
    {8330,1664,1096, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=4.80  BV=4.11
    {8330,1792,1088, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=4.89  BV=4.01
    {8330,1920,1088, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=4.99  BV=3.91
    {8330,2176,1032, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.10  BV=3.81
    {8330,2304,1040, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.19  BV=3.72
    {8330,2432,1056, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.29  BV=3.62
    {8330,2688,1024, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.39  BV=3.52
    {8330,2816,1048, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.49  BV=3.41
    {8330,3072,1032, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.60  BV=3.31
    {16660,1536,1104, 0, 0, 0},  //TV = 5.91(490 lines)  AV=2.00  SV=4.69  BV=3.21
    {16660,1664,1096, 0, 0, 0},  //TV = 5.91(490 lines)  AV=2.00  SV=4.80  BV=3.11
    {16660,1792,1096, 0, 0, 0},  //TV = 5.91(490 lines)  AV=2.00  SV=4.91  BV=3.00
    {16660,2048,1024, 0, 0, 0},  //TV = 5.91(490 lines)  AV=2.00  SV=5.00  BV=2.91
    {16660,2176,1024, 0, 0, 0},  //TV = 5.91(490 lines)  AV=2.00  SV=5.09  BV=2.82
    {24990,1536,1040, 0, 0, 0},  //TV = 5.32(735 lines)  AV=2.00  SV=4.61  BV=2.72
    {24990,1664,1032, 0, 0, 0},  //TV = 5.32(735 lines)  AV=2.00  SV=4.71  BV=2.61
    {24990,1792,1024, 0, 0, 0},  //TV = 5.32(735 lines)  AV=2.00  SV=4.81  BV=2.52
    {24990,1920,1024, 0, 0, 0},  //TV = 5.32(735 lines)  AV=2.00  SV=4.91  BV=2.42
    {24990,2048,1040, 0, 0, 0},  //TV = 5.32(735 lines)  AV=2.00  SV=5.02  BV=2.30
    {32674,1664,1048, 0, 0, 0},  //TV = 4.94(961 lines)  AV=2.00  SV=4.73  BV=2.20
    {32674,1792,1032, 0, 0, 0},  //TV = 4.94(961 lines)  AV=2.00  SV=4.82  BV=2.12
    {32674,1920,1040, 0, 0, 0},  //TV = 4.94(961 lines)  AV=2.00  SV=4.93  BV=2.01
    {32674,2048,1040, 0, 0, 0},  //TV = 4.94(961 lines)  AV=2.00  SV=5.02  BV=1.91
    {32674,2176,1056, 0, 0, 0},  //TV = 4.94(961 lines)  AV=2.00  SV=5.13  BV=1.80
    {32674,2304,1064, 0, 0, 0},  //TV = 4.94(961 lines)  AV=2.00  SV=5.23  BV=1.71
    {32674,2560,1024, 0, 0, 0},  //TV = 4.94(961 lines)  AV=2.00  SV=5.32  BV=1.61
    {32674,2688,1048, 0, 0, 0},  //TV = 4.94(961 lines)  AV=2.00  SV=5.43  BV=1.51
    {32674,2944,1032, 0, 0, 0},  //TV = 4.94(961 lines)  AV=2.00  SV=5.53  BV=1.40
    {32674,3072,1056, 0, 0, 0},  //TV = 4.94(961 lines)  AV=2.00  SV=5.63  BV=1.31
    {32674,3328,1040, 0, 0, 0},  //TV = 4.94(961 lines)  AV=2.00  SV=5.72  BV=1.21
    {32674,3584,1040, 0, 0, 0},  //TV = 4.94(961 lines)  AV=2.00  SV=5.83  BV=1.11
    {40834,3072,1040, 0, 0, 0},  //TV = 4.61(1201 lines)  AV=2.00  SV=5.61  BV=1.01
    {40834,3328,1024, 0, 0, 0},  //TV = 4.61(1201 lines)  AV=2.00  SV=5.70  BV=0.91
    {40834,3456,1056, 0, 0, 0},  //TV = 4.61(1201 lines)  AV=2.00  SV=5.80  BV=0.81
    {48994,3200,1024, 0, 0, 0},  //TV = 4.35(1441 lines)  AV=2.00  SV=5.64  BV=0.71
    {48994,3328,1056, 0, 0, 0},  //TV = 4.35(1441 lines)  AV=2.00  SV=5.74  BV=0.61
    {48994,3584,1048, 0, 0, 0},  //TV = 4.35(1441 lines)  AV=2.00  SV=5.84  BV=0.51
    {48994,3840,1048, 0, 0, 0},  //TV = 4.35(1441 lines)  AV=2.00  SV=5.94  BV=0.41
    {48994,4096,1048, 0, 0, 0},  //TV = 4.35(1441 lines)  AV=2.00  SV=6.03  BV=0.32
    {48994,4480,1032, 0, 0, 0},  //TV = 4.35(1441 lines)  AV=2.00  SV=6.14  BV=0.21
    {48994,4736,1048, 0, 0, 0},  //TV = 4.35(1441 lines)  AV=2.00  SV=6.24  BV=0.11
    {48994,5120,1048, 0, 0, 0},  //TV = 4.35(1441 lines)  AV=2.00  SV=6.36  BV=-0.00
    {57154,4736,1040, 0, 0, 0},  //TV = 4.13(1681 lines)  AV=2.00  SV=6.23  BV=-0.10
    {57154,5120,1032, 0, 0, 0},  //TV = 4.13(1681 lines)  AV=2.00  SV=6.33  BV=-0.20
    {65314,4736,1040, 0, 0, 0},  //TV = 3.94(1921 lines)  AV=2.00  SV=6.23  BV=-0.30
    {73474,4480,1048, 0, 0, 0},  //TV = 3.77(2161 lines)  AV=2.00  SV=6.16  BV=-0.40
    {73474,4864,1040, 0, 0, 0},  //TV = 3.77(2161 lines)  AV=2.00  SV=6.27  BV=-0.50
    {81634,4736,1024, 0, 0, 0},  //TV = 3.61(2401 lines)  AV=2.00  SV=6.21  BV=-0.59
    {89828,4608,1024, 0, 0, 0},  //TV = 3.48(2642 lines)  AV=2.00  SV=6.17  BV=-0.69
    {89828,4864,1040, 0, 0, 0},  //TV = 3.48(2642 lines)  AV=2.00  SV=6.27  BV=-0.79
    {98022,4864,1024, 0, 0, 0},  //TV = 3.35(2883 lines)  AV=2.00  SV=6.25  BV=-0.90
    {98022,5120,1040, 0, 0, 0},  //TV = 3.35(2883 lines)  AV=2.00  SV=6.34  BV=-0.99
    {98022,5504,1040, 0, 0, 0},  //TV = 3.35(2883 lines)  AV=2.00  SV=6.45  BV=-1.10
    {98022,6016,1024, 0, 0, 0},  //TV = 3.35(2883 lines)  AV=2.00  SV=6.55  BV=-1.20
    {98022,6400,1032, 0, 0, 0},  //TV = 3.35(2883 lines)  AV=2.00  SV=6.66  BV=-1.30
    {98022,6912,1024, 0, 0, 0},  //TV = 3.35(2883 lines)  AV=2.00  SV=6.75  BV=-1.40
    {98022,7296,1032, 0, 0, 0},  //TV = 3.35(2883 lines)  AV=2.00  SV=6.84  BV=-1.49
    {98022,7808,1040, 0, 0, 0},  //TV = 3.35(2883 lines)  AV=2.00  SV=6.95  BV=-1.60
    {98022,8448,1032, 0, 0, 0},  //TV = 3.35(2883 lines)  AV=2.00  SV=7.06  BV=-1.70
    {106182,8320,1032, 0, 0, 0},  //TV = 3.24(3123 lines)  AV=2.00  SV=7.03  BV=-1.80
    {114342,8320,1032, 0, 0, 0},  //TV = 3.13(3363 lines)  AV=2.00  SV=7.03  BV=-1.91
    {122502,8320,1032, 0, 0, 0},  //TV = 3.03(3603 lines)  AV=2.00  SV=7.03  BV=-2.00
    {130662,8320,1032, 0, 0, 0},  //TV = 2.94(3843 lines)  AV=2.00  SV=7.03  BV=-2.10
    {138822,8448,1032, 0, 0, 0},  //TV = 2.85(4083 lines)  AV=2.00  SV=7.06  BV=-2.21
    {146982,8576,1024, 0, 0, 0},  //TV = 2.77(4323 lines)  AV=2.00  SV=7.07  BV=-2.30
    {155142,8704,1024, 0, 0, 0},  //TV = 2.69(4563 lines)  AV=2.00  SV=7.09  BV=-2.40
    {171496,8448,1024, 0, 0, 0},  //TV = 2.54(5044 lines)  AV=2.00  SV=7.04  BV=-2.50
    {179656,8576,1032, 0, 0, 0},  //TV = 2.48(5284 lines)  AV=2.00  SV=7.08  BV=-2.60
};

static strEvSetting sCaptureZSDPLineTable_50Hz[101] =
{
    {986,1536,1056, 0, 0, 0},  //TV = 9.99(29 lines)  AV=2.00  SV=4.63  BV=7.36
    {1020,1536,1056, 0, 0, 0},  //TV = 9.94(30 lines)  AV=2.00  SV=4.63  BV=7.31
    {1088,1536,1056, 0, 0, 0},  //TV = 9.84(32 lines)  AV=2.00  SV=4.63  BV=7.21
    {1190,1536,1040, 0, 0, 0},  //TV = 9.71(35 lines)  AV=2.00  SV=4.61  BV=7.11
    {1258,1536,1056, 0, 0, 0},  //TV = 9.63(37 lines)  AV=2.00  SV=4.63  BV=7.01
    {1360,1536,1040, 0, 0, 0},  //TV = 9.52(40 lines)  AV=2.00  SV=4.61  BV=6.91
    {1462,1536,1040, 0, 0, 0},  //TV = 9.42(43 lines)  AV=2.00  SV=4.61  BV=6.81
    {1564,1536,1040, 0, 0, 0},  //TV = 9.32(46 lines)  AV=2.00  SV=4.61  BV=6.71
    {1666,1536,1056, 0, 0, 0},  //TV = 9.23(49 lines)  AV=2.00  SV=4.63  BV=6.60
    {1802,1536,1040, 0, 0, 0},  //TV = 9.12(53 lines)  AV=2.00  SV=4.61  BV=6.51
    {1904,1536,1056, 0, 0, 0},  //TV = 9.04(56 lines)  AV=2.00  SV=4.63  BV=6.41
    {2074,1536,1040, 0, 0, 0},  //TV = 8.91(61 lines)  AV=2.00  SV=4.61  BV=6.31
    {2210,1536,1040, 0, 0, 0},  //TV = 8.82(65 lines)  AV=2.00  SV=4.61  BV=6.21
    {2380,1536,1040, 0, 0, 0},  //TV = 8.71(70 lines)  AV=2.00  SV=4.61  BV=6.11
    {2550,1536,1040, 0, 0, 0},  //TV = 8.62(75 lines)  AV=2.00  SV=4.61  BV=6.01
    {2720,1536,1040, 0, 0, 0},  //TV = 8.52(80 lines)  AV=2.00  SV=4.61  BV=5.91
    {2924,1536,1040, 0, 0, 0},  //TV = 8.42(86 lines)  AV=2.00  SV=4.61  BV=5.81
    {3128,1536,1040, 0, 0, 0},  //TV = 8.32(92 lines)  AV=2.00  SV=4.61  BV=5.71
    {3366,1536,1040, 0, 0, 0},  //TV = 8.21(99 lines)  AV=2.00  SV=4.61  BV=5.61
    {3604,1536,1040, 0, 0, 0},  //TV = 8.12(106 lines)  AV=2.00  SV=4.61  BV=5.51
    {3842,1536,1040, 0, 0, 0},  //TV = 8.02(113 lines)  AV=2.00  SV=4.61  BV=5.42
    {4148,1536,1040, 0, 0, 0},  //TV = 7.91(122 lines)  AV=2.00  SV=4.61  BV=5.31
    {4454,1536,1040, 0, 0, 0},  //TV = 7.81(131 lines)  AV=2.00  SV=4.61  BV=5.20
    {4760,1536,1040, 0, 0, 0},  //TV = 7.71(140 lines)  AV=2.00  SV=4.61  BV=5.11
    {5100,1536,1040, 0, 0, 0},  //TV = 7.62(150 lines)  AV=2.00  SV=4.61  BV=5.01
    {5440,1536,1040, 0, 0, 0},  //TV = 7.52(160 lines)  AV=2.00  SV=4.61  BV=4.91
    {5882,1536,1040, 0, 0, 0},  //TV = 7.41(173 lines)  AV=2.00  SV=4.61  BV=4.80
    {6256,1536,1040, 0, 0, 0},  //TV = 7.32(184 lines)  AV=2.00  SV=4.61  BV=4.71
    {6698,1536,1040, 0, 0, 0},  //TV = 7.22(197 lines)  AV=2.00  SV=4.61  BV=4.61
    {7174,1536,1040, 0, 0, 0},  //TV = 7.12(211 lines)  AV=2.00  SV=4.61  BV=4.52
    {7684,1536,1040, 0, 0, 0},  //TV = 7.02(226 lines)  AV=2.00  SV=4.61  BV=4.42
    {8296,1536,1040, 0, 0, 0},  //TV = 6.91(244 lines)  AV=2.00  SV=4.61  BV=4.31
    {8874,1536,1040, 0, 0, 0},  //TV = 6.82(261 lines)  AV=2.00  SV=4.61  BV=4.21
    {9520,1536,1040, 0, 0, 0},  //TV = 6.71(280 lines)  AV=2.00  SV=4.61  BV=4.11
    {9996,1536,1056, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=4.63  BV=4.02
    {9996,1664,1048, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=4.73  BV=3.91
    {9996,1792,1040, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=4.83  BV=3.81
    {9996,1920,1040, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=4.93  BV=3.72
    {9996,2048,1048, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.03  BV=3.61
    {9996,2176,1064, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.14  BV=3.50
    {9996,2304,1072, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.24  BV=3.41
    {9996,2560,1032, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.33  BV=3.31
    {9996,2688,1048, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.43  BV=3.22
    {9996,2944,1032, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.53  BV=3.11
    {19992,1536,1056, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=4.63  BV=3.02
    {19992,1664,1048, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=4.73  BV=2.91
    {19992,1792,1048, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=4.84  BV=2.80
    {19992,1920,1048, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=4.94  BV=2.70
    {19992,2048,1056, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=5.04  BV=2.60
    {19992,2176,1064, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=5.14  BV=2.50
    {29988,1536,1072, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=4.65  BV=2.41
    {29988,1664,1056, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=4.74  BV=2.31
    {29988,1792,1056, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=4.85  BV=2.21
    {29988,1920,1056, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=4.95  BV=2.11
    {29988,2048,1064, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=5.06  BV=2.00
    {29988,2176,1072, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=5.15  BV=1.91
    {29988,2432,1024, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=5.25  BV=1.81
    {29988,2560,1048, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=5.36  BV=1.70
    {29988,2688,1064, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=5.45  BV=1.61
    {29988,2944,1040, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=5.55  BV=1.51
    {29988,3200,1032, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=5.66  BV=1.40
    {29988,3328,1056, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=5.74  BV=1.31
    {29988,3584,1056, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=5.85  BV=1.21
    {29988,3840,1056, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=5.95  BV=1.11
    {39984,3072,1056, 0, 0, 0},  //TV = 4.64(1176 lines)  AV=2.00  SV=5.63  BV=1.02
    {39984,3328,1048, 0, 0, 0},  //TV = 4.64(1176 lines)  AV=2.00  SV=5.73  BV=0.91
    {39984,3584,1040, 0, 0, 0},  //TV = 4.64(1176 lines)  AV=2.00  SV=5.83  BV=0.81
    {49980,3072,1048, 0, 0, 0},  //TV = 4.32(1470 lines)  AV=2.00  SV=5.62  BV=0.70
    {49980,3328,1032, 0, 0, 0},  //TV = 4.32(1470 lines)  AV=2.00  SV=5.71  BV=0.61
    {49980,3584,1024, 0, 0, 0},  //TV = 4.32(1470 lines)  AV=2.00  SV=5.81  BV=0.52
    {49980,3840,1024, 0, 0, 0},  //TV = 4.32(1470 lines)  AV=2.00  SV=5.91  BV=0.42
    {49980,4096,1040, 0, 0, 0},  //TV = 4.32(1470 lines)  AV=2.00  SV=6.02  BV=0.30
    {49980,4352,1040, 0, 0, 0},  //TV = 4.32(1470 lines)  AV=2.00  SV=6.11  BV=0.21
    {49980,4736,1024, 0, 0, 0},  //TV = 4.32(1470 lines)  AV=2.00  SV=6.21  BV=0.11
    {49980,5120,1024, 0, 0, 0},  //TV = 4.32(1470 lines)  AV=2.00  SV=6.32  BV=0.00
    {59976,4480,1048, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=6.16  BV=-0.10
    {59976,4864,1032, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=6.26  BV=-0.20
    {69972,4480,1032, 0, 0, 0},  //TV = 3.84(2058 lines)  AV=2.00  SV=6.14  BV=-0.30
    {69972,4736,1040, 0, 0, 0},  //TV = 3.84(2058 lines)  AV=2.00  SV=6.23  BV=-0.39
    {79968,4480,1032, 0, 0, 0},  //TV = 3.64(2352 lines)  AV=2.00  SV=6.14  BV=-0.50
    {79968,4736,1048, 0, 0, 0},  //TV = 3.64(2352 lines)  AV=2.00  SV=6.24  BV=-0.60
    {89998,4608,1024, 0, 0, 0},  //TV = 3.47(2647 lines)  AV=2.00  SV=6.17  BV=-0.70
    {89998,4864,1040, 0, 0, 0},  //TV = 3.47(2647 lines)  AV=2.00  SV=6.27  BV=-0.80
    {99994,4736,1032, 0, 0, 0},  //TV = 3.32(2941 lines)  AV=2.00  SV=6.22  BV=-0.90
    {99994,5120,1032, 0, 0, 0},  //TV = 3.32(2941 lines)  AV=2.00  SV=6.33  BV=-1.01
    {99994,5376,1040, 0, 0, 0},  //TV = 3.32(2941 lines)  AV=2.00  SV=6.41  BV=-1.09
    {99994,5888,1024, 0, 0, 0},  //TV = 3.32(2941 lines)  AV=2.00  SV=6.52  BV=-1.20
    {99994,6272,1032, 0, 0, 0},  //TV = 3.32(2941 lines)  AV=2.00  SV=6.63  BV=-1.30
    {99994,6656,1040, 0, 0, 0},  //TV = 3.32(2941 lines)  AV=2.00  SV=6.72  BV=-1.40
    {99994,7168,1032, 0, 0, 0},  //TV = 3.32(2941 lines)  AV=2.00  SV=6.82  BV=-1.50
    {99994,7680,1032, 0, 0, 0},  //TV = 3.32(2941 lines)  AV=2.00  SV=6.92  BV=-1.60
    {99994,8320,1024, 0, 0, 0},  //TV = 3.32(2941 lines)  AV=2.00  SV=7.02  BV=-1.70
    {99994,8960,1024, 0, 0, 0},  //TV = 3.32(2941 lines)  AV=2.00  SV=7.13  BV=-1.81
    {109990,8704,1024, 0, 0, 0},  //TV = 3.18(3235 lines)  AV=2.00  SV=7.09  BV=-1.90
    {119986,8576,1024, 0, 0, 0},  //TV = 3.06(3529 lines)  AV=2.00  SV=7.07  BV=-2.01
    {129982,8448,1024, 0, 0, 0},  //TV = 2.94(3823 lines)  AV=2.00  SV=7.04  BV=-2.10
    {139978,8320,1032, 0, 0, 0},  //TV = 2.84(4117 lines)  AV=2.00  SV=7.03  BV=-2.20
    {149974,8320,1032, 0, 0, 0},  //TV = 2.74(4411 lines)  AV=2.00  SV=7.03  BV=-2.30
    {159970,8448,1024, 0, 0, 0},  //TV = 2.64(4705 lines)  AV=2.00  SV=7.04  BV=-2.40
    {170000,8448,1032, 0, 0, 0},  //TV = 2.56(5000 lines)  AV=2.00  SV=7.06  BV=-2.50
    {189992,8192,1024, 0, 0, 0},  //TV = 2.40(5588 lines)  AV=2.00  SV=7.00  BV=-2.60
};

static strAETable g_AE_CaptureZSDTable =
{
    AETABLE_CAPTURE_ZSD,    //eAETableID
    101,    //u4TotalIndex
    20,    //u4StrobeTrigerBV
    74,    //i4MaxBV
    -26,    //i4MinBV
    LIB3A_AE_ISO_SPEED_AUTO, //ISO SPEED
    sCaptureZSDPLineTable_60Hz,
    sCaptureZSDPLineTable_50Hz,
    NULL,
};

static strEvSetting sCapturePLineTable_60Hz[121] =
{
    {136,1792,1088, 0, 0, 0},  //TV = 12.84(4 lines)  AV=2.00  SV=4.89  BV=9.95
    {170,1536,1040, 0, 0, 0},  //TV = 12.52(5 lines)  AV=2.00  SV=4.61  BV=9.91
    {170,1664,1032, 0, 0, 0},  //TV = 12.52(5 lines)  AV=2.00  SV=4.71  BV=9.81
    {170,1792,1024, 0, 0, 0},  //TV = 12.52(5 lines)  AV=2.00  SV=4.81  BV=9.71
    {204,1536,1072, 0, 0, 0},  //TV = 12.26(6 lines)  AV=2.00  SV=4.65  BV=9.61
    {204,1664,1056, 0, 0, 0},  //TV = 12.26(6 lines)  AV=2.00  SV=4.74  BV=9.51
    {238,1536,1056, 0, 0, 0},  //TV = 12.04(7 lines)  AV=2.00  SV=4.63  BV=9.41
    {238,1664,1040, 0, 0, 0},  //TV = 12.04(7 lines)  AV=2.00  SV=4.72  BV=9.31
    {272,1536,1056, 0, 0, 0},  //TV = 11.84(8 lines)  AV=2.00  SV=4.63  BV=9.21
    {272,1664,1048, 0, 0, 0},  //TV = 11.84(8 lines)  AV=2.00  SV=4.73  BV=9.11
    {306,1536,1080, 0, 0, 0},  //TV = 11.67(9 lines)  AV=2.00  SV=4.66  BV=9.01
    {340,1536,1040, 0, 0, 0},  //TV = 11.52(10 lines)  AV=2.00  SV=4.61  BV=8.91
    {340,1664,1032, 0, 0, 0},  //TV = 11.52(10 lines)  AV=2.00  SV=4.71  BV=8.81
    {374,1536,1088, 0, 0, 0},  //TV = 11.38(11 lines)  AV=2.00  SV=4.67  BV=8.71
    {408,1536,1072, 0, 0, 0},  //TV = 11.26(12 lines)  AV=2.00  SV=4.65  BV=8.61
    {442,1536,1056, 0, 0, 0},  //TV = 11.14(13 lines)  AV=2.00  SV=4.63  BV=8.51
    {476,1536,1056, 0, 0, 0},  //TV = 11.04(14 lines)  AV=2.00  SV=4.63  BV=8.41
    {510,1536,1056, 0, 0, 0},  //TV = 10.94(15 lines)  AV=2.00  SV=4.63  BV=8.31
    {544,1536,1056, 0, 0, 0},  //TV = 10.84(16 lines)  AV=2.00  SV=4.63  BV=8.21
    {578,1536,1072, 0, 0, 0},  //TV = 10.76(17 lines)  AV=2.00  SV=4.65  BV=8.11
    {612,1536,1080, 0, 0, 0},  //TV = 10.67(18 lines)  AV=2.00  SV=4.66  BV=8.01
    {680,1536,1040, 0, 0, 0},  //TV = 10.52(20 lines)  AV=2.00  SV=4.61  BV=7.91
    {714,1536,1072, 0, 0, 0},  //TV = 10.45(21 lines)  AV=2.00  SV=4.65  BV=7.80
    {782,1536,1040, 0, 0, 0},  //TV = 10.32(23 lines)  AV=2.00  SV=4.61  BV=7.71
    {816,1536,1072, 0, 0, 0},  //TV = 10.26(24 lines)  AV=2.00  SV=4.65  BV=7.61
    {884,1536,1056, 0, 0, 0},  //TV = 10.14(26 lines)  AV=2.00  SV=4.63  BV=7.51
    {952,1536,1056, 0, 0, 0},  //TV = 10.04(28 lines)  AV=2.00  SV=4.63  BV=7.41
    {1020,1536,1056, 0, 0, 0},  //TV = 9.94(30 lines)  AV=2.00  SV=4.63  BV=7.31
    {1088,1536,1064, 0, 0, 0},  //TV = 9.84(32 lines)  AV=2.00  SV=4.64  BV=7.20
    {1190,1536,1040, 0, 0, 0},  //TV = 9.71(35 lines)  AV=2.00  SV=4.61  BV=7.11
    {1258,1536,1056, 0, 0, 0},  //TV = 9.63(37 lines)  AV=2.00  SV=4.63  BV=7.01
    {1360,1536,1048, 0, 0, 0},  //TV = 9.52(40 lines)  AV=2.00  SV=4.62  BV=6.90
    {1462,1536,1048, 0, 0, 0},  //TV = 9.42(43 lines)  AV=2.00  SV=4.62  BV=6.80
    {1564,1536,1040, 0, 0, 0},  //TV = 9.32(46 lines)  AV=2.00  SV=4.61  BV=6.71
    {1666,1536,1048, 0, 0, 0},  //TV = 9.23(49 lines)  AV=2.00  SV=4.62  BV=6.61
    {1802,1536,1040, 0, 0, 0},  //TV = 9.12(53 lines)  AV=2.00  SV=4.61  BV=6.51
    {1904,1536,1056, 0, 0, 0},  //TV = 9.04(56 lines)  AV=2.00  SV=4.63  BV=6.41
    {2040,1536,1056, 0, 0, 0},  //TV = 8.94(60 lines)  AV=2.00  SV=4.63  BV=6.31
    {2210,1536,1048, 0, 0, 0},  //TV = 8.82(65 lines)  AV=2.00  SV=4.62  BV=6.20
    {2380,1536,1040, 0, 0, 0},  //TV = 8.71(70 lines)  AV=2.00  SV=4.61  BV=6.11
    {2516,1536,1056, 0, 0, 0},  //TV = 8.63(74 lines)  AV=2.00  SV=4.63  BV=6.01
    {2720,1536,1048, 0, 0, 0},  //TV = 8.52(80 lines)  AV=2.00  SV=4.62  BV=5.90
    {2924,1536,1040, 0, 0, 0},  //TV = 8.42(86 lines)  AV=2.00  SV=4.61  BV=5.81
    {3128,1536,1040, 0, 0, 0},  //TV = 8.32(92 lines)  AV=2.00  SV=4.61  BV=5.71
    {3332,1536,1048, 0, 0, 0},  //TV = 8.23(98 lines)  AV=2.00  SV=4.62  BV=5.61
    {3570,1536,1048, 0, 0, 0},  //TV = 8.13(105 lines)  AV=2.00  SV=4.62  BV=5.51
    {3842,1536,1040, 0, 0, 0},  //TV = 8.02(113 lines)  AV=2.00  SV=4.61  BV=5.42
    {4148,1536,1040, 0, 0, 0},  //TV = 7.91(122 lines)  AV=2.00  SV=4.61  BV=5.31
    {4420,1536,1040, 0, 0, 0},  //TV = 7.82(130 lines)  AV=2.00  SV=4.61  BV=5.21
    {4760,1536,1040, 0, 0, 0},  //TV = 7.71(140 lines)  AV=2.00  SV=4.61  BV=5.11
    {5100,1536,1040, 0, 0, 0},  //TV = 7.62(150 lines)  AV=2.00  SV=4.61  BV=5.01
    {5440,1536,1040, 0, 0, 0},  //TV = 7.52(160 lines)  AV=2.00  SV=4.61  BV=4.91
    {5848,1536,1040, 0, 0, 0},  //TV = 7.42(172 lines)  AV=2.00  SV=4.61  BV=4.81
    {6290,1536,1040, 0, 0, 0},  //TV = 7.31(185 lines)  AV=2.00  SV=4.61  BV=4.71
    {6732,1536,1040, 0, 0, 0},  //TV = 7.21(198 lines)  AV=2.00  SV=4.61  BV=4.61
    {7208,1536,1040, 0, 0, 0},  //TV = 7.12(212 lines)  AV=2.00  SV=4.61  BV=4.51
    {7786,1536,1040, 0, 0, 0},  //TV = 7.00(229 lines)  AV=2.00  SV=4.61  BV=4.40
    {8262,1536,1040, 0, 0, 0},  //TV = 6.92(243 lines)  AV=2.00  SV=4.61  BV=4.31
    {8330,1536,1104, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=4.69  BV=4.21
    {8330,1664,1096, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=4.80  BV=4.11
    {8330,1792,1096, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=4.91  BV=4.00
    {8330,2048,1024, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.00  BV=3.91
    {8330,2176,1024, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.09  BV=3.82
    {8330,2304,1048, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.20  BV=3.70
    {8330,2432,1064, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.30  BV=3.60
    {8330,2688,1032, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.40  BV=3.50
    {8330,2816,1056, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.50  BV=3.40
    {8330,3072,1032, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.60  BV=3.31
    {16660,1536,1104, 0, 0, 0},  //TV = 5.91(490 lines)  AV=2.00  SV=4.69  BV=3.21
    {16660,1664,1096, 0, 0, 0},  //TV = 5.91(490 lines)  AV=2.00  SV=4.80  BV=3.11
    {16660,1792,1088, 0, 0, 0},  //TV = 5.91(490 lines)  AV=2.00  SV=4.89  BV=3.01
    {16660,1920,1088, 0, 0, 0},  //TV = 5.91(490 lines)  AV=2.00  SV=4.99  BV=2.91
    {16660,2176,1032, 0, 0, 0},  //TV = 5.91(490 lines)  AV=2.00  SV=5.10  BV=2.81
    {24990,1536,1040, 0, 0, 0},  //TV = 5.32(735 lines)  AV=2.00  SV=4.61  BV=2.72
    {24990,1664,1032, 0, 0, 0},  //TV = 5.32(735 lines)  AV=2.00  SV=4.71  BV=2.61
    {24990,1792,1024, 0, 0, 0},  //TV = 5.32(735 lines)  AV=2.00  SV=4.81  BV=2.52
    {24990,1920,1024, 0, 0, 0},  //TV = 5.32(735 lines)  AV=2.00  SV=4.91  BV=2.42
    {24990,2048,1032, 0, 0, 0},  //TV = 5.32(735 lines)  AV=2.00  SV=5.01  BV=2.31
    {32674,1664,1040, 0, 0, 0},  //TV = 4.94(961 lines)  AV=2.00  SV=4.72  BV=2.21
    {32674,1792,1032, 0, 0, 0},  //TV = 4.94(961 lines)  AV=2.00  SV=4.82  BV=2.12
    {32674,1920,1040, 0, 0, 0},  //TV = 4.94(961 lines)  AV=2.00  SV=4.93  BV=2.01
    {40834,1664,1032, 0, 0, 0},  //TV = 4.61(1201 lines)  AV=2.00  SV=4.71  BV=1.90
    {40834,1792,1024, 0, 0, 0},  //TV = 4.61(1201 lines)  AV=2.00  SV=4.81  BV=1.81
    {48994,1536,1064, 0, 0, 0},  //TV = 4.35(1441 lines)  AV=2.00  SV=4.64  BV=1.71
    {48994,1664,1048, 0, 0, 0},  //TV = 4.35(1441 lines)  AV=2.00  SV=4.73  BV=1.62
    {48994,1792,1056, 0, 0, 0},  //TV = 4.35(1441 lines)  AV=2.00  SV=4.85  BV=1.50
    {57154,1664,1032, 0, 0, 0},  //TV = 4.13(1681 lines)  AV=2.00  SV=4.71  BV=1.42
    {57154,1792,1032, 0, 0, 0},  //TV = 4.13(1681 lines)  AV=2.00  SV=4.82  BV=1.31
    {65314,1664,1048, 0, 0, 0},  //TV = 3.94(1921 lines)  AV=2.00  SV=4.73  BV=1.20
    {65314,1792,1032, 0, 0, 0},  //TV = 3.94(1921 lines)  AV=2.00  SV=4.82  BV=1.12
    {65314,1920,1040, 0, 0, 0},  //TV = 3.94(1921 lines)  AV=2.00  SV=4.93  BV=1.01
    {65314,2048,1040, 0, 0, 0},  //TV = 3.94(1921 lines)  AV=2.00  SV=5.02  BV=0.91
    {65314,2176,1056, 0, 0, 0},  //TV = 3.94(1921 lines)  AV=2.00  SV=5.13  BV=0.80
    {65314,2304,1064, 0, 0, 0},  //TV = 3.94(1921 lines)  AV=2.00  SV=5.23  BV=0.71
    {73474,2176,1080, 0, 0, 0},  //TV = 3.77(2161 lines)  AV=2.00  SV=5.16  BV=0.60
    {73474,2432,1032, 0, 0, 0},  //TV = 3.77(2161 lines)  AV=2.00  SV=5.26  BV=0.51
    {81634,2304,1048, 0, 0, 0},  //TV = 3.61(2401 lines)  AV=2.00  SV=5.20  BV=0.41
    {81634,2432,1064, 0, 0, 0},  //TV = 3.61(2401 lines)  AV=2.00  SV=5.30  BV=0.31
    {81634,2688,1032, 0, 0, 0},  //TV = 3.61(2401 lines)  AV=2.00  SV=5.40  BV=0.21
    {81634,2816,1056, 0, 0, 0},  //TV = 3.61(2401 lines)  AV=2.00  SV=5.50  BV=0.11
    {81634,3072,1048, 0, 0, 0},  //TV = 3.61(2401 lines)  AV=2.00  SV=5.62  BV=-0.00
    {89828,2944,1064, 0, 0, 0},  //TV = 3.48(2642 lines)  AV=2.00  SV=5.58  BV=-0.10
    {89828,3200,1048, 0, 0, 0},  //TV = 3.48(2642 lines)  AV=2.00  SV=5.68  BV=-0.20
    {98022,3200,1032, 0, 0, 0},  //TV = 3.35(2883 lines)  AV=2.00  SV=5.66  BV=-0.30
    {98022,3328,1056, 0, 0, 0},  //TV = 3.35(2883 lines)  AV=2.00  SV=5.74  BV=-0.39
    {98022,3584,1056, 0, 0, 0},  //TV = 3.35(2883 lines)  AV=2.00  SV=5.85  BV=-0.50
    {98022,3840,1056, 0, 0, 0},  //TV = 3.35(2883 lines)  AV=2.00  SV=5.95  BV=-0.60
    {98022,4224,1032, 0, 0, 0},  //TV = 3.35(2883 lines)  AV=2.00  SV=6.06  BV=-0.70
    {98022,4480,1040, 0, 0, 0},  //TV = 3.35(2883 lines)  AV=2.00  SV=6.15  BV=-0.80
    {98022,4864,1024, 0, 0, 0},  //TV = 3.35(2883 lines)  AV=2.00  SV=6.25  BV=-0.90
    {106182,4736,1040, 0, 0, 0},  //TV = 3.24(3123 lines)  AV=2.00  SV=6.23  BV=-1.00
    {114342,4736,1040, 0, 0, 0},  //TV = 3.13(3363 lines)  AV=2.00  SV=6.23  BV=-1.10
    {122502,4736,1040, 0, 0, 0},  //TV = 3.03(3603 lines)  AV=2.00  SV=6.23  BV=-1.20
    {122502,5120,1032, 0, 0, 0},  //TV = 3.03(3603 lines)  AV=2.00  SV=6.33  BV=-1.30
    {122502,5504,1024, 0, 0, 0},  //TV = 3.03(3603 lines)  AV=2.00  SV=6.43  BV=-1.40
    {122502,5888,1024, 0, 0, 0},  //TV = 3.03(3603 lines)  AV=2.00  SV=6.52  BV=-1.49
    {122502,6272,1040, 0, 0, 0},  //TV = 3.03(3603 lines)  AV=2.00  SV=6.64  BV=-1.61
    {122502,6784,1024, 0, 0, 0},  //TV = 3.03(3603 lines)  AV=2.00  SV=6.73  BV=-1.70
    {122502,7296,1024, 0, 0, 0},  //TV = 3.03(3603 lines)  AV=2.00  SV=6.83  BV=-1.80
    {122502,7808,1024, 0, 0, 0},  //TV = 3.03(3603 lines)  AV=2.00  SV=6.93  BV=-1.90
    {122502,8320,1024, 0, 0, 0},  //TV = 3.03(3603 lines)  AV=2.00  SV=7.02  BV=-1.99
};

static strEvSetting sCapturePLineTable_50Hz[121] =
{
    {136,1792,1088, 0, 0, 0},  //TV = 12.84(4 lines)  AV=2.00  SV=4.89  BV=9.95
    {170,1536,1040, 0, 0, 0},  //TV = 12.52(5 lines)  AV=2.00  SV=4.61  BV=9.91
    {170,1664,1032, 0, 0, 0},  //TV = 12.52(5 lines)  AV=2.00  SV=4.71  BV=9.81
    {170,1792,1024, 0, 0, 0},  //TV = 12.52(5 lines)  AV=2.00  SV=4.81  BV=9.71
    {204,1536,1072, 0, 0, 0},  //TV = 12.26(6 lines)  AV=2.00  SV=4.65  BV=9.61
    {204,1664,1056, 0, 0, 0},  //TV = 12.26(6 lines)  AV=2.00  SV=4.74  BV=9.51
    {238,1536,1056, 0, 0, 0},  //TV = 12.04(7 lines)  AV=2.00  SV=4.63  BV=9.41
    {238,1664,1040, 0, 0, 0},  //TV = 12.04(7 lines)  AV=2.00  SV=4.72  BV=9.31
    {272,1536,1056, 0, 0, 0},  //TV = 11.84(8 lines)  AV=2.00  SV=4.63  BV=9.21
    {272,1664,1048, 0, 0, 0},  //TV = 11.84(8 lines)  AV=2.00  SV=4.73  BV=9.11
    {306,1536,1080, 0, 0, 0},  //TV = 11.67(9 lines)  AV=2.00  SV=4.66  BV=9.01
    {340,1536,1040, 0, 0, 0},  //TV = 11.52(10 lines)  AV=2.00  SV=4.61  BV=8.91
    {340,1664,1032, 0, 0, 0},  //TV = 11.52(10 lines)  AV=2.00  SV=4.71  BV=8.81
    {374,1536,1088, 0, 0, 0},  //TV = 11.38(11 lines)  AV=2.00  SV=4.67  BV=8.71
    {408,1536,1072, 0, 0, 0},  //TV = 11.26(12 lines)  AV=2.00  SV=4.65  BV=8.61
    {442,1536,1056, 0, 0, 0},  //TV = 11.14(13 lines)  AV=2.00  SV=4.63  BV=8.51
    {476,1536,1056, 0, 0, 0},  //TV = 11.04(14 lines)  AV=2.00  SV=4.63  BV=8.41
    {510,1536,1056, 0, 0, 0},  //TV = 10.94(15 lines)  AV=2.00  SV=4.63  BV=8.31
    {544,1536,1056, 0, 0, 0},  //TV = 10.84(16 lines)  AV=2.00  SV=4.63  BV=8.21
    {578,1536,1072, 0, 0, 0},  //TV = 10.76(17 lines)  AV=2.00  SV=4.65  BV=8.11
    {612,1536,1080, 0, 0, 0},  //TV = 10.67(18 lines)  AV=2.00  SV=4.66  BV=8.01
    {680,1536,1040, 0, 0, 0},  //TV = 10.52(20 lines)  AV=2.00  SV=4.61  BV=7.91
    {714,1536,1072, 0, 0, 0},  //TV = 10.45(21 lines)  AV=2.00  SV=4.65  BV=7.80
    {782,1536,1040, 0, 0, 0},  //TV = 10.32(23 lines)  AV=2.00  SV=4.61  BV=7.71
    {816,1536,1072, 0, 0, 0},  //TV = 10.26(24 lines)  AV=2.00  SV=4.65  BV=7.61
    {884,1536,1056, 0, 0, 0},  //TV = 10.14(26 lines)  AV=2.00  SV=4.63  BV=7.51
    {952,1536,1056, 0, 0, 0},  //TV = 10.04(28 lines)  AV=2.00  SV=4.63  BV=7.41
    {1020,1536,1056, 0, 0, 0},  //TV = 9.94(30 lines)  AV=2.00  SV=4.63  BV=7.31
    {1088,1536,1064, 0, 0, 0},  //TV = 9.84(32 lines)  AV=2.00  SV=4.64  BV=7.20
    {1190,1536,1040, 0, 0, 0},  //TV = 9.71(35 lines)  AV=2.00  SV=4.61  BV=7.11
    {1258,1536,1056, 0, 0, 0},  //TV = 9.63(37 lines)  AV=2.00  SV=4.63  BV=7.01
    {1360,1536,1048, 0, 0, 0},  //TV = 9.52(40 lines)  AV=2.00  SV=4.62  BV=6.90
    {1462,1536,1048, 0, 0, 0},  //TV = 9.42(43 lines)  AV=2.00  SV=4.62  BV=6.80
    {1564,1536,1040, 0, 0, 0},  //TV = 9.32(46 lines)  AV=2.00  SV=4.61  BV=6.71
    {1666,1536,1048, 0, 0, 0},  //TV = 9.23(49 lines)  AV=2.00  SV=4.62  BV=6.61
    {1802,1536,1040, 0, 0, 0},  //TV = 9.12(53 lines)  AV=2.00  SV=4.61  BV=6.51
    {1904,1536,1056, 0, 0, 0},  //TV = 9.04(56 lines)  AV=2.00  SV=4.63  BV=6.41
    {2040,1536,1056, 0, 0, 0},  //TV = 8.94(60 lines)  AV=2.00  SV=4.63  BV=6.31
    {2210,1536,1048, 0, 0, 0},  //TV = 8.82(65 lines)  AV=2.00  SV=4.62  BV=6.20
    {2380,1536,1040, 0, 0, 0},  //TV = 8.71(70 lines)  AV=2.00  SV=4.61  BV=6.11
    {2516,1536,1056, 0, 0, 0},  //TV = 8.63(74 lines)  AV=2.00  SV=4.63  BV=6.01
    {2720,1536,1048, 0, 0, 0},  //TV = 8.52(80 lines)  AV=2.00  SV=4.62  BV=5.90
    {2924,1536,1040, 0, 0, 0},  //TV = 8.42(86 lines)  AV=2.00  SV=4.61  BV=5.81
    {3128,1536,1040, 0, 0, 0},  //TV = 8.32(92 lines)  AV=2.00  SV=4.61  BV=5.71
    {3332,1536,1048, 0, 0, 0},  //TV = 8.23(98 lines)  AV=2.00  SV=4.62  BV=5.61
    {3570,1536,1048, 0, 0, 0},  //TV = 8.13(105 lines)  AV=2.00  SV=4.62  BV=5.51
    {3842,1536,1040, 0, 0, 0},  //TV = 8.02(113 lines)  AV=2.00  SV=4.61  BV=5.42
    {4148,1536,1040, 0, 0, 0},  //TV = 7.91(122 lines)  AV=2.00  SV=4.61  BV=5.31
    {4420,1536,1040, 0, 0, 0},  //TV = 7.82(130 lines)  AV=2.00  SV=4.61  BV=5.21
    {4760,1536,1040, 0, 0, 0},  //TV = 7.71(140 lines)  AV=2.00  SV=4.61  BV=5.11
    {5100,1536,1040, 0, 0, 0},  //TV = 7.62(150 lines)  AV=2.00  SV=4.61  BV=5.01
    {5440,1536,1040, 0, 0, 0},  //TV = 7.52(160 lines)  AV=2.00  SV=4.61  BV=4.91
    {5848,1536,1040, 0, 0, 0},  //TV = 7.42(172 lines)  AV=2.00  SV=4.61  BV=4.81
    {6290,1536,1040, 0, 0, 0},  //TV = 7.31(185 lines)  AV=2.00  SV=4.61  BV=4.71
    {6732,1536,1040, 0, 0, 0},  //TV = 7.21(198 lines)  AV=2.00  SV=4.61  BV=4.61
    {7208,1536,1040, 0, 0, 0},  //TV = 7.12(212 lines)  AV=2.00  SV=4.61  BV=4.51
    {7786,1536,1040, 0, 0, 0},  //TV = 7.00(229 lines)  AV=2.00  SV=4.61  BV=4.40
    {8262,1536,1040, 0, 0, 0},  //TV = 6.92(243 lines)  AV=2.00  SV=4.61  BV=4.31
    {8874,1536,1040, 0, 0, 0},  //TV = 6.82(261 lines)  AV=2.00  SV=4.61  BV=4.21
    {9554,1536,1040, 0, 0, 0},  //TV = 6.71(281 lines)  AV=2.00  SV=4.61  BV=4.10
    {9996,1536,1056, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=4.63  BV=4.02
    {9996,1664,1048, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=4.73  BV=3.91
    {9996,1792,1048, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=4.84  BV=3.80
    {9996,1920,1048, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=4.94  BV=3.70
    {9996,2048,1048, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.03  BV=3.61
    {9996,2176,1056, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.13  BV=3.51
    {9996,2304,1072, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.24  BV=3.41
    {9996,2560,1032, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.33  BV=3.31
    {9996,2688,1056, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.44  BV=3.21
    {9996,2944,1032, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.53  BV=3.11
    {19992,1536,1056, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=4.63  BV=3.02
    {19992,1664,1048, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=4.73  BV=2.91
    {19992,1792,1040, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=4.83  BV=2.81
    {19992,1920,1040, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=4.93  BV=2.72
    {19992,2048,1048, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=5.03  BV=2.61
    {19992,2176,1056, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=5.13  BV=2.51
    {29988,1536,1072, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=4.65  BV=2.41
    {29988,1664,1056, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=4.74  BV=2.31
    {29988,1792,1056, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=4.85  BV=2.21
    {29988,1920,1056, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=4.95  BV=2.11
    {39984,1536,1056, 0, 0, 0},  //TV = 4.64(1176 lines)  AV=2.00  SV=4.63  BV=2.02
    {39984,1664,1048, 0, 0, 0},  //TV = 4.64(1176 lines)  AV=2.00  SV=4.73  BV=1.91
    {39984,1792,1048, 0, 0, 0},  //TV = 4.64(1176 lines)  AV=2.00  SV=4.84  BV=1.80
    {49980,1536,1040, 0, 0, 0},  //TV = 4.32(1470 lines)  AV=2.00  SV=4.61  BV=1.72
    {49980,1664,1032, 0, 0, 0},  //TV = 4.32(1470 lines)  AV=2.00  SV=4.71  BV=1.61
    {49980,1792,1024, 0, 0, 0},  //TV = 4.32(1470 lines)  AV=2.00  SV=4.81  BV=1.52
    {59976,1536,1072, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=4.65  BV=1.41
    {59976,1664,1064, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=4.76  BV=1.30
    {59976,1792,1056, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=4.85  BV=1.21
    {59976,1920,1056, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=4.95  BV=1.11
    {59976,2048,1064, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=5.06  BV=1.00
    {59976,2176,1072, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=5.15  BV=0.91
    {59976,2432,1024, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=5.25  BV=0.81
    {69972,2176,1056, 0, 0, 0},  //TV = 3.84(2058 lines)  AV=2.00  SV=5.13  BV=0.71
    {69972,2304,1064, 0, 0, 0},  //TV = 3.84(2058 lines)  AV=2.00  SV=5.23  BV=0.61
    {79968,2176,1056, 0, 0, 0},  //TV = 3.64(2352 lines)  AV=2.00  SV=5.13  BV=0.51
    {79968,2304,1072, 0, 0, 0},  //TV = 3.64(2352 lines)  AV=2.00  SV=5.24  BV=0.41
    {79968,2560,1032, 0, 0, 0},  //TV = 3.64(2352 lines)  AV=2.00  SV=5.33  BV=0.31
    {79968,2688,1048, 0, 0, 0},  //TV = 3.64(2352 lines)  AV=2.00  SV=5.43  BV=0.22
    {79968,2944,1032, 0, 0, 0},  //TV = 3.64(2352 lines)  AV=2.00  SV=5.53  BV=0.11
    {79968,3200,1024, 0, 0, 0},  //TV = 3.64(2352 lines)  AV=2.00  SV=5.64  BV=0.00
    {89998,2944,1064, 0, 0, 0},  //TV = 3.47(2647 lines)  AV=2.00  SV=5.58  BV=-0.10
    {89998,3200,1048, 0, 0, 0},  //TV = 3.47(2647 lines)  AV=2.00  SV=5.68  BV=-0.20
    {99994,3072,1056, 0, 0, 0},  //TV = 3.32(2941 lines)  AV=2.00  SV=5.63  BV=-0.31
    {99994,3328,1040, 0, 0, 0},  //TV = 3.32(2941 lines)  AV=2.00  SV=5.72  BV=-0.40
    {99994,3584,1032, 0, 0, 0},  //TV = 3.32(2941 lines)  AV=2.00  SV=5.82  BV=-0.50
    {99994,3840,1040, 0, 0, 0},  //TV = 3.32(2941 lines)  AV=2.00  SV=5.93  BV=-0.61
    {99994,4096,1040, 0, 0, 0},  //TV = 3.32(2941 lines)  AV=2.00  SV=6.02  BV=-0.70
    {99994,4352,1048, 0, 0, 0},  //TV = 3.32(2941 lines)  AV=2.00  SV=6.12  BV=-0.80
    {99994,4736,1032, 0, 0, 0},  //TV = 3.32(2941 lines)  AV=2.00  SV=6.22  BV=-0.90
    {109990,4608,1032, 0, 0, 0},  //TV = 3.18(3235 lines)  AV=2.00  SV=6.18  BV=-1.00
    {119986,4480,1048, 0, 0, 0},  //TV = 3.06(3529 lines)  AV=2.00  SV=6.16  BV=-1.10
    {119986,4864,1032, 0, 0, 0},  //TV = 3.06(3529 lines)  AV=2.00  SV=6.26  BV=-1.20
    {119986,5248,1024, 0, 0, 0},  //TV = 3.06(3529 lines)  AV=2.00  SV=6.36  BV=-1.30
    {119986,5632,1024, 0, 0, 0},  //TV = 3.06(3529 lines)  AV=2.00  SV=6.46  BV=-1.40
    {119986,6016,1024, 0, 0, 0},  //TV = 3.06(3529 lines)  AV=2.00  SV=6.55  BV=-1.50
    {119986,6400,1040, 0, 0, 0},  //TV = 3.06(3529 lines)  AV=2.00  SV=6.67  BV=-1.61
    {119986,6912,1032, 0, 0, 0},  //TV = 3.06(3529 lines)  AV=2.00  SV=6.77  BV=-1.71
    {119986,7424,1024, 0, 0, 0},  //TV = 3.06(3529 lines)  AV=2.00  SV=6.86  BV=-1.80
    {119986,7936,1024, 0, 0, 0},  //TV = 3.06(3529 lines)  AV=2.00  SV=6.95  BV=-1.90
    {119986,8448,1032, 0, 0, 0},  //TV = 3.06(3529 lines)  AV=2.00  SV=7.06  BV=-2.00
};

static strAETable g_AE_CaptureTable =
{
    AETABLE_CAPTURE_AUTO,    //eAETableID
    121,    //u4TotalIndex
    20,    //u4StrobeTrigerBV
    100,    //i4MaxBV
    -20,    //i4MinBV
    LIB3A_AE_ISO_SPEED_AUTO, //ISO SPEED
    sCapturePLineTable_60Hz,
    sCapturePLineTable_50Hz,
    NULL,
};

static strEvSetting sCaptureISO100PLineTable_60Hz[93] =
{
    {136,1792,1088, 0, 0, 0},  //TV = 12.84(4 lines)  AV=2.00  SV=4.89  BV=9.95
    {170,1536,1040, 0, 0, 0},  //TV = 12.52(5 lines)  AV=2.00  SV=4.61  BV=9.91
    {170,1664,1032, 0, 0, 0},  //TV = 12.52(5 lines)  AV=2.00  SV=4.71  BV=9.81
    {170,1792,1024, 0, 0, 0},  //TV = 12.52(5 lines)  AV=2.00  SV=4.81  BV=9.71
    {204,1536,1072, 0, 0, 0},  //TV = 12.26(6 lines)  AV=2.00  SV=4.65  BV=9.61
    {204,1664,1056, 0, 0, 0},  //TV = 12.26(6 lines)  AV=2.00  SV=4.74  BV=9.51
    {238,1536,1056, 0, 0, 0},  //TV = 12.04(7 lines)  AV=2.00  SV=4.63  BV=9.41
    {238,1664,1040, 0, 0, 0},  //TV = 12.04(7 lines)  AV=2.00  SV=4.72  BV=9.31
    {272,1536,1056, 0, 0, 0},  //TV = 11.84(8 lines)  AV=2.00  SV=4.63  BV=9.21
    {272,1664,1048, 0, 0, 0},  //TV = 11.84(8 lines)  AV=2.00  SV=4.73  BV=9.11
    {306,1536,1080, 0, 0, 0},  //TV = 11.67(9 lines)  AV=2.00  SV=4.66  BV=9.01
    {340,1536,1040, 0, 0, 0},  //TV = 11.52(10 lines)  AV=2.00  SV=4.61  BV=8.91
    {340,1664,1032, 0, 0, 0},  //TV = 11.52(10 lines)  AV=2.00  SV=4.71  BV=8.81
    {374,1536,1088, 0, 0, 0},  //TV = 11.38(11 lines)  AV=2.00  SV=4.67  BV=8.71
    {408,1536,1072, 0, 0, 0},  //TV = 11.26(12 lines)  AV=2.00  SV=4.65  BV=8.61
    {442,1536,1056, 0, 0, 0},  //TV = 11.14(13 lines)  AV=2.00  SV=4.63  BV=8.51
    {476,1536,1056, 0, 0, 0},  //TV = 11.04(14 lines)  AV=2.00  SV=4.63  BV=8.41
    {510,1536,1056, 0, 0, 0},  //TV = 10.94(15 lines)  AV=2.00  SV=4.63  BV=8.31
    {544,1536,1056, 0, 0, 0},  //TV = 10.84(16 lines)  AV=2.00  SV=4.63  BV=8.21
    {578,1536,1072, 0, 0, 0},  //TV = 10.76(17 lines)  AV=2.00  SV=4.65  BV=8.11
    {612,1536,1080, 0, 0, 0},  //TV = 10.67(18 lines)  AV=2.00  SV=4.66  BV=8.01
    {680,1536,1040, 0, 0, 0},  //TV = 10.52(20 lines)  AV=2.00  SV=4.61  BV=7.91
    {714,1536,1072, 0, 0, 0},  //TV = 10.45(21 lines)  AV=2.00  SV=4.65  BV=7.80
    {782,1536,1040, 0, 0, 0},  //TV = 10.32(23 lines)  AV=2.00  SV=4.61  BV=7.71
    {816,1536,1072, 0, 0, 0},  //TV = 10.26(24 lines)  AV=2.00  SV=4.65  BV=7.61
    {884,1536,1056, 0, 0, 0},  //TV = 10.14(26 lines)  AV=2.00  SV=4.63  BV=7.51
    {952,1536,1056, 0, 0, 0},  //TV = 10.04(28 lines)  AV=2.00  SV=4.63  BV=7.41
    {1020,1536,1056, 0, 0, 0},  //TV = 9.94(30 lines)  AV=2.00  SV=4.63  BV=7.31
    {1088,1536,1064, 0, 0, 0},  //TV = 9.84(32 lines)  AV=2.00  SV=4.64  BV=7.20
    {1190,1536,1040, 0, 0, 0},  //TV = 9.71(35 lines)  AV=2.00  SV=4.61  BV=7.11
    {1258,1536,1056, 0, 0, 0},  //TV = 9.63(37 lines)  AV=2.00  SV=4.63  BV=7.01
    {1360,1536,1048, 0, 0, 0},  //TV = 9.52(40 lines)  AV=2.00  SV=4.62  BV=6.90
    {1462,1536,1048, 0, 0, 0},  //TV = 9.42(43 lines)  AV=2.00  SV=4.62  BV=6.80
    {1564,1536,1040, 0, 0, 0},  //TV = 9.32(46 lines)  AV=2.00  SV=4.61  BV=6.71
    {1666,1536,1048, 0, 0, 0},  //TV = 9.23(49 lines)  AV=2.00  SV=4.62  BV=6.61
    {1802,1536,1040, 0, 0, 0},  //TV = 9.12(53 lines)  AV=2.00  SV=4.61  BV=6.51
    {1904,1536,1056, 0, 0, 0},  //TV = 9.04(56 lines)  AV=2.00  SV=4.63  BV=6.41
    {2040,1536,1056, 0, 0, 0},  //TV = 8.94(60 lines)  AV=2.00  SV=4.63  BV=6.31
    {2210,1536,1048, 0, 0, 0},  //TV = 8.82(65 lines)  AV=2.00  SV=4.62  BV=6.20
    {2380,1536,1040, 0, 0, 0},  //TV = 8.71(70 lines)  AV=2.00  SV=4.61  BV=6.11
    {2516,1536,1056, 0, 0, 0},  //TV = 8.63(74 lines)  AV=2.00  SV=4.63  BV=6.01
    {2720,1536,1048, 0, 0, 0},  //TV = 8.52(80 lines)  AV=2.00  SV=4.62  BV=5.90
    {2924,1536,1040, 0, 0, 0},  //TV = 8.42(86 lines)  AV=2.00  SV=4.61  BV=5.81
    {3128,1536,1040, 0, 0, 0},  //TV = 8.32(92 lines)  AV=2.00  SV=4.61  BV=5.71
    {3332,1536,1048, 0, 0, 0},  //TV = 8.23(98 lines)  AV=2.00  SV=4.62  BV=5.61
    {3570,1536,1048, 0, 0, 0},  //TV = 8.13(105 lines)  AV=2.00  SV=4.62  BV=5.51
    {3842,1536,1040, 0, 0, 0},  //TV = 8.02(113 lines)  AV=2.00  SV=4.61  BV=5.42
    {4148,1536,1040, 0, 0, 0},  //TV = 7.91(122 lines)  AV=2.00  SV=4.61  BV=5.31
    {4420,1536,1040, 0, 0, 0},  //TV = 7.82(130 lines)  AV=2.00  SV=4.61  BV=5.21
    {4760,1536,1040, 0, 0, 0},  //TV = 7.71(140 lines)  AV=2.00  SV=4.61  BV=5.11
    {5100,1536,1040, 0, 0, 0},  //TV = 7.62(150 lines)  AV=2.00  SV=4.61  BV=5.01
    {5440,1536,1040, 0, 0, 0},  //TV = 7.52(160 lines)  AV=2.00  SV=4.61  BV=4.91
    {5848,1536,1040, 0, 0, 0},  //TV = 7.42(172 lines)  AV=2.00  SV=4.61  BV=4.81
    {6290,1536,1040, 0, 0, 0},  //TV = 7.31(185 lines)  AV=2.00  SV=4.61  BV=4.71
    {6732,1536,1040, 0, 0, 0},  //TV = 7.21(198 lines)  AV=2.00  SV=4.61  BV=4.61
    {7208,1536,1040, 0, 0, 0},  //TV = 7.12(212 lines)  AV=2.00  SV=4.61  BV=4.51
    {7786,1536,1040, 0, 0, 0},  //TV = 7.00(229 lines)  AV=2.00  SV=4.61  BV=4.40
    {8262,1536,1040, 0, 0, 0},  //TV = 6.92(243 lines)  AV=2.00  SV=4.61  BV=4.31
    {8330,1536,1104, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=4.69  BV=4.21
    {8330,1664,1096, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=4.80  BV=4.11
    {8330,1792,1096, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=4.91  BV=4.00
    {8330,2048,1024, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.00  BV=3.91
    {8330,2176,1024, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.09  BV=3.82
    {8330,2304,1048, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.20  BV=3.70
    {8330,2432,1064, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.30  BV=3.60
    {8330,2688,1032, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.40  BV=3.50
    {8330,2816,1056, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.50  BV=3.40
    {8330,3072,1032, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.60  BV=3.31
    {16660,1536,1104, 0, 0, 0},  //TV = 5.91(490 lines)  AV=2.00  SV=4.69  BV=3.21
    {16660,1664,1096, 0, 0, 0},  //TV = 5.91(490 lines)  AV=2.00  SV=4.80  BV=3.11
    {16660,1792,1088, 0, 0, 0},  //TV = 5.91(490 lines)  AV=2.00  SV=4.89  BV=3.01
    {16660,1920,1088, 0, 0, 0},  //TV = 5.91(490 lines)  AV=2.00  SV=4.99  BV=2.91
    {16660,2176,1032, 0, 0, 0},  //TV = 5.91(490 lines)  AV=2.00  SV=5.10  BV=2.81
    {24990,1536,1040, 0, 0, 0},  //TV = 5.32(735 lines)  AV=2.00  SV=4.61  BV=2.72
    {24990,1664,1032, 0, 0, 0},  //TV = 5.32(735 lines)  AV=2.00  SV=4.71  BV=2.61
    {24990,1792,1024, 0, 0, 0},  //TV = 5.32(735 lines)  AV=2.00  SV=4.81  BV=2.52
    {24990,1920,1024, 0, 0, 0},  //TV = 5.32(735 lines)  AV=2.00  SV=4.91  BV=2.42
    {24990,2048,1032, 0, 0, 0},  //TV = 5.32(735 lines)  AV=2.00  SV=5.01  BV=2.31
    {32674,1664,1040, 0, 0, 0},  //TV = 4.94(961 lines)  AV=2.00  SV=4.72  BV=2.21
    {32674,1792,1032, 0, 0, 0},  //TV = 4.94(961 lines)  AV=2.00  SV=4.82  BV=2.12
    {32674,1920,1040, 0, 0, 0},  //TV = 4.94(961 lines)  AV=2.00  SV=4.93  BV=2.01
    {40834,1664,1032, 0, 0, 0},  //TV = 4.61(1201 lines)  AV=2.00  SV=4.71  BV=1.90
    {40834,1792,1024, 0, 0, 0},  //TV = 4.61(1201 lines)  AV=2.00  SV=4.81  BV=1.81
    {48994,1536,1064, 0, 0, 0},  //TV = 4.35(1441 lines)  AV=2.00  SV=4.64  BV=1.71
    {48994,1664,1048, 0, 0, 0},  //TV = 4.35(1441 lines)  AV=2.00  SV=4.73  BV=1.62
    {48994,1792,1056, 0, 0, 0},  //TV = 4.35(1441 lines)  AV=2.00  SV=4.85  BV=1.50
    {57154,1664,1032, 0, 0, 0},  //TV = 4.13(1681 lines)  AV=2.00  SV=4.71  BV=1.42
    {57154,1792,1032, 0, 0, 0},  //TV = 4.13(1681 lines)  AV=2.00  SV=4.82  BV=1.31
    {65314,1664,1040, 0, 0, 0},  //TV = 3.94(1921 lines)  AV=2.00  SV=4.72  BV=1.21
    {73474,1536,1072, 0, 0, 0},  //TV = 3.77(2161 lines)  AV=2.00  SV=4.65  BV=1.12
    {73474,1664,1072, 0, 0, 0},  //TV = 3.77(2161 lines)  AV=2.00  SV=4.77  BV=1.00
    {81634,1664,1032, 0, 0, 0},  //TV = 3.61(2401 lines)  AV=2.00  SV=4.71  BV=0.90
    {89828,1536,1088, 0, 0, 0},  //TV = 3.48(2642 lines)  AV=2.00  SV=4.67  BV=0.80
};

static strEvSetting sCaptureISO100PLineTable_50Hz[93] =
{
    {136,1792,1088, 0, 0, 0},  //TV = 12.84(4 lines)  AV=2.00  SV=4.89  BV=9.95
    {170,1536,1040, 0, 0, 0},  //TV = 12.52(5 lines)  AV=2.00  SV=4.61  BV=9.91
    {170,1664,1032, 0, 0, 0},  //TV = 12.52(5 lines)  AV=2.00  SV=4.71  BV=9.81
    {170,1792,1024, 0, 0, 0},  //TV = 12.52(5 lines)  AV=2.00  SV=4.81  BV=9.71
    {204,1536,1072, 0, 0, 0},  //TV = 12.26(6 lines)  AV=2.00  SV=4.65  BV=9.61
    {204,1664,1056, 0, 0, 0},  //TV = 12.26(6 lines)  AV=2.00  SV=4.74  BV=9.51
    {238,1536,1056, 0, 0, 0},  //TV = 12.04(7 lines)  AV=2.00  SV=4.63  BV=9.41
    {238,1664,1040, 0, 0, 0},  //TV = 12.04(7 lines)  AV=2.00  SV=4.72  BV=9.31
    {272,1536,1056, 0, 0, 0},  //TV = 11.84(8 lines)  AV=2.00  SV=4.63  BV=9.21
    {272,1664,1048, 0, 0, 0},  //TV = 11.84(8 lines)  AV=2.00  SV=4.73  BV=9.11
    {306,1536,1080, 0, 0, 0},  //TV = 11.67(9 lines)  AV=2.00  SV=4.66  BV=9.01
    {340,1536,1040, 0, 0, 0},  //TV = 11.52(10 lines)  AV=2.00  SV=4.61  BV=8.91
    {340,1664,1032, 0, 0, 0},  //TV = 11.52(10 lines)  AV=2.00  SV=4.71  BV=8.81
    {374,1536,1088, 0, 0, 0},  //TV = 11.38(11 lines)  AV=2.00  SV=4.67  BV=8.71
    {408,1536,1072, 0, 0, 0},  //TV = 11.26(12 lines)  AV=2.00  SV=4.65  BV=8.61
    {442,1536,1056, 0, 0, 0},  //TV = 11.14(13 lines)  AV=2.00  SV=4.63  BV=8.51
    {476,1536,1056, 0, 0, 0},  //TV = 11.04(14 lines)  AV=2.00  SV=4.63  BV=8.41
    {510,1536,1056, 0, 0, 0},  //TV = 10.94(15 lines)  AV=2.00  SV=4.63  BV=8.31
    {544,1536,1056, 0, 0, 0},  //TV = 10.84(16 lines)  AV=2.00  SV=4.63  BV=8.21
    {578,1536,1072, 0, 0, 0},  //TV = 10.76(17 lines)  AV=2.00  SV=4.65  BV=8.11
    {612,1536,1080, 0, 0, 0},  //TV = 10.67(18 lines)  AV=2.00  SV=4.66  BV=8.01
    {680,1536,1040, 0, 0, 0},  //TV = 10.52(20 lines)  AV=2.00  SV=4.61  BV=7.91
    {714,1536,1072, 0, 0, 0},  //TV = 10.45(21 lines)  AV=2.00  SV=4.65  BV=7.80
    {782,1536,1040, 0, 0, 0},  //TV = 10.32(23 lines)  AV=2.00  SV=4.61  BV=7.71
    {816,1536,1072, 0, 0, 0},  //TV = 10.26(24 lines)  AV=2.00  SV=4.65  BV=7.61
    {884,1536,1056, 0, 0, 0},  //TV = 10.14(26 lines)  AV=2.00  SV=4.63  BV=7.51
    {952,1536,1056, 0, 0, 0},  //TV = 10.04(28 lines)  AV=2.00  SV=4.63  BV=7.41
    {1020,1536,1056, 0, 0, 0},  //TV = 9.94(30 lines)  AV=2.00  SV=4.63  BV=7.31
    {1088,1536,1064, 0, 0, 0},  //TV = 9.84(32 lines)  AV=2.00  SV=4.64  BV=7.20
    {1190,1536,1040, 0, 0, 0},  //TV = 9.71(35 lines)  AV=2.00  SV=4.61  BV=7.11
    {1258,1536,1056, 0, 0, 0},  //TV = 9.63(37 lines)  AV=2.00  SV=4.63  BV=7.01
    {1360,1536,1048, 0, 0, 0},  //TV = 9.52(40 lines)  AV=2.00  SV=4.62  BV=6.90
    {1462,1536,1048, 0, 0, 0},  //TV = 9.42(43 lines)  AV=2.00  SV=4.62  BV=6.80
    {1564,1536,1040, 0, 0, 0},  //TV = 9.32(46 lines)  AV=2.00  SV=4.61  BV=6.71
    {1666,1536,1048, 0, 0, 0},  //TV = 9.23(49 lines)  AV=2.00  SV=4.62  BV=6.61
    {1802,1536,1040, 0, 0, 0},  //TV = 9.12(53 lines)  AV=2.00  SV=4.61  BV=6.51
    {1904,1536,1056, 0, 0, 0},  //TV = 9.04(56 lines)  AV=2.00  SV=4.63  BV=6.41
    {2040,1536,1056, 0, 0, 0},  //TV = 8.94(60 lines)  AV=2.00  SV=4.63  BV=6.31
    {2210,1536,1048, 0, 0, 0},  //TV = 8.82(65 lines)  AV=2.00  SV=4.62  BV=6.20
    {2380,1536,1040, 0, 0, 0},  //TV = 8.71(70 lines)  AV=2.00  SV=4.61  BV=6.11
    {2516,1536,1056, 0, 0, 0},  //TV = 8.63(74 lines)  AV=2.00  SV=4.63  BV=6.01
    {2720,1536,1048, 0, 0, 0},  //TV = 8.52(80 lines)  AV=2.00  SV=4.62  BV=5.90
    {2924,1536,1040, 0, 0, 0},  //TV = 8.42(86 lines)  AV=2.00  SV=4.61  BV=5.81
    {3128,1536,1040, 0, 0, 0},  //TV = 8.32(92 lines)  AV=2.00  SV=4.61  BV=5.71
    {3332,1536,1048, 0, 0, 0},  //TV = 8.23(98 lines)  AV=2.00  SV=4.62  BV=5.61
    {3570,1536,1048, 0, 0, 0},  //TV = 8.13(105 lines)  AV=2.00  SV=4.62  BV=5.51
    {3842,1536,1040, 0, 0, 0},  //TV = 8.02(113 lines)  AV=2.00  SV=4.61  BV=5.42
    {4148,1536,1040, 0, 0, 0},  //TV = 7.91(122 lines)  AV=2.00  SV=4.61  BV=5.31
    {4420,1536,1040, 0, 0, 0},  //TV = 7.82(130 lines)  AV=2.00  SV=4.61  BV=5.21
    {4760,1536,1040, 0, 0, 0},  //TV = 7.71(140 lines)  AV=2.00  SV=4.61  BV=5.11
    {5100,1536,1040, 0, 0, 0},  //TV = 7.62(150 lines)  AV=2.00  SV=4.61  BV=5.01
    {5440,1536,1040, 0, 0, 0},  //TV = 7.52(160 lines)  AV=2.00  SV=4.61  BV=4.91
    {5848,1536,1040, 0, 0, 0},  //TV = 7.42(172 lines)  AV=2.00  SV=4.61  BV=4.81
    {6290,1536,1040, 0, 0, 0},  //TV = 7.31(185 lines)  AV=2.00  SV=4.61  BV=4.71
    {6732,1536,1040, 0, 0, 0},  //TV = 7.21(198 lines)  AV=2.00  SV=4.61  BV=4.61
    {7208,1536,1040, 0, 0, 0},  //TV = 7.12(212 lines)  AV=2.00  SV=4.61  BV=4.51
    {7786,1536,1040, 0, 0, 0},  //TV = 7.00(229 lines)  AV=2.00  SV=4.61  BV=4.40
    {8262,1536,1040, 0, 0, 0},  //TV = 6.92(243 lines)  AV=2.00  SV=4.61  BV=4.31
    {8874,1536,1040, 0, 0, 0},  //TV = 6.82(261 lines)  AV=2.00  SV=4.61  BV=4.21
    {9554,1536,1040, 0, 0, 0},  //TV = 6.71(281 lines)  AV=2.00  SV=4.61  BV=4.10
    {9996,1536,1056, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=4.63  BV=4.02
    {9996,1664,1048, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=4.73  BV=3.91
    {9996,1792,1048, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=4.84  BV=3.80
    {9996,1920,1048, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=4.94  BV=3.70
    {9996,2048,1048, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.03  BV=3.61
    {9996,2176,1056, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.13  BV=3.51
    {9996,2304,1072, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.24  BV=3.41
    {9996,2560,1032, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.33  BV=3.31
    {9996,2688,1056, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.44  BV=3.21
    {9996,2944,1032, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.53  BV=3.11
    {19992,1536,1056, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=4.63  BV=3.02
    {19992,1664,1048, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=4.73  BV=2.91
    {19992,1792,1040, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=4.83  BV=2.81
    {19992,1920,1040, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=4.93  BV=2.72
    {19992,2048,1048, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=5.03  BV=2.61
    {19992,2176,1056, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=5.13  BV=2.51
    {29988,1536,1072, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=4.65  BV=2.41
    {29988,1664,1056, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=4.74  BV=2.31
    {29988,1792,1056, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=4.85  BV=2.21
    {29988,1920,1056, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=4.95  BV=2.11
    {39984,1536,1056, 0, 0, 0},  //TV = 4.64(1176 lines)  AV=2.00  SV=4.63  BV=2.02
    {39984,1664,1048, 0, 0, 0},  //TV = 4.64(1176 lines)  AV=2.00  SV=4.73  BV=1.91
    {39984,1792,1048, 0, 0, 0},  //TV = 4.64(1176 lines)  AV=2.00  SV=4.84  BV=1.80
    {49980,1536,1040, 0, 0, 0},  //TV = 4.32(1470 lines)  AV=2.00  SV=4.61  BV=1.72
    {49980,1664,1032, 0, 0, 0},  //TV = 4.32(1470 lines)  AV=2.00  SV=4.71  BV=1.61
    {49980,1792,1024, 0, 0, 0},  //TV = 4.32(1470 lines)  AV=2.00  SV=4.81  BV=1.52
    {59976,1536,1072, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=4.65  BV=1.41
    {59976,1664,1064, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=4.76  BV=1.30
    {69972,1536,1056, 0, 0, 0},  //TV = 3.84(2058 lines)  AV=2.00  SV=4.63  BV=1.21
    {69972,1664,1040, 0, 0, 0},  //TV = 3.84(2058 lines)  AV=2.00  SV=4.72  BV=1.11
    {79968,1536,1056, 0, 0, 0},  //TV = 3.64(2352 lines)  AV=2.00  SV=4.63  BV=1.02
    {79968,1664,1048, 0, 0, 0},  //TV = 3.64(2352 lines)  AV=2.00  SV=4.73  BV=0.91
    {89998,1536,1080, 0, 0, 0},  //TV = 3.47(2647 lines)  AV=2.00  SV=4.66  BV=0.81
};

static strAETable g_AE_CaptureISO100Table =
{
    AETABLE_CAPTURE_ISO100,    //eAETableID
    93,    //u4TotalIndex
    20,    //u4StrobeTrigerBV
    100,    //i4MaxBV
    8,    //i4MinBV
    LIB3A_AE_ISO_SPEED_100, //ISO SPEED
    sCaptureISO100PLineTable_60Hz,
    sCaptureISO100PLineTable_50Hz,
    NULL,
};

static strEvSetting sCaptureISO200PLineTable_60Hz[103] =
{
    {136,1792,1088, 0, 0, 0},  //TV = 12.84(4 lines)  AV=2.00  SV=4.89  BV=9.95
    {170,1536,1040, 0, 0, 0},  //TV = 12.52(5 lines)  AV=2.00  SV=4.61  BV=9.91
    {170,1664,1032, 0, 0, 0},  //TV = 12.52(5 lines)  AV=2.00  SV=4.71  BV=9.81
    {170,1792,1024, 0, 0, 0},  //TV = 12.52(5 lines)  AV=2.00  SV=4.81  BV=9.71
    {204,1536,1072, 0, 0, 0},  //TV = 12.26(6 lines)  AV=2.00  SV=4.65  BV=9.61
    {204,1664,1056, 0, 0, 0},  //TV = 12.26(6 lines)  AV=2.00  SV=4.74  BV=9.51
    {238,1536,1056, 0, 0, 0},  //TV = 12.04(7 lines)  AV=2.00  SV=4.63  BV=9.41
    {238,1664,1040, 0, 0, 0},  //TV = 12.04(7 lines)  AV=2.00  SV=4.72  BV=9.31
    {272,1536,1056, 0, 0, 0},  //TV = 11.84(8 lines)  AV=2.00  SV=4.63  BV=9.21
    {272,1664,1048, 0, 0, 0},  //TV = 11.84(8 lines)  AV=2.00  SV=4.73  BV=9.11
    {306,1536,1080, 0, 0, 0},  //TV = 11.67(9 lines)  AV=2.00  SV=4.66  BV=9.01
    {340,1536,1040, 0, 0, 0},  //TV = 11.52(10 lines)  AV=2.00  SV=4.61  BV=8.91
    {340,1664,1032, 0, 0, 0},  //TV = 11.52(10 lines)  AV=2.00  SV=4.71  BV=8.81
    {374,1536,1088, 0, 0, 0},  //TV = 11.38(11 lines)  AV=2.00  SV=4.67  BV=8.71
    {408,1536,1072, 0, 0, 0},  //TV = 11.26(12 lines)  AV=2.00  SV=4.65  BV=8.61
    {442,1536,1056, 0, 0, 0},  //TV = 11.14(13 lines)  AV=2.00  SV=4.63  BV=8.51
    {476,1536,1056, 0, 0, 0},  //TV = 11.04(14 lines)  AV=2.00  SV=4.63  BV=8.41
    {510,1536,1056, 0, 0, 0},  //TV = 10.94(15 lines)  AV=2.00  SV=4.63  BV=8.31
    {544,1536,1056, 0, 0, 0},  //TV = 10.84(16 lines)  AV=2.00  SV=4.63  BV=8.21
    {578,1536,1072, 0, 0, 0},  //TV = 10.76(17 lines)  AV=2.00  SV=4.65  BV=8.11
    {612,1536,1080, 0, 0, 0},  //TV = 10.67(18 lines)  AV=2.00  SV=4.66  BV=8.01
    {680,1536,1040, 0, 0, 0},  //TV = 10.52(20 lines)  AV=2.00  SV=4.61  BV=7.91
    {714,1536,1072, 0, 0, 0},  //TV = 10.45(21 lines)  AV=2.00  SV=4.65  BV=7.80
    {782,1536,1040, 0, 0, 0},  //TV = 10.32(23 lines)  AV=2.00  SV=4.61  BV=7.71
    {816,1536,1072, 0, 0, 0},  //TV = 10.26(24 lines)  AV=2.00  SV=4.65  BV=7.61
    {884,1536,1056, 0, 0, 0},  //TV = 10.14(26 lines)  AV=2.00  SV=4.63  BV=7.51
    {952,1536,1056, 0, 0, 0},  //TV = 10.04(28 lines)  AV=2.00  SV=4.63  BV=7.41
    {1020,1536,1056, 0, 0, 0},  //TV = 9.94(30 lines)  AV=2.00  SV=4.63  BV=7.31
    {1088,1536,1064, 0, 0, 0},  //TV = 9.84(32 lines)  AV=2.00  SV=4.64  BV=7.20
    {1190,1536,1040, 0, 0, 0},  //TV = 9.71(35 lines)  AV=2.00  SV=4.61  BV=7.11
    {1258,1536,1056, 0, 0, 0},  //TV = 9.63(37 lines)  AV=2.00  SV=4.63  BV=7.01
    {1360,1536,1048, 0, 0, 0},  //TV = 9.52(40 lines)  AV=2.00  SV=4.62  BV=6.90
    {1462,1536,1048, 0, 0, 0},  //TV = 9.42(43 lines)  AV=2.00  SV=4.62  BV=6.80
    {1564,1536,1040, 0, 0, 0},  //TV = 9.32(46 lines)  AV=2.00  SV=4.61  BV=6.71
    {1666,1536,1048, 0, 0, 0},  //TV = 9.23(49 lines)  AV=2.00  SV=4.62  BV=6.61
    {1802,1536,1040, 0, 0, 0},  //TV = 9.12(53 lines)  AV=2.00  SV=4.61  BV=6.51
    {1904,1536,1056, 0, 0, 0},  //TV = 9.04(56 lines)  AV=2.00  SV=4.63  BV=6.41
    {2040,1536,1056, 0, 0, 0},  //TV = 8.94(60 lines)  AV=2.00  SV=4.63  BV=6.31
    {2210,1536,1048, 0, 0, 0},  //TV = 8.82(65 lines)  AV=2.00  SV=4.62  BV=6.20
    {2380,1536,1040, 0, 0, 0},  //TV = 8.71(70 lines)  AV=2.00  SV=4.61  BV=6.11
    {2516,1536,1056, 0, 0, 0},  //TV = 8.63(74 lines)  AV=2.00  SV=4.63  BV=6.01
    {2720,1536,1048, 0, 0, 0},  //TV = 8.52(80 lines)  AV=2.00  SV=4.62  BV=5.90
    {2924,1536,1040, 0, 0, 0},  //TV = 8.42(86 lines)  AV=2.00  SV=4.61  BV=5.81
    {3128,1536,1040, 0, 0, 0},  //TV = 8.32(92 lines)  AV=2.00  SV=4.61  BV=5.71
    {3332,1536,1048, 0, 0, 0},  //TV = 8.23(98 lines)  AV=2.00  SV=4.62  BV=5.61
    {3570,1536,1048, 0, 0, 0},  //TV = 8.13(105 lines)  AV=2.00  SV=4.62  BV=5.51
    {3842,1536,1040, 0, 0, 0},  //TV = 8.02(113 lines)  AV=2.00  SV=4.61  BV=5.42
    {4148,1536,1040, 0, 0, 0},  //TV = 7.91(122 lines)  AV=2.00  SV=4.61  BV=5.31
    {4420,1536,1040, 0, 0, 0},  //TV = 7.82(130 lines)  AV=2.00  SV=4.61  BV=5.21
    {4760,1536,1040, 0, 0, 0},  //TV = 7.71(140 lines)  AV=2.00  SV=4.61  BV=5.11
    {5100,1536,1040, 0, 0, 0},  //TV = 7.62(150 lines)  AV=2.00  SV=4.61  BV=5.01
    {5440,1536,1040, 0, 0, 0},  //TV = 7.52(160 lines)  AV=2.00  SV=4.61  BV=4.91
    {5848,1536,1040, 0, 0, 0},  //TV = 7.42(172 lines)  AV=2.00  SV=4.61  BV=4.81
    {6290,1536,1040, 0, 0, 0},  //TV = 7.31(185 lines)  AV=2.00  SV=4.61  BV=4.71
    {6732,1536,1040, 0, 0, 0},  //TV = 7.21(198 lines)  AV=2.00  SV=4.61  BV=4.61
    {7208,1536,1040, 0, 0, 0},  //TV = 7.12(212 lines)  AV=2.00  SV=4.61  BV=4.51
    {7786,1536,1040, 0, 0, 0},  //TV = 7.00(229 lines)  AV=2.00  SV=4.61  BV=4.40
    {8262,1536,1040, 0, 0, 0},  //TV = 6.92(243 lines)  AV=2.00  SV=4.61  BV=4.31
    {8330,1536,1104, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=4.69  BV=4.21
    {8330,1664,1096, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=4.80  BV=4.11
    {8330,1792,1096, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=4.91  BV=4.00
    {8330,2048,1024, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.00  BV=3.91
    {8330,2176,1024, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.09  BV=3.82
    {8330,2304,1048, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.20  BV=3.70
    {8330,2432,1064, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.30  BV=3.60
    {8330,2688,1032, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.40  BV=3.50
    {8330,2816,1056, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.50  BV=3.40
    {8330,3072,1032, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.60  BV=3.31
    {16660,1536,1104, 0, 0, 0},  //TV = 5.91(490 lines)  AV=2.00  SV=4.69  BV=3.21
    {16660,1664,1096, 0, 0, 0},  //TV = 5.91(490 lines)  AV=2.00  SV=4.80  BV=3.11
    {16660,1792,1088, 0, 0, 0},  //TV = 5.91(490 lines)  AV=2.00  SV=4.89  BV=3.01
    {16660,1920,1088, 0, 0, 0},  //TV = 5.91(490 lines)  AV=2.00  SV=4.99  BV=2.91
    {16660,2176,1032, 0, 0, 0},  //TV = 5.91(490 lines)  AV=2.00  SV=5.10  BV=2.81
    {24990,1536,1040, 0, 0, 0},  //TV = 5.32(735 lines)  AV=2.00  SV=4.61  BV=2.72
    {24990,1664,1032, 0, 0, 0},  //TV = 5.32(735 lines)  AV=2.00  SV=4.71  BV=2.61
    {24990,1792,1024, 0, 0, 0},  //TV = 5.32(735 lines)  AV=2.00  SV=4.81  BV=2.52
    {24990,1920,1024, 0, 0, 0},  //TV = 5.32(735 lines)  AV=2.00  SV=4.91  BV=2.42
    {24990,2048,1032, 0, 0, 0},  //TV = 5.32(735 lines)  AV=2.00  SV=5.01  BV=2.31
    {32674,1664,1040, 0, 0, 0},  //TV = 4.94(961 lines)  AV=2.00  SV=4.72  BV=2.21
    {32674,1792,1032, 0, 0, 0},  //TV = 4.94(961 lines)  AV=2.00  SV=4.82  BV=2.12
    {32674,1920,1040, 0, 0, 0},  //TV = 4.94(961 lines)  AV=2.00  SV=4.93  BV=2.01
    {40834,1664,1032, 0, 0, 0},  //TV = 4.61(1201 lines)  AV=2.00  SV=4.71  BV=1.90
    {40834,1792,1024, 0, 0, 0},  //TV = 4.61(1201 lines)  AV=2.00  SV=4.81  BV=1.81
    {48994,1536,1064, 0, 0, 0},  //TV = 4.35(1441 lines)  AV=2.00  SV=4.64  BV=1.71
    {48994,1664,1048, 0, 0, 0},  //TV = 4.35(1441 lines)  AV=2.00  SV=4.73  BV=1.62
    {48994,1792,1056, 0, 0, 0},  //TV = 4.35(1441 lines)  AV=2.00  SV=4.85  BV=1.50
    {57154,1664,1032, 0, 0, 0},  //TV = 4.13(1681 lines)  AV=2.00  SV=4.71  BV=1.42
    {57154,1792,1032, 0, 0, 0},  //TV = 4.13(1681 lines)  AV=2.00  SV=4.82  BV=1.31
    {65314,1664,1048, 0, 0, 0},  //TV = 3.94(1921 lines)  AV=2.00  SV=4.73  BV=1.20
    {65314,1792,1032, 0, 0, 0},  //TV = 3.94(1921 lines)  AV=2.00  SV=4.82  BV=1.12
    {65314,1920,1040, 0, 0, 0},  //TV = 3.94(1921 lines)  AV=2.00  SV=4.93  BV=1.01
    {65314,2048,1040, 0, 0, 0},  //TV = 3.94(1921 lines)  AV=2.00  SV=5.02  BV=0.91
    {65314,2176,1056, 0, 0, 0},  //TV = 3.94(1921 lines)  AV=2.00  SV=5.13  BV=0.80
    {65314,2304,1064, 0, 0, 0},  //TV = 3.94(1921 lines)  AV=2.00  SV=5.23  BV=0.71
    {73474,2176,1080, 0, 0, 0},  //TV = 3.77(2161 lines)  AV=2.00  SV=5.16  BV=0.60
    {73474,2432,1032, 0, 0, 0},  //TV = 3.77(2161 lines)  AV=2.00  SV=5.26  BV=0.51
    {81634,2304,1048, 0, 0, 0},  //TV = 3.61(2401 lines)  AV=2.00  SV=5.20  BV=0.41
    {81634,2432,1064, 0, 0, 0},  //TV = 3.61(2401 lines)  AV=2.00  SV=5.30  BV=0.31
    {81634,2688,1032, 0, 0, 0},  //TV = 3.61(2401 lines)  AV=2.00  SV=5.40  BV=0.21
    {81634,2816,1056, 0, 0, 0},  //TV = 3.61(2401 lines)  AV=2.00  SV=5.50  BV=0.11
    {81634,3072,1048, 0, 0, 0},  //TV = 3.61(2401 lines)  AV=2.00  SV=5.62  BV=-0.00
    {89828,2944,1064, 0, 0, 0},  //TV = 3.48(2642 lines)  AV=2.00  SV=5.58  BV=-0.10
    {89828,3200,1048, 0, 0, 0},  //TV = 3.48(2642 lines)  AV=2.00  SV=5.68  BV=-0.20
};

static strEvSetting sCaptureISO200PLineTable_50Hz[103] =
{
    {136,1792,1088, 0, 0, 0},  //TV = 12.84(4 lines)  AV=2.00  SV=4.89  BV=9.95
    {170,1536,1040, 0, 0, 0},  //TV = 12.52(5 lines)  AV=2.00  SV=4.61  BV=9.91
    {170,1664,1032, 0, 0, 0},  //TV = 12.52(5 lines)  AV=2.00  SV=4.71  BV=9.81
    {170,1792,1024, 0, 0, 0},  //TV = 12.52(5 lines)  AV=2.00  SV=4.81  BV=9.71
    {204,1536,1072, 0, 0, 0},  //TV = 12.26(6 lines)  AV=2.00  SV=4.65  BV=9.61
    {204,1664,1056, 0, 0, 0},  //TV = 12.26(6 lines)  AV=2.00  SV=4.74  BV=9.51
    {238,1536,1056, 0, 0, 0},  //TV = 12.04(7 lines)  AV=2.00  SV=4.63  BV=9.41
    {238,1664,1040, 0, 0, 0},  //TV = 12.04(7 lines)  AV=2.00  SV=4.72  BV=9.31
    {272,1536,1056, 0, 0, 0},  //TV = 11.84(8 lines)  AV=2.00  SV=4.63  BV=9.21
    {272,1664,1048, 0, 0, 0},  //TV = 11.84(8 lines)  AV=2.00  SV=4.73  BV=9.11
    {306,1536,1080, 0, 0, 0},  //TV = 11.67(9 lines)  AV=2.00  SV=4.66  BV=9.01
    {340,1536,1040, 0, 0, 0},  //TV = 11.52(10 lines)  AV=2.00  SV=4.61  BV=8.91
    {340,1664,1032, 0, 0, 0},  //TV = 11.52(10 lines)  AV=2.00  SV=4.71  BV=8.81
    {374,1536,1088, 0, 0, 0},  //TV = 11.38(11 lines)  AV=2.00  SV=4.67  BV=8.71
    {408,1536,1072, 0, 0, 0},  //TV = 11.26(12 lines)  AV=2.00  SV=4.65  BV=8.61
    {442,1536,1056, 0, 0, 0},  //TV = 11.14(13 lines)  AV=2.00  SV=4.63  BV=8.51
    {476,1536,1056, 0, 0, 0},  //TV = 11.04(14 lines)  AV=2.00  SV=4.63  BV=8.41
    {510,1536,1056, 0, 0, 0},  //TV = 10.94(15 lines)  AV=2.00  SV=4.63  BV=8.31
    {544,1536,1056, 0, 0, 0},  //TV = 10.84(16 lines)  AV=2.00  SV=4.63  BV=8.21
    {578,1536,1072, 0, 0, 0},  //TV = 10.76(17 lines)  AV=2.00  SV=4.65  BV=8.11
    {612,1536,1080, 0, 0, 0},  //TV = 10.67(18 lines)  AV=2.00  SV=4.66  BV=8.01
    {680,1536,1040, 0, 0, 0},  //TV = 10.52(20 lines)  AV=2.00  SV=4.61  BV=7.91
    {714,1536,1072, 0, 0, 0},  //TV = 10.45(21 lines)  AV=2.00  SV=4.65  BV=7.80
    {782,1536,1040, 0, 0, 0},  //TV = 10.32(23 lines)  AV=2.00  SV=4.61  BV=7.71
    {816,1536,1072, 0, 0, 0},  //TV = 10.26(24 lines)  AV=2.00  SV=4.65  BV=7.61
    {884,1536,1056, 0, 0, 0},  //TV = 10.14(26 lines)  AV=2.00  SV=4.63  BV=7.51
    {952,1536,1056, 0, 0, 0},  //TV = 10.04(28 lines)  AV=2.00  SV=4.63  BV=7.41
    {1020,1536,1056, 0, 0, 0},  //TV = 9.94(30 lines)  AV=2.00  SV=4.63  BV=7.31
    {1088,1536,1064, 0, 0, 0},  //TV = 9.84(32 lines)  AV=2.00  SV=4.64  BV=7.20
    {1190,1536,1040, 0, 0, 0},  //TV = 9.71(35 lines)  AV=2.00  SV=4.61  BV=7.11
    {1258,1536,1056, 0, 0, 0},  //TV = 9.63(37 lines)  AV=2.00  SV=4.63  BV=7.01
    {1360,1536,1048, 0, 0, 0},  //TV = 9.52(40 lines)  AV=2.00  SV=4.62  BV=6.90
    {1462,1536,1048, 0, 0, 0},  //TV = 9.42(43 lines)  AV=2.00  SV=4.62  BV=6.80
    {1564,1536,1040, 0, 0, 0},  //TV = 9.32(46 lines)  AV=2.00  SV=4.61  BV=6.71
    {1666,1536,1048, 0, 0, 0},  //TV = 9.23(49 lines)  AV=2.00  SV=4.62  BV=6.61
    {1802,1536,1040, 0, 0, 0},  //TV = 9.12(53 lines)  AV=2.00  SV=4.61  BV=6.51
    {1904,1536,1056, 0, 0, 0},  //TV = 9.04(56 lines)  AV=2.00  SV=4.63  BV=6.41
    {2040,1536,1056, 0, 0, 0},  //TV = 8.94(60 lines)  AV=2.00  SV=4.63  BV=6.31
    {2210,1536,1048, 0, 0, 0},  //TV = 8.82(65 lines)  AV=2.00  SV=4.62  BV=6.20
    {2380,1536,1040, 0, 0, 0},  //TV = 8.71(70 lines)  AV=2.00  SV=4.61  BV=6.11
    {2516,1536,1056, 0, 0, 0},  //TV = 8.63(74 lines)  AV=2.00  SV=4.63  BV=6.01
    {2720,1536,1048, 0, 0, 0},  //TV = 8.52(80 lines)  AV=2.00  SV=4.62  BV=5.90
    {2924,1536,1040, 0, 0, 0},  //TV = 8.42(86 lines)  AV=2.00  SV=4.61  BV=5.81
    {3128,1536,1040, 0, 0, 0},  //TV = 8.32(92 lines)  AV=2.00  SV=4.61  BV=5.71
    {3332,1536,1048, 0, 0, 0},  //TV = 8.23(98 lines)  AV=2.00  SV=4.62  BV=5.61
    {3570,1536,1048, 0, 0, 0},  //TV = 8.13(105 lines)  AV=2.00  SV=4.62  BV=5.51
    {3842,1536,1040, 0, 0, 0},  //TV = 8.02(113 lines)  AV=2.00  SV=4.61  BV=5.42
    {4148,1536,1040, 0, 0, 0},  //TV = 7.91(122 lines)  AV=2.00  SV=4.61  BV=5.31
    {4420,1536,1040, 0, 0, 0},  //TV = 7.82(130 lines)  AV=2.00  SV=4.61  BV=5.21
    {4760,1536,1040, 0, 0, 0},  //TV = 7.71(140 lines)  AV=2.00  SV=4.61  BV=5.11
    {5100,1536,1040, 0, 0, 0},  //TV = 7.62(150 lines)  AV=2.00  SV=4.61  BV=5.01
    {5440,1536,1040, 0, 0, 0},  //TV = 7.52(160 lines)  AV=2.00  SV=4.61  BV=4.91
    {5848,1536,1040, 0, 0, 0},  //TV = 7.42(172 lines)  AV=2.00  SV=4.61  BV=4.81
    {6290,1536,1040, 0, 0, 0},  //TV = 7.31(185 lines)  AV=2.00  SV=4.61  BV=4.71
    {6732,1536,1040, 0, 0, 0},  //TV = 7.21(198 lines)  AV=2.00  SV=4.61  BV=4.61
    {7208,1536,1040, 0, 0, 0},  //TV = 7.12(212 lines)  AV=2.00  SV=4.61  BV=4.51
    {7786,1536,1040, 0, 0, 0},  //TV = 7.00(229 lines)  AV=2.00  SV=4.61  BV=4.40
    {8262,1536,1040, 0, 0, 0},  //TV = 6.92(243 lines)  AV=2.00  SV=4.61  BV=4.31
    {8874,1536,1040, 0, 0, 0},  //TV = 6.82(261 lines)  AV=2.00  SV=4.61  BV=4.21
    {9554,1536,1040, 0, 0, 0},  //TV = 6.71(281 lines)  AV=2.00  SV=4.61  BV=4.10
    {9996,1536,1056, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=4.63  BV=4.02
    {9996,1664,1048, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=4.73  BV=3.91
    {9996,1792,1048, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=4.84  BV=3.80
    {9996,1920,1048, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=4.94  BV=3.70
    {9996,2048,1048, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.03  BV=3.61
    {9996,2176,1056, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.13  BV=3.51
    {9996,2304,1072, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.24  BV=3.41
    {9996,2560,1032, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.33  BV=3.31
    {9996,2688,1056, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.44  BV=3.21
    {9996,2944,1032, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.53  BV=3.11
    {19992,1536,1056, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=4.63  BV=3.02
    {19992,1664,1048, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=4.73  BV=2.91
    {19992,1792,1040, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=4.83  BV=2.81
    {19992,1920,1040, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=4.93  BV=2.72
    {19992,2048,1048, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=5.03  BV=2.61
    {19992,2176,1056, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=5.13  BV=2.51
    {29988,1536,1072, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=4.65  BV=2.41
    {29988,1664,1056, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=4.74  BV=2.31
    {29988,1792,1056, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=4.85  BV=2.21
    {29988,1920,1056, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=4.95  BV=2.11
    {39984,1536,1056, 0, 0, 0},  //TV = 4.64(1176 lines)  AV=2.00  SV=4.63  BV=2.02
    {39984,1664,1048, 0, 0, 0},  //TV = 4.64(1176 lines)  AV=2.00  SV=4.73  BV=1.91
    {39984,1792,1048, 0, 0, 0},  //TV = 4.64(1176 lines)  AV=2.00  SV=4.84  BV=1.80
    {49980,1536,1040, 0, 0, 0},  //TV = 4.32(1470 lines)  AV=2.00  SV=4.61  BV=1.72
    {49980,1664,1032, 0, 0, 0},  //TV = 4.32(1470 lines)  AV=2.00  SV=4.71  BV=1.61
    {49980,1792,1024, 0, 0, 0},  //TV = 4.32(1470 lines)  AV=2.00  SV=4.81  BV=1.52
    {59976,1536,1072, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=4.65  BV=1.41
    {59976,1664,1064, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=4.76  BV=1.30
    {59976,1792,1056, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=4.85  BV=1.21
    {59976,1920,1056, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=4.95  BV=1.11
    {59976,2048,1064, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=5.06  BV=1.00
    {59976,2176,1072, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=5.15  BV=0.91
    {59976,2432,1024, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=5.25  BV=0.81
    {69972,2176,1056, 0, 0, 0},  //TV = 3.84(2058 lines)  AV=2.00  SV=5.13  BV=0.71
    {69972,2304,1064, 0, 0, 0},  //TV = 3.84(2058 lines)  AV=2.00  SV=5.23  BV=0.61
    {79968,2176,1056, 0, 0, 0},  //TV = 3.64(2352 lines)  AV=2.00  SV=5.13  BV=0.51
    {79968,2304,1072, 0, 0, 0},  //TV = 3.64(2352 lines)  AV=2.00  SV=5.24  BV=0.41
    {79968,2560,1032, 0, 0, 0},  //TV = 3.64(2352 lines)  AV=2.00  SV=5.33  BV=0.31
    {79968,2688,1048, 0, 0, 0},  //TV = 3.64(2352 lines)  AV=2.00  SV=5.43  BV=0.22
    {79968,2944,1032, 0, 0, 0},  //TV = 3.64(2352 lines)  AV=2.00  SV=5.53  BV=0.11
    {79968,3200,1024, 0, 0, 0},  //TV = 3.64(2352 lines)  AV=2.00  SV=5.64  BV=0.00
    {89998,2944,1064, 0, 0, 0},  //TV = 3.47(2647 lines)  AV=2.00  SV=5.58  BV=-0.10
    {89998,3200,1048, 0, 0, 0},  //TV = 3.47(2647 lines)  AV=2.00  SV=5.68  BV=-0.20
};

static strAETable g_AE_CaptureISO200Table =
{
    AETABLE_CAPTURE_ISO200,    //eAETableID
    103,    //u4TotalIndex
    20,    //u4StrobeTrigerBV
    100,    //i4MaxBV
    -2,    //i4MinBV
    LIB3A_AE_ISO_SPEED_200, //ISO SPEED
    sCaptureISO200PLineTable_60Hz,
    sCaptureISO200PLineTable_50Hz,
    NULL,
};

static strEvSetting sCaptureISO400PLineTable_60Hz[117] =
{
    {136,1792,1088, 0, 0, 0},  //TV = 12.84(4 lines)  AV=2.00  SV=4.89  BV=9.95
    {170,1536,1040, 0, 0, 0},  //TV = 12.52(5 lines)  AV=2.00  SV=4.61  BV=9.91
    {170,1664,1032, 0, 0, 0},  //TV = 12.52(5 lines)  AV=2.00  SV=4.71  BV=9.81
    {170,1792,1024, 0, 0, 0},  //TV = 12.52(5 lines)  AV=2.00  SV=4.81  BV=9.71
    {204,1536,1072, 0, 0, 0},  //TV = 12.26(6 lines)  AV=2.00  SV=4.65  BV=9.61
    {204,1664,1056, 0, 0, 0},  //TV = 12.26(6 lines)  AV=2.00  SV=4.74  BV=9.51
    {238,1536,1056, 0, 0, 0},  //TV = 12.04(7 lines)  AV=2.00  SV=4.63  BV=9.41
    {238,1664,1040, 0, 0, 0},  //TV = 12.04(7 lines)  AV=2.00  SV=4.72  BV=9.31
    {272,1536,1056, 0, 0, 0},  //TV = 11.84(8 lines)  AV=2.00  SV=4.63  BV=9.21
    {272,1664,1048, 0, 0, 0},  //TV = 11.84(8 lines)  AV=2.00  SV=4.73  BV=9.11
    {306,1536,1080, 0, 0, 0},  //TV = 11.67(9 lines)  AV=2.00  SV=4.66  BV=9.01
    {340,1536,1040, 0, 0, 0},  //TV = 11.52(10 lines)  AV=2.00  SV=4.61  BV=8.91
    {340,1664,1032, 0, 0, 0},  //TV = 11.52(10 lines)  AV=2.00  SV=4.71  BV=8.81
    {374,1536,1088, 0, 0, 0},  //TV = 11.38(11 lines)  AV=2.00  SV=4.67  BV=8.71
    {408,1536,1072, 0, 0, 0},  //TV = 11.26(12 lines)  AV=2.00  SV=4.65  BV=8.61
    {442,1536,1056, 0, 0, 0},  //TV = 11.14(13 lines)  AV=2.00  SV=4.63  BV=8.51
    {476,1536,1056, 0, 0, 0},  //TV = 11.04(14 lines)  AV=2.00  SV=4.63  BV=8.41
    {510,1536,1056, 0, 0, 0},  //TV = 10.94(15 lines)  AV=2.00  SV=4.63  BV=8.31
    {544,1536,1056, 0, 0, 0},  //TV = 10.84(16 lines)  AV=2.00  SV=4.63  BV=8.21
    {578,1536,1072, 0, 0, 0},  //TV = 10.76(17 lines)  AV=2.00  SV=4.65  BV=8.11
    {612,1536,1080, 0, 0, 0},  //TV = 10.67(18 lines)  AV=2.00  SV=4.66  BV=8.01
    {680,1536,1040, 0, 0, 0},  //TV = 10.52(20 lines)  AV=2.00  SV=4.61  BV=7.91
    {714,1536,1072, 0, 0, 0},  //TV = 10.45(21 lines)  AV=2.00  SV=4.65  BV=7.80
    {782,1536,1040, 0, 0, 0},  //TV = 10.32(23 lines)  AV=2.00  SV=4.61  BV=7.71
    {816,1536,1072, 0, 0, 0},  //TV = 10.26(24 lines)  AV=2.00  SV=4.65  BV=7.61
    {884,1536,1056, 0, 0, 0},  //TV = 10.14(26 lines)  AV=2.00  SV=4.63  BV=7.51
    {952,1536,1056, 0, 0, 0},  //TV = 10.04(28 lines)  AV=2.00  SV=4.63  BV=7.41
    {1020,1536,1056, 0, 0, 0},  //TV = 9.94(30 lines)  AV=2.00  SV=4.63  BV=7.31
    {1088,1536,1064, 0, 0, 0},  //TV = 9.84(32 lines)  AV=2.00  SV=4.64  BV=7.20
    {1190,1536,1040, 0, 0, 0},  //TV = 9.71(35 lines)  AV=2.00  SV=4.61  BV=7.11
    {1258,1536,1056, 0, 0, 0},  //TV = 9.63(37 lines)  AV=2.00  SV=4.63  BV=7.01
    {1360,1536,1048, 0, 0, 0},  //TV = 9.52(40 lines)  AV=2.00  SV=4.62  BV=6.90
    {1462,1536,1048, 0, 0, 0},  //TV = 9.42(43 lines)  AV=2.00  SV=4.62  BV=6.80
    {1564,1536,1040, 0, 0, 0},  //TV = 9.32(46 lines)  AV=2.00  SV=4.61  BV=6.71
    {1666,1536,1048, 0, 0, 0},  //TV = 9.23(49 lines)  AV=2.00  SV=4.62  BV=6.61
    {1802,1536,1040, 0, 0, 0},  //TV = 9.12(53 lines)  AV=2.00  SV=4.61  BV=6.51
    {1904,1536,1056, 0, 0, 0},  //TV = 9.04(56 lines)  AV=2.00  SV=4.63  BV=6.41
    {2040,1536,1056, 0, 0, 0},  //TV = 8.94(60 lines)  AV=2.00  SV=4.63  BV=6.31
    {2210,1536,1048, 0, 0, 0},  //TV = 8.82(65 lines)  AV=2.00  SV=4.62  BV=6.20
    {2380,1536,1040, 0, 0, 0},  //TV = 8.71(70 lines)  AV=2.00  SV=4.61  BV=6.11
    {2516,1536,1056, 0, 0, 0},  //TV = 8.63(74 lines)  AV=2.00  SV=4.63  BV=6.01
    {2720,1536,1048, 0, 0, 0},  //TV = 8.52(80 lines)  AV=2.00  SV=4.62  BV=5.90
    {2924,1536,1040, 0, 0, 0},  //TV = 8.42(86 lines)  AV=2.00  SV=4.61  BV=5.81
    {3128,1536,1040, 0, 0, 0},  //TV = 8.32(92 lines)  AV=2.00  SV=4.61  BV=5.71
    {3332,1536,1048, 0, 0, 0},  //TV = 8.23(98 lines)  AV=2.00  SV=4.62  BV=5.61
    {3570,1536,1048, 0, 0, 0},  //TV = 8.13(105 lines)  AV=2.00  SV=4.62  BV=5.51
    {3842,1536,1040, 0, 0, 0},  //TV = 8.02(113 lines)  AV=2.00  SV=4.61  BV=5.42
    {4148,1536,1040, 0, 0, 0},  //TV = 7.91(122 lines)  AV=2.00  SV=4.61  BV=5.31
    {4420,1536,1040, 0, 0, 0},  //TV = 7.82(130 lines)  AV=2.00  SV=4.61  BV=5.21
    {4760,1536,1040, 0, 0, 0},  //TV = 7.71(140 lines)  AV=2.00  SV=4.61  BV=5.11
    {5100,1536,1040, 0, 0, 0},  //TV = 7.62(150 lines)  AV=2.00  SV=4.61  BV=5.01
    {5440,1536,1040, 0, 0, 0},  //TV = 7.52(160 lines)  AV=2.00  SV=4.61  BV=4.91
    {5848,1536,1040, 0, 0, 0},  //TV = 7.42(172 lines)  AV=2.00  SV=4.61  BV=4.81
    {6290,1536,1040, 0, 0, 0},  //TV = 7.31(185 lines)  AV=2.00  SV=4.61  BV=4.71
    {6732,1536,1040, 0, 0, 0},  //TV = 7.21(198 lines)  AV=2.00  SV=4.61  BV=4.61
    {7208,1536,1040, 0, 0, 0},  //TV = 7.12(212 lines)  AV=2.00  SV=4.61  BV=4.51
    {7786,1536,1040, 0, 0, 0},  //TV = 7.00(229 lines)  AV=2.00  SV=4.61  BV=4.40
    {8262,1536,1040, 0, 0, 0},  //TV = 6.92(243 lines)  AV=2.00  SV=4.61  BV=4.31
    {8330,1536,1104, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=4.69  BV=4.21
    {8330,1664,1096, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=4.80  BV=4.11
    {8330,1792,1096, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=4.91  BV=4.00
    {8330,2048,1024, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.00  BV=3.91
    {8330,2176,1024, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.09  BV=3.82
    {8330,2304,1048, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.20  BV=3.70
    {8330,2432,1064, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.30  BV=3.60
    {8330,2688,1032, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.40  BV=3.50
    {8330,2816,1056, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.50  BV=3.40
    {8330,3072,1032, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.60  BV=3.31
    {16660,1536,1104, 0, 0, 0},  //TV = 5.91(490 lines)  AV=2.00  SV=4.69  BV=3.21
    {16660,1664,1096, 0, 0, 0},  //TV = 5.91(490 lines)  AV=2.00  SV=4.80  BV=3.11
    {16660,1792,1088, 0, 0, 0},  //TV = 5.91(490 lines)  AV=2.00  SV=4.89  BV=3.01
    {16660,1920,1088, 0, 0, 0},  //TV = 5.91(490 lines)  AV=2.00  SV=4.99  BV=2.91
    {16660,2176,1032, 0, 0, 0},  //TV = 5.91(490 lines)  AV=2.00  SV=5.10  BV=2.81
    {24990,1536,1040, 0, 0, 0},  //TV = 5.32(735 lines)  AV=2.00  SV=4.61  BV=2.72
    {24990,1664,1032, 0, 0, 0},  //TV = 5.32(735 lines)  AV=2.00  SV=4.71  BV=2.61
    {24990,1792,1024, 0, 0, 0},  //TV = 5.32(735 lines)  AV=2.00  SV=4.81  BV=2.52
    {24990,1920,1024, 0, 0, 0},  //TV = 5.32(735 lines)  AV=2.00  SV=4.91  BV=2.42
    {24990,2048,1032, 0, 0, 0},  //TV = 5.32(735 lines)  AV=2.00  SV=5.01  BV=2.31
    {32674,1664,1040, 0, 0, 0},  //TV = 4.94(961 lines)  AV=2.00  SV=4.72  BV=2.21
    {32674,1792,1032, 0, 0, 0},  //TV = 4.94(961 lines)  AV=2.00  SV=4.82  BV=2.12
    {32674,1920,1040, 0, 0, 0},  //TV = 4.94(961 lines)  AV=2.00  SV=4.93  BV=2.01
    {40834,1664,1032, 0, 0, 0},  //TV = 4.61(1201 lines)  AV=2.00  SV=4.71  BV=1.90
    {40834,1792,1024, 0, 0, 0},  //TV = 4.61(1201 lines)  AV=2.00  SV=4.81  BV=1.81
    {48994,1536,1064, 0, 0, 0},  //TV = 4.35(1441 lines)  AV=2.00  SV=4.64  BV=1.71
    {48994,1664,1048, 0, 0, 0},  //TV = 4.35(1441 lines)  AV=2.00  SV=4.73  BV=1.62
    {48994,1792,1048, 0, 0, 0},  //TV = 4.35(1441 lines)  AV=2.00  SV=4.84  BV=1.51
    {48994,1920,1048, 0, 0, 0},  //TV = 4.35(1441 lines)  AV=2.00  SV=4.94  BV=1.41
    {48994,2048,1056, 0, 0, 0},  //TV = 4.35(1441 lines)  AV=2.00  SV=5.04  BV=1.31
    {48994,2176,1064, 0, 0, 0},  //TV = 4.35(1441 lines)  AV=2.00  SV=5.14  BV=1.21
    {48994,2304,1072, 0, 0, 0},  //TV = 4.35(1441 lines)  AV=2.00  SV=5.24  BV=1.12
    {48994,2560,1040, 0, 0, 0},  //TV = 4.35(1441 lines)  AV=2.00  SV=5.34  BV=1.01
    {57154,2304,1056, 0, 0, 0},  //TV = 4.13(1681 lines)  AV=2.00  SV=5.21  BV=0.91
    {57154,2432,1072, 0, 0, 0},  //TV = 4.13(1681 lines)  AV=2.00  SV=5.31  BV=0.81
    {65314,2304,1064, 0, 0, 0},  //TV = 3.94(1921 lines)  AV=2.00  SV=5.23  BV=0.71
    {65314,2560,1032, 0, 0, 0},  //TV = 3.94(1921 lines)  AV=2.00  SV=5.33  BV=0.60
    {65314,2688,1048, 0, 0, 0},  //TV = 3.94(1921 lines)  AV=2.00  SV=5.43  BV=0.51
    {65314,2944,1024, 0, 0, 0},  //TV = 3.94(1921 lines)  AV=2.00  SV=5.52  BV=0.41
    {65314,3072,1056, 0, 0, 0},  //TV = 3.94(1921 lines)  AV=2.00  SV=5.63  BV=0.31
    {65314,3328,1040, 0, 0, 0},  //TV = 3.94(1921 lines)  AV=2.00  SV=5.72  BV=0.21
    {73474,3200,1032, 0, 0, 0},  //TV = 3.77(2161 lines)  AV=2.00  SV=5.66  BV=0.11
    {81634,3072,1048, 0, 0, 0},  //TV = 3.61(2401 lines)  AV=2.00  SV=5.62  BV=-0.00
    {81634,3328,1032, 0, 0, 0},  //TV = 3.61(2401 lines)  AV=2.00  SV=5.71  BV=-0.10
    {81634,3584,1024, 0, 0, 0},  //TV = 3.61(2401 lines)  AV=2.00  SV=5.81  BV=-0.19
    {81634,3840,1032, 0, 0, 0},  //TV = 3.61(2401 lines)  AV=2.00  SV=5.92  BV=-0.30
    {81634,4096,1040, 0, 0, 0},  //TV = 3.61(2401 lines)  AV=2.00  SV=6.02  BV=-0.41
    {81634,4352,1040, 0, 0, 0},  //TV = 3.61(2401 lines)  AV=2.00  SV=6.11  BV=-0.50
    {81634,4736,1024, 0, 0, 0},  //TV = 3.61(2401 lines)  AV=2.00  SV=6.21  BV=-0.59
    {89828,4608,1024, 0, 0, 0},  //TV = 3.48(2642 lines)  AV=2.00  SV=6.17  BV=-0.69
    {89828,4864,1040, 0, 0, 0},  //TV = 3.48(2642 lines)  AV=2.00  SV=6.27  BV=-0.79
    {98022,4864,1024, 0, 0, 0},  //TV = 3.35(2883 lines)  AV=2.00  SV=6.25  BV=-0.90
    {98022,5120,1040, 0, 0, 0},  //TV = 3.35(2883 lines)  AV=2.00  SV=6.34  BV=-0.99
    {98022,5504,1040, 0, 0, 0},  //TV = 3.35(2883 lines)  AV=2.00  SV=6.45  BV=-1.10
    {98022,6016,1024, 0, 0, 0},  //TV = 3.35(2883 lines)  AV=2.00  SV=6.55  BV=-1.20
    {98022,6400,1032, 0, 0, 0},  //TV = 3.35(2883 lines)  AV=2.00  SV=6.66  BV=-1.30
    {106182,6272,1040, 0, 0, 0},  //TV = 3.24(3123 lines)  AV=2.00  SV=6.64  BV=-1.40
    {106182,6784,1032, 0, 0, 0},  //TV = 3.24(3123 lines)  AV=2.00  SV=6.74  BV=-1.50
    {114342,6784,1024, 0, 0, 0},  //TV = 3.13(3363 lines)  AV=2.00  SV=6.73  BV=-1.60
};

static strEvSetting sCaptureISO400PLineTable_50Hz[117] =
{
    {136,1792,1088, 0, 0, 0},  //TV = 12.84(4 lines)  AV=2.00  SV=4.89  BV=9.95
    {170,1536,1040, 0, 0, 0},  //TV = 12.52(5 lines)  AV=2.00  SV=4.61  BV=9.91
    {170,1664,1032, 0, 0, 0},  //TV = 12.52(5 lines)  AV=2.00  SV=4.71  BV=9.81
    {170,1792,1024, 0, 0, 0},  //TV = 12.52(5 lines)  AV=2.00  SV=4.81  BV=9.71
    {204,1536,1072, 0, 0, 0},  //TV = 12.26(6 lines)  AV=2.00  SV=4.65  BV=9.61
    {204,1664,1056, 0, 0, 0},  //TV = 12.26(6 lines)  AV=2.00  SV=4.74  BV=9.51
    {238,1536,1056, 0, 0, 0},  //TV = 12.04(7 lines)  AV=2.00  SV=4.63  BV=9.41
    {238,1664,1040, 0, 0, 0},  //TV = 12.04(7 lines)  AV=2.00  SV=4.72  BV=9.31
    {272,1536,1056, 0, 0, 0},  //TV = 11.84(8 lines)  AV=2.00  SV=4.63  BV=9.21
    {272,1664,1048, 0, 0, 0},  //TV = 11.84(8 lines)  AV=2.00  SV=4.73  BV=9.11
    {306,1536,1080, 0, 0, 0},  //TV = 11.67(9 lines)  AV=2.00  SV=4.66  BV=9.01
    {340,1536,1040, 0, 0, 0},  //TV = 11.52(10 lines)  AV=2.00  SV=4.61  BV=8.91
    {340,1664,1032, 0, 0, 0},  //TV = 11.52(10 lines)  AV=2.00  SV=4.71  BV=8.81
    {374,1536,1088, 0, 0, 0},  //TV = 11.38(11 lines)  AV=2.00  SV=4.67  BV=8.71
    {408,1536,1072, 0, 0, 0},  //TV = 11.26(12 lines)  AV=2.00  SV=4.65  BV=8.61
    {442,1536,1056, 0, 0, 0},  //TV = 11.14(13 lines)  AV=2.00  SV=4.63  BV=8.51
    {476,1536,1056, 0, 0, 0},  //TV = 11.04(14 lines)  AV=2.00  SV=4.63  BV=8.41
    {510,1536,1056, 0, 0, 0},  //TV = 10.94(15 lines)  AV=2.00  SV=4.63  BV=8.31
    {544,1536,1056, 0, 0, 0},  //TV = 10.84(16 lines)  AV=2.00  SV=4.63  BV=8.21
    {578,1536,1072, 0, 0, 0},  //TV = 10.76(17 lines)  AV=2.00  SV=4.65  BV=8.11
    {612,1536,1080, 0, 0, 0},  //TV = 10.67(18 lines)  AV=2.00  SV=4.66  BV=8.01
    {680,1536,1040, 0, 0, 0},  //TV = 10.52(20 lines)  AV=2.00  SV=4.61  BV=7.91
    {714,1536,1072, 0, 0, 0},  //TV = 10.45(21 lines)  AV=2.00  SV=4.65  BV=7.80
    {782,1536,1040, 0, 0, 0},  //TV = 10.32(23 lines)  AV=2.00  SV=4.61  BV=7.71
    {816,1536,1072, 0, 0, 0},  //TV = 10.26(24 lines)  AV=2.00  SV=4.65  BV=7.61
    {884,1536,1056, 0, 0, 0},  //TV = 10.14(26 lines)  AV=2.00  SV=4.63  BV=7.51
    {952,1536,1056, 0, 0, 0},  //TV = 10.04(28 lines)  AV=2.00  SV=4.63  BV=7.41
    {1020,1536,1056, 0, 0, 0},  //TV = 9.94(30 lines)  AV=2.00  SV=4.63  BV=7.31
    {1088,1536,1064, 0, 0, 0},  //TV = 9.84(32 lines)  AV=2.00  SV=4.64  BV=7.20
    {1190,1536,1040, 0, 0, 0},  //TV = 9.71(35 lines)  AV=2.00  SV=4.61  BV=7.11
    {1258,1536,1056, 0, 0, 0},  //TV = 9.63(37 lines)  AV=2.00  SV=4.63  BV=7.01
    {1360,1536,1048, 0, 0, 0},  //TV = 9.52(40 lines)  AV=2.00  SV=4.62  BV=6.90
    {1462,1536,1048, 0, 0, 0},  //TV = 9.42(43 lines)  AV=2.00  SV=4.62  BV=6.80
    {1564,1536,1040, 0, 0, 0},  //TV = 9.32(46 lines)  AV=2.00  SV=4.61  BV=6.71
    {1666,1536,1048, 0, 0, 0},  //TV = 9.23(49 lines)  AV=2.00  SV=4.62  BV=6.61
    {1802,1536,1040, 0, 0, 0},  //TV = 9.12(53 lines)  AV=2.00  SV=4.61  BV=6.51
    {1904,1536,1056, 0, 0, 0},  //TV = 9.04(56 lines)  AV=2.00  SV=4.63  BV=6.41
    {2040,1536,1056, 0, 0, 0},  //TV = 8.94(60 lines)  AV=2.00  SV=4.63  BV=6.31
    {2210,1536,1048, 0, 0, 0},  //TV = 8.82(65 lines)  AV=2.00  SV=4.62  BV=6.20
    {2380,1536,1040, 0, 0, 0},  //TV = 8.71(70 lines)  AV=2.00  SV=4.61  BV=6.11
    {2516,1536,1056, 0, 0, 0},  //TV = 8.63(74 lines)  AV=2.00  SV=4.63  BV=6.01
    {2720,1536,1048, 0, 0, 0},  //TV = 8.52(80 lines)  AV=2.00  SV=4.62  BV=5.90
    {2924,1536,1040, 0, 0, 0},  //TV = 8.42(86 lines)  AV=2.00  SV=4.61  BV=5.81
    {3128,1536,1040, 0, 0, 0},  //TV = 8.32(92 lines)  AV=2.00  SV=4.61  BV=5.71
    {3332,1536,1048, 0, 0, 0},  //TV = 8.23(98 lines)  AV=2.00  SV=4.62  BV=5.61
    {3570,1536,1048, 0, 0, 0},  //TV = 8.13(105 lines)  AV=2.00  SV=4.62  BV=5.51
    {3842,1536,1040, 0, 0, 0},  //TV = 8.02(113 lines)  AV=2.00  SV=4.61  BV=5.42
    {4148,1536,1040, 0, 0, 0},  //TV = 7.91(122 lines)  AV=2.00  SV=4.61  BV=5.31
    {4420,1536,1040, 0, 0, 0},  //TV = 7.82(130 lines)  AV=2.00  SV=4.61  BV=5.21
    {4760,1536,1040, 0, 0, 0},  //TV = 7.71(140 lines)  AV=2.00  SV=4.61  BV=5.11
    {5100,1536,1040, 0, 0, 0},  //TV = 7.62(150 lines)  AV=2.00  SV=4.61  BV=5.01
    {5440,1536,1040, 0, 0, 0},  //TV = 7.52(160 lines)  AV=2.00  SV=4.61  BV=4.91
    {5848,1536,1040, 0, 0, 0},  //TV = 7.42(172 lines)  AV=2.00  SV=4.61  BV=4.81
    {6290,1536,1040, 0, 0, 0},  //TV = 7.31(185 lines)  AV=2.00  SV=4.61  BV=4.71
    {6732,1536,1040, 0, 0, 0},  //TV = 7.21(198 lines)  AV=2.00  SV=4.61  BV=4.61
    {7208,1536,1040, 0, 0, 0},  //TV = 7.12(212 lines)  AV=2.00  SV=4.61  BV=4.51
    {7786,1536,1040, 0, 0, 0},  //TV = 7.00(229 lines)  AV=2.00  SV=4.61  BV=4.40
    {8262,1536,1040, 0, 0, 0},  //TV = 6.92(243 lines)  AV=2.00  SV=4.61  BV=4.31
    {8874,1536,1040, 0, 0, 0},  //TV = 6.82(261 lines)  AV=2.00  SV=4.61  BV=4.21
    {9554,1536,1040, 0, 0, 0},  //TV = 6.71(281 lines)  AV=2.00  SV=4.61  BV=4.10
    {9996,1536,1056, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=4.63  BV=4.02
    {9996,1664,1048, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=4.73  BV=3.91
    {9996,1792,1048, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=4.84  BV=3.80
    {9996,1920,1048, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=4.94  BV=3.70
    {9996,2048,1048, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.03  BV=3.61
    {9996,2176,1056, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.13  BV=3.51
    {9996,2304,1072, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.24  BV=3.41
    {9996,2560,1032, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.33  BV=3.31
    {9996,2688,1056, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.44  BV=3.21
    {9996,2944,1032, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.53  BV=3.11
    {19992,1536,1056, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=4.63  BV=3.02
    {19992,1664,1048, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=4.73  BV=2.91
    {19992,1792,1040, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=4.83  BV=2.81
    {19992,1920,1040, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=4.93  BV=2.72
    {19992,2048,1048, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=5.03  BV=2.61
    {19992,2176,1056, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=5.13  BV=2.51
    {29988,1536,1072, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=4.65  BV=2.41
    {29988,1664,1056, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=4.74  BV=2.31
    {29988,1792,1056, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=4.85  BV=2.21
    {29988,1920,1056, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=4.95  BV=2.11
    {39984,1536,1056, 0, 0, 0},  //TV = 4.64(1176 lines)  AV=2.00  SV=4.63  BV=2.02
    {39984,1664,1048, 0, 0, 0},  //TV = 4.64(1176 lines)  AV=2.00  SV=4.73  BV=1.91
    {39984,1792,1048, 0, 0, 0},  //TV = 4.64(1176 lines)  AV=2.00  SV=4.84  BV=1.80
    {49980,1536,1040, 0, 0, 0},  //TV = 4.32(1470 lines)  AV=2.00  SV=4.61  BV=1.72
    {49980,1664,1032, 0, 0, 0},  //TV = 4.32(1470 lines)  AV=2.00  SV=4.71  BV=1.61
    {49980,1792,1032, 0, 0, 0},  //TV = 4.32(1470 lines)  AV=2.00  SV=4.82  BV=1.50
    {49980,1920,1024, 0, 0, 0},  //TV = 4.32(1470 lines)  AV=2.00  SV=4.91  BV=1.42
    {49980,2048,1040, 0, 0, 0},  //TV = 4.32(1470 lines)  AV=2.00  SV=5.02  BV=1.30
    {49980,2176,1040, 0, 0, 0},  //TV = 4.32(1470 lines)  AV=2.00  SV=5.11  BV=1.21
    {49980,2304,1056, 0, 0, 0},  //TV = 4.32(1470 lines)  AV=2.00  SV=5.21  BV=1.11
    {49980,2432,1064, 0, 0, 0},  //TV = 4.32(1470 lines)  AV=2.00  SV=5.30  BV=1.02
    {59976,2176,1064, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=5.14  BV=0.92
    {59976,2432,1024, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=5.25  BV=0.81
    {59976,2560,1040, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=5.34  BV=0.72
    {59976,2688,1064, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=5.45  BV=0.61
    {59976,2944,1048, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=5.56  BV=0.50
    {59976,3200,1024, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=5.64  BV=0.42
    {59976,3328,1056, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=5.74  BV=0.31
    {69972,3072,1056, 0, 0, 0},  //TV = 3.84(2058 lines)  AV=2.00  SV=5.63  BV=0.21
    {69972,3328,1040, 0, 0, 0},  //TV = 3.84(2058 lines)  AV=2.00  SV=5.72  BV=0.11
    {79968,3200,1024, 0, 0, 0},  //TV = 3.64(2352 lines)  AV=2.00  SV=5.64  BV=0.00
    {79968,3328,1056, 0, 0, 0},  //TV = 3.64(2352 lines)  AV=2.00  SV=5.74  BV=-0.10
    {79968,3584,1048, 0, 0, 0},  //TV = 3.64(2352 lines)  AV=2.00  SV=5.84  BV=-0.20
    {79968,3840,1056, 0, 0, 0},  //TV = 3.64(2352 lines)  AV=2.00  SV=5.95  BV=-0.31
    {79968,4224,1024, 0, 0, 0},  //TV = 3.64(2352 lines)  AV=2.00  SV=6.04  BV=-0.40
    {79968,4480,1032, 0, 0, 0},  //TV = 3.64(2352 lines)  AV=2.00  SV=6.14  BV=-0.50
    {79968,4736,1048, 0, 0, 0},  //TV = 3.64(2352 lines)  AV=2.00  SV=6.24  BV=-0.60
    {89998,4608,1024, 0, 0, 0},  //TV = 3.47(2647 lines)  AV=2.00  SV=6.17  BV=-0.70
    {89998,4864,1040, 0, 0, 0},  //TV = 3.47(2647 lines)  AV=2.00  SV=6.27  BV=-0.80
    {99994,4736,1032, 0, 0, 0},  //TV = 3.32(2941 lines)  AV=2.00  SV=6.22  BV=-0.90
    {99994,5120,1032, 0, 0, 0},  //TV = 3.32(2941 lines)  AV=2.00  SV=6.33  BV=-1.01
    {99994,5376,1040, 0, 0, 0},  //TV = 3.32(2941 lines)  AV=2.00  SV=6.41  BV=-1.09
    {99994,5888,1024, 0, 0, 0},  //TV = 3.32(2941 lines)  AV=2.00  SV=6.52  BV=-1.20
    {99994,6272,1032, 0, 0, 0},  //TV = 3.32(2941 lines)  AV=2.00  SV=6.63  BV=-1.30
    {99994,6656,1040, 0, 0, 0},  //TV = 3.32(2941 lines)  AV=2.00  SV=6.72  BV=-1.40
    {109990,6528,1032, 0, 0, 0},  //TV = 3.18(3235 lines)  AV=2.00  SV=6.68  BV=-1.50
    {119986,6400,1032, 0, 0, 0},  //TV = 3.06(3529 lines)  AV=2.00  SV=6.66  BV=-1.60
};

static strAETable g_AE_CaptureISO400Table =
{
    AETABLE_CAPTURE_ISO400,    //eAETableID
    117,    //u4TotalIndex
    20,    //u4StrobeTrigerBV
    100,    //i4MaxBV
    -16,    //i4MinBV
    LIB3A_AE_ISO_SPEED_400, //ISO SPEED
    sCaptureISO400PLineTable_60Hz,
    sCaptureISO400PLineTable_50Hz,
    NULL,
};

static strEvSetting sCaptureISO800PLineTable_60Hz[120] =
{
    {306,1664,1040, 0, 0, 0},  //TV = 11.67(9 lines)  AV=2.00  SV=4.72  BV=8.95
    {340,1536,1040, 0, 0, 0},  //TV = 11.52(10 lines)  AV=2.00  SV=4.61  BV=8.91
    {340,1664,1032, 0, 0, 0},  //TV = 11.52(10 lines)  AV=2.00  SV=4.71  BV=8.81
    {374,1536,1088, 0, 0, 0},  //TV = 11.38(11 lines)  AV=2.00  SV=4.67  BV=8.71
    {408,1536,1072, 0, 0, 0},  //TV = 11.26(12 lines)  AV=2.00  SV=4.65  BV=8.61
    {442,1536,1056, 0, 0, 0},  //TV = 11.14(13 lines)  AV=2.00  SV=4.63  BV=8.51
    {476,1536,1056, 0, 0, 0},  //TV = 11.04(14 lines)  AV=2.00  SV=4.63  BV=8.41
    {510,1536,1056, 0, 0, 0},  //TV = 10.94(15 lines)  AV=2.00  SV=4.63  BV=8.31
    {544,1536,1056, 0, 0, 0},  //TV = 10.84(16 lines)  AV=2.00  SV=4.63  BV=8.21
    {578,1536,1072, 0, 0, 0},  //TV = 10.76(17 lines)  AV=2.00  SV=4.65  BV=8.11
    {612,1536,1080, 0, 0, 0},  //TV = 10.67(18 lines)  AV=2.00  SV=4.66  BV=8.01
    {680,1536,1040, 0, 0, 0},  //TV = 10.52(20 lines)  AV=2.00  SV=4.61  BV=7.91
    {714,1536,1064, 0, 0, 0},  //TV = 10.45(21 lines)  AV=2.00  SV=4.64  BV=7.81
    {782,1536,1040, 0, 0, 0},  //TV = 10.32(23 lines)  AV=2.00  SV=4.61  BV=7.71
    {816,1536,1072, 0, 0, 0},  //TV = 10.26(24 lines)  AV=2.00  SV=4.65  BV=7.61
    {884,1536,1056, 0, 0, 0},  //TV = 10.14(26 lines)  AV=2.00  SV=4.63  BV=7.51
    {952,1536,1056, 0, 0, 0},  //TV = 10.04(28 lines)  AV=2.00  SV=4.63  BV=7.41
    {1020,1536,1056, 0, 0, 0},  //TV = 9.94(30 lines)  AV=2.00  SV=4.63  BV=7.31
    {1088,1536,1056, 0, 0, 0},  //TV = 9.84(32 lines)  AV=2.00  SV=4.63  BV=7.21
    {1156,1536,1072, 0, 0, 0},  //TV = 9.76(34 lines)  AV=2.00  SV=4.65  BV=7.11
    {1258,1536,1056, 0, 0, 0},  //TV = 9.63(37 lines)  AV=2.00  SV=4.63  BV=7.01
    {1360,1536,1040, 0, 0, 0},  //TV = 9.52(40 lines)  AV=2.00  SV=4.61  BV=6.91
    {1462,1536,1048, 0, 0, 0},  //TV = 9.42(43 lines)  AV=2.00  SV=4.62  BV=6.80
    {1564,1536,1040, 0, 0, 0},  //TV = 9.32(46 lines)  AV=2.00  SV=4.61  BV=6.71
    {1666,1536,1048, 0, 0, 0},  //TV = 9.23(49 lines)  AV=2.00  SV=4.62  BV=6.61
    {1768,1536,1056, 0, 0, 0},  //TV = 9.14(52 lines)  AV=2.00  SV=4.63  BV=6.51
    {1904,1536,1056, 0, 0, 0},  //TV = 9.04(56 lines)  AV=2.00  SV=4.63  BV=6.41
    {2040,1536,1056, 0, 0, 0},  //TV = 8.94(60 lines)  AV=2.00  SV=4.63  BV=6.31
    {2210,1536,1048, 0, 0, 0},  //TV = 8.82(65 lines)  AV=2.00  SV=4.62  BV=6.20
    {2380,1536,1040, 0, 0, 0},  //TV = 8.71(70 lines)  AV=2.00  SV=4.61  BV=6.11
    {2550,1536,1040, 0, 0, 0},  //TV = 8.62(75 lines)  AV=2.00  SV=4.61  BV=6.01
    {2720,1536,1040, 0, 0, 0},  //TV = 8.52(80 lines)  AV=2.00  SV=4.61  BV=5.91
    {2924,1536,1040, 0, 0, 0},  //TV = 8.42(86 lines)  AV=2.00  SV=4.61  BV=5.81
    {3128,1536,1040, 0, 0, 0},  //TV = 8.32(92 lines)  AV=2.00  SV=4.61  BV=5.71
    {3332,1536,1048, 0, 0, 0},  //TV = 8.23(98 lines)  AV=2.00  SV=4.62  BV=5.61
    {3570,1536,1048, 0, 0, 0},  //TV = 8.13(105 lines)  AV=2.00  SV=4.62  BV=5.51
    {3842,1536,1040, 0, 0, 0},  //TV = 8.02(113 lines)  AV=2.00  SV=4.61  BV=5.42
    {4148,1536,1040, 0, 0, 0},  //TV = 7.91(122 lines)  AV=2.00  SV=4.61  BV=5.31
    {4420,1536,1040, 0, 0, 0},  //TV = 7.82(130 lines)  AV=2.00  SV=4.61  BV=5.21
    {4760,1536,1040, 0, 0, 0},  //TV = 7.71(140 lines)  AV=2.00  SV=4.61  BV=5.11
    {5100,1536,1040, 0, 0, 0},  //TV = 7.62(150 lines)  AV=2.00  SV=4.61  BV=5.01
    {5440,1536,1040, 0, 0, 0},  //TV = 7.52(160 lines)  AV=2.00  SV=4.61  BV=4.91
    {5882,1536,1040, 0, 0, 0},  //TV = 7.41(173 lines)  AV=2.00  SV=4.61  BV=4.80
    {6290,1536,1040, 0, 0, 0},  //TV = 7.31(185 lines)  AV=2.00  SV=4.61  BV=4.71
    {6732,1536,1040, 0, 0, 0},  //TV = 7.21(198 lines)  AV=2.00  SV=4.61  BV=4.61
    {7208,1536,1040, 0, 0, 0},  //TV = 7.12(212 lines)  AV=2.00  SV=4.61  BV=4.51
    {7786,1536,1040, 0, 0, 0},  //TV = 7.00(229 lines)  AV=2.00  SV=4.61  BV=4.40
    {8262,1536,1040, 0, 0, 0},  //TV = 6.92(243 lines)  AV=2.00  SV=4.61  BV=4.31
    {8330,1536,1104, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=4.69  BV=4.21
    {8330,1664,1096, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=4.80  BV=4.11
    {8330,1792,1096, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=4.91  BV=4.00
    {8330,2048,1024, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.00  BV=3.91
    {8330,2176,1024, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.09  BV=3.82
    {8330,2304,1048, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.20  BV=3.70
    {8330,2432,1064, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.30  BV=3.60
    {8330,2688,1032, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.40  BV=3.50
    {8330,2816,1056, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.50  BV=3.40
    {8330,3072,1032, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.60  BV=3.31
    {16660,1536,1104, 0, 0, 0},  //TV = 5.91(490 lines)  AV=2.00  SV=4.69  BV=3.21
    {16660,1664,1096, 0, 0, 0},  //TV = 5.91(490 lines)  AV=2.00  SV=4.80  BV=3.11
    {16660,1792,1088, 0, 0, 0},  //TV = 5.91(490 lines)  AV=2.00  SV=4.89  BV=3.01
    {16660,1920,1088, 0, 0, 0},  //TV = 5.91(490 lines)  AV=2.00  SV=4.99  BV=2.91
    {16660,2176,1032, 0, 0, 0},  //TV = 5.91(490 lines)  AV=2.00  SV=5.10  BV=2.81
    {24990,1536,1040, 0, 0, 0},  //TV = 5.32(735 lines)  AV=2.00  SV=4.61  BV=2.72
    {24990,1664,1032, 0, 0, 0},  //TV = 5.32(735 lines)  AV=2.00  SV=4.71  BV=2.61
    {24990,1792,1024, 0, 0, 0},  //TV = 5.32(735 lines)  AV=2.00  SV=4.81  BV=2.52
    {24990,1920,1024, 0, 0, 0},  //TV = 5.32(735 lines)  AV=2.00  SV=4.91  BV=2.42
    {24990,2048,1032, 0, 0, 0},  //TV = 5.32(735 lines)  AV=2.00  SV=5.01  BV=2.31
    {32674,1664,1040, 0, 0, 0},  //TV = 4.94(961 lines)  AV=2.00  SV=4.72  BV=2.21
    {32674,1792,1032, 0, 0, 0},  //TV = 4.94(961 lines)  AV=2.00  SV=4.82  BV=2.12
    {32674,1920,1040, 0, 0, 0},  //TV = 4.94(961 lines)  AV=2.00  SV=4.93  BV=2.01
    {40834,1664,1032, 0, 0, 0},  //TV = 4.61(1201 lines)  AV=2.00  SV=4.71  BV=1.90
    {40834,1792,1024, 0, 0, 0},  //TV = 4.61(1201 lines)  AV=2.00  SV=4.81  BV=1.81
    {48994,1536,1064, 0, 0, 0},  //TV = 4.35(1441 lines)  AV=2.00  SV=4.64  BV=1.71
    {48994,1664,1048, 0, 0, 0},  //TV = 4.35(1441 lines)  AV=2.00  SV=4.73  BV=1.62
    {48994,1792,1048, 0, 0, 0},  //TV = 4.35(1441 lines)  AV=2.00  SV=4.84  BV=1.51
    {48994,1920,1048, 0, 0, 0},  //TV = 4.35(1441 lines)  AV=2.00  SV=4.94  BV=1.41
    {48994,2048,1056, 0, 0, 0},  //TV = 4.35(1441 lines)  AV=2.00  SV=5.04  BV=1.31
    {48994,2176,1064, 0, 0, 0},  //TV = 4.35(1441 lines)  AV=2.00  SV=5.14  BV=1.21
    {48994,2304,1072, 0, 0, 0},  //TV = 4.35(1441 lines)  AV=2.00  SV=5.24  BV=1.12
    {48994,2560,1040, 0, 0, 0},  //TV = 4.35(1441 lines)  AV=2.00  SV=5.34  BV=1.01
    {57154,2304,1056, 0, 0, 0},  //TV = 4.13(1681 lines)  AV=2.00  SV=5.21  BV=0.91
    {57154,2432,1072, 0, 0, 0},  //TV = 4.13(1681 lines)  AV=2.00  SV=5.31  BV=0.81
    {65314,2304,1064, 0, 0, 0},  //TV = 3.94(1921 lines)  AV=2.00  SV=5.23  BV=0.71
    {65314,2560,1032, 0, 0, 0},  //TV = 3.94(1921 lines)  AV=2.00  SV=5.33  BV=0.60
    {65314,2688,1048, 0, 0, 0},  //TV = 3.94(1921 lines)  AV=2.00  SV=5.43  BV=0.51
    {65314,2944,1024, 0, 0, 0},  //TV = 3.94(1921 lines)  AV=2.00  SV=5.52  BV=0.41
    {65314,3072,1056, 0, 0, 0},  //TV = 3.94(1921 lines)  AV=2.00  SV=5.63  BV=0.31
    {65314,3328,1040, 0, 0, 0},  //TV = 3.94(1921 lines)  AV=2.00  SV=5.72  BV=0.21
    {73474,3200,1032, 0, 0, 0},  //TV = 3.77(2161 lines)  AV=2.00  SV=5.66  BV=0.11
    {81634,3072,1048, 0, 0, 0},  //TV = 3.61(2401 lines)  AV=2.00  SV=5.62  BV=-0.00
    {81634,3328,1032, 0, 0, 0},  //TV = 3.61(2401 lines)  AV=2.00  SV=5.71  BV=-0.10
    {81634,3584,1024, 0, 0, 0},  //TV = 3.61(2401 lines)  AV=2.00  SV=5.81  BV=-0.19
    {81634,3840,1032, 0, 0, 0},  //TV = 3.61(2401 lines)  AV=2.00  SV=5.92  BV=-0.30
    {81634,4096,1040, 0, 0, 0},  //TV = 3.61(2401 lines)  AV=2.00  SV=6.02  BV=-0.41
    {81634,4352,1040, 0, 0, 0},  //TV = 3.61(2401 lines)  AV=2.00  SV=6.11  BV=-0.50
    {81634,4736,1024, 0, 0, 0},  //TV = 3.61(2401 lines)  AV=2.00  SV=6.21  BV=-0.59
    {89828,4608,1024, 0, 0, 0},  //TV = 3.48(2642 lines)  AV=2.00  SV=6.17  BV=-0.69
    {89828,4864,1040, 0, 0, 0},  //TV = 3.48(2642 lines)  AV=2.00  SV=6.27  BV=-0.79
    {98022,4864,1024, 0, 0, 0},  //TV = 3.35(2883 lines)  AV=2.00  SV=6.25  BV=-0.90
    {98022,5120,1040, 0, 0, 0},  //TV = 3.35(2883 lines)  AV=2.00  SV=6.34  BV=-0.99
    {98022,5504,1040, 0, 0, 0},  //TV = 3.35(2883 lines)  AV=2.00  SV=6.45  BV=-1.10
    {98022,6016,1024, 0, 0, 0},  //TV = 3.35(2883 lines)  AV=2.00  SV=6.55  BV=-1.20
    {98022,6400,1032, 0, 0, 0},  //TV = 3.35(2883 lines)  AV=2.00  SV=6.66  BV=-1.30
    {106182,6272,1040, 0, 0, 0},  //TV = 3.24(3123 lines)  AV=2.00  SV=6.64  BV=-1.40
    {114342,6272,1032, 0, 0, 0},  //TV = 3.13(3363 lines)  AV=2.00  SV=6.63  BV=-1.50
    {122502,6272,1032, 0, 0, 0},  //TV = 3.03(3603 lines)  AV=2.00  SV=6.63  BV=-1.60
    {122502,6784,1024, 0, 0, 0},  //TV = 3.03(3603 lines)  AV=2.00  SV=6.73  BV=-1.70
    {122502,7296,1024, 0, 0, 0},  //TV = 3.03(3603 lines)  AV=2.00  SV=6.83  BV=-1.80
    {122502,7808,1024, 0, 0, 0},  //TV = 3.03(3603 lines)  AV=2.00  SV=6.93  BV=-1.90
    {122502,8320,1024, 0, 0, 0},  //TV = 3.03(3603 lines)  AV=2.00  SV=7.02  BV=-1.99
    {130662,8320,1032, 0, 0, 0},  //TV = 2.94(3843 lines)  AV=2.00  SV=7.03  BV=-2.10
    {138822,8448,1032, 0, 0, 0},  //TV = 2.85(4083 lines)  AV=2.00  SV=7.06  BV=-2.21
    {146982,8576,1024, 0, 0, 0},  //TV = 2.77(4323 lines)  AV=2.00  SV=7.07  BV=-2.30
    {155142,8704,1024, 0, 0, 0},  //TV = 2.69(4563 lines)  AV=2.00  SV=7.09  BV=-2.40
    {171496,8448,1024, 0, 0, 0},  //TV = 2.54(5044 lines)  AV=2.00  SV=7.04  BV=-2.50
    {179656,8576,1024, 0, 0, 0},  //TV = 2.48(5284 lines)  AV=2.00  SV=7.07  BV=-2.59
    {196010,8448,1032, 0, 0, 0},  //TV = 2.35(5765 lines)  AV=2.00  SV=7.06  BV=-2.70
    {196010,9088,1024, 0, 0, 0},  //TV = 2.35(5765 lines)  AV=2.00  SV=7.15  BV=-2.80
    {196010,9728,1024, 0, 0, 0},  //TV = 2.35(5765 lines)  AV=2.00  SV=7.25  BV=-2.90
};

static strEvSetting sCaptureISO800PLineTable_50Hz[120] =
{
    {306,1664,1040, 0, 0, 0},  //TV = 11.67(9 lines)  AV=2.00  SV=4.72  BV=8.95
    {340,1536,1040, 0, 0, 0},  //TV = 11.52(10 lines)  AV=2.00  SV=4.61  BV=8.91
    {340,1664,1032, 0, 0, 0},  //TV = 11.52(10 lines)  AV=2.00  SV=4.71  BV=8.81
    {374,1536,1088, 0, 0, 0},  //TV = 11.38(11 lines)  AV=2.00  SV=4.67  BV=8.71
    {408,1536,1072, 0, 0, 0},  //TV = 11.26(12 lines)  AV=2.00  SV=4.65  BV=8.61
    {442,1536,1056, 0, 0, 0},  //TV = 11.14(13 lines)  AV=2.00  SV=4.63  BV=8.51
    {476,1536,1056, 0, 0, 0},  //TV = 11.04(14 lines)  AV=2.00  SV=4.63  BV=8.41
    {510,1536,1056, 0, 0, 0},  //TV = 10.94(15 lines)  AV=2.00  SV=4.63  BV=8.31
    {544,1536,1056, 0, 0, 0},  //TV = 10.84(16 lines)  AV=2.00  SV=4.63  BV=8.21
    {578,1536,1072, 0, 0, 0},  //TV = 10.76(17 lines)  AV=2.00  SV=4.65  BV=8.11
    {612,1536,1080, 0, 0, 0},  //TV = 10.67(18 lines)  AV=2.00  SV=4.66  BV=8.01
    {680,1536,1040, 0, 0, 0},  //TV = 10.52(20 lines)  AV=2.00  SV=4.61  BV=7.91
    {714,1536,1064, 0, 0, 0},  //TV = 10.45(21 lines)  AV=2.00  SV=4.64  BV=7.81
    {782,1536,1040, 0, 0, 0},  //TV = 10.32(23 lines)  AV=2.00  SV=4.61  BV=7.71
    {816,1536,1072, 0, 0, 0},  //TV = 10.26(24 lines)  AV=2.00  SV=4.65  BV=7.61
    {884,1536,1056, 0, 0, 0},  //TV = 10.14(26 lines)  AV=2.00  SV=4.63  BV=7.51
    {952,1536,1056, 0, 0, 0},  //TV = 10.04(28 lines)  AV=2.00  SV=4.63  BV=7.41
    {1020,1536,1056, 0, 0, 0},  //TV = 9.94(30 lines)  AV=2.00  SV=4.63  BV=7.31
    {1088,1536,1056, 0, 0, 0},  //TV = 9.84(32 lines)  AV=2.00  SV=4.63  BV=7.21
    {1156,1536,1072, 0, 0, 0},  //TV = 9.76(34 lines)  AV=2.00  SV=4.65  BV=7.11
    {1258,1536,1056, 0, 0, 0},  //TV = 9.63(37 lines)  AV=2.00  SV=4.63  BV=7.01
    {1360,1536,1040, 0, 0, 0},  //TV = 9.52(40 lines)  AV=2.00  SV=4.61  BV=6.91
    {1462,1536,1048, 0, 0, 0},  //TV = 9.42(43 lines)  AV=2.00  SV=4.62  BV=6.80
    {1564,1536,1040, 0, 0, 0},  //TV = 9.32(46 lines)  AV=2.00  SV=4.61  BV=6.71
    {1666,1536,1048, 0, 0, 0},  //TV = 9.23(49 lines)  AV=2.00  SV=4.62  BV=6.61
    {1768,1536,1056, 0, 0, 0},  //TV = 9.14(52 lines)  AV=2.00  SV=4.63  BV=6.51
    {1904,1536,1056, 0, 0, 0},  //TV = 9.04(56 lines)  AV=2.00  SV=4.63  BV=6.41
    {2040,1536,1056, 0, 0, 0},  //TV = 8.94(60 lines)  AV=2.00  SV=4.63  BV=6.31
    {2210,1536,1048, 0, 0, 0},  //TV = 8.82(65 lines)  AV=2.00  SV=4.62  BV=6.20
    {2380,1536,1040, 0, 0, 0},  //TV = 8.71(70 lines)  AV=2.00  SV=4.61  BV=6.11
    {2550,1536,1040, 0, 0, 0},  //TV = 8.62(75 lines)  AV=2.00  SV=4.61  BV=6.01
    {2720,1536,1040, 0, 0, 0},  //TV = 8.52(80 lines)  AV=2.00  SV=4.61  BV=5.91
    {2924,1536,1040, 0, 0, 0},  //TV = 8.42(86 lines)  AV=2.00  SV=4.61  BV=5.81
    {3128,1536,1040, 0, 0, 0},  //TV = 8.32(92 lines)  AV=2.00  SV=4.61  BV=5.71
    {3332,1536,1048, 0, 0, 0},  //TV = 8.23(98 lines)  AV=2.00  SV=4.62  BV=5.61
    {3570,1536,1048, 0, 0, 0},  //TV = 8.13(105 lines)  AV=2.00  SV=4.62  BV=5.51
    {3842,1536,1040, 0, 0, 0},  //TV = 8.02(113 lines)  AV=2.00  SV=4.61  BV=5.42
    {4148,1536,1040, 0, 0, 0},  //TV = 7.91(122 lines)  AV=2.00  SV=4.61  BV=5.31
    {4420,1536,1040, 0, 0, 0},  //TV = 7.82(130 lines)  AV=2.00  SV=4.61  BV=5.21
    {4760,1536,1040, 0, 0, 0},  //TV = 7.71(140 lines)  AV=2.00  SV=4.61  BV=5.11
    {5100,1536,1040, 0, 0, 0},  //TV = 7.62(150 lines)  AV=2.00  SV=4.61  BV=5.01
    {5440,1536,1040, 0, 0, 0},  //TV = 7.52(160 lines)  AV=2.00  SV=4.61  BV=4.91
    {5882,1536,1040, 0, 0, 0},  //TV = 7.41(173 lines)  AV=2.00  SV=4.61  BV=4.80
    {6290,1536,1040, 0, 0, 0},  //TV = 7.31(185 lines)  AV=2.00  SV=4.61  BV=4.71
    {6732,1536,1040, 0, 0, 0},  //TV = 7.21(198 lines)  AV=2.00  SV=4.61  BV=4.61
    {7208,1536,1040, 0, 0, 0},  //TV = 7.12(212 lines)  AV=2.00  SV=4.61  BV=4.51
    {7786,1536,1040, 0, 0, 0},  //TV = 7.00(229 lines)  AV=2.00  SV=4.61  BV=4.40
    {8262,1536,1040, 0, 0, 0},  //TV = 6.92(243 lines)  AV=2.00  SV=4.61  BV=4.31
    {8874,1536,1040, 0, 0, 0},  //TV = 6.82(261 lines)  AV=2.00  SV=4.61  BV=4.21
    {9554,1536,1040, 0, 0, 0},  //TV = 6.71(281 lines)  AV=2.00  SV=4.61  BV=4.10
    {9996,1536,1056, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=4.63  BV=4.02
    {9996,1664,1048, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=4.73  BV=3.91
    {9996,1792,1048, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=4.84  BV=3.80
    {9996,1920,1048, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=4.94  BV=3.70
    {9996,2048,1056, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.04  BV=3.60
    {9996,2176,1056, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.13  BV=3.51
    {9996,2304,1072, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.24  BV=3.41
    {9996,2560,1032, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.33  BV=3.31
    {9996,2688,1056, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.44  BV=3.21
    {9996,2944,1032, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.53  BV=3.11
    {19992,1536,1056, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=4.63  BV=3.02
    {19992,1664,1048, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=4.73  BV=2.91
    {19992,1792,1040, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=4.83  BV=2.81
    {19992,1920,1040, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=4.93  BV=2.72
    {19992,2048,1048, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=5.03  BV=2.61
    {19992,2176,1056, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=5.13  BV=2.51
    {29988,1536,1072, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=4.65  BV=2.41
    {29988,1664,1056, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=4.74  BV=2.31
    {29988,1792,1056, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=4.85  BV=2.21
    {29988,1920,1056, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=4.95  BV=2.11
    {39984,1536,1056, 0, 0, 0},  //TV = 4.64(1176 lines)  AV=2.00  SV=4.63  BV=2.02
    {39984,1664,1048, 0, 0, 0},  //TV = 4.64(1176 lines)  AV=2.00  SV=4.73  BV=1.91
    {39984,1792,1048, 0, 0, 0},  //TV = 4.64(1176 lines)  AV=2.00  SV=4.84  BV=1.80
    {49980,1536,1040, 0, 0, 0},  //TV = 4.32(1470 lines)  AV=2.00  SV=4.61  BV=1.72
    {49980,1664,1032, 0, 0, 0},  //TV = 4.32(1470 lines)  AV=2.00  SV=4.71  BV=1.61
    {49980,1792,1032, 0, 0, 0},  //TV = 4.32(1470 lines)  AV=2.00  SV=4.82  BV=1.50
    {49980,1920,1024, 0, 0, 0},  //TV = 4.32(1470 lines)  AV=2.00  SV=4.91  BV=1.42
    {49980,2048,1040, 0, 0, 0},  //TV = 4.32(1470 lines)  AV=2.00  SV=5.02  BV=1.30
    {49980,2176,1040, 0, 0, 0},  //TV = 4.32(1470 lines)  AV=2.00  SV=5.11  BV=1.21
    {49980,2304,1056, 0, 0, 0},  //TV = 4.32(1470 lines)  AV=2.00  SV=5.21  BV=1.11
    {49980,2432,1064, 0, 0, 0},  //TV = 4.32(1470 lines)  AV=2.00  SV=5.30  BV=1.02
    {59976,2176,1064, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=5.14  BV=0.92
    {59976,2432,1024, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=5.25  BV=0.81
    {59976,2560,1040, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=5.34  BV=0.72
    {59976,2688,1064, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=5.45  BV=0.61
    {59976,2944,1048, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=5.56  BV=0.50
    {59976,3200,1024, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=5.64  BV=0.42
    {59976,3328,1056, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=5.74  BV=0.31
    {69972,3072,1056, 0, 0, 0},  //TV = 3.84(2058 lines)  AV=2.00  SV=5.63  BV=0.21
    {69972,3328,1040, 0, 0, 0},  //TV = 3.84(2058 lines)  AV=2.00  SV=5.72  BV=0.11
    {79968,3200,1024, 0, 0, 0},  //TV = 3.64(2352 lines)  AV=2.00  SV=5.64  BV=0.00
    {79968,3328,1056, 0, 0, 0},  //TV = 3.64(2352 lines)  AV=2.00  SV=5.74  BV=-0.10
    {79968,3584,1048, 0, 0, 0},  //TV = 3.64(2352 lines)  AV=2.00  SV=5.84  BV=-0.20
    {79968,3840,1056, 0, 0, 0},  //TV = 3.64(2352 lines)  AV=2.00  SV=5.95  BV=-0.31
    {79968,4224,1024, 0, 0, 0},  //TV = 3.64(2352 lines)  AV=2.00  SV=6.04  BV=-0.40
    {79968,4480,1032, 0, 0, 0},  //TV = 3.64(2352 lines)  AV=2.00  SV=6.14  BV=-0.50
    {79968,4736,1048, 0, 0, 0},  //TV = 3.64(2352 lines)  AV=2.00  SV=6.24  BV=-0.60
    {89998,4608,1024, 0, 0, 0},  //TV = 3.47(2647 lines)  AV=2.00  SV=6.17  BV=-0.70
    {89998,4864,1040, 0, 0, 0},  //TV = 3.47(2647 lines)  AV=2.00  SV=6.27  BV=-0.80
    {99994,4736,1032, 0, 0, 0},  //TV = 3.32(2941 lines)  AV=2.00  SV=6.22  BV=-0.90
    {99994,5120,1032, 0, 0, 0},  //TV = 3.32(2941 lines)  AV=2.00  SV=6.33  BV=-1.01
    {99994,5376,1040, 0, 0, 0},  //TV = 3.32(2941 lines)  AV=2.00  SV=6.41  BV=-1.09
    {99994,5888,1024, 0, 0, 0},  //TV = 3.32(2941 lines)  AV=2.00  SV=6.52  BV=-1.20
    {99994,6272,1032, 0, 0, 0},  //TV = 3.32(2941 lines)  AV=2.00  SV=6.63  BV=-1.30
    {109990,6144,1024, 0, 0, 0},  //TV = 3.18(3235 lines)  AV=2.00  SV=6.58  BV=-1.40
    {119986,6016,1032, 0, 0, 0},  //TV = 3.06(3529 lines)  AV=2.00  SV=6.57  BV=-1.51
    {119986,6400,1032, 0, 0, 0},  //TV = 3.06(3529 lines)  AV=2.00  SV=6.66  BV=-1.60
    {119986,6912,1032, 0, 0, 0},  //TV = 3.06(3529 lines)  AV=2.00  SV=6.77  BV=-1.71
    {119986,7424,1024, 0, 0, 0},  //TV = 3.06(3529 lines)  AV=2.00  SV=6.86  BV=-1.80
    {119986,7936,1032, 0, 0, 0},  //TV = 3.06(3529 lines)  AV=2.00  SV=6.97  BV=-1.91
    {119986,8448,1032, 0, 0, 0},  //TV = 3.06(3529 lines)  AV=2.00  SV=7.06  BV=-2.00
    {129982,8448,1024, 0, 0, 0},  //TV = 2.94(3823 lines)  AV=2.00  SV=7.04  BV=-2.10
    {139978,8448,1024, 0, 0, 0},  //TV = 2.84(4117 lines)  AV=2.00  SV=7.04  BV=-2.21
    {149974,8320,1032, 0, 0, 0},  //TV = 2.74(4411 lines)  AV=2.00  SV=7.03  BV=-2.30
    {159970,8320,1032, 0, 0, 0},  //TV = 2.64(4705 lines)  AV=2.00  SV=7.03  BV=-2.39
    {170000,8448,1032, 0, 0, 0},  //TV = 2.56(5000 lines)  AV=2.00  SV=7.06  BV=-2.50
    {179996,8576,1024, 0, 0, 0},  //TV = 2.47(5294 lines)  AV=2.00  SV=7.07  BV=-2.59
    {199988,8320,1024, 0, 0, 0},  //TV = 2.32(5882 lines)  AV=2.00  SV=7.02  BV=-2.70
    {199988,8832,1032, 0, 0, 0},  //TV = 2.32(5882 lines)  AV=2.00  SV=7.12  BV=-2.80
    {199988,9472,1032, 0, 0, 0},  //TV = 2.32(5882 lines)  AV=2.00  SV=7.22  BV=-2.90
};

static strAETable g_AE_CaptureISO800Table =
{
    AETABLE_CAPTURE_ISO800,    //eAETableID
    120,    //u4TotalIndex
    20,    //u4StrobeTrigerBV
    90,    //i4MaxBV
    -29,    //i4MinBV
    LIB3A_AE_ISO_SPEED_800, //ISO SPEED
    sCaptureISO800PLineTable_60Hz,
    sCaptureISO800PLineTable_50Hz,
    NULL,
};

static strEvSetting sAEMode1PLineTable_60Hz[130] =
{
    {136,1792,1088, 0, 0, 0},  //TV = 12.84(4 lines)  AV=2.00  SV=4.89  BV=9.95
    {170,1536,1040, 0, 0, 0},  //TV = 12.52(5 lines)  AV=2.00  SV=4.61  BV=9.91
    {170,1664,1032, 0, 0, 0},  //TV = 12.52(5 lines)  AV=2.00  SV=4.71  BV=9.81
    {170,1792,1024, 0, 0, 0},  //TV = 12.52(5 lines)  AV=2.00  SV=4.81  BV=9.71
    {204,1536,1072, 0, 0, 0},  //TV = 12.26(6 lines)  AV=2.00  SV=4.65  BV=9.61
    {204,1664,1056, 0, 0, 0},  //TV = 12.26(6 lines)  AV=2.00  SV=4.74  BV=9.51
    {238,1536,1056, 0, 0, 0},  //TV = 12.04(7 lines)  AV=2.00  SV=4.63  BV=9.41
    {238,1664,1040, 0, 0, 0},  //TV = 12.04(7 lines)  AV=2.00  SV=4.72  BV=9.31
    {272,1536,1056, 0, 0, 0},  //TV = 11.84(8 lines)  AV=2.00  SV=4.63  BV=9.21
    {272,1664,1048, 0, 0, 0},  //TV = 11.84(8 lines)  AV=2.00  SV=4.73  BV=9.11
    {306,1536,1080, 0, 0, 0},  //TV = 11.67(9 lines)  AV=2.00  SV=4.66  BV=9.01
    {340,1536,1040, 0, 0, 0},  //TV = 11.52(10 lines)  AV=2.00  SV=4.61  BV=8.91
    {340,1664,1032, 0, 0, 0},  //TV = 11.52(10 lines)  AV=2.00  SV=4.71  BV=8.81
    {374,1536,1088, 0, 0, 0},  //TV = 11.38(11 lines)  AV=2.00  SV=4.67  BV=8.71
    {408,1536,1072, 0, 0, 0},  //TV = 11.26(12 lines)  AV=2.00  SV=4.65  BV=8.61
    {442,1536,1056, 0, 0, 0},  //TV = 11.14(13 lines)  AV=2.00  SV=4.63  BV=8.51
    {476,1536,1056, 0, 0, 0},  //TV = 11.04(14 lines)  AV=2.00  SV=4.63  BV=8.41
    {510,1536,1056, 0, 0, 0},  //TV = 10.94(15 lines)  AV=2.00  SV=4.63  BV=8.31
    {544,1536,1056, 0, 0, 0},  //TV = 10.84(16 lines)  AV=2.00  SV=4.63  BV=8.21
    {578,1536,1072, 0, 0, 0},  //TV = 10.76(17 lines)  AV=2.00  SV=4.65  BV=8.11
    {612,1536,1080, 0, 0, 0},  //TV = 10.67(18 lines)  AV=2.00  SV=4.66  BV=8.01
    {680,1536,1040, 0, 0, 0},  //TV = 10.52(20 lines)  AV=2.00  SV=4.61  BV=7.91
    {714,1536,1072, 0, 0, 0},  //TV = 10.45(21 lines)  AV=2.00  SV=4.65  BV=7.80
    {782,1536,1040, 0, 0, 0},  //TV = 10.32(23 lines)  AV=2.00  SV=4.61  BV=7.71
    {816,1536,1072, 0, 0, 0},  //TV = 10.26(24 lines)  AV=2.00  SV=4.65  BV=7.61
    {884,1536,1056, 0, 0, 0},  //TV = 10.14(26 lines)  AV=2.00  SV=4.63  BV=7.51
    {952,1536,1056, 0, 0, 0},  //TV = 10.04(28 lines)  AV=2.00  SV=4.63  BV=7.41
    {1020,1536,1056, 0, 0, 0},  //TV = 9.94(30 lines)  AV=2.00  SV=4.63  BV=7.31
    {1088,1536,1064, 0, 0, 0},  //TV = 9.84(32 lines)  AV=2.00  SV=4.64  BV=7.20
    {1190,1536,1040, 0, 0, 0},  //TV = 9.71(35 lines)  AV=2.00  SV=4.61  BV=7.11
    {1258,1536,1056, 0, 0, 0},  //TV = 9.63(37 lines)  AV=2.00  SV=4.63  BV=7.01
    {1360,1536,1048, 0, 0, 0},  //TV = 9.52(40 lines)  AV=2.00  SV=4.62  BV=6.90
    {1462,1536,1048, 0, 0, 0},  //TV = 9.42(43 lines)  AV=2.00  SV=4.62  BV=6.80
    {1564,1536,1040, 0, 0, 0},  //TV = 9.32(46 lines)  AV=2.00  SV=4.61  BV=6.71
    {1666,1536,1048, 0, 0, 0},  //TV = 9.23(49 lines)  AV=2.00  SV=4.62  BV=6.61
    {1802,1536,1040, 0, 0, 0},  //TV = 9.12(53 lines)  AV=2.00  SV=4.61  BV=6.51
    {1904,1536,1056, 0, 0, 0},  //TV = 9.04(56 lines)  AV=2.00  SV=4.63  BV=6.41
    {2040,1536,1056, 0, 0, 0},  //TV = 8.94(60 lines)  AV=2.00  SV=4.63  BV=6.31
    {2210,1536,1048, 0, 0, 0},  //TV = 8.82(65 lines)  AV=2.00  SV=4.62  BV=6.20
    {2380,1536,1040, 0, 0, 0},  //TV = 8.71(70 lines)  AV=2.00  SV=4.61  BV=6.11
    {2516,1536,1056, 0, 0, 0},  //TV = 8.63(74 lines)  AV=2.00  SV=4.63  BV=6.01
    {2720,1536,1048, 0, 0, 0},  //TV = 8.52(80 lines)  AV=2.00  SV=4.62  BV=5.90
    {2924,1536,1040, 0, 0, 0},  //TV = 8.42(86 lines)  AV=2.00  SV=4.61  BV=5.81
    {3128,1536,1040, 0, 0, 0},  //TV = 8.32(92 lines)  AV=2.00  SV=4.61  BV=5.71
    {3332,1536,1048, 0, 0, 0},  //TV = 8.23(98 lines)  AV=2.00  SV=4.62  BV=5.61
    {3570,1536,1048, 0, 0, 0},  //TV = 8.13(105 lines)  AV=2.00  SV=4.62  BV=5.51
    {3842,1536,1040, 0, 0, 0},  //TV = 8.02(113 lines)  AV=2.00  SV=4.61  BV=5.42
    {4148,1536,1040, 0, 0, 0},  //TV = 7.91(122 lines)  AV=2.00  SV=4.61  BV=5.31
    {4420,1536,1040, 0, 0, 0},  //TV = 7.82(130 lines)  AV=2.00  SV=4.61  BV=5.21
    {4760,1536,1040, 0, 0, 0},  //TV = 7.71(140 lines)  AV=2.00  SV=4.61  BV=5.11
    {5100,1536,1040, 0, 0, 0},  //TV = 7.62(150 lines)  AV=2.00  SV=4.61  BV=5.01
    {5440,1536,1040, 0, 0, 0},  //TV = 7.52(160 lines)  AV=2.00  SV=4.61  BV=4.91
    {5848,1536,1040, 0, 0, 0},  //TV = 7.42(172 lines)  AV=2.00  SV=4.61  BV=4.81
    {6290,1536,1040, 0, 0, 0},  //TV = 7.31(185 lines)  AV=2.00  SV=4.61  BV=4.71
    {6732,1536,1040, 0, 0, 0},  //TV = 7.21(198 lines)  AV=2.00  SV=4.61  BV=4.61
    {7208,1536,1040, 0, 0, 0},  //TV = 7.12(212 lines)  AV=2.00  SV=4.61  BV=4.51
    {7786,1536,1040, 0, 0, 0},  //TV = 7.00(229 lines)  AV=2.00  SV=4.61  BV=4.40
    {8262,1536,1040, 0, 0, 0},  //TV = 6.92(243 lines)  AV=2.00  SV=4.61  BV=4.31
    {8330,1536,1104, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=4.69  BV=4.21
    {8330,1664,1096, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=4.80  BV=4.11
    {8330,1792,1096, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=4.91  BV=4.00
    {8330,2048,1024, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.00  BV=3.91
    {8330,2176,1024, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.09  BV=3.82
    {8330,2304,1048, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.20  BV=3.70
    {8330,2432,1064, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.30  BV=3.60
    {8330,2688,1032, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.40  BV=3.50
    {8330,2816,1056, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.50  BV=3.40
    {8330,3072,1032, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.60  BV=3.31
    {16660,1536,1104, 0, 0, 0},  //TV = 5.91(490 lines)  AV=2.00  SV=4.69  BV=3.21
    {16660,1664,1096, 0, 0, 0},  //TV = 5.91(490 lines)  AV=2.00  SV=4.80  BV=3.11
    {16660,1792,1088, 0, 0, 0},  //TV = 5.91(490 lines)  AV=2.00  SV=4.89  BV=3.01
    {16660,1920,1088, 0, 0, 0},  //TV = 5.91(490 lines)  AV=2.00  SV=4.99  BV=2.91
    {16660,2176,1032, 0, 0, 0},  //TV = 5.91(490 lines)  AV=2.00  SV=5.10  BV=2.81
    {24990,1536,1040, 0, 0, 0},  //TV = 5.32(735 lines)  AV=2.00  SV=4.61  BV=2.72
    {24990,1664,1032, 0, 0, 0},  //TV = 5.32(735 lines)  AV=2.00  SV=4.71  BV=2.61
    {24990,1792,1024, 0, 0, 0},  //TV = 5.32(735 lines)  AV=2.00  SV=4.81  BV=2.52
    {24990,1920,1024, 0, 0, 0},  //TV = 5.32(735 lines)  AV=2.00  SV=4.91  BV=2.42
    {24990,2048,1032, 0, 0, 0},  //TV = 5.32(735 lines)  AV=2.00  SV=5.01  BV=2.31
    {32674,1664,1040, 0, 0, 0},  //TV = 4.94(961 lines)  AV=2.00  SV=4.72  BV=2.21
    {32674,1792,1032, 0, 0, 0},  //TV = 4.94(961 lines)  AV=2.00  SV=4.82  BV=2.12
    {32674,1920,1040, 0, 0, 0},  //TV = 4.94(961 lines)  AV=2.00  SV=4.93  BV=2.01
    {40834,1664,1032, 0, 0, 0},  //TV = 4.61(1201 lines)  AV=2.00  SV=4.71  BV=1.90
    {40834,1792,1024, 0, 0, 0},  //TV = 4.61(1201 lines)  AV=2.00  SV=4.81  BV=1.81
    {48994,1536,1064, 0, 0, 0},  //TV = 4.35(1441 lines)  AV=2.00  SV=4.64  BV=1.71
    {48994,1664,1048, 0, 0, 0},  //TV = 4.35(1441 lines)  AV=2.00  SV=4.73  BV=1.62
    {48994,1792,1056, 0, 0, 0},  //TV = 4.35(1441 lines)  AV=2.00  SV=4.85  BV=1.50
    {57154,1664,1032, 0, 0, 0},  //TV = 4.13(1681 lines)  AV=2.00  SV=4.71  BV=1.42
    {57154,1792,1032, 0, 0, 0},  //TV = 4.13(1681 lines)  AV=2.00  SV=4.82  BV=1.31
    {65314,1664,1048, 0, 0, 0},  //TV = 3.94(1921 lines)  AV=2.00  SV=4.73  BV=1.20
    {65314,1792,1032, 0, 0, 0},  //TV = 3.94(1921 lines)  AV=2.00  SV=4.82  BV=1.12
    {65314,1920,1040, 0, 0, 0},  //TV = 3.94(1921 lines)  AV=2.00  SV=4.93  BV=1.01
    {65314,2048,1040, 0, 0, 0},  //TV = 3.94(1921 lines)  AV=2.00  SV=5.02  BV=0.91
    {65314,2176,1056, 0, 0, 0},  //TV = 3.94(1921 lines)  AV=2.00  SV=5.13  BV=0.80
    {65314,2304,1064, 0, 0, 0},  //TV = 3.94(1921 lines)  AV=2.00  SV=5.23  BV=0.71
    {73474,2176,1080, 0, 0, 0},  //TV = 3.77(2161 lines)  AV=2.00  SV=5.16  BV=0.60
    {73474,2432,1032, 0, 0, 0},  //TV = 3.77(2161 lines)  AV=2.00  SV=5.26  BV=0.51
    {81634,2304,1048, 0, 0, 0},  //TV = 3.61(2401 lines)  AV=2.00  SV=5.20  BV=0.41
    {81634,2432,1064, 0, 0, 0},  //TV = 3.61(2401 lines)  AV=2.00  SV=5.30  BV=0.31
    {81634,2688,1032, 0, 0, 0},  //TV = 3.61(2401 lines)  AV=2.00  SV=5.40  BV=0.21
    {81634,2816,1056, 0, 0, 0},  //TV = 3.61(2401 lines)  AV=2.00  SV=5.50  BV=0.11
    {81634,3072,1048, 0, 0, 0},  //TV = 3.61(2401 lines)  AV=2.00  SV=5.62  BV=-0.00
    {81634,3328,1032, 0, 0, 0},  //TV = 3.61(2401 lines)  AV=2.00  SV=5.71  BV=-0.10
    {81634,3584,1032, 0, 0, 0},  //TV = 3.61(2401 lines)  AV=2.00  SV=5.82  BV=-0.20
    {81634,3840,1032, 0, 0, 0},  //TV = 3.61(2401 lines)  AV=2.00  SV=5.92  BV=-0.30
    {81634,4096,1032, 0, 0, 0},  //TV = 3.61(2401 lines)  AV=2.00  SV=6.01  BV=-0.40
    {81634,4352,1040, 0, 0, 0},  //TV = 3.61(2401 lines)  AV=2.00  SV=6.11  BV=-0.50
    {81634,4736,1024, 0, 0, 0},  //TV = 3.61(2401 lines)  AV=2.00  SV=6.21  BV=-0.59
    {89828,4608,1024, 0, 0, 0},  //TV = 3.48(2642 lines)  AV=2.00  SV=6.17  BV=-0.69
    {89828,4864,1040, 0, 0, 0},  //TV = 3.48(2642 lines)  AV=2.00  SV=6.27  BV=-0.79
    {98022,4864,1024, 0, 0, 0},  //TV = 3.35(2883 lines)  AV=2.00  SV=6.25  BV=-0.90
    {98022,5120,1040, 0, 0, 0},  //TV = 3.35(2883 lines)  AV=2.00  SV=6.34  BV=-0.99
    {98022,5504,1040, 0, 0, 0},  //TV = 3.35(2883 lines)  AV=2.00  SV=6.45  BV=-1.10
    {98022,6016,1024, 0, 0, 0},  //TV = 3.35(2883 lines)  AV=2.00  SV=6.55  BV=-1.20
    {98022,6400,1032, 0, 0, 0},  //TV = 3.35(2883 lines)  AV=2.00  SV=6.66  BV=-1.30
    {106182,6272,1040, 0, 0, 0},  //TV = 3.24(3123 lines)  AV=2.00  SV=6.64  BV=-1.40
    {114342,6272,1032, 0, 0, 0},  //TV = 3.13(3363 lines)  AV=2.00  SV=6.63  BV=-1.50
    {122502,6272,1032, 0, 0, 0},  //TV = 3.03(3603 lines)  AV=2.00  SV=6.63  BV=-1.60
    {122502,6784,1024, 0, 0, 0},  //TV = 3.03(3603 lines)  AV=2.00  SV=6.73  BV=-1.70
    {122502,7296,1024, 0, 0, 0},  //TV = 3.03(3603 lines)  AV=2.00  SV=6.83  BV=-1.80
    {122502,7808,1024, 0, 0, 0},  //TV = 3.03(3603 lines)  AV=2.00  SV=6.93  BV=-1.90
    {122502,8320,1032, 0, 0, 0},  //TV = 3.03(3603 lines)  AV=2.00  SV=7.03  BV=-2.00
    {130662,8320,1032, 0, 0, 0},  //TV = 2.94(3843 lines)  AV=2.00  SV=7.03  BV=-2.10
    {138822,8448,1024, 0, 0, 0},  //TV = 2.85(4083 lines)  AV=2.00  SV=7.04  BV=-2.20
    {146982,8576,1024, 0, 0, 0},  //TV = 2.77(4323 lines)  AV=2.00  SV=7.07  BV=-2.30
    {163302,8192,1032, 0, 0, 0},  //TV = 2.61(4803 lines)  AV=2.00  SV=7.01  BV=-2.40
    {171496,8448,1024, 0, 0, 0},  //TV = 2.54(5044 lines)  AV=2.00  SV=7.04  BV=-2.50
    {187850,8192,1032, 0, 0, 0},  //TV = 2.41(5525 lines)  AV=2.00  SV=7.01  BV=-2.60
    {196010,8448,1024, 0, 0, 0},  //TV = 2.35(5765 lines)  AV=2.00  SV=7.04  BV=-2.69
    {196010,9088,1024, 0, 0, 0},  //TV = 2.35(5765 lines)  AV=2.00  SV=7.15  BV=-2.80
    {196010,9728,1024, 0, 0, 0},  //TV = 2.35(5765 lines)  AV=2.00  SV=7.25  BV=-2.90
};

static strEvSetting sAEMode1PLineTable_50Hz[130] =
{
    {136,1792,1088, 0, 0, 0},  //TV = 12.84(4 lines)  AV=2.00  SV=4.89  BV=9.95
    {170,1536,1040, 0, 0, 0},  //TV = 12.52(5 lines)  AV=2.00  SV=4.61  BV=9.91
    {170,1664,1032, 0, 0, 0},  //TV = 12.52(5 lines)  AV=2.00  SV=4.71  BV=9.81
    {170,1792,1024, 0, 0, 0},  //TV = 12.52(5 lines)  AV=2.00  SV=4.81  BV=9.71
    {204,1536,1072, 0, 0, 0},  //TV = 12.26(6 lines)  AV=2.00  SV=4.65  BV=9.61
    {204,1664,1056, 0, 0, 0},  //TV = 12.26(6 lines)  AV=2.00  SV=4.74  BV=9.51
    {238,1536,1056, 0, 0, 0},  //TV = 12.04(7 lines)  AV=2.00  SV=4.63  BV=9.41
    {238,1664,1040, 0, 0, 0},  //TV = 12.04(7 lines)  AV=2.00  SV=4.72  BV=9.31
    {272,1536,1056, 0, 0, 0},  //TV = 11.84(8 lines)  AV=2.00  SV=4.63  BV=9.21
    {272,1664,1048, 0, 0, 0},  //TV = 11.84(8 lines)  AV=2.00  SV=4.73  BV=9.11
    {306,1536,1080, 0, 0, 0},  //TV = 11.67(9 lines)  AV=2.00  SV=4.66  BV=9.01
    {340,1536,1040, 0, 0, 0},  //TV = 11.52(10 lines)  AV=2.00  SV=4.61  BV=8.91
    {340,1664,1032, 0, 0, 0},  //TV = 11.52(10 lines)  AV=2.00  SV=4.71  BV=8.81
    {374,1536,1088, 0, 0, 0},  //TV = 11.38(11 lines)  AV=2.00  SV=4.67  BV=8.71
    {408,1536,1072, 0, 0, 0},  //TV = 11.26(12 lines)  AV=2.00  SV=4.65  BV=8.61
    {442,1536,1056, 0, 0, 0},  //TV = 11.14(13 lines)  AV=2.00  SV=4.63  BV=8.51
    {476,1536,1056, 0, 0, 0},  //TV = 11.04(14 lines)  AV=2.00  SV=4.63  BV=8.41
    {510,1536,1056, 0, 0, 0},  //TV = 10.94(15 lines)  AV=2.00  SV=4.63  BV=8.31
    {544,1536,1056, 0, 0, 0},  //TV = 10.84(16 lines)  AV=2.00  SV=4.63  BV=8.21
    {578,1536,1072, 0, 0, 0},  //TV = 10.76(17 lines)  AV=2.00  SV=4.65  BV=8.11
    {612,1536,1080, 0, 0, 0},  //TV = 10.67(18 lines)  AV=2.00  SV=4.66  BV=8.01
    {680,1536,1040, 0, 0, 0},  //TV = 10.52(20 lines)  AV=2.00  SV=4.61  BV=7.91
    {714,1536,1072, 0, 0, 0},  //TV = 10.45(21 lines)  AV=2.00  SV=4.65  BV=7.80
    {782,1536,1040, 0, 0, 0},  //TV = 10.32(23 lines)  AV=2.00  SV=4.61  BV=7.71
    {816,1536,1072, 0, 0, 0},  //TV = 10.26(24 lines)  AV=2.00  SV=4.65  BV=7.61
    {884,1536,1056, 0, 0, 0},  //TV = 10.14(26 lines)  AV=2.00  SV=4.63  BV=7.51
    {952,1536,1056, 0, 0, 0},  //TV = 10.04(28 lines)  AV=2.00  SV=4.63  BV=7.41
    {1020,1536,1056, 0, 0, 0},  //TV = 9.94(30 lines)  AV=2.00  SV=4.63  BV=7.31
    {1088,1536,1064, 0, 0, 0},  //TV = 9.84(32 lines)  AV=2.00  SV=4.64  BV=7.20
    {1190,1536,1040, 0, 0, 0},  //TV = 9.71(35 lines)  AV=2.00  SV=4.61  BV=7.11
    {1258,1536,1056, 0, 0, 0},  //TV = 9.63(37 lines)  AV=2.00  SV=4.63  BV=7.01
    {1360,1536,1048, 0, 0, 0},  //TV = 9.52(40 lines)  AV=2.00  SV=4.62  BV=6.90
    {1462,1536,1048, 0, 0, 0},  //TV = 9.42(43 lines)  AV=2.00  SV=4.62  BV=6.80
    {1564,1536,1040, 0, 0, 0},  //TV = 9.32(46 lines)  AV=2.00  SV=4.61  BV=6.71
    {1666,1536,1048, 0, 0, 0},  //TV = 9.23(49 lines)  AV=2.00  SV=4.62  BV=6.61
    {1802,1536,1040, 0, 0, 0},  //TV = 9.12(53 lines)  AV=2.00  SV=4.61  BV=6.51
    {1904,1536,1056, 0, 0, 0},  //TV = 9.04(56 lines)  AV=2.00  SV=4.63  BV=6.41
    {2040,1536,1056, 0, 0, 0},  //TV = 8.94(60 lines)  AV=2.00  SV=4.63  BV=6.31
    {2210,1536,1048, 0, 0, 0},  //TV = 8.82(65 lines)  AV=2.00  SV=4.62  BV=6.20
    {2380,1536,1040, 0, 0, 0},  //TV = 8.71(70 lines)  AV=2.00  SV=4.61  BV=6.11
    {2516,1536,1056, 0, 0, 0},  //TV = 8.63(74 lines)  AV=2.00  SV=4.63  BV=6.01
    {2720,1536,1048, 0, 0, 0},  //TV = 8.52(80 lines)  AV=2.00  SV=4.62  BV=5.90
    {2924,1536,1040, 0, 0, 0},  //TV = 8.42(86 lines)  AV=2.00  SV=4.61  BV=5.81
    {3128,1536,1040, 0, 0, 0},  //TV = 8.32(92 lines)  AV=2.00  SV=4.61  BV=5.71
    {3332,1536,1048, 0, 0, 0},  //TV = 8.23(98 lines)  AV=2.00  SV=4.62  BV=5.61
    {3570,1536,1048, 0, 0, 0},  //TV = 8.13(105 lines)  AV=2.00  SV=4.62  BV=5.51
    {3842,1536,1040, 0, 0, 0},  //TV = 8.02(113 lines)  AV=2.00  SV=4.61  BV=5.42
    {4148,1536,1040, 0, 0, 0},  //TV = 7.91(122 lines)  AV=2.00  SV=4.61  BV=5.31
    {4420,1536,1040, 0, 0, 0},  //TV = 7.82(130 lines)  AV=2.00  SV=4.61  BV=5.21
    {4760,1536,1040, 0, 0, 0},  //TV = 7.71(140 lines)  AV=2.00  SV=4.61  BV=5.11
    {5100,1536,1040, 0, 0, 0},  //TV = 7.62(150 lines)  AV=2.00  SV=4.61  BV=5.01
    {5440,1536,1040, 0, 0, 0},  //TV = 7.52(160 lines)  AV=2.00  SV=4.61  BV=4.91
    {5848,1536,1040, 0, 0, 0},  //TV = 7.42(172 lines)  AV=2.00  SV=4.61  BV=4.81
    {6290,1536,1040, 0, 0, 0},  //TV = 7.31(185 lines)  AV=2.00  SV=4.61  BV=4.71
    {6732,1536,1040, 0, 0, 0},  //TV = 7.21(198 lines)  AV=2.00  SV=4.61  BV=4.61
    {7208,1536,1040, 0, 0, 0},  //TV = 7.12(212 lines)  AV=2.00  SV=4.61  BV=4.51
    {7786,1536,1040, 0, 0, 0},  //TV = 7.00(229 lines)  AV=2.00  SV=4.61  BV=4.40
    {8262,1536,1040, 0, 0, 0},  //TV = 6.92(243 lines)  AV=2.00  SV=4.61  BV=4.31
    {8874,1536,1040, 0, 0, 0},  //TV = 6.82(261 lines)  AV=2.00  SV=4.61  BV=4.21
    {9554,1536,1040, 0, 0, 0},  //TV = 6.71(281 lines)  AV=2.00  SV=4.61  BV=4.10
    {9996,1536,1056, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=4.63  BV=4.02
    {9996,1664,1048, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=4.73  BV=3.91
    {9996,1792,1048, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=4.84  BV=3.80
    {9996,1920,1048, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=4.94  BV=3.70
    {9996,2048,1048, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.03  BV=3.61
    {9996,2176,1056, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.13  BV=3.51
    {9996,2304,1072, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.24  BV=3.41
    {9996,2560,1032, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.33  BV=3.31
    {9996,2688,1056, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.44  BV=3.21
    {9996,2944,1032, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.53  BV=3.11
    {19992,1536,1056, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=4.63  BV=3.02
    {19992,1664,1048, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=4.73  BV=2.91
    {19992,1792,1040, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=4.83  BV=2.81
    {19992,1920,1040, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=4.93  BV=2.72
    {19992,2048,1048, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=5.03  BV=2.61
    {19992,2176,1056, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=5.13  BV=2.51
    {29988,1536,1072, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=4.65  BV=2.41
    {29988,1664,1056, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=4.74  BV=2.31
    {29988,1792,1056, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=4.85  BV=2.21
    {29988,1920,1056, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=4.95  BV=2.11
    {39984,1536,1056, 0, 0, 0},  //TV = 4.64(1176 lines)  AV=2.00  SV=4.63  BV=2.02
    {39984,1664,1048, 0, 0, 0},  //TV = 4.64(1176 lines)  AV=2.00  SV=4.73  BV=1.91
    {39984,1792,1048, 0, 0, 0},  //TV = 4.64(1176 lines)  AV=2.00  SV=4.84  BV=1.80
    {49980,1536,1040, 0, 0, 0},  //TV = 4.32(1470 lines)  AV=2.00  SV=4.61  BV=1.72
    {49980,1664,1032, 0, 0, 0},  //TV = 4.32(1470 lines)  AV=2.00  SV=4.71  BV=1.61
    {49980,1792,1024, 0, 0, 0},  //TV = 4.32(1470 lines)  AV=2.00  SV=4.81  BV=1.52
    {59976,1536,1072, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=4.65  BV=1.41
    {59976,1664,1064, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=4.76  BV=1.30
    {59976,1792,1056, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=4.85  BV=1.21
    {59976,1920,1056, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=4.95  BV=1.11
    {59976,2048,1064, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=5.06  BV=1.00
    {59976,2176,1072, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=5.15  BV=0.91
    {59976,2432,1024, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=5.25  BV=0.81
    {69972,2176,1056, 0, 0, 0},  //TV = 3.84(2058 lines)  AV=2.00  SV=5.13  BV=0.71
    {69972,2304,1064, 0, 0, 0},  //TV = 3.84(2058 lines)  AV=2.00  SV=5.23  BV=0.61
    {79968,2176,1056, 0, 0, 0},  //TV = 3.64(2352 lines)  AV=2.00  SV=5.13  BV=0.51
    {79968,2304,1072, 0, 0, 0},  //TV = 3.64(2352 lines)  AV=2.00  SV=5.24  BV=0.41
    {79968,2560,1032, 0, 0, 0},  //TV = 3.64(2352 lines)  AV=2.00  SV=5.33  BV=0.31
    {79968,2688,1048, 0, 0, 0},  //TV = 3.64(2352 lines)  AV=2.00  SV=5.43  BV=0.22
    {79968,2944,1032, 0, 0, 0},  //TV = 3.64(2352 lines)  AV=2.00  SV=5.53  BV=0.11
    {79968,3200,1024, 0, 0, 0},  //TV = 3.64(2352 lines)  AV=2.00  SV=5.64  BV=0.00
    {79968,3328,1056, 0, 0, 0},  //TV = 3.64(2352 lines)  AV=2.00  SV=5.74  BV=-0.10
    {79968,3584,1048, 0, 0, 0},  //TV = 3.64(2352 lines)  AV=2.00  SV=5.84  BV=-0.20
    {79968,3840,1056, 0, 0, 0},  //TV = 3.64(2352 lines)  AV=2.00  SV=5.95  BV=-0.31
    {79968,4224,1024, 0, 0, 0},  //TV = 3.64(2352 lines)  AV=2.00  SV=6.04  BV=-0.40
    {79968,4480,1032, 0, 0, 0},  //TV = 3.64(2352 lines)  AV=2.00  SV=6.14  BV=-0.50
    {79968,4736,1048, 0, 0, 0},  //TV = 3.64(2352 lines)  AV=2.00  SV=6.24  BV=-0.60
    {89998,4608,1024, 0, 0, 0},  //TV = 3.47(2647 lines)  AV=2.00  SV=6.17  BV=-0.70
    {89998,4864,1040, 0, 0, 0},  //TV = 3.47(2647 lines)  AV=2.00  SV=6.27  BV=-0.80
    {99994,4736,1032, 0, 0, 0},  //TV = 3.32(2941 lines)  AV=2.00  SV=6.22  BV=-0.90
    {99994,5120,1032, 0, 0, 0},  //TV = 3.32(2941 lines)  AV=2.00  SV=6.33  BV=-1.01
    {99994,5376,1040, 0, 0, 0},  //TV = 3.32(2941 lines)  AV=2.00  SV=6.41  BV=-1.09
    {99994,5888,1024, 0, 0, 0},  //TV = 3.32(2941 lines)  AV=2.00  SV=6.52  BV=-1.20
    {99994,6272,1032, 0, 0, 0},  //TV = 3.32(2941 lines)  AV=2.00  SV=6.63  BV=-1.30
    {109990,6144,1024, 0, 0, 0},  //TV = 3.18(3235 lines)  AV=2.00  SV=6.58  BV=-1.40
    {119986,6016,1032, 0, 0, 0},  //TV = 3.06(3529 lines)  AV=2.00  SV=6.57  BV=-1.51
    {119986,6400,1032, 0, 0, 0},  //TV = 3.06(3529 lines)  AV=2.00  SV=6.66  BV=-1.60
    {119986,6912,1032, 0, 0, 0},  //TV = 3.06(3529 lines)  AV=2.00  SV=6.77  BV=-1.71
    {119986,7424,1024, 0, 0, 0},  //TV = 3.06(3529 lines)  AV=2.00  SV=6.86  BV=-1.80
    {119986,7936,1032, 0, 0, 0},  //TV = 3.06(3529 lines)  AV=2.00  SV=6.97  BV=-1.91
    {119986,8448,1032, 0, 0, 0},  //TV = 3.06(3529 lines)  AV=2.00  SV=7.06  BV=-2.00
    {129982,8448,1024, 0, 0, 0},  //TV = 2.94(3823 lines)  AV=2.00  SV=7.04  BV=-2.10
    {139978,8320,1032, 0, 0, 0},  //TV = 2.84(4117 lines)  AV=2.00  SV=7.03  BV=-2.20
    {149974,8320,1032, 0, 0, 0},  //TV = 2.74(4411 lines)  AV=2.00  SV=7.03  BV=-2.30
    {159970,8448,1024, 0, 0, 0},  //TV = 2.64(4705 lines)  AV=2.00  SV=7.04  BV=-2.40
    {179996,8064,1024, 0, 0, 0},  //TV = 2.47(5294 lines)  AV=2.00  SV=6.98  BV=-2.50
    {189992,8192,1024, 0, 0, 0},  //TV = 2.40(5588 lines)  AV=2.00  SV=7.00  BV=-2.60
    {199988,8320,1024, 0, 0, 0},  //TV = 2.32(5882 lines)  AV=2.00  SV=7.02  BV=-2.70
    {199988,8832,1032, 0, 0, 0},  //TV = 2.32(5882 lines)  AV=2.00  SV=7.12  BV=-2.80
    {199988,9472,1032, 0, 0, 0},  //TV = 2.32(5882 lines)  AV=2.00  SV=7.22  BV=-2.90
};

static strAETable g_AE_ModeTable1 =
{
    AETABLE_MODE_INDEX1,    //eAETableID
    130,    //u4TotalIndex
    20,    //u4StrobeTrigerBV
    100,    //i4MaxBV
    -29,    //i4MinBV
    LIB3A_AE_ISO_SPEED_AUTO, //ISO SPEED
    sAEMode1PLineTable_60Hz,
    sAEMode1PLineTable_50Hz,
    NULL,
};

static strEvSetting sAEMode2PLineTable_60Hz[117] =
{
    {136,1792,1088, 0, 0, 0},  //TV = 12.84(4 lines)  AV=2.00  SV=4.89  BV=9.95
    {170,1536,1040, 0, 0, 0},  //TV = 12.52(5 lines)  AV=2.00  SV=4.61  BV=9.91
    {170,1664,1032, 0, 0, 0},  //TV = 12.52(5 lines)  AV=2.00  SV=4.71  BV=9.81
    {170,1792,1024, 0, 0, 0},  //TV = 12.52(5 lines)  AV=2.00  SV=4.81  BV=9.71
    {204,1536,1072, 0, 0, 0},  //TV = 12.26(6 lines)  AV=2.00  SV=4.65  BV=9.61
    {204,1664,1056, 0, 0, 0},  //TV = 12.26(6 lines)  AV=2.00  SV=4.74  BV=9.51
    {238,1536,1056, 0, 0, 0},  //TV = 12.04(7 lines)  AV=2.00  SV=4.63  BV=9.41
    {238,1664,1040, 0, 0, 0},  //TV = 12.04(7 lines)  AV=2.00  SV=4.72  BV=9.31
    {272,1536,1056, 0, 0, 0},  //TV = 11.84(8 lines)  AV=2.00  SV=4.63  BV=9.21
    {272,1664,1048, 0, 0, 0},  //TV = 11.84(8 lines)  AV=2.00  SV=4.73  BV=9.11
    {306,1536,1080, 0, 0, 0},  //TV = 11.67(9 lines)  AV=2.00  SV=4.66  BV=9.01
    {340,1536,1040, 0, 0, 0},  //TV = 11.52(10 lines)  AV=2.00  SV=4.61  BV=8.91
    {340,1664,1032, 0, 0, 0},  //TV = 11.52(10 lines)  AV=2.00  SV=4.71  BV=8.81
    {374,1536,1088, 0, 0, 0},  //TV = 11.38(11 lines)  AV=2.00  SV=4.67  BV=8.71
    {408,1536,1072, 0, 0, 0},  //TV = 11.26(12 lines)  AV=2.00  SV=4.65  BV=8.61
    {442,1536,1056, 0, 0, 0},  //TV = 11.14(13 lines)  AV=2.00  SV=4.63  BV=8.51
    {476,1536,1056, 0, 0, 0},  //TV = 11.04(14 lines)  AV=2.00  SV=4.63  BV=8.41
    {510,1536,1056, 0, 0, 0},  //TV = 10.94(15 lines)  AV=2.00  SV=4.63  BV=8.31
    {544,1536,1056, 0, 0, 0},  //TV = 10.84(16 lines)  AV=2.00  SV=4.63  BV=8.21
    {578,1536,1072, 0, 0, 0},  //TV = 10.76(17 lines)  AV=2.00  SV=4.65  BV=8.11
    {612,1536,1080, 0, 0, 0},  //TV = 10.67(18 lines)  AV=2.00  SV=4.66  BV=8.01
    {680,1536,1040, 0, 0, 0},  //TV = 10.52(20 lines)  AV=2.00  SV=4.61  BV=7.91
    {714,1536,1072, 0, 0, 0},  //TV = 10.45(21 lines)  AV=2.00  SV=4.65  BV=7.80
    {782,1536,1040, 0, 0, 0},  //TV = 10.32(23 lines)  AV=2.00  SV=4.61  BV=7.71
    {816,1536,1072, 0, 0, 0},  //TV = 10.26(24 lines)  AV=2.00  SV=4.65  BV=7.61
    {884,1536,1056, 0, 0, 0},  //TV = 10.14(26 lines)  AV=2.00  SV=4.63  BV=7.51
    {952,1536,1056, 0, 0, 0},  //TV = 10.04(28 lines)  AV=2.00  SV=4.63  BV=7.41
    {1020,1536,1056, 0, 0, 0},  //TV = 9.94(30 lines)  AV=2.00  SV=4.63  BV=7.31
    {1088,1536,1064, 0, 0, 0},  //TV = 9.84(32 lines)  AV=2.00  SV=4.64  BV=7.20
    {1190,1536,1040, 0, 0, 0},  //TV = 9.71(35 lines)  AV=2.00  SV=4.61  BV=7.11
    {1258,1536,1056, 0, 0, 0},  //TV = 9.63(37 lines)  AV=2.00  SV=4.63  BV=7.01
    {1360,1536,1048, 0, 0, 0},  //TV = 9.52(40 lines)  AV=2.00  SV=4.62  BV=6.90
    {1462,1536,1048, 0, 0, 0},  //TV = 9.42(43 lines)  AV=2.00  SV=4.62  BV=6.80
    {1564,1536,1040, 0, 0, 0},  //TV = 9.32(46 lines)  AV=2.00  SV=4.61  BV=6.71
    {1666,1536,1048, 0, 0, 0},  //TV = 9.23(49 lines)  AV=2.00  SV=4.62  BV=6.61
    {1802,1536,1040, 0, 0, 0},  //TV = 9.12(53 lines)  AV=2.00  SV=4.61  BV=6.51
    {1904,1536,1056, 0, 0, 0},  //TV = 9.04(56 lines)  AV=2.00  SV=4.63  BV=6.41
    {2040,1536,1056, 0, 0, 0},  //TV = 8.94(60 lines)  AV=2.00  SV=4.63  BV=6.31
    {2210,1536,1048, 0, 0, 0},  //TV = 8.82(65 lines)  AV=2.00  SV=4.62  BV=6.20
    {2380,1536,1040, 0, 0, 0},  //TV = 8.71(70 lines)  AV=2.00  SV=4.61  BV=6.11
    {2516,1536,1056, 0, 0, 0},  //TV = 8.63(74 lines)  AV=2.00  SV=4.63  BV=6.01
    {2720,1536,1048, 0, 0, 0},  //TV = 8.52(80 lines)  AV=2.00  SV=4.62  BV=5.90
    {2924,1536,1040, 0, 0, 0},  //TV = 8.42(86 lines)  AV=2.00  SV=4.61  BV=5.81
    {3128,1536,1040, 0, 0, 0},  //TV = 8.32(92 lines)  AV=2.00  SV=4.61  BV=5.71
    {3332,1536,1048, 0, 0, 0},  //TV = 8.23(98 lines)  AV=2.00  SV=4.62  BV=5.61
    {3570,1536,1048, 0, 0, 0},  //TV = 8.13(105 lines)  AV=2.00  SV=4.62  BV=5.51
    {3842,1536,1040, 0, 0, 0},  //TV = 8.02(113 lines)  AV=2.00  SV=4.61  BV=5.42
    {4148,1536,1040, 0, 0, 0},  //TV = 7.91(122 lines)  AV=2.00  SV=4.61  BV=5.31
    {4420,1536,1040, 0, 0, 0},  //TV = 7.82(130 lines)  AV=2.00  SV=4.61  BV=5.21
    {4760,1536,1040, 0, 0, 0},  //TV = 7.71(140 lines)  AV=2.00  SV=4.61  BV=5.11
    {5100,1536,1040, 0, 0, 0},  //TV = 7.62(150 lines)  AV=2.00  SV=4.61  BV=5.01
    {5440,1536,1040, 0, 0, 0},  //TV = 7.52(160 lines)  AV=2.00  SV=4.61  BV=4.91
    {5848,1536,1040, 0, 0, 0},  //TV = 7.42(172 lines)  AV=2.00  SV=4.61  BV=4.81
    {6290,1536,1040, 0, 0, 0},  //TV = 7.31(185 lines)  AV=2.00  SV=4.61  BV=4.71
    {6732,1536,1040, 0, 0, 0},  //TV = 7.21(198 lines)  AV=2.00  SV=4.61  BV=4.61
    {7208,1536,1040, 0, 0, 0},  //TV = 7.12(212 lines)  AV=2.00  SV=4.61  BV=4.51
    {7786,1536,1040, 0, 0, 0},  //TV = 7.00(229 lines)  AV=2.00  SV=4.61  BV=4.40
    {8262,1536,1040, 0, 0, 0},  //TV = 6.92(243 lines)  AV=2.00  SV=4.61  BV=4.31
    {8330,1536,1104, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=4.69  BV=4.21
    {8330,1664,1096, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=4.80  BV=4.11
    {8330,1792,1096, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=4.91  BV=4.00
    {8330,2048,1024, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.00  BV=3.91
    {8330,2176,1024, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.09  BV=3.82
    {8330,2304,1048, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.20  BV=3.70
    {8330,2432,1064, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.30  BV=3.60
    {8330,2688,1032, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.40  BV=3.50
    {8330,2816,1056, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.50  BV=3.40
    {8330,3072,1032, 0, 0, 0},  //TV = 6.91(245 lines)  AV=2.00  SV=5.60  BV=3.31
    {16660,1536,1104, 0, 0, 0},  //TV = 5.91(490 lines)  AV=2.00  SV=4.69  BV=3.21
    {16660,1664,1096, 0, 0, 0},  //TV = 5.91(490 lines)  AV=2.00  SV=4.80  BV=3.11
    {16660,1792,1088, 0, 0, 0},  //TV = 5.91(490 lines)  AV=2.00  SV=4.89  BV=3.01
    {16660,1920,1088, 0, 0, 0},  //TV = 5.91(490 lines)  AV=2.00  SV=4.99  BV=2.91
    {16660,2176,1032, 0, 0, 0},  //TV = 5.91(490 lines)  AV=2.00  SV=5.10  BV=2.81
    {24990,1536,1040, 0, 0, 0},  //TV = 5.32(735 lines)  AV=2.00  SV=4.61  BV=2.72
    {24990,1664,1032, 0, 0, 0},  //TV = 5.32(735 lines)  AV=2.00  SV=4.71  BV=2.61
    {24990,1792,1024, 0, 0, 0},  //TV = 5.32(735 lines)  AV=2.00  SV=4.81  BV=2.52
    {24990,1920,1024, 0, 0, 0},  //TV = 5.32(735 lines)  AV=2.00  SV=4.91  BV=2.42
    {24990,2048,1032, 0, 0, 0},  //TV = 5.32(735 lines)  AV=2.00  SV=5.01  BV=2.31
    {32674,1664,1048, 0, 0, 0},  //TV = 4.94(961 lines)  AV=2.00  SV=4.73  BV=2.20
    {32674,1792,1032, 0, 0, 0},  //TV = 4.94(961 lines)  AV=2.00  SV=4.82  BV=2.12
    {32674,1920,1040, 0, 0, 0},  //TV = 4.94(961 lines)  AV=2.00  SV=4.93  BV=2.01
    {32674,2048,1040, 0, 0, 0},  //TV = 4.94(961 lines)  AV=2.00  SV=5.02  BV=1.91
    {32674,2176,1056, 0, 0, 0},  //TV = 4.94(961 lines)  AV=2.00  SV=5.13  BV=1.80
    {32674,2304,1064, 0, 0, 0},  //TV = 4.94(961 lines)  AV=2.00  SV=5.23  BV=1.71
    {32674,2560,1024, 0, 0, 0},  //TV = 4.94(961 lines)  AV=2.00  SV=5.32  BV=1.61
    {32674,2688,1048, 0, 0, 0},  //TV = 4.94(961 lines)  AV=2.00  SV=5.43  BV=1.51
    {32674,2944,1032, 0, 0, 0},  //TV = 4.94(961 lines)  AV=2.00  SV=5.53  BV=1.40
    {32674,3072,1056, 0, 0, 0},  //TV = 4.94(961 lines)  AV=2.00  SV=5.63  BV=1.31
    {32674,3328,1040, 0, 0, 0},  //TV = 4.94(961 lines)  AV=2.00  SV=5.72  BV=1.21
    {32674,3584,1040, 0, 0, 0},  //TV = 4.94(961 lines)  AV=2.00  SV=5.83  BV=1.11
    {40834,3072,1040, 0, 0, 0},  //TV = 4.61(1201 lines)  AV=2.00  SV=5.61  BV=1.01
    {40834,3328,1024, 0, 0, 0},  //TV = 4.61(1201 lines)  AV=2.00  SV=5.70  BV=0.91
    {40834,3456,1056, 0, 0, 0},  //TV = 4.61(1201 lines)  AV=2.00  SV=5.80  BV=0.81
    {48994,3200,1024, 0, 0, 0},  //TV = 4.35(1441 lines)  AV=2.00  SV=5.64  BV=0.71
    {48994,3328,1056, 0, 0, 0},  //TV = 4.35(1441 lines)  AV=2.00  SV=5.74  BV=0.61
    {48994,3584,1048, 0, 0, 0},  //TV = 4.35(1441 lines)  AV=2.00  SV=5.84  BV=0.51
    {48994,3840,1048, 0, 0, 0},  //TV = 4.35(1441 lines)  AV=2.00  SV=5.94  BV=0.41
    {48994,4096,1048, 0, 0, 0},  //TV = 4.35(1441 lines)  AV=2.00  SV=6.03  BV=0.32
    {48994,4480,1032, 0, 0, 0},  //TV = 4.35(1441 lines)  AV=2.00  SV=6.14  BV=0.21
    {48994,4736,1048, 0, 0, 0},  //TV = 4.35(1441 lines)  AV=2.00  SV=6.24  BV=0.11
    {48994,5120,1048, 0, 0, 0},  //TV = 4.35(1441 lines)  AV=2.00  SV=6.36  BV=-0.00
    {57154,4736,1040, 0, 0, 0},  //TV = 4.13(1681 lines)  AV=2.00  SV=6.23  BV=-0.10
    {57154,5120,1032, 0, 0, 0},  //TV = 4.13(1681 lines)  AV=2.00  SV=6.33  BV=-0.20
    {65314,4736,1048, 0, 0, 0},  //TV = 3.94(1921 lines)  AV=2.00  SV=6.24  BV=-0.31
    {65314,5120,1032, 0, 0, 0},  //TV = 3.94(1921 lines)  AV=2.00  SV=6.33  BV=-0.40
    {65314,5504,1032, 0, 0, 0},  //TV = 3.94(1921 lines)  AV=2.00  SV=6.44  BV=-0.50
    {65314,5888,1032, 0, 0, 0},  //TV = 3.94(1921 lines)  AV=2.00  SV=6.53  BV=-0.60
    {65314,6272,1040, 0, 0, 0},  //TV = 3.94(1921 lines)  AV=2.00  SV=6.64  BV=-0.70
    {65314,6784,1024, 0, 0, 0},  //TV = 3.94(1921 lines)  AV=2.00  SV=6.73  BV=-0.79
    {65314,7296,1032, 0, 0, 0},  //TV = 3.94(1921 lines)  AV=2.00  SV=6.84  BV=-0.91
    {65314,7808,1032, 0, 0, 0},  //TV = 3.94(1921 lines)  AV=2.00  SV=6.94  BV=-1.01
    {65314,8320,1032, 0, 0, 0},  //TV = 3.94(1921 lines)  AV=2.00  SV=7.03  BV=-1.10
    {73474,7936,1032, 0, 0, 0},  //TV = 3.77(2161 lines)  AV=2.00  SV=6.97  BV=-1.20
    {73474,8576,1024, 0, 0, 0},  //TV = 3.77(2161 lines)  AV=2.00  SV=7.07  BV=-1.30
    {73474,9088,1032, 0, 0, 0},  //TV = 3.77(2161 lines)  AV=2.00  SV=7.16  BV=-1.39
    {73474,9856,1024, 0, 0, 0},  //TV = 3.77(2161 lines)  AV=2.00  SV=7.27  BV=-1.50
    {73474,10240,1056, 0, 0, 0},  //TV = 3.77(2161 lines)  AV=2.00  SV=7.37  BV=-1.60
};

static strEvSetting sAEMode2PLineTable_50Hz[117] =
{
    {136,1792,1088, 0, 0, 0},  //TV = 12.84(4 lines)  AV=2.00  SV=4.89  BV=9.95
    {170,1536,1040, 0, 0, 0},  //TV = 12.52(5 lines)  AV=2.00  SV=4.61  BV=9.91
    {170,1664,1032, 0, 0, 0},  //TV = 12.52(5 lines)  AV=2.00  SV=4.71  BV=9.81
    {170,1792,1024, 0, 0, 0},  //TV = 12.52(5 lines)  AV=2.00  SV=4.81  BV=9.71
    {204,1536,1072, 0, 0, 0},  //TV = 12.26(6 lines)  AV=2.00  SV=4.65  BV=9.61
    {204,1664,1056, 0, 0, 0},  //TV = 12.26(6 lines)  AV=2.00  SV=4.74  BV=9.51
    {238,1536,1056, 0, 0, 0},  //TV = 12.04(7 lines)  AV=2.00  SV=4.63  BV=9.41
    {238,1664,1040, 0, 0, 0},  //TV = 12.04(7 lines)  AV=2.00  SV=4.72  BV=9.31
    {272,1536,1056, 0, 0, 0},  //TV = 11.84(8 lines)  AV=2.00  SV=4.63  BV=9.21
    {272,1664,1048, 0, 0, 0},  //TV = 11.84(8 lines)  AV=2.00  SV=4.73  BV=9.11
    {306,1536,1080, 0, 0, 0},  //TV = 11.67(9 lines)  AV=2.00  SV=4.66  BV=9.01
    {340,1536,1040, 0, 0, 0},  //TV = 11.52(10 lines)  AV=2.00  SV=4.61  BV=8.91
    {340,1664,1032, 0, 0, 0},  //TV = 11.52(10 lines)  AV=2.00  SV=4.71  BV=8.81
    {374,1536,1088, 0, 0, 0},  //TV = 11.38(11 lines)  AV=2.00  SV=4.67  BV=8.71
    {408,1536,1072, 0, 0, 0},  //TV = 11.26(12 lines)  AV=2.00  SV=4.65  BV=8.61
    {442,1536,1056, 0, 0, 0},  //TV = 11.14(13 lines)  AV=2.00  SV=4.63  BV=8.51
    {476,1536,1056, 0, 0, 0},  //TV = 11.04(14 lines)  AV=2.00  SV=4.63  BV=8.41
    {510,1536,1056, 0, 0, 0},  //TV = 10.94(15 lines)  AV=2.00  SV=4.63  BV=8.31
    {544,1536,1056, 0, 0, 0},  //TV = 10.84(16 lines)  AV=2.00  SV=4.63  BV=8.21
    {578,1536,1072, 0, 0, 0},  //TV = 10.76(17 lines)  AV=2.00  SV=4.65  BV=8.11
    {612,1536,1080, 0, 0, 0},  //TV = 10.67(18 lines)  AV=2.00  SV=4.66  BV=8.01
    {680,1536,1040, 0, 0, 0},  //TV = 10.52(20 lines)  AV=2.00  SV=4.61  BV=7.91
    {714,1536,1072, 0, 0, 0},  //TV = 10.45(21 lines)  AV=2.00  SV=4.65  BV=7.80
    {782,1536,1040, 0, 0, 0},  //TV = 10.32(23 lines)  AV=2.00  SV=4.61  BV=7.71
    {816,1536,1072, 0, 0, 0},  //TV = 10.26(24 lines)  AV=2.00  SV=4.65  BV=7.61
    {884,1536,1056, 0, 0, 0},  //TV = 10.14(26 lines)  AV=2.00  SV=4.63  BV=7.51
    {952,1536,1056, 0, 0, 0},  //TV = 10.04(28 lines)  AV=2.00  SV=4.63  BV=7.41
    {1020,1536,1056, 0, 0, 0},  //TV = 9.94(30 lines)  AV=2.00  SV=4.63  BV=7.31
    {1088,1536,1064, 0, 0, 0},  //TV = 9.84(32 lines)  AV=2.00  SV=4.64  BV=7.20
    {1190,1536,1040, 0, 0, 0},  //TV = 9.71(35 lines)  AV=2.00  SV=4.61  BV=7.11
    {1258,1536,1056, 0, 0, 0},  //TV = 9.63(37 lines)  AV=2.00  SV=4.63  BV=7.01
    {1360,1536,1048, 0, 0, 0},  //TV = 9.52(40 lines)  AV=2.00  SV=4.62  BV=6.90
    {1462,1536,1048, 0, 0, 0},  //TV = 9.42(43 lines)  AV=2.00  SV=4.62  BV=6.80
    {1564,1536,1040, 0, 0, 0},  //TV = 9.32(46 lines)  AV=2.00  SV=4.61  BV=6.71
    {1666,1536,1048, 0, 0, 0},  //TV = 9.23(49 lines)  AV=2.00  SV=4.62  BV=6.61
    {1802,1536,1040, 0, 0, 0},  //TV = 9.12(53 lines)  AV=2.00  SV=4.61  BV=6.51
    {1904,1536,1056, 0, 0, 0},  //TV = 9.04(56 lines)  AV=2.00  SV=4.63  BV=6.41
    {2040,1536,1056, 0, 0, 0},  //TV = 8.94(60 lines)  AV=2.00  SV=4.63  BV=6.31
    {2210,1536,1048, 0, 0, 0},  //TV = 8.82(65 lines)  AV=2.00  SV=4.62  BV=6.20
    {2380,1536,1040, 0, 0, 0},  //TV = 8.71(70 lines)  AV=2.00  SV=4.61  BV=6.11
    {2516,1536,1056, 0, 0, 0},  //TV = 8.63(74 lines)  AV=2.00  SV=4.63  BV=6.01
    {2720,1536,1048, 0, 0, 0},  //TV = 8.52(80 lines)  AV=2.00  SV=4.62  BV=5.90
    {2924,1536,1040, 0, 0, 0},  //TV = 8.42(86 lines)  AV=2.00  SV=4.61  BV=5.81
    {3128,1536,1040, 0, 0, 0},  //TV = 8.32(92 lines)  AV=2.00  SV=4.61  BV=5.71
    {3332,1536,1048, 0, 0, 0},  //TV = 8.23(98 lines)  AV=2.00  SV=4.62  BV=5.61
    {3570,1536,1048, 0, 0, 0},  //TV = 8.13(105 lines)  AV=2.00  SV=4.62  BV=5.51
    {3842,1536,1040, 0, 0, 0},  //TV = 8.02(113 lines)  AV=2.00  SV=4.61  BV=5.42
    {4148,1536,1040, 0, 0, 0},  //TV = 7.91(122 lines)  AV=2.00  SV=4.61  BV=5.31
    {4420,1536,1040, 0, 0, 0},  //TV = 7.82(130 lines)  AV=2.00  SV=4.61  BV=5.21
    {4760,1536,1040, 0, 0, 0},  //TV = 7.71(140 lines)  AV=2.00  SV=4.61  BV=5.11
    {5100,1536,1040, 0, 0, 0},  //TV = 7.62(150 lines)  AV=2.00  SV=4.61  BV=5.01
    {5440,1536,1040, 0, 0, 0},  //TV = 7.52(160 lines)  AV=2.00  SV=4.61  BV=4.91
    {5848,1536,1040, 0, 0, 0},  //TV = 7.42(172 lines)  AV=2.00  SV=4.61  BV=4.81
    {6290,1536,1040, 0, 0, 0},  //TV = 7.31(185 lines)  AV=2.00  SV=4.61  BV=4.71
    {6732,1536,1040, 0, 0, 0},  //TV = 7.21(198 lines)  AV=2.00  SV=4.61  BV=4.61
    {7208,1536,1040, 0, 0, 0},  //TV = 7.12(212 lines)  AV=2.00  SV=4.61  BV=4.51
    {7786,1536,1040, 0, 0, 0},  //TV = 7.00(229 lines)  AV=2.00  SV=4.61  BV=4.40
    {8262,1536,1040, 0, 0, 0},  //TV = 6.92(243 lines)  AV=2.00  SV=4.61  BV=4.31
    {8874,1536,1040, 0, 0, 0},  //TV = 6.82(261 lines)  AV=2.00  SV=4.61  BV=4.21
    {9554,1536,1040, 0, 0, 0},  //TV = 6.71(281 lines)  AV=2.00  SV=4.61  BV=4.10
    {9996,1536,1056, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=4.63  BV=4.02
    {9996,1664,1048, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=4.73  BV=3.91
    {9996,1792,1048, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=4.84  BV=3.80
    {9996,1920,1048, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=4.94  BV=3.70
    {9996,2048,1048, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.03  BV=3.61
    {9996,2176,1056, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.13  BV=3.51
    {9996,2304,1072, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.24  BV=3.41
    {9996,2560,1032, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.33  BV=3.31
    {9996,2688,1056, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.44  BV=3.21
    {9996,2944,1032, 0, 0, 0},  //TV = 6.64(294 lines)  AV=2.00  SV=5.53  BV=3.11
    {19992,1536,1056, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=4.63  BV=3.02
    {19992,1664,1048, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=4.73  BV=2.91
    {19992,1792,1040, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=4.83  BV=2.81
    {19992,1920,1040, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=4.93  BV=2.72
    {19992,2048,1048, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=5.03  BV=2.61
    {19992,2176,1056, 0, 0, 0},  //TV = 5.64(588 lines)  AV=2.00  SV=5.13  BV=2.51
    {29988,1536,1072, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=4.65  BV=2.41
    {29988,1664,1056, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=4.74  BV=2.31
    {29988,1792,1056, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=4.85  BV=2.21
    {29988,1920,1056, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=4.95  BV=2.11
    {29988,2048,1064, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=5.06  BV=2.00
    {29988,2176,1072, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=5.15  BV=1.91
    {29988,2432,1024, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=5.25  BV=1.81
    {29988,2560,1048, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=5.36  BV=1.70
    {29988,2688,1064, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=5.45  BV=1.61
    {29988,2944,1040, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=5.55  BV=1.51
    {29988,3200,1032, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=5.66  BV=1.40
    {29988,3328,1056, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=5.74  BV=1.31
    {29988,3584,1056, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=5.85  BV=1.21
    {29988,3840,1056, 0, 0, 0},  //TV = 5.06(882 lines)  AV=2.00  SV=5.95  BV=1.11
    {39984,3072,1056, 0, 0, 0},  //TV = 4.64(1176 lines)  AV=2.00  SV=5.63  BV=1.02
    {39984,3328,1048, 0, 0, 0},  //TV = 4.64(1176 lines)  AV=2.00  SV=5.73  BV=0.91
    {39984,3584,1040, 0, 0, 0},  //TV = 4.64(1176 lines)  AV=2.00  SV=5.83  BV=0.81
    {49980,3072,1048, 0, 0, 0},  //TV = 4.32(1470 lines)  AV=2.00  SV=5.62  BV=0.70
    {49980,3328,1032, 0, 0, 0},  //TV = 4.32(1470 lines)  AV=2.00  SV=5.71  BV=0.61
    {49980,3584,1024, 0, 0, 0},  //TV = 4.32(1470 lines)  AV=2.00  SV=5.81  BV=0.52
    {49980,3840,1024, 0, 0, 0},  //TV = 4.32(1470 lines)  AV=2.00  SV=5.91  BV=0.42
    {49980,4096,1040, 0, 0, 0},  //TV = 4.32(1470 lines)  AV=2.00  SV=6.02  BV=0.30
    {49980,4352,1040, 0, 0, 0},  //TV = 4.32(1470 lines)  AV=2.00  SV=6.11  BV=0.21
    {49980,4736,1024, 0, 0, 0},  //TV = 4.32(1470 lines)  AV=2.00  SV=6.21  BV=0.11
    {49980,5120,1024, 0, 0, 0},  //TV = 4.32(1470 lines)  AV=2.00  SV=6.32  BV=0.00
    {59976,4480,1048, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=6.16  BV=-0.10
    {59976,4864,1032, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=6.26  BV=-0.20
    {59976,5248,1024, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=6.36  BV=-0.30
    {59976,5632,1024, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=6.46  BV=-0.40
    {59976,6016,1024, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=6.55  BV=-0.50
    {59976,6400,1032, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=6.66  BV=-0.60
    {59976,6912,1024, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=6.75  BV=-0.70
    {59976,7424,1024, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=6.86  BV=-0.80
    {59976,7936,1024, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=6.95  BV=-0.89
    {59976,8448,1032, 0, 0, 0},  //TV = 4.06(1764 lines)  AV=2.00  SV=7.06  BV=-1.00
    {69972,7808,1032, 0, 0, 0},  //TV = 3.84(2058 lines)  AV=2.00  SV=6.94  BV=-1.10
    {69972,8320,1032, 0, 0, 0},  //TV = 3.84(2058 lines)  AV=2.00  SV=7.03  BV=-1.20
    {69972,8960,1024, 0, 0, 0},  //TV = 3.84(2058 lines)  AV=2.00  SV=7.13  BV=-1.29
    {69972,9600,1024, 0, 0, 0},  //TV = 3.84(2058 lines)  AV=2.00  SV=7.23  BV=-1.39
    {69972,10240,1040, 0, 0, 0},  //TV = 3.84(2058 lines)  AV=2.00  SV=7.34  BV=-1.51
    {69972,10240,1112, 0, 0, 0},  //TV = 3.84(2058 lines)  AV=2.00  SV=7.44  BV=-1.60
};

static strAETable g_AE_ModeTable2 =
{
    AETABLE_MODE_INDEX2,    //eAETableID
    117,    //u4TotalIndex
    20,    //u4StrobeTrigerBV
    100,    //i4MaxBV
    -16,    //i4MinBV
    LIB3A_AE_ISO_SPEED_AUTO, //ISO SPEED
    sAEMode2PLineTable_60Hz,
    sAEMode2PLineTable_50Hz,
    NULL,
};

static strAETable g_AE_CaptureISO1600Table =
{
    AETABLE_CAPTURE_ISO1600,    //eAETableID
    120,    //u4TotalIndex
    20,    //u4StrobeTrigerBV
    90,    //i4MaxBV
    -29,    //i4MinBV
    LIB3A_AE_ISO_SPEED_1600, //ISO SPEED
    sCaptureISO800PLineTable_60Hz,
    sCaptureISO800PLineTable_50Hz,
    NULL,
};

static strAEPLineMapping g_AEModePLineMapping[] = 
{
    {LIB3A_AE_MODE_AUTO,AETABLE_CAPTURE_AUTO},
    {LIB3A_AE_MODE_NIGHT,AETABLE_MODE_INDEX1},
    {LIB3A_AE_MODE_ACTION,AETABLE_MODE_INDEX2},
    {LIB3A_AE_MODE_BEACH,AETABLE_CAPTURE_AUTO},
    {LIB3A_AE_MODE_CANDLELIGHT,AETABLE_MODE_INDEX1},
    {LIB3A_AE_MODE_FIREWORKS,AETABLE_MODE_INDEX1},
    {LIB3A_AE_MODE_LANDSCAPE,AETABLE_CAPTURE_AUTO},
    {LIB3A_AE_MODE_PORTRAIT,AETABLE_CAPTURE_AUTO},
    {LIB3A_AE_MODE_NIGHT_PORTRAIT,AETABLE_MODE_INDEX1},
    {LIB3A_AE_MODE_PARTY,AETABLE_MODE_INDEX2},
    {LIB3A_AE_MODE_SNOW,AETABLE_CAPTURE_AUTO},
    {LIB3A_AE_MODE_SPORTS,AETABLE_MODE_INDEX2},
    {LIB3A_AE_MODE_STEADYPHOTO,AETABLE_CAPTURE_AUTO},
    {LIB3A_AE_MODE_SUNSET,AETABLE_CAPTURE_AUTO},
    {LIB3A_AE_MODE_THEATRE,AETABLE_MODE_INDEX1},
    {LIB3A_AE_MODE_ISO_ANTI_SHAKE,AETABLE_MODE_INDEX2},
    {LIB3A_AE_MODE_UNSUPPORTED,AETABLE_CAPTURE_AUTO},    //reserve for future
    {LIB3A_AE_MODE_UNSUPPORTED,AETABLE_CAPTURE_AUTO},    //reserve for future
    {LIB3A_AE_MODE_UNSUPPORTED,AETABLE_CAPTURE_AUTO},    //reserve for future
    {LIB3A_AE_MODE_UNSUPPORTED,AETABLE_CAPTURE_AUTO},    //reserve for future
    {LIB3A_AE_MODE_UNSUPPORTED,AETABLE_CAPTURE_AUTO},    //reserve for future
    {LIB3A_AE_MODE_UNSUPPORTED,AETABLE_CAPTURE_AUTO},    //reserve for future
    {LIB3A_AE_MODE_UNSUPPORTED,AETABLE_CAPTURE_AUTO},    //reserve for future
    {LIB3A_AE_MODE_UNSUPPORTED,AETABLE_CAPTURE_AUTO},    //reserve for future
    {LIB3A_AE_MODE_UNSUPPORTED,AETABLE_CAPTURE_AUTO},    //reserve for future
    {LIB3A_AE_MODE_UNSUPPORTED,AETABLE_CAPTURE_AUTO},    //reserve for future
    {LIB3A_AE_MODE_UNSUPPORTED,AETABLE_CAPTURE_AUTO},    //reserve for future
    {LIB3A_AE_MODE_UNSUPPORTED,AETABLE_CAPTURE_AUTO},    //reserve for future
    {LIB3A_AE_MODE_UNSUPPORTED,AETABLE_CAPTURE_AUTO},    //reserve for future
    {LIB3A_AE_MODE_UNSUPPORTED,AETABLE_CAPTURE_AUTO},    //reserve for future
};

static strAEPLineTable g_strAEPlineTable =
{
{
// PLINE Table
&g_AE_PreviewTable,
&g_AE_VideoTable,
&g_AE_VideoNightTable,
&g_AE_CaptureZSDTable,
&g_AE_CaptureTable,
&g_AE_CaptureISO100Table,
&g_AE_CaptureISO200Table,
&g_AE_CaptureISO400Table,
&g_AE_CaptureISO800Table,
&g_AE_CaptureISO1600Table,
&g_AE_ModeTable1,
&g_AE_ModeTable2,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
},
};

#endif


#if 0 //Save the P-line info to file for debug
MinGain,1560 
MaxGain,10240 
MiniISOGain,50 
GainStepUnitInTotalRange,128 
PreviewExposureLineUnit,31 
PreviewMaxFrameRate,30 
VideoExposureLineUnit,31 
VideoMaxFrameRate,30 
VideoToPreviewSensitivityRatio,1024 
CaptureExposureLineUnit,34 
CaptureMaxFrameRate,14 
CaptureToPreviewSensitivityRatio,1024 
Fno,28 

// Preview table -- Use preview sensor setting
//Index MiniExp1/T MaxExp1/T MinGain MaxGain
AETABLE_RPEVIEW_AUTO
1,6000,30,1560,1560
2,30,30,1560,3000
3,30,25,3000,3000
4,25,25,3000,3924
5,25,20,3924,3924
6,20,20,3924,5886
7,20,15,5886,5886
8,15,15,5886,6400
9,15,10,6400,6400
10,10,10,6400,7848
11,10,8,7848,7848
12,8,8,7848,8960
13,8,5,8960,8960
14,5,5,8960,10240
AETABLE_END

// Video table -- Use video sensor setting
//Index MiniExp1/T MaxExp1/T MinGain MaxGain
AETABLE_VIDEO
1,6000,30,1560,1560
2,30,30,1560,10240
AETABLE_END

// Video Night table -- Use video sensor setting
//Index MiniExp1/T MaxExp1/T MinGain MaxGain
AETABLE_VIDEO_NIGHT
1,6000,15,1560,1560
2,15,15,1560,10240
AETABLE_END

// Capture table -- Use capture sensor setting
//Index MiniExp1/T MaxExp1/T MinGain MaxGain
AETABLE_CAPTURE_ZSD
1,1000,30,1560,1560
2,30,30,1560,3000
3,30,20,3000,3000
4,20,20,3000,4500
5,20,10,4500,4500
6,10,10,4500,8192
7,10,5,8192,8192
AETABLE_END

// Capture ISO100 -- Use capture sensor setting
//Index MiniExp1/T MaxExp1/T MinGain MaxGain
AETABLE_CAPTURE_AUTO
1,6000,30,1560,1560
2,30,15,1560,1560
3,15,15,1560,2200
4,15,12,2200,2200
5,12,12,2200,3000
6,12,10,3000,3000
7,10,10,3000,4500
8,10,8,4500,4500
9,8,8,4500,8192
AETABLE_END

// Capture ISO200 -- Use capture sensor setting
//Index MiniExp1/T MaxExp1/T MinGain MaxGain
AETABLE_CAPTURE_ISO100
1,6000,30,1560,1560
2,30,10,1560,1560
AETABLE_END

// Capture ISO400 -- Use capture sensor setting
//Index MiniExp1/T MaxExp1/T MinGain MaxGain
AETABLE_CAPTURE_ISO200
1,6000,30,1560,1560
2,30,15,1560,1560
3,15,15,1560,2200
4,15,12,2200,2200
5,12,12,2200,3000
6,12,10,3000,3000
7,10,10,3000,3120
AETABLE_END

// Capture ISO800 -- Use capture sensor setting
//Index MiniExp1/T MaxExp1/T MinGain MaxGain
AETABLE_CAPTURE_ISO400
1,6000,30,1560,1560
2,30,20,1560,1560
3,20,20,1560,2200
4,20,15,2200,2200
5,15,15,2200,3000
6,15,12,3000,3000
7,12,12,3000,4500
8,12,10,4500,4500
9,10,10,4500,6240
10,10,8,6240,6240
AETABLE_END

// Capture ISO1600 -- Use capture sensor setting
//Index MiniExp1/T MaxExp1/T MinGain MaxGain
AETABLE_CAPTURE_ISO800
1,3000,30,1560,1560
2,30,20,1560,1560
3,20,20,1560,2200
4,20,15,2200,2200
5,15,15,2200,3000
6,15,12,3000,3000
7,12,12,3000,4500
8,12,10,4500,4500
9,10,10,4500,6000
10,10,8,6000,6000
11,8,8,6000,8192
12,8,5,8192,8192
13,5,5,8192,10240
AETABLE_END

// Table1 PLine -- Use capture sensor setting

// Table2 PLine -- Use capture sensor setting
//Index MiniExp1/T MaxExp1/T MinGain MaxGain
AETABLE_MODE_INDEX1
1,6000,30,1560,1560
2,30,15,1560,1560
3,15,15,1560,2200
4,15,12,2200,2200
5,12,12,2200,4500
6,12,10,4500,4500
7,10,10,4500,6000
8,10,8,6000,6000
9,8,8,6000,8000
10,8,5,8000,8000
11,5,5,8000,10240
AETABLE_END

// Table3 PLine -- Use capture sensor setting
//Index MiniExp1/T MaxExp1/T MinGain MaxGain
AETABLE_MODE_INDEX2
1,6000,30,1560,1560
2,30,30,1560,3000
3,30,20,3000,3000
4,20,20,3000,4500
5,20,15,4500,4500
6,15,15,4500,7500
7,15,13,7500,7500
8,13,13,7500,10240
AETABLE_END

// Table4 PLine -- Use capture sensor setting
//Index MiniExp1/T MaxExp1/T MinGain MaxGain
AETABLE_MODE_INDEX3
1,4,4,1962,1962
AETABLE_END

// Table5 PLine -- Use capture sensor setting

// Table6 PLine -- Use capture sensor setting

// Table7 PLine -- Use capture sensor setting

// Table8 PLine -- Use capture sensor setting

// Table9 PLine -- Use capture sensor setting

// Table10 PLine -- Use capture sensor setting

// Table11 PLine -- Use capture sensor setting

// Table12 PLine -- Use capture sensor setting

// Table13 PLine -- Use capture sensor setting

// Table14 PLine -- Use capture sensor setting

// Table15 PLine -- Use capture sensor setting

// Table16 PLine -- Use capture sensor setting

// Table17 PLine -- Use capture sensor setting

// Table18 PLine -- Use capture sensor setting

// Table19 PLine -- Use capture sensor setting

// Table20 PLine -- Use capture sensor setting

// Table21 PLine -- Use capture sensor setting

// Table22 PLine -- Use capture sensor setting

// Table23 PLine -- Use capture sensor setting

// Table24 PLine -- Use capture sensor setting

// Table25 PLine -- Use capture sensor setting

// Table26 PLine -- Use capture sensor setting

// Table27 PLine -- Use capture sensor setting

// Table28 PLine -- Use capture sensor setting

// Table29 PLine -- Use capture sensor setting

// Table30 PLine -- Use capture sensor setting

// Table31 PLine -- Use capture sensor setting

AE_MODE_PREVIEW,AETABLE_RPEVIEW_AUTO 
AE_MODE_VIDEO,AETABLE_VIDEO 
AE_MODE_VIDEO_NIGHT,AETABLE_VIDEO_NIGHT 
AE_MODE_CAPTURE_ZSD,AETABLE_CAPTURE_ZSD 
AE_MODE_CAPTURE,AETABLE_CAPTURE_AUTO 
AE_MODE_CAPTURE_ISO100,AETABLE_CAPTURE_ISO100 
AE_MODE_CAPTURE_ISO200,AETABLE_CAPTURE_ISO200 
AE_MODE_CAPTURE_ISO400,AETABLE_CAPTURE_ISO400 
AE_MODE_CAPTURE_ISO800,AETABLE_CAPTURE_ISO800 
AE_MODE_CAPTURE_ISO1600,AETABLE_CAPTURE_ISO800 
AE_MODE_AUTO,AETABLE_CAPTURE_AUTO 
AE_MODE_NIGHT,AETABLE_MODE_INDEX1 
AE_MODE_ACTION,AETABLE_MODE_INDEX2 
AE_MODE_BEACH,AETABLE_CAPTURE_AUTO 
AE_MODE_CANDLELIGHT,AETABLE_MODE_INDEX1 
AE_MODE_FIREWORKS,AETABLE_MODE_INDEX1 
AE_MODE_LANDSCAPE,AETABLE_CAPTURE_AUTO 
AE_MODE_PORTRAIT,AETABLE_CAPTURE_AUTO 
AE_MODE_NIGHT_PORTRAIT,AETABLE_MODE_INDEX1 
AE_MODE_PARTY,AETABLE_MODE_INDEX2 
AE_MODE_SNOW,AETABLE_CAPTURE_AUTO 
AE_MODE_SPORTS,AETABLE_MODE_INDEX2 
AE_MODE_STEADYPHOTO,AETABLE_CAPTURE_AUTO 
AE_MODE_SUNSET,AETABLE_CAPTURE_AUTO 
AE_MODE_THEATRE,AETABLE_MODE_INDEX1 
AE_MODE_ISO_ANTI_SHAKE,AETABLE_MODE_INDEX2 
#endif
/* Copyright Statement:
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein
 * is confidential and proprietary to MediaTek Inc. and/or its licensors.
 * Without the prior written permission of MediaTek inc. and/or its licensors,
 * any reproduction, modification, use or disclosure of MediaTek Software,
 * and information contained herein, in whole or in part, shall be strictly prohibited.
 */
/* MediaTek Inc. (C) 2010. All rights reserved.
 *
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
 * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
 * AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
 * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
 * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
 * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
 * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
 * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
 * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
 * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
 * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
 * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
 * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
 * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 *
 * The following software/firmware and/or related documentation ("MediaTek Software")
 * have been modified by MediaTek Inc. All revisions are subject to any receiver's
 * applicable license agreements with MediaTek Inc.
 */

/********************************************************************************************
 *     LEGAL DISCLAIMER
 *
 *     (Header of MediaTek Software/Firmware Release or Documentation)
 *
 *     BY OPENING OR USING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 *     THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE") RECEIVED
 *     FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON AN "AS-IS" BASIS
 *     ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES, EXPRESS OR IMPLIED,
 *     INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR
 *     A PARTICULAR PURPOSE OR NONINFRINGEMENT. NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY
 *     WHATSOEVER WITH RESPECT TO THE SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY,
 *     INCORPORATED IN, OR SUPPLIED WITH THE MEDIATEK SOFTWARE, AND BUYER AGREES TO LOOK
 *     ONLY TO SUCH THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. MEDIATEK SHALL ALSO
 *     NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE RELEASES MADE TO BUYER'S SPECIFICATION
 *     OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.
 *
 *     BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE LIABILITY WITH
 *     RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE, AT MEDIATEK'S OPTION,
TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE, OR REFUND ANY SOFTWARE LICENSE
 *     FEES OR SERVICE CHARGE PAID BY BUYER TO MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 *
 *     THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE WITH THE LAWS
 *     OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF LAWS PRINCIPLES.
 ************************************************************************************************/

#ifndef _CAMERA_INFO_A5141_H
#define _CAMERA_INFO_A5141_H

/********************************************************************************/
#define SENSOR_ID                           A5141_SENSOR_ID
#define SENSOR_DRVNAME                      SENSOR_DRVNAME_A5141_RAW
#define INCLUDE_FILENAME_ISP_REGS_PARAM     "camera_isp_regs_a5141_mt6575.h"
#define INCLUDE_FILENAME_ISP_PCA_PARAM      "camera_isp_pca_a5141_mt6575.h"

/*******************************************************************************
*   
********************************************************************************/

#if defined(ISP_SUPPORT)


#define A5141_CAMERA_AUTO_DSC CAM_AUTO_DSC
#define A5141_CAMERA_PORTRAIT CAM_PORTRAIT
#define A5141_CAMERA_LANDSCAPE CAM_LANDSCAPE
#define A5141_CAMERA_SPORT CAM_SPORT
#define A5141_CAMERA_FLOWER CAM_FLOWER
#define A5141_CAMERA_NIGHTSCENE CAM_NIGHTSCENE
#define A5141_CAMERA_DOCUMENT CAM_DOCUMENT
#define A5141_CAMERA_ISO_ANTI_HAND_SHAKE CAM_ISO_ANTI_HAND_SHAKE
#define A5141_CAMERA_ISO100 CAM_ISO100
#define A5141_CAMERA_ISO200 CAM_ISO200
#define A5141_CAMERA_ISO400 CAM_ISO400
#define A5141_CAMERA_ISO800 CAM_ISO800
#define A5141_CAMERA_ISO1600 CAM_ISO1600
#define A5141_CAMERA_VIDEO_AUTO CAM_VIDEO_AUTO
#define A5141_CAMERA_VIDEO_NIGHT CAM_VIDEO_NIGHT
#define A5141_CAMERA_NO_OF_SCENE_MODE CAM_NO_OF_SCENE_MODE

#endif
#endif
/********************************************************************************************
 *     LEGAL DISCLAIMER
 *
 *     (Header of MediaTek Software/Firmware Release or Documentation)
 *
 *     BY OPENING OR USING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 *     THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE") RECEIVED
 *     FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON AN "AS-IS" BASIS
 *     ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES, EXPRESS OR IMPLIED,
 *     INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR
 *     A PARTICULAR PURPOSE OR NONINFRINGEMENT. NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY
 *     WHATSOEVER WITH RESPECT TO THE SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY,
 *     INCORPORATED IN, OR SUPPLIED WITH THE MEDIATEK SOFTWARE, AND BUYER AGREES TO LOOK
 *     ONLY TO SUCH THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. MEDIATEK SHALL ALSO
 *     NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE RELEASES MADE TO BUYER'S SPECIFICATION
 *     OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.
 *
 *     BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE LIABILITY WITH
 *     RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE, AT MEDIATEK'S OPTION,
 *     TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE, OR REFUND ANY SOFTWARE LICENSE
 *     FEES OR SERVICE CHARGE PAID BY BUYER TO MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 *
 *     THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE WITH THE LAWS
 *     OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF LAWS PRINCIPLES.
 ************************************************************************************************/

/*******************************************************************************
*   ISP_NVRAM_REGISTER_STRUCT
********************************************************************************/
Idx:{//ISP_NVRAM_REG_INDEX_STRUCT
    Shading     :0,
    OB          :0, 
    DM          :1,
    DP          :0,
    NR1         :3,
    NR2         :3,
    EE          :3,
    Saturation  :3,
    Contrast    :4,
    Hue         :1,
    CCM         :2,
    Gamma       :0
},
Shading:{
    {set:{//00 Preview
        0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x10000000,0x90409030,0xC201B200,0x00420033,0x20202020,
    }},
    {set:{//01 Capture
        0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x10000000,0xE055E040,0x00000000,0x005C0043,0x20202020,
    }},
    {set:{//02
        0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
    }}
},
OB:{
    {set:{//00
        0xA9A9A9A9
    }}
        },
DM:{
    {set:{//00 Preview ISO100/ISO200/ISO400
        0x00000100, 0x0A800810, 0x0020083F, 
    }},
    {set:{//01 Preview ISO800
        0x00000100, 0x0A800810, 0x0020083F, 
    }},
    {set:{//02 Preview ISO1600
        0x00000100, 0x0A800810, 0x0020083F, 
    }},
    {set:{//03 Capture ISO100/ISO200
        0x00000100, 0x0A800810, 0x0020083F, 
    }},
    {set:{//04 Capture ISO400
        0x00000100, 0x0A800810, 0x0020083F, 
    }},
    {set:{//05 Capture ISO800
        0x00000100, 0x0A800810, 0x0020083F, 
    }},
    {set:{//06 Capture ISO1600
        0x00000100, 0x0A800810, 0x0020083F, 
    }}
            },
DP:{// Auto Defect
    {set:{//00
        0x000006E7, 0x50285050, 0x006003A0, 0x00300050, 0x000009B7, 
    }},
    {set:{//01
        0x000006E7, 0x50285050, 0x006003A0, 0x00300050, 0x000009B7, 
    }},
    {set:{//02
        0x000006E7, 0x50285050, 0x006003A0, 0x00300050, 0x000009B7, 
    }},
    {set:{//03 Disable (Do not modify me)
        0x00000000, 0x50285050, 0x006003A0, 0x00300050, 0x000008B7, 
    }}
        },
NR1:{
    {set:{//00 Preview ISO100 
        0x000002E7, 0x00001140, 0x092328C8, 0x000008AC, 0x05050507, 0x090B0C0C, 0x05050507, 
        0x090B0C0C, 0x05050507, 0x090B0C0C, 0x05050507, 0x090B0C0C, 0x0206090D, 0x10101010, 
    }},
    {set:{//01 Preview ISO200
        0x000002E7, 0x00001140, 0x092328C8, 0x000008AC, 0x05050507, 0x090B0C0C, 0x05050507, 
        0x090B0C0C, 0x05050507, 0x090B0C0C, 0x05050507, 0x090B0C0C, 0x0206090D, 0x10101010, 
    }},
    {set:{//02 Preview ISO400
        0x000002E7, 0x00001140, 0x092528C8, 0x000008AC, 0x05050507, 0x090B0C0C, 0x05050507, 
        0x090B0C0C, 0x05050507, 0x090B0C0C, 0x05050507, 0x090B0C0C, 0x0206090D, 0x10101010, 
    }},
    {set:{//03 Preview ISO800
        0x000002E7, 0x00001140, 0x092C28C8, 0x000008AC, 0x05050507, 0x090B0C0C, 0x05050507, 
        0x090B0C0C, 0x05050507, 0x090B0C0C, 0x05050507, 0x090B0C0C, 0x0206090D, 0x10101010, 
    }},
    {set:{//04 Preview ISO1600
        0x000002E7, 0x00001140, 0x092D28C8, 0x000008AC, 0x05050507, 0x090B0C0C, 0x05050507, 
        0x090B0C0C, 0x05050507, 0x090B0C0C, 0x05050507, 0x090B0C0C, 0x0206090D, 0x10101010, 
    }},
    {set:{//05 Capture ISO100
        0x000002E7, 0x00001140, 0x092328C8, 0x000008AC, 0x0A0A0505, 0x06080808, 0x0A0A0505, 
        0x06080808, 0x0A0A0505, 0x06080808, 0x0A0A0505, 0x06080808, 0x0206090D, 0x10101010, 
    }},
    {set:{//06 Capture ISO200
        0x000002E7, 0x00001140, 0x092328C8, 0x000008AC, 0x0A0A0505, 0x06080808, 0x0A0A0505, 
        0x06080808, 0x0A0A0505, 0x06080808, 0x0A0A0505, 0x06080808, 0x0206090D, 0x10101010, 
    }},
    {set:{//07 Capture ISO400
        0x000002E7, 0x00001140, 0x092528C8, 0x000008AC, 0x05050507, 0x090B0C0C, 0x05050507, 
        0x090B0C0C, 0x05050507, 0x090B0C0C, 0x05050507, 0x090B0C0C, 0x0206090D, 0x10101010, 
    }},
    {set:{//08 Capture ISO800
        0x000002E7, 0x00001140, 0x092C28C8, 0x000008AC, 0x0A0A0A0E, 0x12161818, 0x0A0A0A0E, 
        0x12161818, 0x0A0A0A0E, 0x12161818, 0x0A0A0A0E, 0x12161818, 0x0206090D, 0x10101010, 
    }},
    {set:{//09 Capture IS1600
        0x000002E7, 0x00001140, 0x092D28C8, 0x000008AC, 0x0A0A0A0E, 0x12161818, 0x0A0A0A0E, 
        0x12161818, 0x0A0A0A0E, 0x12161818, 0x0A0A0A0E, 0x12161818, 0x0206090D, 0x10101010, 
    }},
    {set:{//10 Disable (Do not modify me)
        0x000000C0, 0x000011A0, 0x094428A0, 0x000007AF, 0x03050709, 0x0B0D0F11, 0x03050709, 
        0x0B0D0F11, 0x03050709, 0x0B0D0F11, 0x03050709, 0x0B0D0F11, 0x0406090D, 0x10101010, 
    }}
        },
NR2:{
    {set:{//00 Preview ISO100
        0x00200003, 0x00191414, 0x00D27788, 0x20406090, 0x305888C8, 0x021072CA, 0x08080808, 0x10101010, 0x01AF5B48, 0x0000056B, 0x0305080C, 
    }},                                                                                                                                   
    {set:{//01 Preview ISO200                                                                                                             
        0x00200003, 0x00191414, 0x00D27788, 0x306090D0, 0x4080C0F0, 0x021072CA, 0x08080808, 0x10101010, 0x01AF5B48, 0x0000056B, 0x04080C11, 
    }},                                                                                                                                   
    {set:{//02 Preview ISO400                                                                                                             
        0x00200003, 0x00191414, 0x00D27768, 0xF0F0F0F0, 0xF0F0F0F0, 0x01307A8E, 0x08080808, 0x10101010, 0x01AF5B48, 0x0000056B, 0x070D131B, 
    }},                                                                                                                                        
    {set:{//03 Preview ISO800                                                                                                             
        0x00200003, 0x00191414, 0x00D27788, 0xF0F0F0FC, 0xF0F4F4F4, 0x01707A8E, 0x08080808, 0x10101010, 0x01AF5B48, 0x0000056B, 0x080F151F, 
    }},                                                                                                                                   
    {set:{//04 Preview ISO1600                                                                                                            
        0x00200003, 0x00191414, 0x00D27788, 0xF0F0F0FC, 0xF0F4FCFC, 0x01707A8E, 0x08080808, 0x10101010, 0x01AF5B48, 0x0000056B, 0x080F151F, 
    }},
    {set:{//05 Capture Mode0 ISO100
        0x00200003, 0x00191414, 0x00D27788, 0x20406090, 0x305888C8, 0x021072CA, 0x08080808, 0x10101010, 0x01AF5B48, 0x0000056B, 0x0305080C, 
    }},                                                                                                                                   
    {set:{//06 Capture Mode0 ISO200
        0x00200003, 0x00191414, 0x00D27788, 0x306090D0, 0x4080C0F0, 0x021072CA, 0x08080808, 0x10101010, 0x01AF5B48, 0x0000056B, 0x04080C11, 
    }},                                                                                                                                   
    {set:{//07 Capture Mode0 ISO400
        0x00200003, 0x00191414, 0x00D27788, 0xF0F0F0F0, 0xF0F0F0F0, 0x01307A8E, 0x08080808, 0x10101010, 0x01AF5B48, 0x0000056B, 0x070D131B, 
    }},                                                                                                                                   
    {set:{//08 Capture Mode0 ISO800
        0x00200003, 0x00191414, 0x00D27788, 0xF0F0F0FC, 0xF0F4F4F4, 0x01707A8E, 0x08080808, 0x10101010, 0x01AF5B48, 0x0000056B, 0x080F151F, 
    }},                                                                                                                                   
    {set:{//09 Capture Mode0 ISO1600                                                                                                      
        0x00200003, 0x00191414, 0x00D27788, 0xF0F0F0FC, 0xF0F4FCFC, 0x01707A8E, 0x08080808, 0x10101010, 0x01AF5B48, 0x0000056B, 0x080F151F, 
    }}, 
    {set:{//10 Capture Mode1 ISO100
        0x00210003, 0x00191414, 0x00D27788, 0x20406090, 0x305888C8, 0x021072CA, 0x08080808, 0x10101010, 0x01AF5B48, 0x0000056B, 0x0305080C, 
    }},
    {set:{//11 Capture Mode1 ISO200
        0x00210003, 0x00191414, 0x00D27788, 0x306090D0, 0x4080C0F0, 0x021072CA, 0x08080808, 0x10101010, 0x01AF5B48, 0x0000056B, 0x04080C11, 
    }},
    {set:{//12 Capture Mode1 ISO400
        0x00210003, 0x00191414, 0x00D27788, 0xF0F0F0F0, 0xF0F0F0F0, 0x01307A8E, 0x08080808, 0x10101010, 0x01AF5B48, 0x0000056B, 0x070D131B, 
    }},
    {set:{//13 Capture Mode1 ISO800
        0x00210003, 0x00191414, 0x00D27788, 0xF0F0F0FC, 0xF0F4F4F4, 0x01707A8E, 0x08080808, 0x10101010, 0x01AF5B48, 0x0000056B, 0x080F151F, 
    }},
    {set:{//14 Capture Mode1 ISO1600
        0x00210003, 0x00191414, 0x00D27788, 0xF0F0F0FC, 0xF0F4FCFC, 0x01707A8E, 0x08080808, 0x10101010, 0x01AF5B48, 0x0000056B, 0x080F151F, 
    }},
    {set:{//15 Disable (Do not modify me)
        0x00000000, 0x0001FF01, 0x00523264, 0x04090B0F, 0x050A0B10, 0x02107294, 0x08101820, 0x10080604, 0x01AF5B43, 0x0000056B, 0x0306070A, 
    }}
},
EE:{// EE
    {set:{//00 Preview ISO100 (middle sharpness)
        0x0000002C, 0x0037372D, 0x0000000D, 0x0244341C, 0x03C00182, 0x033100AA, 0xFFFFFD0D, 
    }},
    {set:{//01 Preview ISO200 (middle sharpness)
        0x0000002B, 0x0037372D, 0x0000000F, 0x021F311E, 0x03B60282, 0x035C00AA, 0xFFFFFD0D, 
    }},
    {set:{//02 Preview ISO400 (middle sharpness)
        0x00000028, 0x0037372D, 0x0000000F, 0x02E72921, 0x039801A3, 0x034800CB, 0xFFFFFD0D, 
    }},
    {set:{//03 Preview ISO800 (middle sharpness)
        0x00000026, 0x0037372D, 0x000F0063, 0x00ED0495, 0x013401BD, 0x015200E5, 0xFFFFFB0D, 
    }},
    {set:{//04 Preview ISO1600 (middle sharpness)
        0x00000026, 0x007F3721, 0x000E0068, 0x00DB049A, 0x011C01C2, 0x013800EA, 0xFFFFFB0D, 
    }},
    {set:{//05 Capture ISO100 (middle sharpness)
        0x0000002A, 0x0037372D, 0x00320128, 0x01D80A5A, 0x02E70482, 0x033101AA, 0xFFFFFD0D, 
    }},
    {set:{//06 Capture ISO200 (middle sharpness)
        0x0000002A, 0x0037372D, 0x00320128, 0x01D80A5A, 0x02E70482, 0x033101AA, 0xFFFFFD0D, 
    }},
    {set:{//07 Capture ISO400 (middle sharpness)
        0x00000028, 0x0037372D, 0x00120049, 0x0145067B, 0x01A602A3, 0x01D001CB, 0xFFFFFD0D, 
    }},
    {set:{//08 Capture ISO800 (middle sharpness)
        0x00000026, 0x0037372D, 0x000F0063, 0x00ED0495, 0x013401BD, 0x015200E5, 0xFFFFFB0D, 
    }},
    {set:{//09 Capture ISO1600 (middle sharpness)
        0x00000026, 0x007F3721, 0x000E0068, 0x00DB049A, 0x011C01C2, 0x013800EA, 0xFFFFFB0D, 
    }},
    {set:{//10  no one uses this, this is Min EE (low sharpness)
        0x00000024, 0x0037372D, 0x00050023, 0x012C113C, 0x020001D0, 0x020000E7, 0xFFFF0005, 
    }},
    {set:{//11 no one uses this, this is Max EE (high sharpness)
        0x0000002F, 0x00373721, 0x000A0023, 0x03203937, 0x03FF01D0, 0x03FF00E7, 0xFFFF0005, 
    }}
            },
Saturation:{
    {set:{//00 (middle saturation)
        0x00010709, 0x1020E0F0, 0x20455045, 0x20000000, 0xFF00FF00, 0x00000000, 0x00000000, 0x001E140A, 
    }},
    {set:{//01 (middle saturation)
        0x00010709, 0x1020E0F0, 0x20455045, 0x20000000, 0xFF00FF00, 0x00000000, 0x00000000, 0x001E140A, 
    }},
    {set:{//02 (middle saturation)
        0x00010709, 0x1020E0F0, 0x20404540, 0x20000000, 0xFF00FF00, 0x00000000, 0x00000000, 0x001E140A, 
    }},
    {set:{//03 (middle saturation)
        0x00010709, 0x1020E0F0, 0x1C354035, 0x1C000000, 0xFF00FF00, 0x00000000, 0x00000000, 0x001E140A, 
    }},
    {set:{//04 (middle saturation)
        0x00010709, 0x2850A0FF, 0x1A303530, 0x1A000000, 0xFF00FF00, 0x40302000, 0x00000000, 0x00783C1E, 
    }},
    {set:{//05 no one uses this, this is Min Sat. (low saturation)
        0x00010709, 0x2850A0FF, 0x1A303230, 0x1A000000, 0xFF00FF00, 0x40302000, 0x00000000, 0x00783C1E, 
    }},
    {set:{//06 no one uses this, this is Max Sat. (high saturation)
        0x00010709, 0x1020E0F0, 0x20636863, 0x20000000, 0xFF00FF00, 0x00000000, 0x00000000, 0x001E140A, 
    }}
            },
Contrast:{
    //..........................................................................
    // low brightness
    {set:{//00 //  low contrast
        0x00000008, 0x00F00000, 0xFF00003B, 
    }},
    {set:{//01 //  middle contrast
        0x00000008, 0x00F00000, 0xFF000040, 
    }},
    {set:{//02 //  high contrast
        0x00000008, 0x00F00000, 0xFF000045, 
    }},
    //..........................................................................
    // middle brightness
    {set:{//03 //  low contrast
        0x00000008, 0x00000000, 0xFF00003B, 
    }},
    {set:{//04 //  middle contrast
        0x00000008, 0x00000000, 0xFF000040, 
    }},
    {set:{//05 //  high contrast
        0x00000008, 0x00000000, 0xFF000045, 
    }},
    //..........................................................................
    // high brightness
    {set:{//06 //  low contrast
        0x00000008, 0x000A0000, 0xFF00003B, 
    }},
    {set:{//07 //  middle contrast
        0x00000008, 0x000A0000, 0xFF000040, 
    }},
    {set:{//08 //  high contrast
        0x00000008, 0x000A0000, 0xFF000045, 
    }}
            },
Hue:{
    {set:{//00 // low hue
        0x00000002, 0x808062AE, 
    }},
    {set:{//01 // middle hue
        0x00000002, 0x00007F01, 
    }},
    {set:{//02 // high hue
        0x00000002, 0x80806252, 
    }}
},
CCM:{
    {set:{//00
        0x017D0471, 0x040C0449, 0x010B003E, 0x041F0461, 0x01800000, 
    }},
    {set:{//01
        0x01E104E2, 0x0001045F, 0x01180047, 0x042C045F, 0x018B0000, 
    }},
    {set:{//02
        0x01B5049B, 0x041A043B, 0x0130000B, 0x04020456, 0x01580000, 
    }}
            },
Gamma:{
    {set:{//00
        0x45231106, 0x9082725E, 0xC5B7A69B, 0xEBE2DAD1, 0xFEFEFBF6, 
    }},
            }
/* Copyright Statement:
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein
 * is confidential and proprietary to MediaTek Inc. and/or its licensors.
 * Without the prior written permission of MediaTek inc. and/or its licensors,
 * any reproduction, modification, use or disclosure of MediaTek Software,
 * and information contained herein, in whole or in part, shall be strictly prohibited.
 */
/* MediaTek Inc. (C) 2010. All rights reserved. 
 *
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
 * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
 * AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
 * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
 * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
 * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
 * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
 * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
 * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
 * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
 * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
 * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
 * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
 * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 *
 * The following software/firmware and/or related documentation ("MediaTek Software")
 * have been modified by MediaTek Inc. All revisions are subject to any receiver's
 * applicable license agreements with MediaTek Inc. 
 */

/********************************************************************************************
 *     LEGAL DISCLAIMER
 *
 *     (Header of MediaTek Software/Firmware Release or Documentation)
 *
 *     BY OPENING OR USING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 *     THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE") RECEIVED
 *     FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON AN "AS-IS" BASIS
 *     ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES, EXPRESS OR IMPLIED,
 *     INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR
 *     A PARTICULAR PURPOSE OR NONINFRINGEMENT. NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY
 *     WHATSOEVER WITH RESPECT TO THE SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY,
 *     INCORPORATED IN, OR SUPPLIED WITH THE MEDIATEK SOFTWARE, AND BUYER AGREES TO LOOK
 *     ONLY TO SUCH THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. MEDIATEK SHALL ALSO
 *     NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE RELEASES MADE TO BUYER'S SPECIFICATION
 *     OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.
 *
 *     BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE LIABILITY WITH
 *     RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE, AT MEDIATEK'S OPTION,
TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE, OR REFUND ANY SOFTWARE LICENSE
 *     FEES OR SERVICE CHARGE PAID BY BUYER TO MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 *
 *     THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE WITH THE LAWS
 *     OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF LAWS PRINCIPLES.
 ************************************************************************************************/
#if defined(MT6575) || defined(MT6577)
#include <utils/Log.h>
#include <fcntl.h>
#include <math.h>

//#include "msdk_nvram_camera_exp.h"
//#include "msdk_sensor_exp.h"
#include "camera_custom_nvram.h"
#include "camera_custom_sensor.h"
#include "image_sensor.h"
#include "kd_imgsensor_define.h"
#include "camera_AE_PLineTable_a5141.h"
#include "aaa_tuning_custom.h"
#include "camera_info_a5141_mt6575.h"
/**************************************************************************************************************
*
**************************************************************************************************************/
namespace
{


const NVRAM_CAMERA_DEFECT_STRUCT CAMERA_DEFECT_DEFAULT_VALUE =
      {{ NVRAM_CAMERA_DEFECT_FILE_VERSION,SENSOR_ID,0,0,{0},{0},{0} }};

const NVRAM_CAMERA_SHADING_STRUCT CAMERA_SHADING_DEFAULT_VALUE =
{
    {
        NVRAM_CAMERA_SHADING_FILE_VERSION, 
        SENSOR_ID, 
        1600, //1278x954 : 10x10 blocks : 10*10*16 (INT32) for each color temperature, support 1 CCT
        4096,//2548x1904 : 16x16 blocks : 16*16*16 (INT32) for each color temperature, support 1 CCT
        465,//1278x954 : (Byte) for each color temperature, support 3 CCT
        675,//2548x1904 : (Byte) for each color temperature, support 3 CCT
        {//preview
            {
                0x20180a06, 0x20900000, 0x00008c00, 0x12989646,
                0x20400604, 0x20800000, 0x00004800, 0x11c86642,
                0x20200a03, 0x20b00000, 0x00003000, 0x11c85644,
                0x00480a07, 0x20900000, 0x0000a400, 0x10888a44,
                0x00d00c06, 0x20c00211, 0x00003204, 0x10585e48,
                0x00f00806, 0x2080020d, 0x0000120c, 0x0fa84a48,
                0x00c00c04, 0x2090020a, 0x00000607, 0x0fa84647,
                0x00400807, 0x20b00216, 0x00003c0b, 0x0e78463f,
                0x20a00202, 0x20900001, 0x00080424, 0x0e485a38,
                0x20500a02, 0x20600005, 0x00081021, 0x0d784e3d,
                0x20600a01, 0x20600003, 0x0008101e, 0x0d884e3b,
                0x20401002, 0x20900000, 0x00082416, 0x0cb8422e,
                0x00400c06, 0x20900205, 0x00082006, 0x0ce85e23,
                0x20180802, 0x20400202, 0x00000c13, 0x0c085223,
                0x00380401, 0x20400201, 0x0000080e, 0x0c085225,
                0x00180601, 0x20400005, 0x0000040a, 0x0b88521f,
                0x20181209, 0x2060000e, 0x00001c12, 0x0c086e16,
                0x00180a04, 0x20600003, 0x00001010, 0x0b284e12,
                0x20280a04, 0x20600003, 0x00001417, 0x0b284e13,
                0x00080a02, 0x20500002, 0x0000200c, 0x0ab84a14,
                0x00001407, 0x20a0020d, 0x0008040f, 0x0b985205,
                0x20100c06, 0x20800208, 0x00081414, 0x0ae84400,
                0x20100c07, 0x20800209, 0x00081812, 0x0ae84402,
                0x00200800, 0x20700205, 0x0000040b, 0x0a583a08,
                0x00080603, 0x20500007, 0x0008080e, 0x0ba86009,
                0x00080605, 0x20500009, 0x00000011, 0x0b385413,
                0x00180e07, 0x2050000d, 0x00000c0e, 0x0b285412,
                0x20400804, 0x20500203, 0x00081c12, 0x0a484007,
                0x00280a01, 0x20600201, 0x0000180d, 0x0c285c17,
                0x00380404, 0x20600205, 0x00000c0f, 0x0c084c23,
                0x00400006, 0x20800209, 0x00000c11, 0x0bf84421,
                0x00680a07, 0x20400009, 0x00000c07, 0x0ab84c14,
                0x20700c02, 0x20800204, 0x00081013, 0x0d285427,
                0x21180606, 0x20700006, 0x00001019, 0x0d784838,
                0x21280e08, 0x20700008, 0x0000141d, 0x0d584438,
                0x20b00808, 0x2060020d, 0x00081419, 0x0b884024,
                0x00181601, 0x20600003, 0x00000a03, 0x0e885c30,
                0x00900404, 0x2090020c, 0x00080e1a, 0x0f48403a,
                0x00900405, 0x20a0020f, 0x0008121b, 0x0f48383c,
                0x00381604, 0x2030000c, 0x00000209, 0x0ce8542e,
                0x20780801, 0x01a81c00, 0x21c05000, 0x1148ce36,
                0x20881602, 0x01300800, 0x21904800, 0x10e89638,
                0x20681a02, 0x01701c00, 0x22204400, 0x10f89a3d,
                0x20481203, 0x01881800, 0x21c07c00, 0x0f58be30,
                0x01382206, 0x01802804, 0x22403614, 0x0f78a640,
                0x01580803, 0x00f01606, 0x21701619, 0x0f087645,
                0x01181802, 0x01102606, 0x21b02611, 0x0ef87a45,
                0x00b81405, 0x01401e09, 0x22102a0b, 0x0dc88636,
                0x20c00009, 0x0100020f, 0x21a01025, 0x0d788e38,
                0x20781205, 0x00c01404, 0x21201426, 0x0cc8723e,
                0x20780e02, 0x00b01400, 0x21101422, 0x0cd8723d,
                0x20281a06, 0x00f03408, 0x21b01015, 0x0c187a31,
                0x00a81209, 0x0100200c, 0x21a80801, 0x0c189225,
                0x00100c05, 0x00881a0a, 0x20c00811, 0x0b586a23,
                0x00400801, 0x00881206, 0x20d00c0d, 0x0b586a25,
                0x00000404, 0x00980e0b, 0x20d0240e, 0x0ad86e1f,
                0x20a01c0c, 0x00c83610, 0x21200c20, 0x0b189215,
                0x20200c01, 0x00b81403, 0x21381814, 0x0a887211,
                0x20601005, 0x00a81e02, 0x2118141a, 0x0a786e12,
                0x20201002, 0x00b81800, 0x2100000e, 0x0a186a11,
                0x0068260b, 0x01303815, 0x21f80802, 0x0ac89203,
                0x00481605, 0x00e02407, 0x2188080c, 0x0a387601,
                0x00681608, 0x00e0240c, 0x21880c08, 0x0a387400,
                0x00381602, 0x00e01c05, 0x21600007, 0x09c86606,
                0x20300803, 0x00a80a0d, 0x21002c15, 0x0ad88008,
                0x20500802, 0x00a80e06, 0x2100141a, 0x0a787012,
                0x20701407, 0x0098220c, 0x20e0141b, 0x0a787012,
                0x00080a02, 0x00a01602, 0x21000c0f, 0x09b85c05,
                0x00101406, 0x00c81e04, 0x2128140c, 0x0b588019,
                0x00700801, 0x00c80c00, 0x2138080a, 0x0b587024,
                0x00a80605, 0x00d00409, 0x21780808, 0x0b587023,
                0x20101006, 0x00781e07, 0x20b80410, 0x0a186014,
                0x2058120c, 0x0120200e, 0x2190000f, 0x0c588426,
                0x21700a02, 0x00e81002, 0x21600420, 0x0cc87439,
                0x21a01003, 0x00d82207, 0x21500c26, 0x0cb87039,
                0x20480609, 0x00c01c0b, 0x2118180d, 0x0af86423,
                0x00001807, 0x00d83a16, 0x21101400, 0x0db8802f,
                0x00d00401, 0x01000e04, 0x21a81a27, 0x0eb87439,
                0x00e00800, 0x01100c01, 0x21d8322a, 0x0ea8743a,
                0x20101c05, 0x00a83a10, 0x20a01002, 0x0c28682b,
                0x20602c00, 0x21683800, 0x03300000, 0x0f98a230,
                0x20a01c02, 0x20a83000, 0x02100c00, 0x0fa88631,
                0x20801201, 0x20a82c00, 0x02503000, 0x0fa89234,
                0x20703400, 0x21184800, 0x02c01000, 0x0dc89e26,
                0x00d01c00, 0x20b83c00, 0x02401611, 0x0e08a239,
                0x01880604, 0x20380805, 0x0140161f, 0x0df87e41,
                0x01301001, 0x20682603, 0x01a01e17, 0x0de87a3f,
                0x01000c02, 0x20481c01, 0x01a01214, 0x0c889630,
                0x20380400, 0x20400401, 0x01580416, 0x0c389636,
                0x20c00c02, 0x20482206, 0x01301829, 0x0bd8723c,
                0x20900a01, 0x20381400, 0x01100c22, 0x0be8723a,
                0x20980a05, 0x20181006, 0x0130341d, 0x0af8862b,
                0x00100401, 0x20581400, 0x01600c0d, 0x0ac89a24,
                0x00500002, 0x20100e01, 0x00b82006, 0x0a686e24,
                0x00600402, 0x20100603, 0x00b81407, 0x0a786e25,
                0x00400004, 0x20300608, 0x00f01003, 0x09f86a1b,
                0x00280e01, 0x20402402, 0x01181411, 0x09e89216,
                0x20180a02, 0x20101405, 0x00e81417, 0x09787e15,
                0x20180a02, 0x00001804, 0x00c81818, 0x09787a16,
                0x20180603, 0x20301404, 0x0108040e, 0x09386a12,
                0x20501402, 0x20683202, 0x01a02417, 0x09889a02,
                0x00000401, 0x20381601, 0x01201414, 0x09288000,
                0x20200401, 0x20281a01, 0x01201414, 0x09288001,
                0x00001003, 0x20481e05, 0x0150140c, 0x08d86a05,
                0x00080e02, 0x20101404, 0x00d00408, 0x09b8880e,
                0x20380601, 0x20100c01, 0x00d80413, 0x09787814,
                0x00080a01, 0x20101801, 0x00c80c0f, 0x09787412,
                0x20100202, 0x20180803, 0x00d0040d, 0x08e86408,
                0x00781001, 0x20402602, 0x01200008, 0x0a488016,
                0x00880401, 0x20200e01, 0x0108040a, 0x0a587823,
                0x00500400, 0x20380601, 0x01200810, 0x0a487c22,
                0x00580803, 0x20101a02, 0x00b81009, 0x09485c12,
                0x21000603, 0x20881401, 0x01b0201d, 0x0b388028,
                0x21900201, 0x20300801, 0x01380422, 0x0bb87839,
                0x21780801, 0x20201a01, 0x0118101e, 0x0bb87839,
                0x20c81606, 0x20301008, 0x01101c18, 0x0a186423,
                0x00700c03, 0x2070120a, 0x01683215, 0x0ca8742e,
                0x00e81000, 0x20401601, 0x0150022b, 0x0da87c37,
                0x00e81e01, 0x20302402, 0x01680629, 0x0d988037,
                0x00500004, 0x2080220c, 0x01581a0e, 0x0b585429,
                0x20583603, 0x00f05000, 0x20f02000, 0x0ec85e32,
                0x20981602, 0x00402400, 0x00200c00, 0x0ef84232,
                0x20900000, 0x00080400, 0x00800000, 0x0ef83a31,
                0x20683a03, 0x00905400, 0x20702800, 0x0d085226,
                0x00d80803, 0x00201a09, 0x00400e10, 0x0d28523a,
                0x01400802, 0x20181205, 0x00b0121a, 0x0d483e3f,
                0x01480601, 0x00100800, 0x0078061a, 0x0d483a3e,
                0x01200002, 0x20500609, 0x00e02213, 0x0bb84630,
                0x20300e01, 0x00080c00, 0x00a80c17, 0x0b485a37,
                0x20a00000, 0x00000800, 0x00781423, 0x0b383e3b,
                0x20a00401, 0x00000202, 0x00980c22, 0x0b383e3a,
                0x20d01403, 0x20582603, 0x00f00423, 0x0a384227,
                0x00200403, 0x00380601, 0x0078100d, 0x09e85e25,
                0x00700000, 0x00000801, 0x00981006, 0x09b84627,
                0x00880400, 0x00100c02, 0x00881004, 0x09c84627,
                0x00880602, 0x00100806, 0x00600205, 0x09484218,
                0x00180604, 0x00400008, 0x00600813, 0x08f86215,
                0x20380602, 0x00080402, 0x00b0081b, 0x08b84a16,
                0x20380603, 0x00000002, 0x00b0081c, 0x08c84a17,
                0x20480400, 0x20100601, 0x00801812, 0x08983a11,
                0x20380803, 0x00300e05, 0x00700c15, 0x08985a01,
                0x00100403, 0x20180a04, 0x00b80412, 0x08684401,
                0x20100805, 0x20180a06, 0x00b80813, 0x08684401,
                0x00380601, 0x20200e02, 0x00800407, 0x08483204,
                0x20200a01, 0x00180c03, 0x00a00c0c, 0x08d8580f,
                0x20480602, 0x00000005, 0x00900015, 0x08b84c14,
                0x00080604, 0x00000408, 0x00900011, 0x08b84c13,
                0x20300804, 0x20380e05, 0x00c80810, 0x08483007,
                0x00800603, 0x00380c01, 0x00701c06, 0x09884c18,
                0x00980402, 0x00000202, 0x00900c09, 0x09a84423,
                0x00580803, 0x20100a05, 0x00a00c0f, 0x09984423,
                0x00800206, 0x20100008, 0x00800407, 0x08b83812,
                0x21400805, 0x00480e07, 0x0040001e, 0x0a78442a,
                0x21980a03, 0x20100403, 0x00900c23, 0x0b084039,
                0x21680604, 0x20300404, 0x00c00c1e, 0x0af84039,
                0x21301407, 0x20182e0a, 0x0080101f, 0x09883026,
                0x00a81e03, 0x00603809, 0x00081e1f, 0x0bf8482c,
                0x00f00c02, 0x20381a06, 0x00b00a2c, 0x0cf83c38,
                0x00d01803, 0x20482e08, 0x00c01227, 0x0ce83c38,
                0x00981204, 0x0040200b, 0x2038161a, 0x0ae82c2b,
                0x20802000, 0x20784800, 0x01d01800, 0x0e18422a,
                0x20b00800, 0x20281c00, 0x00e01000, 0x0e88222e,
                0x20900201, 0x00100400, 0x00800400, 0x0ea81a31,
                0x20902002, 0x20285000, 0x01301c00, 0x0c683e1e,
                0x01080401, 0x00180401, 0x00b00219, 0x0ca83237,
                0x01600400, 0x00100400, 0x00780a20, 0x0cf81a3e,
                0x01300402, 0x00180a03, 0x0098061a, 0x0cf81a3f,
                0x01480e02, 0x00700805, 0x2010061b, 0x0b582e2b,
                0x20480a02, 0x00001803, 0x00980817, 0x0ac83238,
                0x20a80800, 0x00200800, 0x00880423, 0x0ad81e3c,
                0x20880a01, 0x00200c02, 0x00780c20, 0x0ae81e3c,
                0x20a80c00, 0x00401e01, 0x00000020, 0x09d82629,
                0x00580403, 0x20200e04, 0x00f0000b, 0x09583227,
                0x00880601, 0x00000401, 0x00a00406, 0x09581e28,
                0x00880601, 0x00000000, 0x00a00407, 0x09682228,
                0x00500400, 0x00180800, 0x00801002, 0x08e82618,
                0x20400604, 0x20480405, 0x01200c1a, 0x08583214,
                0x20500801, 0x20180a02, 0x00b0001d, 0x08581e16,
                0x20600800, 0x20180e01, 0x00a0001e, 0x08581e16,
                0x20400400, 0x00280800, 0x00601012, 0x08481e0e,
                0x20100004, 0x20380a06, 0x01100c10, 0x08182801,
                0x00480400, 0x00100800, 0x00880c0e, 0x08082000,
                0x00480801, 0x00100c00, 0x00880c0d, 0x08082000,
                0x00280601, 0x00300000, 0x00300c06, 0x08081a03,
                0x20280603, 0x20200806, 0x00e0000e, 0x08582810,
                0x20600400, 0x00080801, 0x00a0001a, 0x08582414,
                0x20500602, 0x20180c02, 0x00b00419, 0x08482413,
                0x00180402, 0x00200e02, 0x0048080b, 0x08081406,
                0x00500400, 0x20300202, 0x01001007, 0x0908201b,
                0x00a00400, 0x00180800, 0x00800407, 0x09382424,
                0x00800802, 0x00181203, 0x0070040b, 0x09382024,
                0x00200602, 0x00180403, 0x0060040f, 0x08681813,
                0x20e00401, 0x20200603, 0x01080c16, 0x0a181c29,
                0x21c00800, 0x00281000, 0x00600426, 0x0aa8243a,
                0x21a00601, 0x00380c02, 0x00480422, 0x0a98203a,
                0x20c00002, 0x00201603, 0x00581015, 0x09481425,
                0x00700800, 0x20182001, 0x01101216, 0x0b78242c,
                0x01180800, 0x00401000, 0x00281232, 0x0c982437,
                0x01080c00, 0x00401e01, 0x0018162f, 0x0c982037,
                0x00500201, 0x00281003, 0x00a0120f, 0x0a98202a,
                0x20881800, 0x00301c00, 0x00781000, 0x0df00a2c,
                0x20b80401, 0x00200000, 0x00981000, 0x0e80122f,
                0x20a80400, 0x00000000, 0x00b00400, 0x0e900e31,
                0x20881401, 0x20201400, 0x00d81c00, 0x0c200620,
                0x01101002, 0x20381201, 0x00e81619, 0x0c700238,
                0x01780e02, 0x00200c04, 0x00a00220, 0x0ce00a3f,
                0x01500001, 0x20100601, 0x00b80a1d, 0x0ce0123f,
                0x01201400, 0x20681803, 0x01380e17, 0x0b180a2b,
                0x20600203, 0x00180405, 0x00a0041a, 0x0a980a37,
                0x20900c02, 0x20280e03, 0x00c00024, 0x0ac00e3d,
                0x20900800, 0x20180801, 0x00c80422, 0x0ac00e3d,
                0x20a00602, 0x20280803, 0x00d0081f, 0x09a80a27,
                0x00800802, 0x00280603, 0x00900808, 0x09200226,
                0x00600400, 0x00280802, 0x00980408, 0x09400a27,
                0x00700401, 0x00180a01, 0x00a80407, 0x09400a28,
                0x00580401, 0x00000202, 0x00a00c02, 0x08c00217,
                0x20781202, 0x00300402, 0x00701020, 0x08300213,
                0x20481201, 0x00201001, 0x0070041b, 0x08400a16,
                0x20581201, 0x00200c01, 0x0080001d, 0x08400a16,
                0x20480e01, 0x20100801, 0x00b00c12, 0x0820060d,
                0x00401002, 0x00080603, 0x00980809, 0x07f00802,
                0x00500c01, 0x20280a02, 0x00b8080e, 0x07f00a01,
                0x00501001, 0x20280e01, 0x00c8080d, 0x07f00a01,
                0x00101401, 0x20481202, 0x00c80405, 0x07f00a02,
                0x20500201, 0x00480403, 0x00700814, 0x08300411,
                0x20780601, 0x00100401, 0x0098041b, 0x08200413,
                0x20680a01, 0x00200401, 0x0090001b, 0x08200413,
                0x00300201, 0x00100402, 0x00900009, 0x07f00805,
                0x00580c01, 0x00400e01, 0x00601005, 0x08f00c1d,
                0x00a00000, 0x00000400, 0x00b80407, 0x09100024,
                0x00900000, 0x00000601, 0x00a80808, 0x09100424,
                0x00080802, 0x00100a01, 0x00a00812, 0x08500813,
                0x20d80e03, 0x00001403, 0x00900814, 0x0a001429,
                0x21c80800, 0x20100800, 0x00b80825, 0x0a70003a,
                0x21b80800, 0x00000400, 0x00b80424, 0x0a780439,
                0x20a80e03, 0x20201003, 0x00b00c12, 0x09300c25,
                0x00701002, 0x20280e07, 0x00d80615, 0x0b70182b,
                0x01100800, 0x20280400, 0x00d80a32, 0x0c680436,
                0x01000400, 0x20280401, 0x00d0022f, 0x0c680437,
                0x00400c02, 0x20580e06, 0x01000a0c, 0x0a80142a,
                0x20902805, 0x20883000, 0x01183c00, 0x0e303e2e,
                0x20900a01, 0x20680800, 0x01080c00, 0x0ec04631,
                0x20a00c01, 0x20281000, 0x00c81000, 0x0ed03e31,
                0x20702405, 0x20282400, 0x00983c00, 0x0c603223,
                0x01381608, 0x0020240f, 0x00581a19, 0x0c902a3b,
                0x01401004, 0x20381e04, 0x00f80e1c, 0x0d203e3f,
                0x01680601, 0x00100803, 0x00880a1e, 0x0d203a40,
                0x01281a07, 0x0070240e, 0x20181614, 0x0b301e2d,
                0x20900406, 0x20380609, 0x00f01020, 0x0ab02a38,
                0x20880e04, 0x00001809, 0x00881020, 0x0b00363d,
                0x20a80401, 0x00000c00, 0x00a00023, 0x0b00363d,
                0x20b80c02, 0x00100a06, 0x00801c22, 0x09b02226,
                0x00a80e08, 0x20101009, 0x00d00c05, 0x09402e25,
                0x00600602, 0x20300203, 0x00e01009, 0x09803a28,
                0x00800204, 0x20200402, 0x00c00406, 0x09803629,
                0x00600a03, 0x20280801, 0x00a00800, 0x08e02a15,
                0x20901c0c, 0x20482610, 0x01200422, 0x08503612,
                0x20501807, 0x20282608, 0x00f80c1c, 0x08703616,
                0x20601409, 0x2028220b, 0x00e80c1e, 0x08703617,
                0x20501007, 0x00081e07, 0x00880812, 0x08502a0c,
                0x00681e0a, 0x00302813, 0x00880806, 0x08302c02,
                0x00681608, 0x00401c0d, 0x00680c0c, 0x08202e02,
                0x00681a0a, 0x00402410, 0x00580c0b, 0x08202e02,
                0x00381a08, 0x0040280e, 0x00180403, 0x08202602,
                0x20600003, 0x2048060b, 0x01302417, 0x08703811,
                0x20700405, 0x20280e0a, 0x00d00c1d, 0x08503012,
                0x20700c08, 0x2038160f, 0x00e00c1c, 0x08503012,
                0x00280403, 0x20200209, 0x00b0200b, 0x08302c06,
                0x00601402, 0x20482202, 0x01180804, 0x09303c1e,
                0x00a00203, 0x00080405, 0x00a80c06, 0x09402c24,
                0x00a80605, 0x00000409, 0x00981007, 0x09402823,
                0x00200c00, 0x20281601, 0x00b00011, 0x08903014,
                0x21000a01, 0x00080c05, 0x00a80416, 0x0a50382b,
                0x21c00403, 0x20180e04, 0x00980425, 0x0aa02839,
                0x21b00803, 0x20180e06, 0x00a00024, 0x0a902839,
                0x20d00802, 0x00181a01, 0x00600416, 0x09703027,
                0x00981601, 0x00202802, 0x0060021c, 0x0bc0402b,
                0x01181602, 0x00101405, 0x00780a32, 0x0c902436,
                0x00f81202, 0x00100805, 0x00780a2e, 0x0c802437,
                0x00680a02, 0x00301405, 0x00080a11, 0x0ad0342b,
                0x20482603, 0x00a04c00, 0x20600400, 0x0ec05236,
                0x20b81201, 0x00701400, 0x20100000, 0x0f706232,
                0x20980a01, 0x00401400, 0x00580400, 0x0f706233,
                0x20282202, 0x00704000, 0x00380400, 0x0ce04a2b,
                0x00b00006, 0x00281a09, 0x00d01e0b, 0x0d004e3b,
                0x01900001, 0x00301202, 0x00581220, 0x0dc06242,
                0x01500002, 0x00380a03, 0x00a0061b, 0x0db05e41,
                0x00b00403, 0x20182607, 0x01301e06, 0x0b80422e,
                0x20380605, 0x00200c09, 0x00780417, 0x0b305636,
                0x20c00000, 0x00381001, 0x0090082a, 0x0b905a3e,
                0x20900201, 0x00380402, 0x00800023, 0x0b905a3d,
                0x20901001, 0x00081801, 0x00a8101c, 0x0a204623,
                0x00100403, 0x00081206, 0x00a01c0e, 0x09d05a23,
                0x00480e01, 0x00300c02, 0x00500406, 0x0a105e26,
                0x00480800, 0x00300800, 0x00700808, 0x0a205e27,
                0x00380a02, 0x00300c05, 0x00480401, 0x09504615,
                0x00281203, 0x00202c04, 0x00680c12, 0x08f06613,
                0x00280a02, 0x00002000, 0x00880c13, 0x09106219,
                0x00380a02, 0x00002000, 0x00981013, 0x09106219,
                0x00280801, 0x00201a02, 0x0088040b, 0x08c04a0f,
                0x20401003, 0x20282e06, 0x01102419, 0x08b05c03,
                0x20200c03, 0x20282605, 0x01000c19, 0x08a05a03,
                0x20501003, 0x20282a05, 0x01100c1c, 0x08a05a02,
                0x20500801, 0x20182201, 0x00e01c12, 0x08804000,
                0x20400601, 0x00280402, 0x0058080c, 0x09106815,
                0x20200202, 0x00200404, 0x00881812, 0x08e05813,
                0x00180a03, 0x00201005, 0x00681c0d, 0x08e05812,
                0x00500800, 0x00180401, 0x00600002, 0x08b0500a,
                0x00980402, 0x00201800, 0x00581402, 0x09e0681c,
                0x00800401, 0x00180602, 0x0098080b, 0x09b05022,
                0x00500802, 0x00080e03, 0x00a80410, 0x09b05021,
                0x00280601, 0x00301401, 0x00580410, 0x09105013,
                0x21100a04, 0x00100c06, 0x00b0041b, 0x0af0602a,
                0x21900202, 0x00200402, 0x00881022, 0x0b104838,
                0x21700203, 0x00200804, 0x0078101e, 0x0b104c38,
                0x20b01001, 0x00200203, 0x00980c15, 0x09f05025,
                0x00880802, 0x00481207, 0x00d03219, 0x0c60642d,
                0x00f01001, 0x00282604, 0x0090062d, 0x0cf04435,
                0x00e01402, 0x00182206, 0x00a80629, 0x0ce04435,
                0x00480800, 0x00680801, 0x00a0120c, 0x0b40482b,
                0x20780e04, 0x20a81c00, 0x01903400, 0x0f707631,
                0x20c80403, 0x20c81400, 0x01581000, 0x10508a31,
                0x20a81c00, 0x20900000, 0x01200c00, 0x10508e32,
                0x20480e02, 0x20982400, 0x01801800, 0x0d907e28,
                0x01100c09, 0x20d81a0b, 0x01181a14, 0x0dd08a3b,
                0x01a80a07, 0x20d00c0a, 0x00f80623, 0x0ea08a42,
                0x01600800, 0x21080401, 0x01280e1e, 0x0ea09641,
                0x00e01405, 0x20c81605, 0x00f82e0d, 0x0c40862e,
                0x20880608, 0x20a00010, 0x00b80820, 0x0bf07a35,
                0x20b00805, 0x20f8120b, 0x0120042a, 0x0c608e3e,
                0x20a00000, 0x20e80a01, 0x01100025, 0x0c708e3d,
                0x20880e03, 0x20701409, 0x00a8201d, 0x0ad07226,
                0x00500004, 0x20b00207, 0x00b01009, 0x0ab08621,
                0x00400c01, 0x20d81405, 0x00e81408, 0x0af08625,
                0x00400c03, 0x20e81601, 0x00f80c08, 0x0b008a27,
                0x00100400, 0x20b80800, 0x00f00c06, 0x09f06a14,
                0x20180604, 0x20a80805, 0x00b01416, 0x09d08611,
                0x00080a06, 0x20900806, 0x00901013, 0x09f08618,
                0x00180606, 0x20b00007, 0x00a00813, 0x09f08a19,
                0x00300203, 0x20980401, 0x00d01408, 0x0970720d,
                0x20200803, 0x20b00606, 0x00980813, 0x09a09003,
                0x00100405, 0x20c0060a, 0x00b80814, 0x09808e04,
                0x20200406, 0x20c0060a, 0x00b81017, 0x09808e04,
                0x20500c05, 0x20980e07, 0x00c80c11, 0x09307800,
                0x20400201, 0x20900403, 0x00a80c0e, 0x0a008814,
                0x20480603, 0x20b00406, 0x00c81416, 0x09b08011,
                0x20200203, 0x20a00007, 0x00b81412, 0x09c07c10,
                0x00580e04, 0x20601009, 0x00a00003, 0x09606c0a,
                0x00b80c03, 0x20901001, 0x00b00801, 0x0ad0881c,
                0x00900001, 0x20c00602, 0x00d80809, 0x0a807c20,
                0x00700001, 0x20b00a02, 0x00b80c0c, 0x0a807c1f,
                0x00080405, 0x20a00604, 0x00e01411, 0x09d07414,
                0x21582a09, 0x20c02409, 0x00f03821, 0x0be0942d,
                0x21b80a01, 0x20c00802, 0x00e80424, 0x0bd07437,
                0x21a80601, 0x20b00401, 0x00d80422, 0x0bc07437,
                0x20a82208, 0x20b0300a, 0x00f01812, 0x0ac08026,
                0x00b03406, 0x21782e12, 0x01800e20, 0x0d70b030,
                0x01000801, 0x20e00e03, 0x01081a31, 0x0da07433,
                0x01000000, 0x20d01800, 0x00e81e2f, 0x0da07433,
                0x00402405, 0x2148260f, 0x01b0120b, 0x0c10902b,
                0x20b01805, 0x00284400, 0x20684c00, 0x1090a62f,
                0x20800c06, 0x00682000, 0x21285000, 0x11909e36,
                0x20a0200b, 0x00486000, 0x20b87400, 0x1190a634,
                0x2060180a, 0x00284c00, 0x20588400, 0x0ec0ae2b,
                0x01b80605, 0x0080100e, 0x21885220, 0x0ef08a3f,
                0x01300609, 0x00981011, 0x21a81a18, 0x0fb08242,
                0x01680a12, 0x00c01421, 0x22383e1d, 0x0fd08242,
                0x01381210, 0x00802c1f, 0x21885a12, 0x0d507e34,
                0x20f00803, 0x00781601, 0x21480430, 0x0ce07237,
                0x20680407, 0x00a00e0a, 0x21e80c1f, 0x0d90863f,
                0x20a0040b, 0x00a80a14, 0x21e01025, 0x0da0823f,
                0x20b0080b, 0x00581a11, 0x20e00c26, 0x0bb0722a,
                0x00980606, 0x00800808, 0x21900802, 0x0bb0761f,
                0x00480a06, 0x0090140a, 0x21b8140d, 0x0c007a29,
                0x00680a06, 0x00b0180d, 0x22082007, 0x0c107a29,
                0x00180609, 0x00700c11, 0x21480c06, 0x0ae06e13,
                0x20500809, 0x0088160b, 0x21700c1b, 0x0ae07a10,
                0x20500804, 0x00781a07, 0x21601419, 0x0af07616,
                0x20500002, 0x00980605, 0x21a0141a, 0x0b007618,
                0x00000007, 0x0068060b, 0x2110140a, 0x0a60760b,
                0x00280e09, 0x0090200e, 0x21c80c0d, 0x0ac07804,
                0x00680603, 0x00901005, 0x21b8100a, 0x0a907a04,
                0x00480a02, 0x00901402, 0x21b80c0d, 0x0aa07a05,
                0x00180e07, 0x00602009, 0x2128080a, 0x0a307601,
                0x20500006, 0x0070020b, 0x21401811, 0x0b108013,
                0x20700404, 0x00880a06, 0x2178041c, 0x0ab0740e,
                0x20500404, 0x00880a05, 0x21680818, 0x0ab0740e,
                0x00000806, 0x00381e0b, 0x20a0180c, 0x0a50780a,
                0x00d00a09, 0x00781807, 0x21301802, 0x0be0801d,
                0x00a00206, 0x00800407, 0x21980807, 0x0b807020,
                0x00880606, 0x00800807, 0x2188080a, 0x0b706c1f,
                0x00500606, 0x00681008, 0x2120040d, 0x0ad07817,
                0x21e02013, 0x00986215, 0x21a0102b, 0x0d008c34,
                0x21d00808, 0x0088160a, 0x21880426, 0x0cc06c36,
                0x21b00408, 0x0088120a, 0x21780424, 0x0cb06c36,
                0x21201409, 0x00783e09, 0x21501c1c, 0x0bd0802b,
                0x01182e0d, 0x01107c26, 0x23284633, 0x0ed09032,
                0x01180e05, 0x00a0240f, 0x21d81a34, 0x0e906832,
                0x01080a05, 0x0090180e, 0x21b81230, 0x0e806433,
                0x00981e06, 0x00c05413, 0x2248221b, 0x0d508c2d
            },
            {
                0x00380a0a, 0x20a00000, 0x00009400, 0x12888e47,
                0x00000605, 0x20700000, 0x00004c00, 0x11c86a46,
                0x00080e09, 0x20800000, 0x00008c00, 0x11d86e47,
                0x0048320d, 0x00000000, 0x0000f800, 0x1088ae42,
                0x00102013, 0x20c0021f, 0x00081409, 0x10685a43,
                0x0080000a, 0x20600210, 0x00001400, 0x0f984e46,
                0x0060140f, 0x20a0021b, 0x00000001, 0x0fa83a46,
                0x20101c17, 0x20c00226, 0x0000100c, 0x0e884a3c,
                0x00380e0c, 0x20400018, 0x0008040c, 0x0e787e38,
                0x20100208, 0x2060000d, 0x00000817, 0x0d88523b,
                0x00080608, 0x20500011, 0x00081014, 0x0d88523b,
                0x00781213, 0x2050001f, 0x00001c09, 0x0cd86231,
                0x00080c03, 0x2070020b, 0x00003414, 0x0cf86627,
                0x20100807, 0x2070020c, 0x00080414, 0x0c084625,
                0x20100003, 0x20600208, 0x00001015, 0x0c084626,
                0x20b0100e, 0x2080021c, 0x00000c1d, 0x0b883e1e,
                0x20400403, 0x20900201, 0x00080813, 0x0c085a14,
                0x00080a06, 0x20500009, 0x00000013, 0x0b385212,
                0x20180601, 0x20600001, 0x00080813, 0x0b284a12,
                0x00900a06, 0x2040000f, 0x00082205, 0x0ad85212,
                0x00780606, 0x20900006, 0x00001406, 0x0ba85a07,
                0x00000805, 0x20700208, 0x00080c12, 0x0ae84800,
                0x20100402, 0x20700201, 0x00081012, 0x0ae84801,
                0x20580400, 0x20200203, 0x00001c17, 0x0a585209,
                0x20a01009, 0x2090020b, 0x0008141b, 0x0b985009,
                0x20400203, 0x20500007, 0x00080813, 0x0b385413,
                0x00200203, 0x20600005, 0x0000040e, 0x0b385011,
                0x00200000, 0x20400201, 0x00000409, 0x0a584807,
                0x0108120b, 0x20500010, 0x00002603, 0x0c285c15,
                0x00a80401, 0x20500201, 0x00001409, 0x0c085021,
                0x00200003, 0x20600204, 0x00000414, 0x0bf84c22,
                0x00300004, 0x20400202, 0x00080c0e, 0x0ab84812,
                0x21700008, 0x20900212, 0x00000c2c, 0x0d084029,
                0x21880604, 0x20600001, 0x00001027, 0x0d584839,
                0x21180a06, 0x20600006, 0x0000141a, 0x0d584839,
                0x20880a09, 0x2040000a, 0x00001c15, 0x0b984c24,
                0x00980602, 0x20900006, 0x0008261a, 0x0ea85034,
                0x00c00c04, 0x2080020b, 0x00082e24, 0x0f58443d,
                0x00900404, 0x2080020d, 0x0008121b, 0x0f48403b,
                0x00100c07, 0x20600214, 0x00081e02, 0x0ce83c2f,
                0x20781002, 0x01c81800, 0x21f04800, 0x1148ca36,
                0x20681a05, 0x01101000, 0x21605c00, 0x10e8963c,
                0x20800000, 0x01482000, 0x21704400, 0x10d89a37,
                0x20904c07, 0x00689000, 0x00001c00, 0x0f28ae29,
                0x01484a05, 0x01906405, 0x22501e16, 0x0f88a241,
                0x01100807, 0x00b8060f, 0x21201210, 0x0ee87244,
                0x01582a02, 0x01403c01, 0x21f01219, 0x0f087643,
                0x0168420b, 0x01905814, 0x22400e1b, 0x0dc89636,
                0x20901402, 0x0078220a, 0x20c03025, 0x0d78963a,
                0x20980603, 0x00d80407, 0x21300024, 0x0cd8763a,
                0x20800402, 0x00a80e06, 0x21001826, 0x0cd8723d,
                0x20d02006, 0x00982e0f, 0x20e04027, 0x0c087e30,
                0x00301403, 0x00c82204, 0x2148040a, 0x0c188a22,
                0x00781602, 0x00c01a01, 0x21400c08, 0x0b686e25,
                0x00280a02, 0x00b00401, 0x2130040d, 0x0b686e24,
                0x00382601, 0x01103404, 0x21980402, 0x0af86e1b,
                0x20280e02, 0x01100805, 0x21b80812, 0x0b389215,
                0x20601006, 0x00781a07, 0x20e8041c, 0x0a786e13,
                0x20100405, 0x00a80a05, 0x21280c14, 0x0a886e13,
                0x00481203, 0x00801401, 0x20c01c09, 0x0a286a16,
                0x00101003, 0x00e80800, 0x21a0040d, 0x0ac88e05,
                0x00580a05, 0x00b0180a, 0x2148140a, 0x0a387000,
                0x00180604, 0x00b01008, 0x21481010, 0x0a387601,
                0x20401003, 0x00481207, 0x20701014, 0x09b85e07,
                0x20182606, 0x01203407, 0x21c01410, 0x0ad88809,
                0x20600001, 0x00900205, 0x20f0141a, 0x0a787012,
                0x20100401, 0x00a80603, 0x21101013, 0x0a787011,
                0x00100201, 0x00800002, 0x20c80808, 0x09b86007,
                0x00402003, 0x0098320b, 0x20f0240d, 0x0b587c17,
                0x00b00c00, 0x00981000, 0x20f00407, 0x0b586c23,
                0x00500000, 0x00b80601, 0x21100410, 0x0b487022,
                0x00700401, 0x00880602, 0x20b8040c, 0x0a186011,
                0x20f00001, 0x01100202, 0x21b81c1a, 0x0c58782b,
                0x21c00801, 0x00b80e02, 0x21380828, 0x0cb86c3a,
                0x21700c00, 0x00a81601, 0x21200020, 0x0cb86c3a,
                0x21101201, 0x00881c00, 0x20c0041f, 0x0ae86426,
                0x00701000, 0x01180c01, 0x21b82214, 0x0dd8882f,
                0x01080c00, 0x00e02401, 0x21782a2f, 0x0eb8743a,
                0x00d00400, 0x00e01201, 0x21782627, 0x0ea87039,
                0x00780801, 0x00d02203, 0x21282a16, 0x0c58642d,
                0x20603a02, 0x21984400, 0x03680800, 0x0fb89e32,
                0x20a02001, 0x20a83c00, 0x01e01400, 0x0fa88232,
                0x20801e01, 0x20f82400, 0x02500400, 0x0fa87e32,
                0x20282205, 0x20505000, 0x01100c00, 0x0de88a2e,
                0x00f04006, 0x20b87605, 0x02500a11, 0x0e08a23a,
                0x01980e03, 0x20101404, 0x00f0021f, 0x0df87641,
                0x01302003, 0x20883e03, 0x01c00e18, 0x0de87e3f,
                0x00a0380c, 0x20d86a10, 0x02602e07, 0x0c789231,
                0x20782207, 0x0040200d, 0x0088081b, 0x0c389a35,
                0x20c00400, 0x20480e04, 0x0140102b, 0x0bc8763b,
                0x20680a04, 0x00000806, 0x00d00020, 0x0be8763b,
                0x20682e0d, 0x00103415, 0x00c00c18, 0x0af88229,
                0x00681001, 0x20301e07, 0x01000806, 0x0ad89224,
                0x00501403, 0x20382604, 0x01180807, 0x0a787622,
                0x00000803, 0x20281207, 0x00f0000f, 0x0a787624,
                0x00202009, 0x20a83613, 0x01902c05, 0x09f86e1a,
                0x20401c05, 0x20781a02, 0x01681817, 0x09e89a16,
                0x00000201, 0x00201005, 0x00882414, 0x09887a15,
                0x00300800, 0x00000403, 0x00b8200f, 0x09987a15,
                0x00101603, 0x20281c09, 0x00c8080b, 0x09486a12,
                0x00482209, 0x0000240d, 0x0110180c, 0x0988a204,
                0x00080e02, 0x00100002, 0x00c01414, 0x09388201,
                0x20380e01, 0x00200402, 0x00c00c18, 0x09388601,
                0x20181601, 0x00301c00, 0x0060100d, 0x08e86205,
                0x20702009, 0x20883a0e, 0x01a02c17, 0x09a88c0d,
                0x20500802, 0x20180a03, 0x00c00415, 0x09887814,
                0x00080602, 0x20200401, 0x00d00c10, 0x09787813,
                0x00000402, 0x20280604, 0x00d0040a, 0x08f85c06,
                0x00782208, 0x0000300c, 0x00c80802, 0x0a58801a,
                0x00a80a01, 0x00001002, 0x00a80407, 0x0a687822,
                0x00500803, 0x20280a05, 0x00e8040f, 0x0a587422,
                0x00700601, 0x20200403, 0x00c80c0a, 0x09485c10,
                0x20e00c06, 0x2080060c, 0x01880418, 0x0b487c27,
                0x21b80400, 0x20201201, 0x00f80426, 0x0bb87839,
                0x21780602, 0x00001404, 0x00c8101f, 0x0bb87839,
                0x21281201, 0x20101800, 0x00d00020, 0x0a186025,
                0x00681e02, 0x20502006, 0x01981a13, 0x0ca88c2c,
                0x00f80400, 0x20300201, 0x0120062e, 0x0da87c38,
                0x00d81800, 0x20201e01, 0x01100a28, 0x0da87c37,
                0x00880401, 0x20500a02, 0x01380618, 0x0b78602b,
                0x20783601, 0x01105c00, 0x21501000, 0x0ef85a34,
                0x20981a01, 0x00602800, 0x00100800, 0x0ef84633,
                0x20982201, 0x00a02c00, 0x20701000, 0x0f084233,
                0x20880801, 0x00780c00, 0x00203800, 0x0d086626,
                0x01582202, 0x00404e04, 0x00200215, 0x0d38563f,
                0x01600800, 0x00081202, 0x00b0161b, 0x0d484240,
                0x01681000, 0x00302602, 0x0040021c, 0x0d483e41,
                0x01782206, 0x00404402, 0x20100a17, 0x0bb84632,
                0x20e02005, 0x20483e0a, 0x01600c28, 0x0b386236,
                0x20c00000, 0x00200202, 0x00780827, 0x0b283e3a,
                0x20a00c01, 0x20181604, 0x00d00426, 0x0b28423c,
                0x21402809, 0x2048520f, 0x0100242d, 0x0a284a26,
                0x00700c04, 0x00481003, 0x00782601, 0x09f86622,
                0x00880803, 0x00201a01, 0x00782003, 0x09c84625,
                0x00380403, 0x00200e01, 0x00881c08, 0x09c84625,
                0x00b81604, 0x00602c0d, 0x2048260e, 0x09684217,
                0x0018260c, 0x00604010, 0x00200c15, 0x08f86a18,
                0x20180e07, 0x00001008, 0x00d0081a, 0x08c85217,
                0x00381207, 0x00101809, 0x00b00412, 0x08c84e17,
                0x20281604, 0x00102001, 0x00702014, 0x08a84213,
                0x2060240c, 0x20383e15, 0x01202c19, 0x08885a01,
                0x20101808, 0x2048260d, 0x01100416, 0x08684800,
                0x20301408, 0x2048260d, 0x01100c1b, 0x08684a01,
                0x20301405, 0x2048260b, 0x00f0180e, 0x08483a03,
                0x0028160a, 0x00602410, 0x00381409, 0x08d85410,
                0x20380e06, 0x0020100c, 0x00881012, 0x08b85015,
                0x20200204, 0x0028040a, 0x00880c10, 0x08b84c15,
                0x00200000, 0x00100405, 0x00681406, 0x08683807,
                0x20101009, 0x00182a0d, 0x00c0200e, 0x0978501b,
                0x00900404, 0x00080e07, 0x00b0100a, 0x09a84c22,
                0x00880c02, 0x00101603, 0x0080040a, 0x09984822,
                0x00680e04, 0x00101004, 0x0070100d, 0x08b83810,
                0x2088120a, 0x0050240e, 0x0018080c, 0x0a884828,
                0x21b80a04, 0x00000405, 0x00900425, 0x0af8483a,
                0x21980604, 0x20100003, 0x00c01023, 0x0af84839,
                0x21300804, 0x20181608, 0x00a01020, 0x09883026,
                0x00402006, 0x00183210, 0x00a0160d, 0x0bd84429,
                0x01000802, 0x20180a06, 0x00a00a2f, 0x0cf84038,
                0x00e01c03, 0x2028320a, 0x00d00a29, 0x0ce84039,
                0x00900a02, 0x00180404, 0x0058121a, 0x0ae8302b,
                0x20801c01, 0x20884000, 0x01f02400, 0x0e38462d,
                0x20a01001, 0x20482000, 0x01200800, 0x0e881e30,
                0x20a01801, 0x20782c00, 0x01800800, 0x0e98222f,
                0x20701802, 0x20582800, 0x01600400, 0x0c683621,
                0x01200602, 0x20281802, 0x00f01a19, 0x0ca8323a,
                0x01680601, 0x20100402, 0x00b8061e, 0x0ce81a3f,
                0x01500601, 0x20181003, 0x00d0061e, 0x0ce81a3e,
                0x01100603, 0x00081c05, 0x00c01e15, 0x0b38322c,
                0x20980c02, 0x00002a03, 0x0088181e, 0x0ab82637,
                0x20c00001, 0x20200602, 0x00c80425, 0x0ad81a3b,
                0x20980400, 0x00001201, 0x00980822, 0x0ad8163c,
                0x20a80c03, 0x00202a04, 0x0048141e, 0x09c82227,
                0x00c80601, 0x20401002, 0x01280c02, 0x09583228,
                0x00a00201, 0x20280401, 0x00d80402, 0x09681e28,
                0x00700001, 0x20200201, 0x00d80808, 0x09581a27,
                0x00700203, 0x20181005, 0x00f01601, 0x08e82e18,
                0x20b01400, 0x20583400, 0x01602425, 0x08483614,
                0x20800c01, 0x20181a01, 0x00c00422, 0x08581e16,
                0x20500c00, 0x20181801, 0x00d0081c, 0x08582216,
                0x20600c01, 0x20181e03, 0x00b02015, 0x08481e0e,
                0x00781000, 0x00002801, 0x00980c04, 0x08182401,
                0x00781201, 0x00102003, 0x00681409, 0x08081e01,
                0x00480c00, 0x00101c01, 0x0068140d, 0x08081a01,
                0x00380800, 0x00201800, 0x00380c03, 0x08081202,
                0x20800601, 0x20481000, 0x01301c18, 0x08482810,
                0x20900801, 0x20281202, 0x00e0081e, 0x08482413,
                0x20600400, 0x20280a01, 0x00d0001a, 0x08482013,
                0x00280400, 0x20100401, 0x00a0040b, 0x08181805,
                0x00800003, 0x20300a04, 0x00f80c01, 0x09081c1c,
                0x00d00000, 0x20100001, 0x00a80403, 0x09382024,
                0x00a00601, 0x20180c01, 0x00c00808, 0x09282024,
                0x00200601, 0x20181000, 0x00b01411, 0x08681412,
                0x21200603, 0x20381405, 0x01101019, 0x0a18242a,
                0x21f00400, 0x20180c00, 0x00a0042b, 0x0a98203a,
                0x21d00801, 0x00080e01, 0x00800426, 0x0a981c3b,
                0x20f00403, 0x00000604, 0x00781018, 0x09480c27,
                0x00a81001, 0x20102e04, 0x00d8121d, 0x0b88182a,
                0x01280800, 0x00100c01, 0x00780a35, 0x0c982038,
                0x01181000, 0x00202801, 0x00581e33, 0x0c881c37,
                0x00780e02, 0x00101406, 0x00880a16, 0x0aa8182a,
                0x20881000, 0x00400c00, 0x00680c00, 0x0e000a2e,
                0x20980c00, 0x00400c00, 0x00580800, 0x0e801631,
                0x20981400, 0x00501800, 0x00380800, 0x0e901a31,
                0x20581a02, 0x00401c00, 0x00500400, 0x0c300223,
                0x01000402, 0x00080a01, 0x00a80e17, 0x0c700239,
                0x01500400, 0x00180401, 0x0088061c, 0x0ce0123f,
                0x01400001, 0x00080601, 0x00980a1b, 0x0ce0123f,
                0x00e00405, 0x20280e05, 0x00c80610, 0x0b00022b,
                0x20700601, 0x00200005, 0x0078041a, 0x0a980637,
                0x20a00201, 0x00100401, 0x00700023, 0x0ad0123b,
                0x20900601, 0x00180403, 0x00880421, 0x0ad0123c,
                0x20700205, 0x20100409, 0x0090001a, 0x09a80626,
                0x00b00202, 0x00200400, 0x00701004, 0x09200228,
                0x00a00000, 0x00100201, 0x00880403, 0x09501228,
                0x00780400, 0x00100601, 0x00700007, 0x09501228,
                0x00500803, 0x20180e06, 0x00a01404, 0x08c00617,
                0x20b80804, 0x00200a06, 0x00800025, 0x08200a13,
                0x20780801, 0x00100c00, 0x00880820, 0x08400e17,
                0x20580802, 0x00100602, 0x0098081c, 0x08400e17,
                0x20580800, 0x00100801, 0x00780412, 0x08200a0c,
                0x00600a04, 0x00080c07, 0x00a00805, 0x07f00402,
                0x00600e01, 0x20181002, 0x00b0000c, 0x07f00a01,
                0x00400a01, 0x20180803, 0x00a8040e, 0x07f00a01,
                0x00300601, 0x20180402, 0x00900403, 0x08000a02,
                0x20900004, 0x00280606, 0x00700c19, 0x08300c11,
                0x20880401, 0x00200602, 0x0078041d, 0x08300813,
                0x20680401, 0x00100602, 0x0080001a, 0x08300812,
                0x00200601, 0x00080601, 0x00800c0b, 0x08000c06,
                0x00b80a03, 0x00300c05, 0x00700203, 0x0900101c,
                0x00d00201, 0x00100002, 0x00880403, 0x09100423,
                0x00a00000, 0x00000000, 0x00880408, 0x09100823,
                0x00180402, 0x00100202, 0x00700011, 0x08601014,
                0x21500002, 0x00180603, 0x00a00c1e, 0x0a00102a,
                0x21f80401, 0x00000602, 0x0098042a, 0x0a70043a,
                0x21c80400, 0x00000400, 0x00880825, 0x0a70043a,
                0x20b80a02, 0x00001003, 0x00780414, 0x09401026,
                0x00b00a01, 0x00180802, 0x00900222, 0x0b80142b,
                0x01100800, 0x20180c00, 0x00980a34, 0x0c700038,
                0x01100c00, 0x20180c01, 0x00a80632, 0x0c600037,
                0x00501001, 0x20281a02, 0x00b00e10, 0x0a901029,
                0x20801c02, 0x20981c00, 0x01282400, 0x0e303a2f,
                0x20901401, 0x20581400, 0x01081400, 0x0ed04232,
                0x20a01c01, 0x20882400, 0x01381c00, 0x0ee04632,
                0x20701802, 0x20682c00, 0x01181c00, 0x0c502e22,
                0x01200a01, 0x20200405, 0x00b81e18, 0x0ca02e3b,
                0x01580601, 0x00000003, 0x00b80e1b, 0x0d203640,
                0x01600601, 0x20100004, 0x00a81a1d, 0x0d303a40,
                0x01300a01, 0x00000406, 0x00682615, 0x0b30262d,
                0x20980801, 0x00000801, 0x00c00c1f, 0x0ab02637,
                0x20b00400, 0x20100001, 0x00b80423, 0x0b10363b,
                0x20a80400, 0x00000401, 0x00a00024, 0x0b10363d,
                0x20c80a01, 0x00200402, 0x00701023, 0x09c01e26,
                0x00900205, 0x20200403, 0x00f01805, 0x09502e25,
                0x00a00603, 0x20100402, 0x00b00002, 0x09903629,
                0x00700603, 0x20100001, 0x00b00406, 0x09903628,
                0x00700202, 0x20100800, 0x00700a03, 0x08f02a15,
                0x20601008, 0x2038160b, 0x00f80420, 0x08503613,
                0x20600806, 0x00081208, 0x00b80820, 0x08803218,
                0x20300805, 0x00080e07, 0x00b80c1a, 0x08803618,
                0x20500c04, 0x00081206, 0x00980413, 0x08502a0d,
                0x00281207, 0x0020100d, 0x00a0000c, 0x08202c03,
                0x00481206, 0x0030140a, 0x0078080d, 0x08202e01,
                0x00280e05, 0x00200c09, 0x00880811, 0x08202e02,
                0x00280a03, 0x00200807, 0x00580405, 0x08202601,
                0x20600403, 0x20300207, 0x00e01013, 0x08703813,
                0x20700404, 0x20180a09, 0x00c0081a, 0x08603013,
                0x20500004, 0x20180a07, 0x00b00418, 0x08602c12,
                0x00180601, 0x00000a01, 0x0080140b, 0x08402c07,
                0x00800000, 0x20180c01, 0x00e00402, 0x0940381d,
                0x00c00203, 0x00080404, 0x00a80805, 0x09402822,
                0x00900603, 0x00000004, 0x00980c09, 0x09402823,
                0x00300402, 0x20180604, 0x0090040e, 0x08a03014,
                0x21300401, 0x20100401, 0x00b0001b, 0x0a503c2b,
                0x21e00403, 0x00080a04, 0x00980829, 0x0aa02839,
                0x21c00404, 0x00180a05, 0x00980825, 0x0aa02839,
                0x20d00401, 0x00080c01, 0x00880416, 0x09802c26,
                0x00b81201, 0x20101403, 0x00c00e20, 0x0bd0402b,
                0x01180e01, 0x00101004, 0x00781234, 0x0c902037,
                0x01081602, 0x00101407, 0x00680a31, 0x0c902036,
                0x00681201, 0x00101803, 0x00500212, 0x0ad0302a,
                0x20682401, 0x01003c00, 0x20a00000, 0x0ed04e33,
                0x20881602, 0x00602000, 0x00100000, 0x0f806235,
                0x20881601, 0x00803000, 0x20480800, 0x0f906236,
                0x20500802, 0x00701400, 0x00083000, 0x0ce05228,
                0x01182203, 0x00601c02, 0x00501e13, 0x0d104e3d,
                0x01400804, 0x00180e06, 0x00a80618, 0x0db05e41,
                0x01580c00, 0x00400e02, 0x00800e19, 0x0dc05e43,
                0x01181e04, 0x00801805, 0x0060060f, 0x0b903e30,
                0x20800405, 0x20181608, 0x00d01420, 0x0b305a36,
                0x20b80a02, 0x00300806, 0x00780c24, 0x0b905a3b,
                0x20a00003, 0x00080a03, 0x00b00025, 0x0ba05e3c,
                0x20d01005, 0x00281e08, 0x00c00425, 0x0a204224,
                0x00400602, 0x00080407, 0x00800008, 0x09d05e22,
                0x00780e01, 0x00100c00, 0x00900c04, 0x0a205e28,
                0x00480603, 0x00000c05, 0x00900007, 0x0a205e27,
                0x00581204, 0x00500c08, 0x00500203, 0x09504213,
                0x00280a03, 0x00102000, 0x00700414, 0x08f06614,
                0x00000601, 0x20200e02, 0x00c80818, 0x0910621a,
                0x00200001, 0x20100e04, 0x00c80413, 0x0920621a,
                0x00080400, 0x00201603, 0x0080040d, 0x08c04a0e,
                0x20500c06, 0x20182609, 0x00f0101a, 0x08b06003,
                0x20200403, 0x20181a05, 0x00f00818, 0x08a05a02,
                0x20300401, 0x20181602, 0x00f0041a, 0x08a05a03,
                0x20100803, 0x00181603, 0x00c0080c, 0x08904601,
                0x20380e06, 0x0020100a, 0x0068080b, 0x09106015,
                0x20300203, 0x00000805, 0x00981412, 0x08f05813,
                0x20100400, 0x00000001, 0x00981811, 0x08e05812,
                0x00080603, 0x00300005, 0x0080080a, 0x08b0480a,
                0x00801005, 0x20180a07, 0x00a00003, 0x09e0681c,
                0x00900401, 0x00080603, 0x00a8040a, 0x09c05021,
                0x00680602, 0x00100803, 0x0098080d, 0x09b05021,
                0x00500403, 0x00200605, 0x0080000a, 0x09205014,
                0x21200205, 0x00300808, 0x0080041c, 0x0af0642c,
                0x21b00601, 0x00100001, 0x00981425, 0x0b104c38,
                0x21800400, 0x00000202, 0x00a80c20, 0x0b104c38,
                0x20c00a03, 0x00200404, 0x00980818, 0x0a004c25,
                0x00a00802, 0x00281e07, 0x00a0261d, 0x0c706c2d,
                0x01000801, 0x00281602, 0x00980630, 0x0cf04435,
                0x00e00c01, 0x00182602, 0x00b0022a, 0x0cf04435,
                0x00500402, 0x00581a05, 0x0090160e, 0x0b504c2b,
                0x20680401, 0x21183400, 0x02600400, 0x0f708231,
                0x20a00001, 0x20c81800, 0x01380400, 0x10608e33,
                0x20981400, 0x20b80c00, 0x01501c00, 0x10608634,
                0x20383e05, 0x20702c00, 0x01402c00, 0x0da07a2b,
                0x00e02601, 0x21383c03, 0x01881211, 0x0de08a39,
                0x01800202, 0x20c00c04, 0x00d81a1e, 0x0ea08e43,
                0x01401400, 0x21081e01, 0x0138061b, 0x0ea09241,
                0x00d02409, 0x21683e0e, 0x01f80a09, 0x0c40862f,
                0x20300402, 0x20980401, 0x00981c18, 0x0c008236,
                0x20d00400, 0x20c81202, 0x0100082a, 0x0c70863d,
                0x20700402, 0x20b80a01, 0x00c81422, 0x0c808e3d,
                0x20880607, 0x20e0100e, 0x0118281e, 0x0ad07a25,
                0x00280a01, 0x20800807, 0x0080040f, 0x0ab07a22,
                0x00600c04, 0x20b81601, 0x00c80804, 0x0b008626,
                0x00100000, 0x20a80804, 0x00a8040c, 0x0b008626,
                0x00201406, 0x20f82207, 0x01500406, 0x0a007614,
                0x20181605, 0x20a00c03, 0x00a02c15, 0x09e08611,
                0x20181a09, 0x20801c0b, 0x00601016, 0x09f08619,
                0x00381205, 0x20a01003, 0x0080100f, 0x0a008a18,
                0x20180a06, 0x20a00809, 0x00d0040b, 0x0980720b,
                0x00200c05, 0x20e0020b, 0x00d80810, 0x09a09802,
                0x0010180a, 0x20e81612, 0x00d80c13, 0x09809204,
                0x20201006, 0x20e80e0b, 0x00c81018, 0x09908e05,
                0x00200403, 0x20c00607, 0x00f00809, 0x09507e01,
                0x20800c01, 0x20b81404, 0x00c81015, 0x0a008815,
                0x20580a06, 0x2080040d, 0x00981c17, 0x09c07811,
                0x20180604, 0x20900808, 0x00a81812, 0x09c07c10,
                0x20300a01, 0x20b80c02, 0x00f0000f, 0x0970780b,
                0x00d81a03, 0x20802406, 0x00700a04, 0x0ad0881d,
                0x00a80403, 0x20a00a05, 0x00a00007, 0x0a907820,
                0x00500003, 0x20b80a05, 0x00c0000f, 0x0a807821,
                0x00880803, 0x20a00c00, 0x00c00005, 0x09f07815,
                0x21780601, 0x20e00601, 0x01102824, 0x0be0942d,
                0x21c80e02, 0x20b01003, 0x00c80825, 0x0bd07436,
                0x21881203, 0x20b01005, 0x00a8081e, 0x0bd07837,
                0x20f81a06, 0x20c02008, 0x00f0181c, 0x0ac07c25,
                0x00c00802, 0x21000205, 0x01200624, 0x0d80a430,
                0x01101001, 0x20e00203, 0x00f81631, 0x0da07433,
                0x00f01001, 0x20f00604, 0x00f81a2c, 0x0da07833,
                0x00601804, 0x21180a0c, 0x01700613, 0x0c208c2b,
                0x2050180d, 0x00584c00, 0x2108ac00, 0x10d0be37,
                0x20900806, 0x00681c00, 0x21384c00, 0x11909a37,
                0x20901c0a, 0x00485400, 0x20d86c00, 0x1190a234,
                0x2080340c, 0x00189c00, 0x20287800, 0x0ec0aa27,
                0x00d81613, 0x00c03c28, 0x22386a0e, 0x0f00823e,
                0x0168060b, 0x00900c13, 0x21a81e1a, 0x0fb08244,
                0x01480e10, 0x00b0241f, 0x2228421c, 0x0fd08243,
                0x01681610, 0x00e03824, 0x22987617, 0x0d708633,
                0x20180408, 0x00700e10, 0x21501419, 0x0d007639,
                0x20c00009, 0x0088060f, 0x21700428, 0x0d80823d,
                0x20580408, 0x00800a10, 0x21901021, 0x0d907e40,
                0x20f00006, 0x0090020b, 0x21b0142b, 0x0bd07229,
                0x00100607, 0x00681009, 0x21200815, 0x0ba07222,
                0x00a80608, 0x00800c0c, 0x21881403, 0x0c007a28,
                0x00100605, 0x00880807, 0x21780810, 0x0c007627,
                0x00780e06, 0x00902409, 0x21b80e02, 0x0af07614,
                0x20601009, 0x0078320b, 0x21601417, 0x0ae07a0c,
                0x20a0100a, 0x0078320d, 0x21501021, 0x0b007616,
                0x20200c07, 0x00882208, 0x21800412, 0x0b107616,
                0x20600805, 0x00681609, 0x21201814, 0x0a70720b,
                0x00780e07, 0x00b0280e, 0x22281c05, 0x0ad07c02,
                0x00b8160b, 0x00b03c12, 0x22182402, 0x0aa07a05,
                0x00481208, 0x00b02c0d, 0x2208180d, 0x0aa07606,
                0x00580603, 0x00800c06, 0x21780802, 0x0a507800,
                0x20880800, 0x00801605, 0x21801819, 0x0b107c12,
                0x20b00807, 0x00681610, 0x21201824, 0x0ab0700e,
                0x20500404, 0x00780a0b, 0x2150141a, 0x0ab0740d,
                0x20480400, 0x00700a02, 0x21500811, 0x0a70780a,
                0x00b01003, 0x00682e04, 0x21201c02, 0x0be0801f,
                0x00d00604, 0x00780c06, 0x21681402, 0x0b806c20,
                0x00800602, 0x00880802, 0x2178100b, 0x0b707020,
                0x00a00601, 0x00681201, 0x21200c05, 0x0af07815,
                0x21900400, 0x00a80c04, 0x21d00823, 0x0d108832,
                0x21e00807, 0x00881606, 0x21980c28, 0x0cc06435,
                0x21b00c08, 0x00882206, 0x21981422, 0x0cc06436,
                0x21500c06, 0x00782a03, 0x21601024, 0x0bd07c29,
                0x00e80e01, 0x00b02004, 0x22100a2a, 0x0ed09431,
                0x01281205, 0x00a03410, 0x21e81a34, 0x0e906032,
                0x01081606, 0x00b03c13, 0x22181e31, 0x0e906032,
                0x00a81605, 0x00b0400f, 0x22080e1f, 0x0d50882e
            },
            {
                0x20900604, 0x20800000, 0x00002400, 0x13988236,
                0x20400204, 0x20700000, 0x00004400, 0x11b8663b,
                0x20300a04, 0x20700000, 0x00003400, 0x11b8623d,
                0x00081209, 0x20800000, 0x00008400, 0x11286e39,
                0x01400c09, 0x2060020c, 0x0008161b, 0x11c87644,
                0x00e00806, 0x2070020c, 0x00000e0c, 0x0fc84e41,
                0x00b00006, 0x2050020c, 0x00000e09, 0x0fc85241,
                0x00301811, 0x20c0021c, 0x00081400, 0x0f684239,
                0x20781609, 0x2030000e, 0x00001820, 0x0f888641,
                0x20480604, 0x20500005, 0x0008041d, 0x0dc85239,
                0x20280605, 0x20500007, 0x00000019, 0x0dc85639,
                0x0048060e, 0x20600017, 0x00080c09, 0x0da85e34,
                0x0058040a, 0x2090020e, 0x0000040b, 0x0de8722b,
                0x00100004, 0x20600205, 0x00080c0f, 0x0c585223,
                0x20200006, 0x20600208, 0x00080c13, 0x0c585223,
                0x2030080d, 0x20700213, 0x00080816, 0x0c485225,
                0x2048120b, 0x2090000f, 0x0000181a, 0x0cc87a18,
                0x00180e05, 0x20600008, 0x00000813, 0x0b785a13,
                0x00380a05, 0x20500009, 0x0000040e, 0x0b785e13,
                0x0008120c, 0x20500014, 0x0000140c, 0x0b686214,
                0x0020200d, 0x20d00212, 0x0008240f, 0x0c686604,
                0x20100806, 0x20900208, 0x00080c14, 0x0b385001,
                0x20300004, 0x20800206, 0x00000418, 0x0b285000,
                0x00301008, 0x20900211, 0x0008040d, 0x0af84a07,
                0x20380e0b, 0x20500014, 0x00001014, 0x0c88800e,
                0x20280a07, 0x2060000b, 0x00001413, 0x0b885814,
                0x00000206, 0x20800007, 0x00000c10, 0x0b885014,
                0x20800000, 0x20500008, 0x00081416, 0x0b085c0b,
                0x00500806, 0x2080020d, 0x0000180c, 0x0d38681e,
                0x00500c07, 0x2080020b, 0x0008040b, 0x0c784823,
                0x00000408, 0x2070020a, 0x00080411, 0x0c684825,
                0x00d80e09, 0x20500009, 0x00004202, 0x0b985415,
                0x20e80602, 0x20600004, 0x00000019, 0x0e686830,
                0x21180607, 0x20500009, 0x0000081b, 0x0dc85037,
                0x20c8120a, 0x2060000e, 0x00002412, 0x0dc84c36,
                0x21200809, 0x20900212, 0x00000825, 0x0c683426,
                0x00581800, 0x20700201, 0x00002210, 0x10186437,
                0x00900005, 0x2060020e, 0x00080e1a, 0x0fa8483a,
                0x00600806, 0x20a00212, 0x00080613, 0x0f983437,
                0x00581203, 0x20700009, 0x00080a10, 0x0de84033,
                0x20d81c01, 0x01101000, 0x21702000, 0x1278ae31,
                0x20881201, 0x01000000, 0x21303400, 0x10d88e33,
                0x20782204, 0x01001800, 0x21404c00, 0x10d88e35,
                0x20901002, 0x01182c00, 0x21902800, 0x1038a22b,
                0x01c81a06, 0x00a02402, 0x21301626, 0x10b89e45,
                0x01381201, 0x00c01602, 0x21401619, 0x0f18723f,
                0x01200004, 0x0090060b, 0x20f01615, 0x0f186e40,
                0x01482a04, 0x01404405, 0x2240061c, 0x0eb88a38,
                0x21002409, 0x0058420f, 0x20a0042e, 0x0e789a41,
                0x20800804, 0x00880e06, 0x20e80422, 0x0d08723b,
                0x20700400, 0x00880c01, 0x20e80820, 0x0d08723a,
                0x20a00405, 0x00b80e08, 0x21301c21, 0x0cd88636,
                0x00f00a08, 0x00e8080c, 0x21a82603, 0x0ce8a62b,
                0x00500204, 0x00a00405, 0x2128100a, 0x0b987625,
                0x00400201, 0x00900401, 0x2118100b, 0x0b987625,
                0x00a80a06, 0x00c01c06, 0x21680402, 0x0b887e24,
                0x20f0200c, 0x0108320b, 0x21b80c29, 0x0bb8b217,
                0x20501807, 0x00a82608, 0x21180c1a, 0x0ab87e13,
                0x20101402, 0x00981e03, 0x21080817, 0x0ab87e14,
                0x20c02409, 0x00a8360c, 0x20f00820, 0x0a988213,
                0x00f83a10, 0x01805c1a, 0x22780604, 0x0b68b605,
                0x00681608, 0x01001c0d, 0x21a80c0d, 0x0a788400,
                0x00200201, 0x00e00004, 0x21880c12, 0x0a688001,
                0x00b82209, 0x01203410, 0x21c80e04, 0x0a488205,
                0x20e0100c, 0x00a82217, 0x21003c29, 0x0b78a00e,
                0x20a00c07, 0x00b81a0a, 0x2130141e, 0x0ac88016,
                0x20580a01, 0x00e00402, 0x21701017, 0x0ac88016,
                0x20880404, 0x00a8060a, 0x20f0241e, 0x0a387808,
                0x00a80e07, 0x00e01c0e, 0x21880a01, 0x0c489822,
                0x00c81a07, 0x00e0280c, 0x21900001, 0x0bb87c25,
                0x00880a02, 0x00c01000, 0x21600c07, 0x0bb87425,
                0x00401801, 0x00a82801, 0x21000c07, 0x0ad8741b,
                0x20f00800, 0x00b80a08, 0x2120241e, 0x0d788c30,
                0x21901002, 0x00881209, 0x20f01c24, 0x0d187037,
                0x21602402, 0x00a83205, 0x21300c1f, 0x0d187438,
                0x20900204, 0x00f01403, 0x21a80413, 0x0bd86828,
                0x00603803, 0x00d84e0a, 0x21481612, 0x0f388c38,
                0x00d00c01, 0x00b00604, 0x21382a28, 0x0ef87038,
                0x00c80800, 0x01301401, 0x21f82225, 0x0ef87438,
                0x00202404, 0x00f8320b, 0x21680607, 0x0d486c30,
                0x20c02c01, 0x20884000, 0x01b80c00, 0x1108a62e,
                0x20902400, 0x20a83000, 0x01c00000, 0x0fa87e2e,
                0x20b02801, 0x20a84800, 0x01d00800, 0x0fb87e2d,
                0x20700e01, 0x20700000, 0x01900800, 0x0ed89e29,
                0x01700c00, 0x00382002, 0x00c00225, 0x0f68aa41,
                0x01200801, 0x20181800, 0x00f0061b, 0x0e187a3c,
                0x01600202, 0x00100002, 0x00b80a20, 0x0e28763d,
                0x01001003, 0x20483204, 0x01902616, 0x0d689e34,
                0x20781400, 0x00603401, 0x0048281f, 0x0d28aa43,
                0x20480601, 0x00100c01, 0x00a8101c, 0x0c187a3c,
                0x20700402, 0x00000203, 0x00b80c21, 0x0c187a3c,
                0x20500201, 0x00000003, 0x00d80419, 0x0bb89233,
                0x00780801, 0x00001401, 0x01080c09, 0x0b68ba2f,
                0x00100002, 0x00000201, 0x00d80c0f, 0x0a988226,
                0x00300000, 0x00100402, 0x00b8100c, 0x0a988226,
                0x00480401, 0x00000001, 0x00e01008, 0x0a688e23,
                0x20381603, 0x20203003, 0x0168081f, 0x0a38ba1b,
                0x00380e03, 0x00002404, 0x00d81412, 0x09a88616,
                0x00180e02, 0x00101c03, 0x00c80c14, 0x09a88616,
                0x20381604, 0x20103403, 0x00e80414, 0x09788214,
                0x20102003, 0x20685206, 0x02103816, 0x09c8be01,
                0x20200803, 0x20381e05, 0x0160101a, 0x09488c00,
                0x00100001, 0x20280603, 0x01300816, 0x09488a01,
                0x00301403, 0x20783208, 0x01b0280c, 0x09288204,
                0x20280400, 0x00101004, 0x00d80c12, 0x0a18a813,
                0x20280602, 0x00000804, 0x00f80c13, 0x09a88817,
                0x20600800, 0x20281400, 0x01300019, 0x09988817,
                0x20400402, 0x20280c00, 0x00f80c14, 0x0938780c,
                0x00380a02, 0x00080403, 0x0110280d, 0x0af8a423,
                0x00501002, 0x20282602, 0x0110140c, 0x0a988c27,
                0x00600402, 0x00080801, 0x00e00007, 0x0aa88827,
                0x00581202, 0x20101c06, 0x00d80809, 0x09d8781a,
                0x21080401, 0x20201203, 0x01001015, 0x0c489034,
                0x21780e03, 0x00301805, 0x0070001b, 0x0c18803a,
                0x21481e06, 0x00103807, 0x00c0001a, 0x0c188038,
                0x20d80a01, 0x20400c00, 0x01401c16, 0x0ae8742a,
                0x00983400, 0x20206001, 0x01481e1c, 0x0df88c33,
                0x00e81402, 0x00002205, 0x00e0022b, 0x0df87c35,
                0x00c00004, 0x2068060b, 0x01a01624, 0x0de88036,
                0x00682002, 0x20703a05, 0x01780e12, 0x0c58682e,
                0x20c82e03, 0x00604800, 0x00400c00, 0x10086632,
                0x20982a03, 0x00703c00, 0x20101800, 0x0f084630,
                0x20a82602, 0x00703800, 0x20100400, 0x0f08462f,
                0x20982203, 0x00502400, 0x00303400, 0x0de86627,
                0x01600405, 0x2040020a, 0x01580a23, 0x0e486a44,
                0x01300805, 0x2038060a, 0x00e0021b, 0x0d58423e,
                0x01400402, 0x20280606, 0x00d0061e, 0x0d68463e,
                0x01200805, 0x2030060a, 0x00c0021b, 0x0c885234,
                0x20700400, 0x20381004, 0x01580c21, 0x0bf87645,
                0x20500202, 0x20180405, 0x00d8101d, 0x0b584e3d,
                0x20680a01, 0x00000802, 0x00c8101e, 0x0b584a3e,
                0x20680603, 0x20100406, 0x00d0001c, 0x0ac85a33,
                0x00800400, 0x20280403, 0x0120040b, 0x0a38762f,
                0x00300002, 0x20100202, 0x00c8080e, 0x09c84e28,
                0x00300401, 0x20200000, 0x00e8080e, 0x09c84e28,
                0x00500c03, 0x20281204, 0x00e00c09, 0x09885621,
                0x20600203, 0x20280802, 0x01102022, 0x09186e19,
                0x20180605, 0x20100006, 0x00d01016, 0x08c85216,
                0x20100203, 0x20180403, 0x00e00c17, 0x08c85215,
                0x20680605, 0x00180c07, 0x00a02017, 0x08b85211,
                0x00200405, 0x20200e07, 0x00e81010, 0x08b85c00,
                0x00100404, 0x20200208, 0x00d80414, 0x08784800,
                0x00200402, 0x20280a05, 0x00d00013, 0x08784800,
                0x00500404, 0x00100a09, 0x00700005, 0x08783e03,
                0x20280a04, 0x00000007, 0x01100816, 0x09086813,
                0x20400201, 0x20180404, 0x00d80c17, 0x08c85016,
                0x20680401, 0x20100802, 0x00b81019, 0x08c84c16,
                0x20280400, 0x00200802, 0x00981014, 0x0888480a,
                0x00101005, 0x20281a05, 0x01101010, 0x09e86026,
                0x00780400, 0x20201002, 0x00c8040b, 0x09c85027,
                0x00880602, 0x20200804, 0x00d00008, 0x09c85027,
                0x00300000, 0x00080c02, 0x00b0100f, 0x0918481b,
                0x20f80a07, 0x00200408, 0x00b01412, 0x0b685837,
                0x21a00602, 0x20380c01, 0x01001820, 0x0b48503c,
                0x21a00a01, 0x20382201, 0x00f02421, 0x0b484c3b,
                0x20f00a03, 0x00081002, 0x00701816, 0x0a383c2e,
                0x00901c04, 0x0008420c, 0x00d02a1b, 0x0d284c35,
                0x01001001, 0x20281a04, 0x00c00a30, 0x0d384837,
                0x01000c02, 0x20180a05, 0x00780a2f, 0x0d383c37,
                0x00801002, 0x00382207, 0x00401617, 0x0bc83430,
                0x20f02001, 0x20883800, 0x01700800, 0x0f68322d,
                0x20c02001, 0x20683c00, 0x01500400, 0x0e981e2b,
                0x20c01c01, 0x20783000, 0x01500000, 0x0e981e2c,
                0x20c02403, 0x20684000, 0x01480400, 0x0d383620,
                0x01b80604, 0x00001004, 0x00980e2d, 0x0dc82e44,
                0x01880e02, 0x00201003, 0x00680e25, 0x0d081a3d,
                0x01780603, 0x00000804, 0x00980a23, 0x0d081a3e,
                0x01881206, 0x0030180a, 0x00400225, 0x0c083232,
                0x20800c05, 0x20180a07, 0x00d80c25, 0x0b683248,
                0x20700402, 0x20100202, 0x00a80822, 0x0ae81e3f,
                0x20600803, 0x20180a04, 0x00b80820, 0x0ae81e3f,
                0x20900406, 0x20180a09, 0x00a01022, 0x0a482e34,
                0x00780605, 0x00200409, 0x00b0000d, 0x09983e2f,
                0x00500201, 0x00000403, 0x00a8040c, 0x09582228,
                0x00480602, 0x00100405, 0x0088080e, 0x09582228,
                0x00880e06, 0x00001409, 0x00800406, 0x09082a20,
                0x20900805, 0x00180e07, 0x00c00c24, 0x08783616,
                0x20500401, 0x00081202, 0x00a0081c, 0x08582214,
                0x20400401, 0x00080a03, 0x00a0081a, 0x08682214,
                0x20b00805, 0x20381208, 0x00e0181e, 0x0838220e,
                0x00781606, 0x00301c09, 0x00900409, 0x08383000,
                0x00580602, 0x00100c02, 0x0078080c, 0x08182000,
                0x00400201, 0x00100401, 0x00880c0e, 0x08182000,
                0x00980e04, 0x20101406, 0x00900204, 0x08181e01,
                0x20601006, 0x2028160a, 0x0100101d, 0x08782813,
                0x20500804, 0x00080e04, 0x00980c1b, 0x08582413,
                0x20500403, 0x00180a03, 0x00980c1b, 0x08582414,
                0x20200801, 0x20480a05, 0x00e00817, 0x08181808,
                0x00581203, 0x00201808, 0x00a8080a, 0x09682827,
                0x00780604, 0x00200007, 0x0070000d, 0x09582c27,
                0x00700204, 0x00280406, 0x0070040c, 0x09582827,
                0x00300803, 0x20281201, 0x00c80c10, 0x08b81c1c,
                0x21500400, 0x20280e02, 0x0100201b, 0x0ae8243a,
                0x21b00002, 0x00180604, 0x00700c20, 0x0ad8243e,
                0x21b00003, 0x00280605, 0x00600420, 0x0ad8243d,
                0x21280e06, 0x00101009, 0x00800c19, 0x09d82030,
                0x00d80801, 0x20101a04, 0x00c81627, 0x0cc81836,
                0x01281201, 0x00101c03, 0x00680a35, 0x0cd82037,
                0x01180e01, 0x00201804, 0x00581233, 0x0cd82437,
                0x00a80403, 0x20300e09, 0x00c0061e, 0x0b781430,
                0x20e81c00, 0x00802400, 0x00080800, 0x0f480630,
                0x20b81e02, 0x00602800, 0x00280400, 0x0e90122d,
                0x20a81a01, 0x00702400, 0x00180800, 0x0e90122f,
                0x20981c00, 0x00702c00, 0x00380c00, 0x0d080a24,
                0x01800400, 0x00100001, 0x00a00628, 0x0d980a44,
                0x01600c03, 0x20181205, 0x00c80622, 0x0cf00e3e,
                0x01400402, 0x00180a02, 0x0090021f, 0x0cf00e3e,
                0x01100800, 0x00081800, 0x00d0121b, 0x0bc81231,
                0x20280a01, 0x00101801, 0x00a0001e, 0x0b280649,
                0x20680a03, 0x00200c06, 0x00880c1f, 0x0ad00a40,
                0x20380a02, 0x00201003, 0x0088081c, 0x0ad00e40,
                0x20380401, 0x00200800, 0x00700019, 0x0a180a32,
                0x00200002, 0x20180a03, 0x01001017, 0x0958062f,
                0x00400001, 0x00180603, 0x00b0080e, 0x09400a29,
                0x00200001, 0x00080a03, 0x00c00812, 0x09400a29,
                0x00200602, 0x00180c03, 0x0090180f, 0x08d8061f,
                0x20480a01, 0x20100c02, 0x00e0001d, 0x08400215,
                0x20480801, 0x00000601, 0x00a8081a, 0x08400a14,
                0x20380401, 0x00000000, 0x00a80818, 0x08400a14,
                0x20680402, 0x00300604, 0x00600815, 0x0820060d,
                0x00101002, 0x20381e02, 0x01101012, 0x07f00402,
                0x00300400, 0x20180401, 0x00b8080e, 0x07f00400,
                0x00300202, 0x00000402, 0x00a8080f, 0x07f00601,
                0x00500c00, 0x00181002, 0x00700002, 0x08000601,
                0x00080e03, 0x00101804, 0x00a80413, 0x08500c14,
                0x20180601, 0x00000c00, 0x00a80817, 0x08300412,
                0x20200001, 0x00000602, 0x00b80818, 0x08300412,
                0x20180a01, 0x00401402, 0x00280412, 0x08100809,
                0x00201003, 0x20181e05, 0x01001012, 0x09400c27,
                0x00300401, 0x00080e02, 0x00d00413, 0x09180427,
                0x00300201, 0x00080401, 0x00c00012, 0x09280427,
                0x00680400, 0x00200e02, 0x0070000f, 0x08a00819,
                0x21680a01, 0x00300403, 0x00900018, 0x0ad0103d,
                0x21900400, 0x00080401, 0x00a8081c, 0x0aa8043f,
                0x21800401, 0x00000201, 0x00b8081b, 0x0aa0003d,
                0x21700802, 0x00281e02, 0x00a01022, 0x09c00832,
                0x00e00800, 0x00100401, 0x00a8062b, 0x0cc01436,
                0x01100800, 0x00181401, 0x00900632, 0x0cb80437,
                0x01000800, 0x00181001, 0x00b0022f, 0x0ca80836,
                0x00d00601, 0x00400803, 0x00480a27, 0x0b700c32,
                0x20d02803, 0x20a83400, 0x01982000, 0x0f503230,
                0x20d02402, 0x20a82c00, 0x01581400, 0x0ed0422c,
                0x20b01c01, 0x20982400, 0x01681000, 0x0ed03e2e,
                0x20901c02, 0x20982800, 0x01881000, 0x0d102e23,
                0x01700203, 0x0000080a, 0x00c80e27, 0x0da02643,
                0x01980603, 0x20101006, 0x00a81627, 0x0d403a40,
                0x01500201, 0x20200403, 0x00d81221, 0x0d403a3f,
                0x01200202, 0x20200405, 0x00d8121b, 0x0bd02631,
                0x20400202, 0x00000000, 0x00e0201f, 0x0b502e47,
                0x20800401, 0x20280a02, 0x00e00825, 0x0b103640,
                0x20500a01, 0x20280801, 0x00e0081f, 0x0b103640,
                0x20300401, 0x20280400, 0x00e00419, 0x0a302632,
                0x00400403, 0x00080e07, 0x00e00814, 0x09803a2e,
                0x00500602, 0x20180400, 0x00d0000c, 0x09803a28,
                0x00300401, 0x00080603, 0x00c8040f, 0x09803a29,
                0x00080603, 0x20100002, 0x00d01011, 0x08f02a1d,
                0x20500400, 0x00280c03, 0x00b8081f, 0x08703614,
                0x20300805, 0x00081205, 0x00c81019, 0x08803616,
                0x20200402, 0x00080a01, 0x00b81018, 0x08803215,
                0x20400405, 0x20280e07, 0x00d00011, 0x08502e0c,
                0x00380a02, 0x00301403, 0x0090000f, 0x08303802,
                0x00280a03, 0x00200c08, 0x0088100f, 0x08202e01,
                0x00280602, 0x00100805, 0x00980411, 0x08202e01,
                0x00680603, 0x20100c08, 0x00b81004, 0x08202a02,
                0x20300401, 0x00180a02, 0x00d01417, 0x08903816,
                0x20280601, 0x00000601, 0x00b01017, 0x08602c12,
                0x20180601, 0x00000a01, 0x00b00816, 0x08603012,
                0x20200001, 0x20200201, 0x00e01414, 0x08402c0a,
                0x00581603, 0x00201801, 0x00c0080d, 0x09904028,
                0x00400002, 0x20180605, 0x00c80412, 0x09403026,
                0x00200003, 0x20180a05, 0x00d80413, 0x09403026,
                0x00680603, 0x20200401, 0x00e0180d, 0x08d0341b,
                0x21600407, 0x20381208, 0x0110001b, 0x0b10443c,
                0x21980800, 0x20100002, 0x00b80c1d, 0x0ad0283d,
                0x21780e01, 0x20100803, 0x00b80c1a, 0x0ad0283d,
                0x21680807, 0x20300209, 0x00f8041f, 0x0a003c31,
                0x00e81e04, 0x2020200d, 0x00d0062a, 0x0d104038,
                0x01080c00, 0x20300801, 0x00c80631, 0x0cc02437,
                0x00f80800, 0x20400c01, 0x00d0022e, 0x0cc02835,
                0x00c81204, 0x2050140c, 0x00f80a24, 0x0bb03432,
                0x20a81a02, 0x00904400, 0x20500400, 0x0ff05a35,
                0x20b81602, 0x00a03800, 0x20700400, 0x0f805e30,
                0x20a81a02, 0x00b03000, 0x20700c00, 0x0f805e31,
                0x20880a02, 0x00702800, 0x20380400, 0x0da05627,
                0x01481004, 0x00400606, 0x00c0261d, 0x0e205644,
                0x01780802, 0x00500605, 0x00701e21, 0x0dd05e41,
                0x01580404, 0x00500606, 0x00600e1e, 0x0dd05e40,
                0x01080804, 0x00400605, 0x00700a17, 0x0c505233,
                0x20680604, 0x00000406, 0x00e0181f, 0x0be06643,
                0x20880800, 0x00300400, 0x00800423, 0x0ba06240,
                0x20680e04, 0x00301005, 0x00700420, 0x0bb0623f,
                0x20280605, 0x00200c07, 0x00800819, 0x0aa05231,
                0x00700404, 0x20200608, 0x00f0040c, 0x0a30722d,
                0x00300000, 0x00100601, 0x00a8040b, 0x0a106628,
                0x00300002, 0x00000606, 0x00b0040c, 0x0a106629,
                0x20300404, 0x00180e08, 0x00b01013, 0x09705a1b,
                0x20500a01, 0x20100403, 0x01080c22, 0x09106e16,
                0x00100801, 0x00100a01, 0x00b81814, 0x09106218,
                0x00000800, 0x00100001, 0x00c81416, 0x09106218,
                0x00000c00, 0x00200002, 0x00881c0a, 0x08d05a0d,
                0x00180801, 0x00180601, 0x01101012, 0x08d06804,
                0x20180a01, 0x00280802, 0x00d00418, 0x08a05602,
                0x20180400, 0x00280800, 0x00c00416, 0x08a05a02,
                0x00380601, 0x00500003, 0x00800c0b, 0x08a04e02,
                0x20200204, 0x20100003, 0x01001016, 0x09407418,
                0x20300000, 0x00180a01, 0x00b00815, 0x08f05814,
                0x20280601, 0x00180401, 0x00a00415, 0x08f05814,
                0x20280a01, 0x00400401, 0x00801813, 0x08c0580d,
                0x00200c05, 0x2018220a, 0x01000c0e, 0x0a40782a,
                0x00600601, 0x00100201, 0x00980c0d, 0x09d05c25,
                0x00500a01, 0x00080603, 0x00980c0e, 0x09d05c25,
                0x00300602, 0x00280e02, 0x0090140e, 0x0970641e,
                0x21000e03, 0x00200006, 0x00882413, 0x0bd0743b,
                0x21900c01, 0x00281603, 0x0098141f, 0x0b40503b,
                0x21801004, 0x00282205, 0x0088141d, 0x0b50503b,
                0x20f01406, 0x00381609, 0x00681816, 0x0aa06430,
                0x00a01001, 0x00583604, 0x00801a1d, 0x0db06c38,
                0x01000c00, 0x00581c01, 0x0048162f, 0x0d304436,
                0x00f00602, 0x00681007, 0x0008162d, 0x0d304436,
                0x00800a03, 0x00881c09, 0x00080e18, 0x0c405431,
                0x20c82e04, 0x20a00000, 0x01705000, 0x10b07e2f,
                0x20d82800, 0x20c80400, 0x01703400, 0x10407e2b,
                0x20c81401, 0x20e81800, 0x01a01800, 0x1050822c,
                0x20982a02, 0x20600c00, 0x01103000, 0x0e607224,
                0x01802008, 0x21582e0b, 0x01800223, 0x0f109e41,
                0x01901800, 0x21681601, 0x01600626, 0x0ec0963e,
                0x01801202, 0x21380c04, 0x01480a24, 0x0eb0923e,
                0x01401005, 0x21081607, 0x0148061c, 0x0d208632,
                0x20b00e05, 0x20d80c0c, 0x00c80424, 0x0ce09a40,
                0x20800c01, 0x20f81202, 0x01100024, 0x0c90963f,
                0x20a00401, 0x20f81202, 0x01101024, 0x0c90923e,
                0x20780607, 0x20c8040a, 0x00f00c20, 0x0b707e30,
                0x00b80c02, 0x20a01603, 0x00901005, 0x0b40a62b,
                0x00300402, 0x20d00001, 0x00d80c0b, 0x0b109228,
                0x00500001, 0x20e00401, 0x00d80807, 0x0b109628,
                0x00100c08, 0x20c8060b, 0x00e8080a, 0x0a508a1a,
                0x20681205, 0x20d01804, 0x00e01825, 0x0a20aa17,
                0x00281606, 0x20c01c07, 0x00d00813, 0x0a009219,
                0x00080a03, 0x20e01403, 0x00e00417, 0x0a00961a,
                0x00081a08, 0x20a0280e, 0x00d8040d, 0x09b0820f,
                0x00201406, 0x21281a0b, 0x01400812, 0x09f0b405,
                0x20201405, 0x21281a0c, 0x0140041a, 0x09809603,
                0x00001003, 0x21081208, 0x01380417, 0x09909603,
                0x00200c03, 0x2108120a, 0x01701c0e, 0x09608e01,
                0x20780e06, 0x20d00008, 0x00e00419, 0x0a60b01a,
                0x20300601, 0x20d80804, 0x00e81c14, 0x09d08c14,
                0x20300400, 0x20c80c02, 0x00e81416, 0x09d08813,
                0x20200000, 0x20d81001, 0x01300414, 0x09a08c10,
                0x00700c07, 0x21000609, 0x00f81805, 0x0b70b829,
                0x00580c00, 0x20b00800, 0x00c8080c, 0x0ab08424,
                0x00481203, 0x20b01403, 0x00b80c0b, 0x0ab08424,
                0x00080601, 0x20d00401, 0x00f8040d, 0x0a609020,
                0x21382206, 0x20d0240a, 0x00f80819, 0x0cf0a438,
                0x21880800, 0x20f01601, 0x00e8181c, 0x0c108038,
                0x21400003, 0x20f01205, 0x01082018, 0x0c108036,
                0x20980c00, 0x20e02201, 0x0108180d, 0x0b90902d,
                0x00b02403, 0x21580a09, 0x01881a21, 0x0ec0ac36,
                0x00f00c00, 0x21100c00, 0x0138262e, 0x0de07431,
                0x00d00e01, 0x20f00004, 0x01482226, 0x0dd06c32,
                0x00501000, 0x21180400, 0x0198160f, 0x0d00842d,
                0x20f0340e, 0x00289800, 0x20788400, 0x11e0aa2b,
                0x20d02c12, 0x00588800, 0x20f89400, 0x11609a29,
                0x20b0200f, 0x00686400, 0x21189400, 0x1180a22f,
                0x20c02c0d, 0x00088000, 0x00087400, 0x0f609a22,
                0x01f81611, 0x00f03c2b, 0x22d86a2e, 0x10508642,
                0x0188161b, 0x01003c35, 0x23184627, 0x0fe0723d,
                0x01680e17, 0x00e0282c, 0x22a83e20, 0x0fe0763f,
                0x01a80e13, 0x00b02426, 0x22084a23, 0x0e307a33,
                0x20f80803, 0x00a01609, 0x21e03830, 0x0e008241,
                0x2078040d, 0x00b0121d, 0x22203821, 0x0dc08240,
                0x2090000d, 0x00b00219, 0x22102822, 0x0dc0823e,
                0x20e0040b, 0x00780e13, 0x2160282a, 0x0c707e2f,
                0x00d00602, 0x00881201, 0x21902402, 0x0c809228,
                0x00580607, 0x00a0080a, 0x21d8080b, 0x0c307e2a,
                0x00680607, 0x00b0080d, 0x22181008, 0x0c307e29,
                0x00980e08, 0x0090200d, 0x21a80c00, 0x0b70821a,
                0x20b00c07, 0x00a82207, 0x21d01028, 0x0b809e13,
                0x20400c07, 0x00982a0a, 0x21b01819, 0x0b208217,
                0x20400404, 0x00a80e07, 0x21f0181a, 0x0b208218,
                0x20700c08, 0x00682a0c, 0x2120281a, 0x0ab0860d,
                0x00980e0c, 0x00c0240d, 0x22580407, 0x0b60a405,
                0x00480e05, 0x00c0280a, 0x2258200e, 0x0ac08603,
                0x00380e03, 0x00b02005, 0x2228100f, 0x0ac08604,
                0x00580a09, 0x0090140c, 0x21c00004, 0x0a909002,
                0x20d00c13, 0x00a82a18, 0x21d00021, 0x0bc0a419,
                0x20400000, 0x00900606, 0x21b00819, 0x0ae07c10,
                0x20300000, 0x00900606, 0x21a00018, 0x0ae08010,
                0x20200408, 0x00880e0f, 0x21700814, 0x0ad0940e,
                0x00e81218, 0x00d03021, 0x22781a05, 0x0ce09827,
                0x00500c04, 0x00982206, 0x21a8140c, 0x0bb07423,
                0x00200c06, 0x00882606, 0x2198140f, 0x0bc07423,
                0x00000604, 0x00980808, 0x21a8180e, 0x0b90881f,
                0x2190181b, 0x00984627, 0x21b01c24, 0x0e40a037,
                0x21700002, 0x00b80405, 0x2228281b, 0x0d106836,
                0x21180a03, 0x00b0140b, 0x22282813, 0x0d106834,
                0x20900005, 0x00980602, 0x21c8040d, 0x0cc0882c,
                0x00e8260f, 0x00f06c2d, 0x22c8522a, 0x10209437,
                0x00f81204, 0x00c0340c, 0x22380e2e, 0x0ed06030,
                0x00b80e01, 0x00a02402, 0x21d00622, 0x0ec0642f,
                0x00581604, 0x00a0340c, 0x21e8060f, 0x0e30882d
            }
        },
        {//capture
            {
                0x00482609, 0x20100000, 0x0000bc00, 0x13b8a246,
                0x00282202, 0x00500000, 0x00009800, 0x1348aa47,
                0x00281e03, 0x00500000, 0x00009c00, 0x1348aa47,
                0x00582a0a, 0x00600000, 0x0000d400, 0x11f8c243,
                0x00301c10, 0x20a0021b, 0x0000140c, 0x11985640,
                0x00880e03, 0x20300205, 0x00007006, 0x11186244,
                0x00880e02, 0x20300208, 0x00007005, 0x11185e45,
                0x00001411, 0x2040021d, 0x00002810, 0x0ff86a3b,
                0x20280e12, 0x20300016, 0x00002814, 0x0fd86230,
                0x20800c08, 0x20600210, 0x0000041c, 0x0f283e33,
                0x20901008, 0x2060020f, 0x0008081d, 0x0f283e33,
                0x00080a10, 0x00100015, 0x0000240f, 0x0e58722b,
                0x20801418, 0x20700221, 0x0008280d, 0x0e984620,
                0x00100204, 0x20300008, 0x00081004, 0x0dd84a24,
                0x00280605, 0x2020000a, 0x00080802, 0x0dd84e24,
                0x20900814, 0x2020021b, 0x0008040f, 0x0d48521c,
                0x00d81a17, 0x20200027, 0x00001a0b, 0x0da86a1f,
                0x00100002, 0x20300203, 0x00000808, 0x0cd84a1e,
                0x00100002, 0x20300204, 0x00000c08, 0x0cc84a1f,
                0x00c81613, 0x00000020, 0x00002a0c, 0x0c78661b,
                0x20b00c0e, 0x2080021f, 0x0000141c, 0x0cc84216,
                0x00100203, 0x20300002, 0x00000409, 0x0c084615,
                0x20300202, 0x20300002, 0x0000000c, 0x0bf84614,
                0x20900809, 0x20500219, 0x00002818, 0x0b983615,
                0x00400604, 0x2040000c, 0x00082e05, 0x0c58560b,
                0x20300803, 0x20300206, 0x0008100c, 0x0b88460b,
                0x00400400, 0x20300203, 0x00080403, 0x0b88460d,
                0x00300803, 0x20200002, 0x00083202, 0x0b28420a,
                0x00080a01, 0x20300002, 0x00001807, 0x0bf85e0a,
                0x00100001, 0x20100002, 0x00081804, 0x0b485203,
                0x20500403, 0x20200202, 0x00081810, 0x0b384e03,
                0x20181205, 0x0000000a, 0x00001c06, 0x0ae84e08,
                0x00300201, 0x20500000, 0x00001406, 0x0bc84e03,
                0x00080603, 0x20100005, 0x00000c08, 0x0b485803,
                0x00300203, 0x20100006, 0x00080400, 0x0b485805,
                0x00500601, 0x20400206, 0x00001c03, 0x0ab83604,
                0x20780403, 0x20500204, 0x0000080e, 0x0bd84408,
                0x00080403, 0x20200204, 0x00001407, 0x0b884c0b,
                0x00080801, 0x20100201, 0x00001809, 0x0b88500a,
                0x20a0080a, 0x20400209, 0x00082811, 0x0ab83406,
                0x00800605, 0x20600004, 0x00000206, 0x0c38440c,
                0x00080a04, 0x20300005, 0x00001408, 0x0bf84413,
                0x00080a05, 0x20400003, 0x00001c08, 0x0bf84413,
                0x00d80e10, 0x20200016, 0x00001e0d, 0x0af84808,
                0x20700408, 0x2050020a, 0x00081413, 0x0c984413,
                0x00100405, 0x20500208, 0x00080407, 0x0cb8381b,
                0x00001008, 0x2060020b, 0x00081c08, 0x0cb8381b,
                0x20a00c0f, 0x20500219, 0x00080819, 0x0b382c0e,
                0x00580607, 0x2040000d, 0x00000202, 0x0d68541b,
                0x00080607, 0x20400008, 0x0000040a, 0x0da84023,
                0x00180e0a, 0x2020000e, 0x00000809, 0x0da84c23,
                0x00880a09, 0x20200013, 0x00080a05, 0x0be84418,
                0x20300401, 0x2050020a, 0x0000040f, 0x0e484821,
                0x20700c08, 0x2050020e, 0x0008240b, 0x0ee83c2e,
                0x20700807, 0x20500210, 0x0008100c, 0x0ee8402e,
                0x20300203, 0x20400207, 0x00002012, 0x0cb8341f,
                0x20201003, 0x20500209, 0x00085007, 0x0f88582f,
                0x00480e04, 0x2020000b, 0x0008260d, 0x10785c32,
                0x00400a02, 0x20200005, 0x0008420b, 0x10685833,
                0x20301007, 0x20400214, 0x0008540a, 0x0de8382f,
                0x20504007, 0x00386800, 0x20401400, 0x1278aa33,
                0x00003a01, 0x20685c00, 0x00f03800, 0x12088e38,
                0x20103602, 0x20685800, 0x00e04400, 0x12088e37,
                0x20404406, 0x20887400, 0x01102400, 0x1098a22d,
                0x01383610, 0x01205015, 0x21e0260f, 0x10c8923a,
                0x00400c03, 0x00882a03, 0x20802400, 0x10487238,
                0x00500c05, 0x00782a06, 0x20802602, 0x10486e38,
                0x0118260b, 0x00903c11, 0x20d01e0d, 0x0f188634,
                0x2150100e, 0x00682a1b, 0x20a0402a, 0x0f08762d,
                0x00081603, 0x00b02405, 0x2120040d, 0x0e986232,
                0x00081a06, 0x00b02c08, 0x2120000e, 0x0e986233,
                0x21000807, 0x00081e11, 0x00204424, 0x0d886a28,
                0x01081609, 0x00a0380e, 0x21482e14, 0x0df86e22,
                0x20200002, 0x00500205, 0x2080100c, 0x0d385a25,
                0x20300404, 0x00480a08, 0x2070140d, 0x0d385a25,
                0x00b00202, 0x00201404, 0x2058160d, 0x0c985e1c,
                0x20a02007, 0x0058460c, 0x2060241c, 0x0cd87a1e,
                0x00200000, 0x00500001, 0x20800005, 0x0c385a1d,
                0x00400202, 0x00500403, 0x20980403, 0x0c385a1d,
                0x20701802, 0x00283e03, 0x00002414, 0x0ba86618,
                0x00381604, 0x00d0280a, 0x21781e03, 0x0c286e12,
                0x20280400, 0x00600400, 0x2090080c, 0x0b685a15,
                0x20580401, 0x00500601, 0x2080080e, 0x0b685614,
                0x00081201, 0x00701c04, 0x20e80601, 0x0b18520f,
                0x00180400, 0x00800e03, 0x20d01007, 0x0b987210,
                0x00080800, 0x00401400, 0x20880806, 0x0ae8560c,
                0x00480601, 0x00400c01, 0x20880401, 0x0ae8560d,
                0x00580a03, 0x00401800, 0x20700c00, 0x0aa8520f,
                0x20100c03, 0x00781a04, 0x20a00409, 0x0b387208,
                0x00200001, 0x00200601, 0x20380406, 0x0aa85a06,
                0x20280401, 0x00300e02, 0x20580c0e, 0x0a985606,
                0x20701806, 0x00183209, 0x20100c11, 0x0a485207,
                0x00100205, 0x00900007, 0x21000806, 0x0b186c00,
                0x20400601, 0x00281001, 0x2020080e, 0x0a985c04,
                0x00000202, 0x00280403, 0x20200807, 0x0a985c05,
                0x00480605, 0x00700809, 0x20d81203, 0x0a385000,
                0x20400806, 0x00980e08, 0x2100000a, 0x0b386408,
                0x00300800, 0x00481201, 0x20600003, 0x0ae8580d,
                0x00101001, 0x00281e04, 0x20300808, 0x0ae8580c,
                0x00080801, 0x00601604, 0x20b80407, 0x0a384c02,
                0x00380a05, 0x00c00c08, 0x21380601, 0x0b986c0d,
                0x20500802, 0x00681400, 0x20a0000d, 0x0b685815,
                0x20500c04, 0x00681a01, 0x20b80c0b, 0x0b685816,
                0x20301002, 0x00482a01, 0x20600c09, 0x0a68540a,
                0x00180403, 0x00a01206, 0x21080409, 0x0c086410,
                0x00680603, 0x00800c04, 0x20f80601, 0x0c28581b,
                0x00981608, 0x00902c0b, 0x21180a04, 0x0c285c1a,
                0x00581204, 0x00802806, 0x20f81000, 0x0ad84c0f,
                0x20200602, 0x00980c03, 0x20c0040b, 0x0ca86c1a,
                0x20700804, 0x00780e05, 0x20c00012, 0x0d185823,
                0x20901006, 0x0048220c, 0x20601417, 0x0d085823,
                0x20100803, 0x00481a06, 0x2050180f, 0x0b585016,
                0x20200400, 0x00900a02, 0x20f80c05, 0x0da86822,
                0x00081206, 0x00902806, 0x21081a03, 0x0e685c2b,
                0x20180a03, 0x00801805, 0x20e82604, 0x0e585c2d,
                0x20600603, 0x00680402, 0x20b8080b, 0x0c384c23,
                0x00181401, 0x00a02e04, 0x20e83602, 0x0ec87427,
                0x00101004, 0x0058220d, 0x20680602, 0x0fb8642d,
                0x00280801, 0x00601604, 0x20781a06, 0x0fb8682b,
                0x00380c03, 0x00702e09, 0x20c8460a, 0x0d685027,
                0x00283603, 0x00805800, 0x00303000, 0x1128aa35,
                0x20183604, 0x00704c00, 0x20403800, 0x11187636,
                0x20383604, 0x00704800, 0x20404000, 0x11187a33,
                0x00183202, 0x00a05800, 0x20802400, 0x0f78922f,
                0x00301003, 0x2058460a, 0x01906006, 0x0f889a32,
                0x00700805, 0x2068060c, 0x00f01a03, 0x0f686237,
                0x00a00806, 0x2060020d, 0x00f01608, 0x0f786237,
                0x00500801, 0x20283207, 0x00e05804, 0x0e08822d,
                0x20700402, 0x20100e02, 0x0088140f, 0x0e187a28,
                0x20400e01, 0x20481c03, 0x00e00811, 0x0dc8662f,
                0x20600a02, 0x20482004, 0x00e00c16, 0x0dc86630,
                0x20900804, 0x00080604, 0x00200013, 0x0cb86222,
                0x00780603, 0x00080805, 0x00a01606, 0x0cf88223,
                0x00000000, 0x20100000, 0x00700407, 0x0c785e23,
                0x00100001, 0x20200601, 0x00700004, 0x0c785a23,
                0x00980e05, 0x00201007, 0x00100e09, 0x0bd8661c,
                0x20380402, 0x20201a05, 0x00980c10, 0x0be8721e,
                0x00280601, 0x20200401, 0x00700406, 0x0b785a1d,
                0x00280601, 0x20200001, 0x00800407, 0x0b785a1e,
                0x20400403, 0x20100a07, 0x00500011, 0x0af85a18,
                0x20100201, 0x20281002, 0x00f00c07, 0x0b287e13,
                0x20200802, 0x20280e03, 0x0080000c, 0x0ab85a14,
                0x20400402, 0x20280e03, 0x0070000d, 0x0ab85a14,
                0x20100400, 0x00081002, 0x00700804, 0x0a68620e,
                0x00000000, 0x20280400, 0x00a00804, 0x0aa8760d,
                0x00000201, 0x20180403, 0x00580406, 0x0a385e0b,
                0x00400201, 0x20180403, 0x00580401, 0x0a385a0c,
                0x00200202, 0x00180402, 0x00301400, 0x09f85a0c,
                0x00200001, 0x20200e01, 0x00a80805, 0x0a487208,
                0x00380400, 0x20100400, 0x00300405, 0x09f85a06,
                0x20180400, 0x00000601, 0x0040040c, 0x09e85a06,
                0x00000003, 0x00001605, 0x00281007, 0x09a84e08,
                0x20400201, 0x20280401, 0x00c0080d, 0x0a287401,
                0x20400001, 0x20100202, 0x0048040e, 0x09e85804,
                0x20200401, 0x20180601, 0x00400009, 0x09e85805,
                0x20180602, 0x00000004, 0x00700406, 0x09885a01,
                0x00280800, 0x20301201, 0x00c80402, 0x0a586c08,
                0x00400201, 0x20100c02, 0x00580c02, 0x0a285c0c,
                0x00280601, 0x00001001, 0x00381004, 0x0a28580c,
                0x00100000, 0x20100202, 0x00700c03, 0x09885403,
                0x20100400, 0x20480c00, 0x01000807, 0x0aa8700c,
                0x20300001, 0x20100a02, 0x0078080d, 0x0aa86013,
                0x20100001, 0x20100e01, 0x00880c0a, 0x0aa86013,
                0x00000401, 0x20100a01, 0x00781007, 0x09b85009,
                0x00480601, 0x20300401, 0x00d00803, 0x0b186c12,
                0x00300000, 0x20180401, 0x00900403, 0x0b68641b,
                0x00100601, 0x20281802, 0x00b01407, 0x0b58681b,
                0x00180602, 0x00080c03, 0x00901406, 0x0a18580f,
                0x20400403, 0x20480603, 0x00e8080e, 0x0bc8681a,
                0x20380800, 0x20100c00, 0x0088040d, 0x0c586023,
                0x20380801, 0x20101601, 0x00580c0b, 0x0c585c24,
                0x00200402, 0x20200204, 0x00680808, 0x0ab84c17,
                0x20380e05, 0x20301005, 0x00c80403, 0x0cb87022,
                0x20500601, 0x20380c00, 0x00c00c03, 0x0d98642b,
                0x20300202, 0x20300001, 0x00a00001, 0x0d98602a,
                0x20a00202, 0x20100402, 0x00780c0d, 0x0b985421,
                0x00200c03, 0x2068120a, 0x01080e06, 0x0dc87023,
                0x00500002, 0x20201605, 0x00982a0f, 0x0ee8602a,
                0x00300402, 0x20380a05, 0x00b80e0a, 0x0ed8602a,
                0x00680401, 0x00001203, 0x00881a13, 0x0ca85c23,
                0x20101a04, 0x20a84000, 0x01a04c00, 0x0ff86e2b,
                0x20502402, 0x20384c00, 0x01001c00, 0x10385e2c,
                0x20702c03, 0x20585800, 0x01201400, 0x10385e29,
                0x20101202, 0x20583400, 0x01504400, 0x0e587625,
                0x00601008, 0x2048160c, 0x00a80a04, 0x0ea8522d,
                0x00c81605, 0x00601807, 0x20400a0f, 0x0ec84e33,
                0x01081606, 0x00601c0a, 0x20400616, 0x0ed84e34,
                0x00601005, 0x20181607, 0x00700603, 0x0d285a27,
                0x20481207, 0x0000100d, 0x00580c0d, 0x0d485e29,
                0x20500403, 0x00100607, 0x00200815, 0x0d284630,
                0x20800405, 0x0018060a, 0x0020081a, 0x0d284631,
                0x20680e05, 0x00301008, 0x0020000f, 0x0c085a21,
                0x00401406, 0x20481a09, 0x00900a01, 0x0c285a23,
                0x00000201, 0x00180402, 0x00380406, 0x0bd84a23,
                0x00180603, 0x00200406, 0x00280403, 0x0bd84a23,
                0x00400c04, 0x00081a06, 0x00701602, 0x0b18521b,
                0x20181605, 0x00101008, 0x0030040c, 0x0b185a1d,
                0x00100000, 0x00280601, 0x00200407, 0x0ad84a1d,
                0x00100402, 0x00180a04, 0x00300408, 0x0ad8461d,
                0x20181604, 0x00301406, 0x0010080a, 0x0a584e17,
                0x20200c05, 0x20381208, 0x00700409, 0x0a585613,
                0x00080401, 0x00200800, 0x00180c09, 0x0a184a15,
                0x20280400, 0x00200801, 0x0018100a, 0x0a184a14,
                0x20100803, 0x20280a07, 0x00700806, 0x09b8460f,
                0x00000601, 0x00080405, 0x00381004, 0x09d85a0c,
                0x20100601, 0x00180401, 0x00280409, 0x09984e0c,
                0x00200201, 0x00100002, 0x00200004, 0x09984e0d,
                0x00000800, 0x00080803, 0x00580403, 0x0958460a,
                0x00380a03, 0x00100c03, 0x00201005, 0x09885a08,
                0x00300400, 0x00280400, 0x00200005, 0x09584e05,
                0x20100401, 0x00180a02, 0x0020000b, 0x09484e05,
                0x00381203, 0x00201003, 0x00300c02, 0x09184607,
                0x20400002, 0x20180605, 0x00500c0e, 0x09685001,
                0x20380401, 0x00200800, 0x0018040d, 0x09484c04,
                0x20180400, 0x00200401, 0x00180808, 0x09484c05,
                0x20300402, 0x20280e05, 0x0070100a, 0x08f83e01,
                0x00200201, 0x20180402, 0x00400001, 0x09984c09,
                0x00380601, 0x00100802, 0x00200403, 0x09884c0c,
                0x00180800, 0x00200802, 0x00200405, 0x09884c0b,
                0x00200802, 0x20180800, 0x00580c01, 0x09083c04,
                0x20100201, 0x00000400, 0x00400807, 0x09e8480d,
                0x20280601, 0x00000800, 0x0040080b, 0x09f84813,
                0x00080a02, 0x00000801, 0x00400c09, 0x09f84812,
                0x00181205, 0x00101006, 0x00300807, 0x09383c08,
                0x00200802, 0x20180e03, 0x00500003, 0x0a684812,
                0x00300402, 0x20280a03, 0x00600005, 0x0ab8481b,
                0x00000c04, 0x20281206, 0x00680409, 0x0ab8441b,
                0x20201406, 0x20281a0a, 0x00800009, 0x09883810,
                0x20180a03, 0x00200c03, 0x0028040a, 0x0b184c19,
                0x20300202, 0x00080403, 0x0040000d, 0x0ba84824,
                0x20280602, 0x00100005, 0x00380409, 0x0bb84c24,
                0x00480a04, 0x00300c08, 0x00181004, 0x0a284017,
                0x20700802, 0x00081604, 0x00500408, 0x0c084c22,
                0x20700802, 0x00080603, 0x00380803, 0x0cf8442c,
                0x20500a01, 0x00080601, 0x00200402, 0x0cf8482a,
                0x20b80401, 0x00000603, 0x0050080f, 0x0b083c20,
                0x00600201, 0x00201803, 0x00082a11, 0x0d185021,
                0x00781201, 0x00201803, 0x00281214, 0x0e384c28,
                0x00500001, 0x00200a04, 0x0028120f, 0x0e384828,
                0x00700c00, 0x20100000, 0x00681216, 0x0c184021,
                0x20600201, 0x00400c00, 0x20500800, 0x0f684626,
                0x20380a02, 0x20202000, 0x00580400, 0x0fb8362d,
                0x20480e01, 0x20102800, 0x00380c00, 0x0fb8322c,
                0x20300c01, 0x20380800, 0x00680800, 0x0db84221,
                0x00e81000, 0x00401e03, 0x20200211, 0x0e18422e,
                0x00701003, 0x20482205, 0x00d01208, 0x0e383a32,
                0x00a01002, 0x20482204, 0x00d0120c, 0x0e483a32,
                0x00b81204, 0x00001c04, 0x0040060a, 0x0c984227,
                0x20c01006, 0x00081e04, 0x0058041a, 0x0ca84a2a,
                0x20280a03, 0x00000c05, 0x0058040e, 0x0ca8362f,
                0x20280e02, 0x00001004, 0x00580410, 0x0ca83630,
                0x20a00c04, 0x20481a06, 0x00b01017, 0x0b683e20,
                0x00a81a09, 0x0040280c, 0x2020020a, 0x0b884a22,
                0x20100001, 0x20280603, 0x00700409, 0x0b683224,
                0x20200400, 0x20280a02, 0x00800809, 0x0b583623,
                0x00880a05, 0x20101006, 0x00600208, 0x0a983a19,
                0x20601808, 0x20282a0f, 0x00801013, 0x0a78461d,
                0x00100400, 0x20280400, 0x00780805, 0x0a68361d,
                0x00300001, 0x20100201, 0x00780803, 0x0a68361d,
                0x20601404, 0x20482608, 0x00a01010, 0x09c83615,
                0x00380e02, 0x00401408, 0x20282001, 0x09c84a13,
                0x00100001, 0x20180400, 0x00680c09, 0x09983a16,
                0x20200001, 0x20180400, 0x00680c0c, 0x09983a16,
                0x00280a02, 0x00101006, 0x00180c00, 0x0948360d,
                0x20180a01, 0x00100c01, 0x00300809, 0x09384e0e,
                0x20280602, 0x20100803, 0x0058040a, 0x09083e0d,
                0x00180601, 0x20100403, 0x00500006, 0x09083e0d,
                0x00080a02, 0x20100c01, 0x00500c06, 0x08e8360b,
                0x00000800, 0x20181202, 0x00601408, 0x08e84a06,
                0x00300000, 0x20200601, 0x00700404, 0x08c83e05,
                0x00080400, 0x20100a01, 0x0060040a, 0x08b83e05,
                0x00001001, 0x20381a04, 0x00801005, 0x08a82e05,
                0x20200001, 0x00100201, 0x00200009, 0x08d84003,
                0x20200402, 0x20280a02, 0x0088040d, 0x08b83c03,
                0x20100401, 0x20280601, 0x00800009, 0x08b83c04,
                0x20280401, 0x00100400, 0x00280805, 0x08982800,
                0x00100201, 0x00100002, 0x00200403, 0x09084009,
                0x00200601, 0x20180803, 0x00600005, 0x08f83c0c,
                0x00100a01, 0x20280c01, 0x00700007, 0x08f83c0c,
                0x00480a03, 0x00001004, 0x00300401, 0x08982c03,
                0x20200000, 0x00100400, 0x00200807, 0x09683c0e,
                0x20300801, 0x00080a02, 0x0030040b, 0x09783814,
                0x20200801, 0x00080c00, 0x0030040a, 0x09783c14,
                0x20401004, 0x20281e06, 0x00700c0c, 0x08c82809,
                0x00580a01, 0x00101000, 0x00300400, 0x09e83812,
                0x00580601, 0x00200802, 0x00180402, 0x0a38381b,
                0x00480e03, 0x00201802, 0x00180403, 0x0a38381b,
                0x00481604, 0x00202006, 0x00181201, 0x0938280f,
                0x20300400, 0x20280a02, 0x0070080e, 0x0a983819,
                0x20500403, 0x00180603, 0x00400010, 0x0b283823,
                0x20400805, 0x20180e05, 0x0078040f, 0x0b283823,
                0x00000801, 0x20381205, 0x00900c0c, 0x09b82815,
                0x20580402, 0x00000e01, 0x00581004, 0x0b883821,
                0x20581204, 0x00101805, 0x00300000, 0x0c78382b,
                0x20680e05, 0x00101409, 0x00300001, 0x0c683c2b,
                0x20a00402, 0x20180800, 0x00580c0c, 0x0a982821,
                0x00581202, 0x20101806, 0x0070020e, 0x0c884020,
                0x00600c02, 0x20281607, 0x00901212, 0x0db83827,
                0x00680403, 0x20200a08, 0x00800e13, 0x0db83427,
                0x00781a02, 0x00002407, 0x00300216, 0x0ba82c21,
                0x20781603, 0x20101000, 0x00702c00, 0x0ed84223,
                0x20580e01, 0x00300400, 0x20101c00, 0x0f582a2b,
                0x20580a01, 0x00300400, 0x00001c00, 0x0f582a2a,
                0x20281a01, 0x00501c00, 0x20301c00, 0x0d383a22,
                0x00e01804, 0x20681a08, 0x00b00a13, 0x0da8322d,
                0x00b80801, 0x00001603, 0x0010060d, 0x0de81e32,
                0x00c80800, 0x00101602, 0x00100610, 0x0df81e32,
                0x00801002, 0x20181a04, 0x00501606, 0x0c283225,
                0x20680a01, 0x00001403, 0x00581415, 0x0c28362c,
                0x20400c00, 0x20281201, 0x00600413, 0x0c58222f,
                0x20400c01, 0x20281202, 0x00600014, 0x0c582230,
                0x20680a01, 0x00300c01, 0x20100010, 0x0b082a1f,
                0x00101000, 0x20282201, 0x00a01403, 0x0af83a20,
                0x00000000, 0x00100000, 0x00280405, 0x0b182223,
                0x20200201, 0x00100401, 0x00280407, 0x0b182223,
                0x00300401, 0x00280e01, 0x00200e02, 0x0a382a18,
                0x00281201, 0x00202000, 0x00181004, 0x0a08321d,
                0x00100000, 0x00100601, 0x00280805, 0x0a08221e,
                0x00300001, 0x00100202, 0x00280802, 0x0a08221e,
                0x20180e01, 0x00201c02, 0x20180808, 0x09782615,
                0x00100c02, 0x20381202, 0x00a80409, 0x09383a16,
                0x00200400, 0x00100000, 0x00380c08, 0x09382a17,
                0x20100000, 0x00100000, 0x00380c0c, 0x09382a17,
                0x00100801, 0x20180e02, 0x00600805, 0x08e82a0f,
                0x20200601, 0x00080c03, 0x0060040b, 0x08a83e0c,
                0x20300400, 0x00180801, 0x0030000d, 0x08a82e0d,
                0x00000201, 0x00280401, 0x00300008, 0x08a82e0d,
                0x20200400, 0x00180c01, 0x00300807, 0x08982609,
                0x00180800, 0x00100800, 0x00300806, 0x08783604,
                0x00300000, 0x00300000, 0x00100003, 0x08682a04,
                0x00000400, 0x00280601, 0x00200409, 0x08582a05,
                0x00180c00, 0x00201000, 0x00000402, 0x08582205,
                0x20100001, 0x20100201, 0x00600408, 0x08683003,
                0x20180400, 0x00300800, 0x0018080b, 0x08582803,
                0x00000000, 0x00300400, 0x00180808, 0x08582804,
                0x00000000, 0x20100201, 0x00400406, 0x08481e01,
                0x00180400, 0x20100001, 0x00600805, 0x08983009,
                0x00080800, 0x00200801, 0x00300008, 0x08982c0c,
                0x00080800, 0x00200c01, 0x00200008, 0x08982c0c,
                0x00100400, 0x00080c00, 0x00400804, 0x08581c04,
                0x20200201, 0x20180401, 0x00600807, 0x08f82c0f,
                0x20280800, 0x00000800, 0x00400409, 0x09182c15,
                0x20280a01, 0x00000800, 0x00500809, 0x09182c15,
                0x00080e01, 0x00101401, 0x00080406, 0x08881809,
                0x00400401, 0x20180e01, 0x00500801, 0x09882813,
                0x00300400, 0x20180601, 0x00700404, 0x09d8281b,
                0x00100c01, 0x20281201, 0x00700805, 0x09d8281c,
                0x00100c01, 0x20281602, 0x00500c06, 0x08e81c0f,
                0x20380601, 0x00000801, 0x0038040b, 0x0a382419,
                0x20380400, 0x20100801, 0x0050000d, 0x0ac82823,
                0x00080c00, 0x00101001, 0x00380809, 0x0ac82423,
                0x00280a01, 0x00200c02, 0x00080807, 0x09881816,
                0x20300001, 0x20100202, 0x00500002, 0x0b282820,
                0x20900800, 0x20281400, 0x00700c05, 0x0c08282c,
                0x20b00601, 0x20281001, 0x0070100a, 0x0c08282c,
                0x20880400, 0x00000601, 0x0030000c, 0x0a581820,
                0x00300c00, 0x20181c01, 0x00400a08, 0x0c182820,
                0x00880801, 0x00000e02, 0x00280a19, 0x0d682027,
                0x00900401, 0x20180a04, 0x0030021c, 0x0d682028,
                0x00500800, 0x20182000, 0x0040160e, 0x0b681c22,
                0x20901c03, 0x00482c00, 0x00480800, 0x0e782a1f,
                0x20500c00, 0x00081c00, 0x00900400, 0x0f181a28,
                0x20600800, 0x00181400, 0x00800400, 0x0f181a27,
                0x20301c02, 0x20382c00, 0x00d80400, 0x0cd8261e,
                0x01182e06, 0x00a03009, 0x2070061b, 0x0d582a2c,
                0x00b00000, 0x00380801, 0x00200210, 0x0db81a30,
                0x00c00401, 0x00380c01, 0x00200212, 0x0dc81a31,
                0x00981e04, 0x00401c07, 0x00100a0a, 0x0bd82623,
                0x20800805, 0x20180e09, 0x00601019, 0x0bd8222d,
                0x20481201, 0x00301001, 0x00000012, 0x0c28162f,
                0x20381202, 0x00301402, 0x00000012, 0x0c281631,
                0x20700003, 0x20380a06, 0x00901012, 0x0ac81a1f,
                0x00180603, 0x00100c05, 0x00380c02, 0x0aa82220,
                0x00000001, 0x00000601, 0x00400005, 0x0ae81624,
                0x20300401, 0x20180603, 0x00500408, 0x0ad81623,
                0x00400a02, 0x20380403, 0x00780a04, 0x09f81a18,
                0x00100c03, 0x00081204, 0x00600405, 0x09b8221d,
                0x00100000, 0x00000400, 0x00580404, 0x09d8161f,
                0x00480601, 0x00000802, 0x00480400, 0x09d8161f,
                0x20200402, 0x20180e03, 0x00600c0a, 0x09381a15,
                0x00280e02, 0x00301404, 0x00280807, 0x08e82217,
                0x00280800, 0x00000800, 0x00600008, 0x08f81618,
                0x20180800, 0x20100a01, 0x0060000c, 0x08f81618,
                0x00280a01, 0x00000c02, 0x00380403, 0x08b8160e,
                0x20380400, 0x00000601, 0x0070080e, 0x0858220d,
                0x20400000, 0x20200400, 0x0080000e, 0x0858160d,
                0x20100000, 0x20200000, 0x0080000a, 0x0858160d,
                0x20200201, 0x20200400, 0x00600808, 0x08581609,
                0x00000801, 0x00081201, 0x00700406, 0x08182203,
                0x00300400, 0x20300201, 0x00900003, 0x08181a04,
                0x00000000, 0x20200000, 0x00880408, 0x08181605,
                0x00101002, 0x20281603, 0x00700402, 0x08281204,
                0x00080602, 0x00200402, 0x00400407, 0x08182003,
                0x20100000, 0x20280400, 0x0080000b, 0x08181802,
                0x00080601, 0x20200001, 0x00800008, 0x08181803,
                0x00000201, 0x00100403, 0x00280404, 0x08181400,
                0x00100802, 0x00280e03, 0x00400406, 0x08481c0a,
                0x00000800, 0x20280c00, 0x00800009, 0x0848180c,
                0x00000c00, 0x20381201, 0x00900409, 0x0848180c,
                0x00100000, 0x00100601, 0x00300404, 0x08281004,
                0x20380601, 0x00400402, 0x00200408, 0x08b81c10,
                0x20200401, 0x00080800, 0x00500009, 0x08d81815,
                0x20200801, 0x00080c00, 0x0058040a, 0x08d81815,
                0x20100801, 0x00080e01, 0x00400408, 0x0858100a,
                0x00400000, 0x00300601, 0x00200601, 0x09481814,
                0x00480601, 0x00100402, 0x00200003, 0x0998181b,
                0x00281202, 0x00201003, 0x00100003, 0x0998181c,
                0x00280e02, 0x00201003, 0x00100003, 0x08c81010,
                0x20480400, 0x00300000, 0x0030040c, 0x09f81819,
                0x20300801, 0x00080a02, 0x0030000e, 0x0a881824,
                0x00000c02, 0x20281204, 0x0060040a, 0x0a981422,
                0x00100001, 0x20180a03, 0x00500809, 0x09581016,
                0x20200800, 0x00200000, 0x00380800, 0x0ae81820,
                0x20980602, 0x00200802, 0x00100005, 0x0bd8182d,
                0x20d00201, 0x00180402, 0x0028040b, 0x0bc8182d,
                0x20800601, 0x00080401, 0x0038040b, 0x0a280c20,
                0x00280400, 0x00400a01, 0x00280a07, 0x0bd81c1f,
                0x00900c01, 0x00181204, 0x0038061a, 0x0d281827,
                0x00b80400, 0x00200a01, 0x00180a1f, 0x0d281828,
                0x00500c01, 0x00180602, 0x00280e0e, 0x0b381022,
                0x20681605, 0x20702400, 0x00f00c00, 0x0e380622,
                0x20500400, 0x20500800, 0x00980c00, 0x0f000e2a,
                0x20600801, 0x20600000, 0x00b81400, 0x0f000e29,
                0x20181a04, 0x00102800, 0x00300c00, 0x0cb80a21,
                0x00b03409, 0x20b8520e, 0x01800612, 0x0d18062b,
                0x00b00601, 0x20580400, 0x00c8060f, 0x0da00631,
                0x00d00602, 0x20400002, 0x00a80a12, 0x0da00632,
                0x00502406, 0x20583e0b, 0x00d00a03, 0x0ba80a22,
                0x20380606, 0x00100c0d, 0x00482010, 0x0ba80e2c,
                0x20501002, 0x20381a02, 0x00a80413, 0x0c00022f,
                0x20501003, 0x20381e04, 0x00a00015, 0x0c000230,
                0x20400400, 0x00480806, 0x2028200c, 0x0aa80e1d,
                0x20200003, 0x00080604, 0x00600c07, 0x0a780e20,
                0x00000201, 0x00100004, 0x00480804, 0x0ac80623,
                0x20180602, 0x00100405, 0x00380c06, 0x0ac80623,
                0x00381605, 0x00601c07, 0x20300e01, 0x09d81218,
                0x00381203, 0x00001804, 0x00500001, 0x09880a1d,
                0x00180601, 0x00000400, 0x00400805, 0x09c0021f,
                0x00300201, 0x00000201, 0x00400802, 0x09c0021f,
                0x20100403, 0x00100207, 0x00300c07, 0x09280614,
                0x00100402, 0x20480e04, 0x00b0100a, 0x08b80a17,
                0x00200c02, 0x20181204, 0x00580408, 0x08e00218,
                0x00000802, 0x00080e03, 0x0048040b, 0x08e00218,
                0x00100c00, 0x00181001, 0x00380406, 0x08980a0e,
                0x20300401, 0x20280401, 0x0088040c, 0x0828060c,
                0x20400201, 0x00200003, 0x0018080f, 0x0848060d,
                0x20180601, 0x00300403, 0x0018080a, 0x0848060e,
                0x20380601, 0x00400402, 0x20100408, 0x08480a07,
                0x00180a02, 0x20101002, 0x00700005, 0x07f80603,
                0x00380601, 0x00200800, 0x00100402, 0x08080604,
                0x00080601, 0x00200400, 0x00100407, 0x08080605,
                0x00380e01, 0x00301801, 0x00000602, 0x08180604,
                0x20200402, 0x20380603, 0x00b00409, 0x07f80404,
                0x20100402, 0x00180602, 0x0028040b, 0x07f00002,
                0x00000402, 0x00180a02, 0x00200009, 0x07f00003,
                0x20100001, 0x00000202, 0x00500808, 0x08080601,
                0x00280e03, 0x20301004, 0x00900003, 0x0820000a,
                0x00080a01, 0x00200c02, 0x00280409, 0x0838040c,
                0x00080e01, 0x00201003, 0x00180808, 0x0838040c,
                0x00100000, 0x00000000, 0x00500003, 0x08100005,
                0x20400803, 0x20580e05, 0x00d0080a, 0x08900010,
                0x20100000, 0x00000601, 0x00500009, 0x08b80415,
                0x20180a02, 0x00000c00, 0x00500409, 0x08b80414,
                0x00080601, 0x00000800, 0x00500007, 0x0840000a,
                0x00580604, 0x20400405, 0x00b00202, 0x09200014,
                0x00300401, 0x00080a01, 0x00680404, 0x0978081b,
                0x00001004, 0x20281e06, 0x00800007, 0x0978041c,
                0x00000c00, 0x20181201, 0x00700406, 0x08b00010,
                0x20400805, 0x20480a06, 0x00c0000c, 0x09d00419,
                0x20280a02, 0x00100c03, 0x0040000c, 0x0a680823,
                0x00281204, 0x00301808, 0x00080c06, 0x0a780823,
                0x00200401, 0x00180400, 0x00380806, 0x09400016,
                0x20381205, 0x20301808, 0x00a00001, 0x0ac00020,
                0x20b00802, 0x20280e04, 0x00700407, 0x0bb8082d,
                0x20e80401, 0x20100604, 0x0060080d, 0x0ba8082c,
                0x20980800, 0x00200c02, 0x0028040d, 0x0a180420,
                0x00300802, 0x20780a07, 0x00f00e08, 0x0bb0081f,
                0x00a80e01, 0x00001804, 0x0048121e, 0x0d080826,
                0x00b00800, 0x20280a01, 0x00780a20, 0x0d080828,
                0x00581a01, 0x00002403, 0x00500610, 0x0b200022,
                0x20b00002, 0x00681400, 0x20600400, 0x0e50121e,
                0x20581000, 0x00701000, 0x20700c00, 0x0f20122a,
                0x20581601, 0x00801c00, 0x20800c00, 0x0f30122a,
                0x20500801, 0x00081c00, 0x00500800, 0x0cb00a1d,
                0x01482203, 0x00604805, 0x20b8221f, 0x0d30162e,
                0x00b80400, 0x00300e01, 0x2030020f, 0x0dc01631,
                0x00b80401, 0x00300a02, 0x20100610, 0x0dc01632,
                0x00b81e01, 0x00203403, 0x20281a0e, 0x0bb01224,
                0x20900402, 0x20280604, 0x0070101d, 0x0ba00a2f,
                0x20380c00, 0x00201800, 0x00080811, 0x0c201631,
                0x20280e01, 0x00201801, 0x00080811, 0x0c201631,
                0x20480601, 0x20400e01, 0x00b00412, 0x0a900a21,
                0x00080400, 0x20100000, 0x00500003, 0x0a700e1f,
                0x20100000, 0x20180601, 0x00600408, 0x0ad01224,
                0x20300001, 0x20180601, 0x0060040a, 0x0ad01224,
                0x20201003, 0x20682604, 0x00e00c06, 0x09b00615,
                0x00100e01, 0x20281401, 0x00500804, 0x09800e1b,
                0x00000401, 0x20180a01, 0x00500005, 0x09d0121e,
                0x00200000, 0x20100000, 0x00580401, 0x09d0121e,
                0x00280602, 0x20100805, 0x00580800, 0x09200e13,
                0x00200001, 0x00200601, 0x00000006, 0x08c01216,
                0x00580a02, 0x00101402, 0x00380804, 0x08f01219,
                0x00280a01, 0x00001001, 0x00580408, 0x08f01219,
                0x00180800, 0x20201201, 0x00700406, 0x08900e0f,
                0x20280a02, 0x00100802, 0x0020040d, 0x0830120c,
                0x20500001, 0x20280602, 0x00800412, 0x0840120e,
                0x20200000, 0x20280601, 0x0090040d, 0x0850120e,
                0x20400401, 0x20480a01, 0x00b0040a, 0x08300e07,
                0x00000802, 0x00080e03, 0x00400807, 0x08001202,
                0x00200401, 0x20280800, 0x00880403, 0x08101204,
                0x00000401, 0x20280800, 0x00800007, 0x08001204,
                0x00200800, 0x20381001, 0x00800a01, 0x08100e02,
                0x00000202, 0x00100402, 0x00180406, 0x08001404,
                0x00100201, 0x20100402, 0x00680409, 0x08001002,
                0x00180601, 0x20100802, 0x00680406, 0x08001003,
                0x20100400, 0x20180400, 0x00500006, 0x08001000,
                0x20100802, 0x00181202, 0x00100807, 0x0840140b,
                0x20100401, 0x20180e02, 0x0070040b, 0x08300c0c,
                0x20100801, 0x20280e02, 0x0080080b, 0x08300c0b,
                0x00100000, 0x00000000, 0x00400004, 0x08201005,
                0x20180601, 0x00300c02, 0x20280405, 0x08b01811,
                0x20100201, 0x00000001, 0x00480407, 0x08c00c15,
                0x20300400, 0x00080801, 0x00400009, 0x08c00c15,
                0x20100400, 0x20180400, 0x00400007, 0x0850100a,
                0x00100001, 0x00280602, 0x00000403, 0x09401815,
                0x00480400, 0x00000400, 0x00480403, 0x09800c1a,
                0x00480e01, 0x00101801, 0x00280c01, 0x0980101b,
                0x00180800, 0x00000c00, 0x00380405, 0x08c01410,
                0x00180602, 0x00200c02, 0x20180406, 0x09f01819,
                0x20400801, 0x20181201, 0x0060000f, 0x0a700c24,
                0x20200c01, 0x20281a02, 0x0080080e, 0x0a700822,
                0x00380601, 0x20100800, 0x00600006, 0x09501415,
                0x20701003, 0x00182204, 0x00200c09, 0x0ae01821,
                0x20980400, 0x00100801, 0x00280803, 0x0bb00c2d,
                0x20c00000, 0x00180400, 0x00280409, 0x0bb00c2d,
                0x20900800, 0x20281202, 0x0080040e, 0x0a201020,
                0x00581202, 0x00501405, 0x20680a10, 0x0be01c21,
                0x00900400, 0x00080c00, 0x0040061a, 0x0d000826,
                0x00b80400, 0x00100c01, 0x00180a21, 0x0d100827,
                0x00400800, 0x00082000, 0x0050120d, 0x0b301024,
                0x20901401, 0x20480c00, 0x00c81800, 0x0e701e20,
                0x20501c01, 0x20782000, 0x00f80c00, 0x0f402228,
                0x20601c01, 0x20782400, 0x01180800, 0x0f502228,
                0x20400e01, 0x20200000, 0x00580c00, 0x0cd01e1e,
                0x01100000, 0x00181802, 0x0080121a, 0x0d50122d,
                0x00b00203, 0x00080404, 0x00700610, 0x0df02230,
                0x00c00202, 0x00080403, 0x00700211, 0x0df02231,
                0x00900402, 0x00181a03, 0x00500e0b, 0x0bd01623,
                0x20700204, 0x00100403, 0x00200419, 0x0bc01e2e,
                0x20300403, 0x00080e05, 0x00700811, 0x0c502630,
                0x20300402, 0x00080e04, 0x00700811, 0x0c502631,
                0x20500202, 0x00280404, 0x20280411, 0x0ab01a20,
                0x00100806, 0x00180e08, 0x00480403, 0x0aa01e20,
                0x20100201, 0x00100003, 0x00380807, 0x0b102624,
                0x20200000, 0x00100002, 0x00380809, 0x0b002624,
                0x00180402, 0x00201202, 0x20380c02, 0x09e01e16,
                0x00080a06, 0x0020140b, 0x00180c06, 0x09b01a1b,
                0x00180400, 0x00100800, 0x00300005, 0x0a00261e,
                0x00200201, 0x00100401, 0x00300002, 0x0a00261e,
                0x00000203, 0x00100004, 0x00100805, 0x09401613,
                0x00300003, 0x00100208, 0x00601405, 0x08f01e16,
                0x00300400, 0x00080800, 0x00500806, 0x09202619,
                0x00100000, 0x00080a01, 0x00400809, 0x09202619,
                0x00100001, 0x00180a04, 0x00101005, 0x08c01e0e,
                0x20400601, 0x00180802, 0x0050000f, 0x08601e0c,
                0x20400001, 0x00100201, 0x00380410, 0x0880260e,
                0x20200000, 0x00100000, 0x0038040c, 0x0880260e,
                0x20380400, 0x00200400, 0x20180809, 0x08602207,
                0x00100001, 0x00200400, 0x00380404, 0x08302202,
                0x00300000, 0x00100400, 0x00280803, 0x08402605,
                0x00000001, 0x00100000, 0x00380807, 0x08402605,
                0x00200201, 0x00100802, 0x00080400, 0x08401e03,
                0x20180601, 0x00200402, 0x00400408, 0x08301c04,
                0x00000201, 0x00100002, 0x0030000a, 0x08302002,
                0x00000201, 0x00100002, 0x00300008, 0x08302003,
                0x20180601, 0x00100400, 0x00200805, 0x08301c00,
                0x00100001, 0x00100602, 0x00500005, 0x0870200b,
                0x00000001, 0x00100602, 0x00380409, 0x0860200c,
                0x00000001, 0x00000601, 0x00380409, 0x0860200b,
                0x00100403, 0x00180603, 0x00300004, 0x08502005,
                0x20200201, 0x00180401, 0x00600407, 0x08e02011,
                0x20200201, 0x00000001, 0x00480409, 0x08e01c14,
                0x20300201, 0x00000001, 0x0048040a, 0x08e02015,
                0x20180603, 0x00200805, 0x00200007, 0x08801c0a,
                0x00200000, 0x00100201, 0x00500001, 0x09802015,
                0x00400001, 0x00100201, 0x00400003, 0x09a01c1a,
                0x00300002, 0x00180a02, 0x00400402, 0x09b01c1b,
                0x00100402, 0x00180a04, 0x00400c05, 0x08f02010,
                0x20100000, 0x00100001, 0x00600409, 0x0a30241a,
                0x20380602, 0x00000802, 0x0038080e, 0x0a901c23,
                0x20180604, 0x00101005, 0x0028080c, 0x0a901c22,
                0x00200201, 0x00100003, 0x00200006, 0x09902416,
                0x20580a02, 0x00101401, 0x00580405, 0x0b202820,
                0x20900402, 0x00080a03, 0x00580404, 0x0bd0182c,
                0x20c00403, 0x20180a06, 0x00600009, 0x0bd01c2c,
                0x20880601, 0x00100c00, 0x0020040d, 0x0a602420,
                0x00400c01, 0x20181a04, 0x00a00e0b, 0x0c202420,
                0x00900601, 0x00000404, 0x0038121a, 0x0d201426,
                0x00a00601, 0x00080804, 0x00480e1f, 0x0d201426,
                0x00400802, 0x00080605, 0x00580a0d, 0x0b702423,
                0x20882203, 0x00003000, 0x00101800, 0x0ec03622,
                0x20481e03, 0x00603400, 0x20501800, 0x0fb0362a,
                0x20581a03, 0x00603400, 0x20601800, 0x0fb03a2a,
                0x20482604, 0x00602800, 0x20102400, 0x0d10261e,
                0x01102406, 0x20881e0a, 0x00c80e18, 0x0d903a2e,
                0x00880803, 0x20180609, 0x00801e0c, 0x0e403e30,
                0x00980c03, 0x20100209, 0x00701a0e, 0x0e503e31,
                0x00b01405, 0x2038120b, 0x00880a0d, 0x0c103225,
                0x20b80e04, 0x00000408, 0x0058041b, 0x0c002e2c,
                0x20100c01, 0x20380800, 0x0078180c, 0x0cb04230,
                0x20100c00, 0x20380801, 0x0078180e, 0x0cb04231,
                0x20780800, 0x00300004, 0x00581415, 0x0ae02221,
                0x00700803, 0x20200a04, 0x00680e05, 0x0ae03221,
                0x20200201, 0x20100003, 0x0068080a, 0x0b603625,
                0x20380400, 0x00000402, 0x0058080b, 0x0b603625,
                0x00300202, 0x00100404, 0x00400000, 0x0a202216,
                0x20681203, 0x00000005, 0x00801811, 0x09f02a1b,
                0x00100201, 0x20100000, 0x00600804, 0x0a50361e,
                0x00200601, 0x20100001, 0x00600403, 0x0a60361e,
                0x20380c01, 0x00100203, 0x00501809, 0x09702612,
                0x00600c02, 0x20480604, 0x00800a02, 0x09403a14,
                0x00300401, 0x00080602, 0x00500006, 0x09803a19,
                0x00100401, 0x00080603, 0x00500008, 0x09803a19,
                0x00300800, 0x20280400, 0x00580401, 0x09002a0d,
                0x20400201, 0x20100401, 0x00780411, 0x08b03a0c,
                0x20400400, 0x00000000, 0x0058080f, 0x08e0360e,
                0x20200000, 0x00000001, 0x0058080c, 0x08e0360f,
                0x20300401, 0x00080601, 0x00580409, 0x08a02a08,
                0x00280801, 0x20100601, 0x00800804, 0x08803602,
                0x00300000, 0x00100001, 0x00580403, 0x08903206,
                0x00100400, 0x00100000, 0x00580406, 0x08903206,
                0x00181201, 0x00100802, 0x00400c02, 0x08802a02,
                0x20200000, 0x20480401, 0x0090040a, 0x08803805,
                0x20180400, 0x00100000, 0x0050040c, 0x08803002,
                0x20100000, 0x00180601, 0x0050000a, 0x08803002,
                0x20100400, 0x20380601, 0x00600805, 0x08802c01,
                0x00280a02, 0x20300801, 0x00800802, 0x08d03c0b,
                0x00180400, 0x00100201, 0x00500007, 0x08b0300c,
                0x00180800, 0x00200401, 0x00400008, 0x08b0300b,
                0x00400000, 0x20200400, 0x00580401, 0x08903004,
                0x20300403, 0x20580a04, 0x00a00008, 0x09404011,
                0x20380400, 0x20100001, 0x0050000a, 0x09303014,
                0x20480a01, 0x20100400, 0x0050040b, 0x09303015,
                0x20480801, 0x20180601, 0x00600c0c, 0x08d0300b,
                0x00300203, 0x20400405, 0x00880401, 0x09d03c15,
                0x00400401, 0x20280601, 0x00580802, 0x09f0301a,
                0x00601003, 0x20380a03, 0x00681000, 0x09f0301a,
                0x00300e01, 0x20400001, 0x00680800, 0x09403411,
                0x20100004, 0x20380605, 0x00900809, 0x0a90401a,
                0x20580602, 0x20100002, 0x0050000f, 0x0ae02c23,
                0x20580a03, 0x00100005, 0x00400411, 0x0ad02822,
                0x00180401, 0x20100202, 0x00600809, 0x09e03016,
                0x20600603, 0x20300006, 0x00800405, 0x0b804022,
                0x20700802, 0x20180603, 0x00581001, 0x0c202c2b,
                0x20900402, 0x00000605, 0x00480803, 0x0c102c2c,
                0x20a00000, 0x20280401, 0x0050040d, 0x0ab03421,
                0x00500002, 0x20300e05, 0x0080020f, 0x0c904820,
                0x00880e01, 0x00100c04, 0x00480617, 0x0d502424,
                0x00900601, 0x00000003, 0x0058121b, 0x0d602424,
                0x00680601, 0x20201402, 0x00480a12, 0x0bc03822,
                0x20b00808, 0x00783400, 0x00182000, 0x0f303a1e,
                0x20780e02, 0x00082000, 0x00d02c00, 0x10104624,
                0x20881204, 0x00281800, 0x00b03800, 0x10204624,
                0x20801406, 0x20484000, 0x01081800, 0x0d704219,
                0x01782a11, 0x00804c19, 0x20c80e22, 0x0e103a2f,
                0x00b01806, 0x20281e07, 0x00581a15, 0x0ee0562e,
                0x00d01809, 0x2038220b, 0x00581617, 0x0ee05a2f,
                0x0108220c, 0x00103411, 0x00081218, 0x0c804225,
                0x20f0180f, 0x2028221a, 0x00701823, 0x0c70462e,
                0x00081205, 0x0040180b, 0x2038180c, 0x0d404a33,
                0x20181608, 0x0040200f, 0x2038180f, 0x0d404a34,
                0x2070100b, 0x20781612, 0x00d00419, 0x0b404624,
                0x00a8220c, 0x00402014, 0x20180a08, 0x0b503e21,
                0x20300002, 0x00000204, 0x00300c0d, 0x0be04a26,
                0x20300406, 0x20180a0a, 0x00500c0d, 0x0be04a26,
                0x00180a0a, 0x20300410, 0x00880404, 0x0a703a15,
                0x20a0240b, 0x20482e11, 0x00700c16, 0x0a60461a,
                0x00000201, 0x00000002, 0x00300005, 0x0ad04a1d,
                0x00080604, 0x00000407, 0x00380404, 0x0ad04a1d,
                0x20201c0a, 0x2058260f, 0x00900006, 0x09d04210,
                0x00881608, 0x00501c10, 0x20480e07, 0x09c04212,
                0x00380401, 0x00000a01, 0x00400004, 0x0a004a19,
                0x00300002, 0x20100604, 0x00400805, 0x0a004e19,
                0x00280e05, 0x0020140d, 0x00081401, 0x0960360d,
                0x20580801, 0x00000607, 0x00302412, 0x09304e0c,
                0x20480a01, 0x20100c01, 0x0050000f, 0x09504a0f,
                0x20280400, 0x20100401, 0x0068040d, 0x09504a10,
                0x20280a02, 0x20100e03, 0x00501809, 0x09003a08,
                0x00301005, 0x20281a06, 0x00480c03, 0x09005202,
                0x00380400, 0x20300201, 0x00800404, 0x09104a06,
                0x00180800, 0x20200801, 0x00700007, 0x09004a06,
                0x00001806, 0x20382a09, 0x00780404, 0x08e03e02,
                0x20200205, 0x00200409, 0x20280c0b, 0x09104805,
                0x20200a01, 0x20380800, 0x0088040c, 0x08f04802,
                0x00000601, 0x20300000, 0x00800009, 0x08f04802,
                0x20180603, 0x0030080a, 0x20281004, 0x08e03402,
                0x00000402, 0x00280e05, 0x20100c03, 0x0960480c,
                0x00100801, 0x20281202, 0x00680807, 0x0930440b,
                0x00101001, 0x20381a04, 0x00880409, 0x0920480b,
                0x00380e03, 0x00200800, 0x00001801, 0x09003805,
                0x00000001, 0x00400402, 0x20480c05, 0x09d04c11,
                0x20300802, 0x00180c00, 0x0038140a, 0x09a04014,
                0x20500c04, 0x00181602, 0x0038180b, 0x09a04015,
                0x20301809, 0x20181e0a, 0x00280c0b, 0x0940400b,
                0x00080a04, 0x00300804, 0x20301005, 0x0a604816,
                0x00580a04, 0x00300c06, 0x20180401, 0x0a60381a,
                0x00981a07, 0x0040240b, 0x20280a04, 0x0a603818,
                0x00281e0b, 0x00502411, 0x20500402, 0x09b03812,
                0x00200805, 0x00180607, 0x20100005, 0x0b20501b,
                0x20600404, 0x00180a06, 0x00300011, 0x0b403c22,
                0x20800c05, 0x2028160a, 0x00701016, 0x0b403c22,
                0x00200c07, 0x20180e0f, 0x00401407, 0x0a504416,
                0x20a80604, 0x00300808, 0x2020080b, 0x0c105023,
                0x20581605, 0x00201807, 0x00180602, 0x0c80382a,
                0x20680e01, 0x00100c04, 0x00380e02, 0x0c803c2c,
                0x20900a02, 0x00280406, 0x0008140e, 0x0b204020,
                0x00781002, 0x00200e05, 0x00001a14, 0x0d305822,
                0x00601003, 0x20381e09, 0x00700e13, 0x0db03c23,
                0x00880a01, 0x20201002, 0x00500618, 0x0dc03c23,
                0x00581400, 0x00400800, 0x20101610, 0x0c403c23,
                0x20303805, 0x20f82000, 0x01686800, 0x0fc06627,
                0x20905404, 0x21384000, 0x00e85000, 0x10d07e24,
                0x20b05c03, 0x21584c00, 0x01184800, 0x10e07a22,
                0x20201402, 0x20480400, 0x00585000, 0x0e206e22,
                0x00600a06, 0x20182c0f, 0x00d00e09, 0x0e803e2c,
                0x01181606, 0x00302c0b, 0x2038261c, 0x0f905e32,
                0x01581205, 0x0020280a, 0x20282a22, 0x0fa05e33,
                0x00501e01, 0x00282c07, 0x00480e06, 0x0d104a25,
                0x00181602, 0x00102603, 0x00200809, 0x0d10562c,
                0x20501002, 0x20281606, 0x00801017, 0x0dd05635,
                0x20901002, 0x20281e05, 0x0080141e, 0x0dd05635,
                0x00480e04, 0x00801c03, 0x20880c07, 0x0be04e24,
                0x20202c07, 0x20483e08, 0x00b8040c, 0x0bd05221,
                0x20180601, 0x00200002, 0x00380409, 0x0c705625,
                0x00380400, 0x00200401, 0x00280c03, 0x0c805a25,
                0x20a00007, 0x00681a09, 0x00000814, 0x0af04617,
                0x00182e06, 0x00703c0c, 0x20481005, 0x0af04e19,
                0x20180c02, 0x00100201, 0x00300407, 0x0b70561d,
                0x20480800, 0x00180400, 0x0030080b, 0x0b70561e,
                0x00881a06, 0x0060340c, 0x20682209, 0x0a604611,
                0x00100403, 0x20481e07, 0x00a02809, 0x0a404e12,
                0x00400603, 0x20200004, 0x00300003, 0x0aa05a18,
                0x00400201, 0x20100001, 0x00200001, 0x0aa05a17,
                0x20300c01, 0x00081606, 0x00701c0e, 0x09d0420f,
                0x20401a02, 0x20381003, 0x0038080b, 0x09d05a08,
                0x20400802, 0x20180e04, 0x0030080f, 0x0a005a0f,
                0x20200401, 0x20180a03, 0x0030040d, 0x0a005a10,
                0x20400402, 0x00480e02, 0x00200406, 0x09904a04,
                0x00780802, 0x00301a02, 0x20181203, 0x09b05a04,
                0x00300001, 0x00180400, 0x20180c03, 0x09b05a06,
                0x00000401, 0x00080e01, 0x00180408, 0x09a05a06,
                0x00780e02, 0x00402404, 0x20181e05, 0x09704a04,
                0x20780a02, 0x00000403, 0x00500813, 0x09a05004,
                0x20280a03, 0x00100c04, 0x2028040c, 0x09905401,
                0x20180a02, 0x00100804, 0x20280409, 0x09905403,
                0x20480800, 0x00180602, 0x0070140e, 0x09504000,
                0x00300403, 0x20200204, 0x00680602, 0x09f0540d,
                0x00280402, 0x00000e04, 0x00180805, 0x09d0540a,
                0x00180802, 0x00001603, 0x00080c05, 0x09d0580a,
                0x00001402, 0x00081a02, 0x00680401, 0x09804408,
                0x00100203, 0x00000404, 0x00700007, 0x0a60500f,
                0x20180602, 0x20201003, 0x0058100a, 0x0a305011,
                0x20100201, 0x20201002, 0x00581409, 0x0a305011,
                0x00681e04, 0x00502c05, 0x00080801, 0x09c04409,
                0x20400c03, 0x00081604, 0x00700c0a, 0x0b005018,
                0x00100401, 0x20380e02, 0x00800807, 0x0ae0481a,
                0x00100c01, 0x20282201, 0x00901008, 0x0ae04819,
                0x20901c03, 0x20282e06, 0x00b01c13, 0x0a204413,
                0x00780e04, 0x00301405, 0x00200602, 0x0bd0541b,
                0x20280c00, 0x20200800, 0x0058040b, 0x0bc04c22,
                0x20381a02, 0x00001802, 0x0010000c, 0x0bd05023,
                0x00980e02, 0x00501805, 0x00080e08, 0x0ae04c18,
                0x20e81004, 0x00080a07, 0x00702013, 0x0cc05824,
                0x20901802, 0x20482201, 0x00780405, 0x0d00482a,
                0x20701c03, 0x20581e04, 0x00780c02, 0x0d004c2a,
                0x20b81400, 0x00201202, 0x00601414, 0x0bb04c1e,
                0x00803a02, 0x20482007, 0x00581a19, 0x0df06425,
                0x00900201, 0x00201804, 0x20181a1b, 0x0e404824,
                0x00700e02, 0x00180c06, 0x00080a16, 0x0e404424,
                0x00503801, 0x20383203, 0x00a80e10, 0x0cc05024,
                0x0028c802, 0x02b08400, 0x21700800, 0x10a06632,
                0x20691001, 0x03e0c000, 0x22b03c00, 0x11b0422b,
                0x20892003, 0x0420c400, 0x22f03800, 0x11c03e29,
                0x00088c05, 0x01e04000, 0x20781c00, 0x0f006629,
                0x00100e01, 0x20781405, 0x00982405, 0x0f206a2f,
                0x00b00a01, 0x20780c04, 0x00500211, 0x10406234,
                0x01000204, 0x20580408, 0x00300218, 0x10506235,
                0x00382a04, 0x2040240f, 0x00982c00, 0x0db06229,
                0x20100c02, 0x20481402, 0x00480807, 0x0dc06229,
                0x20280e03, 0x20501802, 0x00200811, 0x0e906a33,
                0x20780801, 0x20501603, 0x00200819, 0x0e906a34,
                0x00080606, 0x20e00003, 0x0110180b, 0x0c806223,
                0x00483a07, 0x20104807, 0x20100404, 0x0c906624,
                0x20200800, 0x20880e06, 0x0080080b, 0x0d306e26,
                0x00300202, 0x20700201, 0x00700804, 0x0d406a26,
                0x20301409, 0x20f8160e, 0x0118180b, 0x0b906a18,
                0x20503406, 0x20f84e0e, 0x01101411, 0x0b90661a,
                0x00001806, 0x20682205, 0x00681c06, 0x0c20661e,
                0x20301406, 0x20781e07, 0x0078100c, 0x0c20661e,
                0x00200605, 0x2098140d, 0x00c80803, 0x0af05612,
                0x00401002, 0x20281004, 0x20282c02, 0x0af06210,
                0x00180e06, 0x00000c0c, 0x20380807, 0x0b505a18,
                0x00380605, 0x2020040a, 0x20180c02, 0x0b505e17,
                0x20281202, 0x20801601, 0x00801409, 0x0a70620c,
                0x20682e06, 0x0020340b, 0x20500c0e, 0x0a805609,
                0x20300002, 0x20300a06, 0x0000080b, 0x0ab0620f,
                0x20100401, 0x20300604, 0x0000040b, 0x0ab06210,
                0x20201006, 0x20c80a07, 0x00c81004, 0x0a306606,
                0x00900802, 0x20980608, 0x00801e05, 0x0a606604,
                0x00400001, 0x20300201, 0x00280c03, 0x0a605e08,
                0x00200001, 0x20300601, 0x00280c07, 0x0a505e07,
                0x00580608, 0x2080040b, 0x00b00e01, 0x0a105e04,
                0x20a00c02, 0x20781603, 0x00780417, 0x0a506405,
                0x20500601, 0x20280802, 0x0020000f, 0x0a405402,
                0x20400a01, 0x20280c01, 0x0028040d, 0x0a405402,
                0x2040100a, 0x20981a0e, 0x00b0000d, 0x09f06401,
                0x00680e01, 0x20401004, 0x00280a06, 0x0ab0640d,
                0x00400402, 0x20280602, 0x00080401, 0x0a70580a,
                0x00300001, 0x00000201, 0x20180402, 0x0a70540a,
                0x00281e08, 0x2050240f, 0x00680e01, 0x0a205c07,
                0x20200601, 0x20700401, 0x00500c0b, 0x0b106810,
                0x20380a02, 0x20100403, 0x2010040d, 0x0ad05410,
                0x20280e02, 0x00000c04, 0x2010080b, 0x0ae05410,
                0x00201c04, 0x20c8260a, 0x00f01806, 0x0a60640a,
                0x20180c03, 0x20601203, 0x00600406, 0x0bb06c18,
                0x00280601, 0x20200202, 0x00000805, 0x0b805c1a,
                0x00200202, 0x20300603, 0x00200806, 0x0b805c19,
                0x20682000, 0x20502003, 0x0058080d, 0x0ad06414,
                0x00300e0a, 0x20a80c07, 0x00a01c03, 0x0c90701d,
                0x20201005, 0x20381a06, 0x0018140b, 0x0c705822,
                0x20502008, 0x20482e08, 0x0028180e, 0x0c705423,
                0x00700205, 0x20d80404, 0x00e01a03, 0x0b906819,
                0x20903016, 0x20783a18, 0x0078200c, 0x0d907824,
                0x20881603, 0x0020240b, 0x20581804, 0x0da04c29,
                0x20482207, 0x00503410, 0x20981a03, 0x0da04828,
                0x20c02c0c, 0x20c82e0c, 0x00c81012, 0x0c607020,
                0x00685610, 0x0040882f, 0x20781e13, 0x0eb06025,
                0x00880c00, 0x20401801, 0x00402217, 0x0ed05024,
                0x00580802, 0x20401605, 0x00402210, 0x0ed05023,
                0x00684209, 0x2010741a, 0x00281a13, 0x0d806824,
                0x0030ac2c, 0x227a0400, 0x073a0800, 0x11c1163a,
                0x2040e439, 0x234aac00, 0x09ba6800, 0x1281122e,
                0x2050f03e, 0x238ad400, 0x0a7a9800, 0x12811e2d,
                0x0050841e, 0x21f98400, 0x05c9b400, 0x10210e36,
                0x20180633, 0x00501083, 0x20e95c0a, 0x10006a35,
                0x00b80649, 0x005008ac, 0x2109860c, 0x11005234,
                0x00d0024f, 0x005004b9, 0x20e99a10, 0x11104e35,
                0x20101e1f, 0x00285859, 0x2059180f, 0x0e806e2f,
                0x00180800, 0x00301615, 0x20a05809, 0x0e805a2b,
                0x20500412, 0x0058122e, 0x20e08413, 0x0f505a31,
                0x20700414, 0x00580a33, 0x20e08816, 0x0f505a32,
                0x20500403, 0x00980a03, 0x21b0080d, 0x0d505620,
                0x20302011, 0x00286615, 0x2050000b, 0x0d505e21,
                0x20280602, 0x00600c08, 0x21182405, 0x0e006225,
                0x00100203, 0x0050000a, 0x21082003, 0x0e005e25,
                0x00681203, 0x00a03005, 0x21d81a03, 0x0c705a1b,
                0x00181e0c, 0x00a0541f, 0x21e85403, 0x0c60561a,
                0x00681204, 0x00503003, 0x20e81000, 0x0cf05a22,
                0x00280e01, 0x00502400, 0x21081005, 0x0cf05a21,
                0x20300400, 0x00680e05, 0x21101010, 0x0ba05215,
                0x00680e05, 0x00302a06, 0x20803006, 0x0ba05216,
                0x20500805, 0x00181e08, 0x20300c13, 0x0bf05219,
                0x20200403, 0x00280e03, 0x2070040c, 0x0c005219,
                0x20300807, 0x00681e04, 0x21380807, 0x0b305209,
                0x20c01c0f, 0x00085a15, 0x00101819, 0x0b205206,
                0x20180605, 0x00300809, 0x20980805, 0x0b70560d,
                0x00080605, 0x00300c07, 0x20a00007, 0x0b70520f,
                0x0048120a, 0x00902c10, 0x21b80a03, 0x0af05206,
                0x00b80a0b, 0x00701419, 0x2158260c, 0x0b205000,
                0x00500002, 0x00200606, 0x20700802, 0x0b105a09,
                0x00300004, 0x00200607, 0x20700406, 0x0b105a08,
                0x20400407, 0x00580e0e, 0x20f02809, 0x0ac05a03,
                0x20780801, 0x00501609, 0x21001c14, 0x0b205804,
                0x20600001, 0x00200000, 0x20680c12, 0x0af05401,
                0x20480603, 0x00201006, 0x2068080e, 0x0af05402,
                0x00580a08, 0x00601c08, 0x21381202, 0x0ac05c01,
                0x00500808, 0x00481e07, 0x20b80a02, 0x0b70580c,
                0x00680603, 0x00200c04, 0x20680601, 0x0b205009,
                0x00400002, 0x00180605, 0x20200801, 0x0b205409,
                0x2060100f, 0x0048320f, 0x20b0080e, 0x0ad05807,
                0x2038060b, 0x00600c11, 0x2120040c, 0x0be05411,
                0x20400401, 0x00181205, 0x20300c10, 0x0b805411,
                0x20400a01, 0x00181801, 0x2030040f, 0x0b805011,
                0x00781616, 0x0080381d, 0x21780a03, 0x0b30580c,
                0x0020080a, 0x00581a11, 0x20f01c03, 0x0c906019,
                0x00100402, 0x00280a01, 0x20781003, 0x0c30501a,
                0x00100005, 0x00380603, 0x20981403, 0x0c30541a,
                0x20501814, 0x00384a26, 0x20902c10, 0x0ba06413,
                0x20780a05, 0x0070140e, 0x2158100a, 0x0d706020,
                0x00380e02, 0x00302004, 0x20981c05, 0x0d104c1e,
                0x00381608, 0x00303c0b, 0x20981c05, 0x0d104c1e,
                0x00200203, 0x00900016, 0x21b84001, 0x0c60541c,
                0x00c82000, 0x00505e01, 0x21080e0c, 0x0e706c1f,
                0x20b00803, 0x00081a02, 0x2010140f, 0x0e204428,
                0x20a01008, 0x2028360d, 0x0060240d, 0x0e204428,
                0x0008220a, 0x0090640f, 0x21b01006, 0x0d505c1f,
                0x20a02c01, 0x20288202, 0x0070841d, 0x0f706429,
                0x00700602, 0x00280c07, 0x20701e16, 0x0f704c29,
                0x00700205, 0x0028040e, 0x20700615, 0x0f704c29,
                0x20201c06, 0x00185612, 0x20208c07, 0x0e506c27,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000
            },
            {
                0x20181000, 0x20200000, 0x00006c00, 0x13d89e45,
                0x00681a04, 0x00200000, 0x00009800, 0x1358a24c,
                0x00681604, 0x00200000, 0x00009400, 0x1358a24c,
                0x20380803, 0x20400000, 0x00002400, 0x11987637,
                0x01380a06, 0x20600201, 0x00006204, 0x11a86647,
                0x00080802, 0x2030020b, 0x00005811, 0x11085e43,
                0x00080803, 0x2030020c, 0x00005411, 0x11085e43,
                0x01280a09, 0x2060000a, 0x00004e0a, 0x0fd85e3c,
                0x21500806, 0x20800211, 0x00000c34, 0x0fb8422f,
                0x20400403, 0x20500206, 0x00000c12, 0x0f384232,
                0x20500002, 0x20500204, 0x00001012, 0x0f384632,
                0x21500408, 0x20800212, 0x00001c2d, 0x0e18362a,
                0x00300805, 0x20600000, 0x00083a0b, 0x0eb8521b,
                0x00200203, 0x20500004, 0x00000406, 0x0dd84226,
                0x00300201, 0x20500001, 0x00000405, 0x0dd84226,
                0x00c00601, 0x20700005, 0x00081a11, 0x0d283e1c,
                0x0098060b, 0x20400010, 0x00001a01, 0x0dc86621,
                0x20100403, 0x20400206, 0x0008040b, 0x0cc83e1d,
                0x20200401, 0x20400203, 0x0008040d, 0x0cc8421e,
                0x20700202, 0x20600003, 0x00000813, 0x0c38421b,
                0x20b0040a, 0x20500212, 0x00000819, 0x0cd84e15,
                0x00200203, 0x20300004, 0x00080408, 0x0c084614,
                0x00200201, 0x20300002, 0x00080406, 0x0c084614,
                0x00400001, 0x20500202, 0x00000e02, 0x0b883a12,
                0x00600206, 0x2040000d, 0x00080a08, 0x0c685a0d,
                0x20500003, 0x20400204, 0x0000000c, 0x0b88460a,
                0x20400001, 0x20400000, 0x0000040c, 0x0b88460b,
                0x20400201, 0x20500001, 0x00000c0b, 0x0b08360d,
                0x00300001, 0x20500206, 0x00001409, 0x0bf8520c,
                0x00780604, 0x20400006, 0x00000e03, 0x0b584605,
                0x00500201, 0x20400002, 0x00000a01, 0x0b584605,
                0x00700203, 0x20500201, 0x00001201, 0x0ab83209,
                0x20a00404, 0x20400204, 0x00081413, 0x0bc85002,
                0x20300001, 0x20500205, 0x00000811, 0x0b383c02,
                0x20200201, 0x20400202, 0x0000080f, 0x0b383c02,
                0x20900406, 0x20500209, 0x00081813, 0x0a882c00,
                0x00800205, 0x20400009, 0x0000020a, 0x0c085807,
                0x20200003, 0x20400202, 0x00081408, 0x0b78400e,
                0x20200005, 0x20400204, 0x00081409, 0x0b78400e,
                0x00800205, 0x2040000b, 0x00080e09, 0x0aa83c05,
                0x20500004, 0x20300206, 0x0000100f, 0x0c385009,
                0x00480605, 0x20400008, 0x00000c01, 0x0c084813,
                0x00380605, 0x2040000a, 0x00000802, 0x0c084813,
                0x20580401, 0x20400203, 0x0000140f, 0x0ac83808,
                0x00680606, 0x20400006, 0x00001401, 0x0ca84c11,
                0x20400004, 0x20500207, 0x0000100f, 0x0ca83c1a,
                0x00180403, 0x20500206, 0x0000140a, 0x0ca83c19,
                0x00500202, 0x20500000, 0x00000400, 0x0b383410,
                0x20700407, 0x2050020c, 0x00081014, 0x0d48441c,
                0x00380603, 0x20600004, 0x00000804, 0x0da83823,
                0x20280603, 0x20600003, 0x0000080c, 0x0d983424,
                0x20600005, 0x20500205, 0x00081010, 0x0bd83418,
                0x00300606, 0x20400009, 0x00081c00, 0x0e685426,
                0x20500400, 0x20600205, 0x0008040c, 0x0ee8342b,
                0x20200401, 0x20700207, 0x00080c06, 0x0ee8302d,
                0x0060020a, 0x2050000a, 0x00000601, 0x0cb83c20,
                0x20300004, 0x2030020c, 0x0008240a, 0x0f98602e,
                0x00100002, 0x20600206, 0x00082e04, 0x10584033,
                0x00000001, 0x20600204, 0x00083601, 0x10584033,
                0x20700408, 0x20500217, 0x00082414, 0x0dd8382c,
                0x20103000, 0x00083000, 0x20603c00, 0x1298aa39,
                0x00201e01, 0x00284400, 0x00604800, 0x1218963c,
                0x00201800, 0x00284000, 0x00604400, 0x1218963c,
                0x00002800, 0x00181400, 0x20c01c00, 0x10988e33,
                0x00d00e03, 0x00d81400, 0x21304604, 0x10c88e3b,
                0x00200800, 0x00981a02, 0x20a02406, 0x10487239,
                0x00300e02, 0x00981400, 0x20a02405, 0x1048723a,
                0x00901203, 0x00b81800, 0x21103c00, 0x0f088233,
                0x20f81004, 0x01001a09, 0x21800c22, 0x0f18722c,
                0x20180c02, 0x00c00a03, 0x21000c0c, 0x0e986230,
                0x20380c03, 0x00b00205, 0x20f0100e, 0x0e986230,
                0x20d80c04, 0x00e01208, 0x2170101b, 0x0d886626,
                0x00981000, 0x00c01c03, 0x2128120b, 0x0df87621,
                0x20280601, 0x00900403, 0x20e0080a, 0x0d485e25,
                0x00100202, 0x00900404, 0x20e00006, 0x0d485e26,
                0x00b00202, 0x00c00c04, 0x21380a0c, 0x0c98661f,
                0x20300602, 0x00881002, 0x20b0180f, 0x0ce87a1f,
                0x00280400, 0x00800e02, 0x20d00405, 0x0c385a1e,
                0x20180400, 0x00900e01, 0x20d0080a, 0x0c385a1e,
                0x20980601, 0x00c00400, 0x21001816, 0x0b986219,
                0x00000002, 0x00900e03, 0x21080807, 0x0c286e14,
                0x20180400, 0x00700201, 0x20a0040c, 0x0b685a15,
                0x00180400, 0x00700202, 0x20a00408, 0x0b685a14,
                0x00580801, 0x00b00602, 0x20f01204, 0x0b085a10,
                0x20100202, 0x00980403, 0x20d00806, 0x0ba8760e,
                0x20200001, 0x00680601, 0x20b80809, 0x0af85a0b,
                0x20400001, 0x00780400, 0x20b8040c, 0x0af85a0b,
                0x20580601, 0x00800001, 0x20e0100c, 0x0a88520c,
                0x00400601, 0x00900201, 0x20e00803, 0x0b486e09,
                0x00300601, 0x00780802, 0x20c00404, 0x0ab85e05,
                0x00400201, 0x00680402, 0x20c00401, 0x0ab85e04,
                0x00400001, 0x00780603, 0x20e00a02, 0x0a484e07,
                0x20580803, 0x00900e03, 0x20d8080f, 0x0b186c00,
                0x20200601, 0x00700400, 0x20e0000b, 0x0aa85803,
                0x20300800, 0x00780601, 0x20d0000d, 0x0aa85803,
                0x20300801, 0x00700800, 0x20f81c0a, 0x0a184e03,
                0x00380603, 0x00700006, 0x20b00a01, 0x0b487007,
                0x00100002, 0x00800602, 0x20d80806, 0x0ae8580c,
                0x00200001, 0x00800601, 0x20d80c05, 0x0ae8580c,
                0x00380a01, 0x00a00002, 0x20c00802, 0x0a185803,
                0x20100800, 0x00680602, 0x20a00c09, 0x0b88640b,
                0x20100602, 0x00980c03, 0x20c0080a, 0x0b686013,
                0x20300601, 0x00981002, 0x20c0080b, 0x0b686014,
                0x20400802, 0x00880e02, 0x20c0000c, 0x0a48500a,
                0x00000400, 0x00881202, 0x20b00c07, 0x0bf86413,
                0x00000001, 0x00a80603, 0x21000408, 0x0c28581c,
                0x00400000, 0x00a80a01, 0x21000404, 0x0c28581b,
                0x00400603, 0x00a00003, 0x20f00000, 0x0ab85010,
                0x00080403, 0x00900e02, 0x21081c08, 0x0cb8641a,
                0x20100601, 0x00a80802, 0x21100008, 0x0d285c24,
                0x20500001, 0x00a80a01, 0x2120000f, 0x0d185825,
                0x20180406, 0x00b00607, 0x20f80c0c, 0x0b585416,
                0x20400207, 0x00800c08, 0x20d80c09, 0x0da87023,
                0x20500202, 0x00b00800, 0x21380806, 0x0e68582b,
                0x20100204, 0x00a00c03, 0x21481201, 0x0e68582c,
                0x2048060a, 0x00a0040c, 0x20f0040a, 0x0c385821,
                0x00180405, 0x00700610, 0x20981a03, 0x0ed87429,
                0x00300003, 0x00b00608, 0x2118260a, 0x0fc8602e,
                0x00200003, 0x00b0060a, 0x21182205, 0x0fb8642d,
                0x00100007, 0x00900a16, 0x20e82203, 0x0d585428,
                0x20285605, 0x01106400, 0x20608000, 0x1138c232,
                0x00100a01, 0x20900c00, 0x00e01400, 0x11186e38,
                0x00200c00, 0x20900c00, 0x00e01000, 0x11186e39,
                0x00085a04, 0x01306400, 0x20a08000, 0x0f58ba2d,
                0x00a81802, 0x2040120e, 0x01306205, 0x0f988e34,
                0x00280a01, 0x20600a03, 0x01102004, 0x0f586636,
                0x00181203, 0x20600e01, 0x01002805, 0x0f586636,
                0x00681402, 0x2030120d, 0x00f05c00, 0x0de8822d,
                0x20b00c04, 0x20a81608, 0x01700819, 0x0e18722a,
                0x00101804, 0x20881e07, 0x01380409, 0x0dc85e2f,
                0x00002007, 0x2098220a, 0x01380809, 0x0dc85a2f,
                0x20900c06, 0x20781208, 0x01400813, 0x0c986e23,
                0x00801202, 0x20781404, 0x01280e08, 0x0cf87622,
                0x20300202, 0x20280805, 0x00b8040d, 0x0c786624,
                0x00080a05, 0x2020040a, 0x00b8040a, 0x0c786625,
                0x00a81206, 0x2040100b, 0x01000e07, 0x0ba86e1e,
                0x20400402, 0x20380a01, 0x00c00011, 0x0be87a1d,
                0x00280a02, 0x20200401, 0x00a01004, 0x0b78621c,
                0x20180401, 0x20480604, 0x00c01409, 0x0b685e1c,
                0x20900002, 0x20880a08, 0x01302416, 0x0ac85e17,
                0x00280e02, 0x20200c04, 0x00b00804, 0x0b387a13,
                0x20100803, 0x20480a05, 0x00b8040b, 0x0ab85a15,
                0x00200800, 0x20480a01, 0x00b80806, 0x0ab85a14,
                0x00701001, 0x20881a01, 0x01180606, 0x0a48560f,
                0x20200403, 0x20580a03, 0x00d00809, 0x0aa8720d,
                0x20100602, 0x20300003, 0x00981008, 0x0a285e0c,
                0x20300800, 0x20380800, 0x0098100b, 0x0a285e0c,
                0x20600a01, 0x20380c02, 0x00b8040e, 0x09c85a0b,
                0x00380a04, 0x20400804, 0x00c00802, 0x0a687208,
                0x00200402, 0x20280602, 0x00980406, 0x09e86205,
                0x00300001, 0x20180401, 0x00780403, 0x09f86604,
                0x00500804, 0x20100202, 0x00880e05, 0x09985606,
                0x20201003, 0x20680e06, 0x00e0000c, 0x0a386a01,
                0x20381202, 0x20101004, 0x0080080c, 0x09e86404,
                0x20381202, 0x00001403, 0x0070080c, 0x09e86403,
                0x20282207, 0x00102409, 0x0080100a, 0x09685a04,
                0x00100800, 0x20280c03, 0x00b80405, 0x0a587007,
                0x00380401, 0x20500a03, 0x00c00803, 0x0a285c0b,
                0x00380400, 0x20500a02, 0x00c00803, 0x0a285c0b,
                0x00201406, 0x2078160b, 0x01100804, 0x09684c03,
                0x20181604, 0x00001404, 0x00801407, 0x0aa86c0d,
                0x20200201, 0x20600001, 0x00e0000c, 0x0a985c13,
                0x20400400, 0x20600201, 0x00e8040d, 0x0a985c13,
                0x20280e03, 0x20201408, 0x00b80c0a, 0x0998540a,
                0x00000c03, 0x20580607, 0x00d00004, 0x0b286013,
                0x00100401, 0x20500202, 0x00e80405, 0x0b585c1c,
                0x00400a01, 0x20580400, 0x00e80402, 0x0b585c1b,
                0x00180a02, 0x20600c00, 0x01001403, 0x0a085011,
                0x00400801, 0x20280401, 0x00c81806, 0x0bd86c18,
                0x20100400, 0x20500001, 0x00e8080a, 0x0c586023,
                0x20400c03, 0x20480a03, 0x00d8100e, 0x0c486423,
                0x00601405, 0x20881207, 0x01281005, 0x0a984c15,
                0x20b81205, 0x00000805, 0x00b01011, 0x0cb87023,
                0x20700202, 0x20400400, 0x00e00006, 0x0d88642b,
                0x20580e05, 0x20101007, 0x00b00002, 0x0d986c2c,
                0x20e80a06, 0x20380408, 0x00f00015, 0x0b685822,
                0x00601404, 0x2058060c, 0x00d82613, 0x0de86c26,
                0x00600402, 0x20400a05, 0x00e82212, 0x0ee8682a,
                0x00500804, 0x2040060b, 0x00f8160f, 0x0ee86829,
                0x00801404, 0x20500a0b, 0x00e82e19, 0x0c985425,
                0x20604c00, 0x21489c00, 0x02e03000, 0x0fd87220,
                0x00182e06, 0x00e02c00, 0x20c05c00, 0x10586a33,
                0x00283207, 0x00e03000, 0x20c06400, 0x10586a34,
                0x20404c02, 0x21689c00, 0x02f03000, 0x0e086e1c,
                0x00c02000, 0x20183801, 0x00700212, 0x0ec85a29,
                0x00000809, 0x00381210, 0x20202402, 0x0ec84632,
                0x2020100d, 0x00282215, 0x00002004, 0x0eb84632,
                0x00801601, 0x20282805, 0x00800a0d, 0x0d185622,
                0x20780801, 0x00601001, 0x20881411, 0x0d68562a,
                0x00581e06, 0x00502c0b, 0x20681002, 0x0d384230,
                0x0078260a, 0x00703c11, 0x20981a01, 0x0d384630,
                0x20280e01, 0x00301802, 0x2020040b, 0x0bf84a23,
                0x00781203, 0x00502005, 0x20400204, 0x0c385a24,
                0x20500402, 0x20280a08, 0x00601012, 0x0bd84226,
                0x20500c04, 0x2028160c, 0x00601c13, 0x0bd84227,
                0x00301000, 0x00082202, 0x00301c04, 0x0b08461c,
                0x20380401, 0x00000205, 0x00400c0f, 0x0b285a1e,
                0x00101001, 0x20181a01, 0x00480c04, 0x0ad8461b,
                0x00000c01, 0x00181000, 0x00181405, 0x0ad8421b,
                0x20700803, 0x00480a03, 0x2048040e, 0x0a383e13,
                0x00001003, 0x00081e02, 0x00480807, 0x0a685a13,
                0x00280a01, 0x00300c03, 0x20281406, 0x0a184a16,
                0x00280800, 0x00300c03, 0x20281005, 0x0a184a16,
                0x00881204, 0x00502006, 0x20780a07, 0x09c84210,
                0x00080603, 0x00400405, 0x20380806, 0x09e85e0c,
                0x20280800, 0x00200c01, 0x0000000b, 0x09884e0d,
                0x20280e01, 0x00201402, 0x0000000b, 0x09884e0d,
                0x20880804, 0x00101204, 0x00100810, 0x09483e0c,
                0x00000403, 0x00380e03, 0x20100c06, 0x09a85a06,
                0x00480602, 0x00000800, 0x00300804, 0x09484a05,
                0x00300201, 0x20200202, 0x00600805, 0x09484a05,
                0x00880e07, 0x20201406, 0x00501207, 0x09083e07,
                0x00181602, 0x00402405, 0x20400005, 0x09885400,
                0x20501403, 0x20182205, 0x0050040f, 0x09384804,
                0x20501403, 0x20282204, 0x0060040f, 0x09384805,
                0x20902009, 0x20583e0d, 0x00a01012, 0x08d83601,
                0x00180601, 0x20100a02, 0x00501408, 0x09985006,
                0x00400202, 0x00300005, 0x20380801, 0x09884c0d,
                0x00400602, 0x00380405, 0x20380801, 0x09884c0d,
                0x00881608, 0x0030240e, 0x20481607, 0x08f83404,
                0x20501404, 0x20282605, 0x0070080b, 0x09f84c0f,
                0x20380400, 0x00400601, 0x2030080d, 0x0a084813,
                0x20380400, 0x00400800, 0x2040040c, 0x0a084813,
                0x20500c03, 0x20181a09, 0x00401811, 0x09183409,
                0x00381602, 0x00302007, 0x20280e03, 0x0a884c13,
                0x00280401, 0x00300a01, 0x20200003, 0x0ac8441b,
                0x00380801, 0x00301000, 0x20200002, 0x0ac8441b,
                0x20200c03, 0x00281400, 0x20280c02, 0x09983413,
                0x00580a04, 0x20201000, 0x00601407, 0x0b284815,
                0x20280602, 0x00200c03, 0x0000000b, 0x0bb84823,
                0x20180e03, 0x00101802, 0x0020040c, 0x0ba84422,
                0x00b81a08, 0x00402c09, 0x20600203, 0x0a283413,
                0x21001c08, 0x20482e0c, 0x00a80815, 0x0bf84824,
                0x20900001, 0x00000602, 0x00300406, 0x0ce8442b,
                0x20a01003, 0x20381a06, 0x00800809, 0x0ce8442c,
                0x21401009, 0x20281a0e, 0x0050041e, 0x0ae83021,
                0x00a82605, 0x00303c0e, 0x2018361f, 0x0d385424,
                0x00880c00, 0x00001800, 0x00380e17, 0x0e384428,
                0x00881201, 0x00101c04, 0x00281a19, 0x0e384428,
                0x00c82a05, 0x0020480f, 0x20182624, 0x0c183c23,
                0x20682000, 0x00904800, 0x21082000, 0x0f683624,
                0x20503001, 0x20e85800, 0x01e01400, 0x0f984628,
                0x20503001, 0x20e85c00, 0x01e01800, 0x0f984627,
                0x20382000, 0x00a04c00, 0x21281c00, 0x0d983620,
                0x00c81201, 0x00102400, 0x00380a11, 0x0e28462c,
                0x00900201, 0x20200403, 0x00880e0f, 0x0e483a2f,
                0x00b80a01, 0x20101403, 0x00781610, 0x0e483a30,
                0x00780a01, 0x00201400, 0x00100608, 0x0c884224,
                0x20600402, 0x20380a04, 0x00c00012, 0x0cb84e2c,
                0x20101001, 0x20182601, 0x0090100d, 0x0cb83e30,
                0x20301801, 0x20383202, 0x00c01410, 0x0ca83e30,
                0x20400402, 0x00081203, 0x0060100c, 0x0b684221,
                0x00300e02, 0x20281803, 0x00a00801, 0x0b884e22,
                0x20280601, 0x00300801, 0x0008080a, 0x0b683624,
                0x20180a01, 0x00301002, 0x00080808, 0x0b683624,
                0x00380a03, 0x00101404, 0x00200002, 0x0a883e1a,
                0x20200402, 0x00180603, 0x0048040a, 0x0a884a1d,
                0x00280800, 0x00201601, 0x00280c03, 0x0a683a1d,
                0x00180801, 0x00101202, 0x00380805, 0x0a683a1d,
                0x20480402, 0x20100a04, 0x0070040b, 0x09c83a14,
                0x00280a01, 0x00201403, 0x00381005, 0x09c84e15,
                0x00100401, 0x20180a01, 0x00780409, 0x09883e17,
                0x00200400, 0x20180800, 0x00780408, 0x09883e17,
                0x00400e01, 0x20281401, 0x00900a01, 0x09383a0f,
                0x20300400, 0x20180400, 0x0080040b, 0x0938520d,
                0x20300601, 0x00180c02, 0x0050000d, 0x08f8420c,
                0x20300800, 0x00181001, 0x0050040e, 0x08f8420c,
                0x20400800, 0x00180c00, 0x0040080b, 0x08d8360a,
                0x00200201, 0x00000401, 0x00700003, 0x08f84e06,
                0x00200401, 0x00280a01, 0x00300404, 0x08c83e04,
                0x00300000, 0x00300000, 0x00100003, 0x08c83e04,
                0x00200c00, 0x00281400, 0x00000a01, 0x08983205,
                0x20200c01, 0x00081e01, 0x0080140a, 0x08d84c01,
                0x20180c00, 0x00301801, 0x00180c0b, 0x08b83c03,
                0x20280c00, 0x00301800, 0x00180c0b, 0x08b83c03,
                0x00081601, 0x00502801, 0x20581005, 0x08782e02,
                0x00000000, 0x00380401, 0x00200806, 0x09084409,
                0x00280400, 0x00000400, 0x00700806, 0x08f8400c,
                0x00280601, 0x00000401, 0x00700406, 0x08f8400c,
                0x00100800, 0x00081a01, 0x00601006, 0x08883403,
                0x00080e01, 0x00301c01, 0x00080405, 0x09683c0f,
                0x20300000, 0x20180601, 0x0080080c, 0x09783c15,
                0x20300400, 0x20180a01, 0x0090080c, 0x09784015,
                0x20280800, 0x00301000, 0x00080809, 0x08b82c0b,
                0x00101002, 0x00082203, 0x00700c04, 0x09f84013,
                0x00400001, 0x20180601, 0x00700002, 0x0a383c1c,
                0x00400400, 0x20180c00, 0x00700802, 0x0a383c1c,
                0x00180800, 0x00100c00, 0x00480403, 0x09283011,
                0x00100602, 0x00480803, 0x00000407, 0x0aa83c19,
                0x20300000, 0x00080801, 0x0060040d, 0x0b383c23,
                0x20400801, 0x00081201, 0x0040080e, 0x0b383823,
                0x00301000, 0x00082201, 0x00701007, 0x09c83015,
                0x20881800, 0x00502e02, 0x20381009, 0x0b883821,
                0x20880601, 0x00000400, 0x00400804, 0x0c78382c,
                0x20781202, 0x00201803, 0x00080403, 0x0c78342c,
                0x20b81201, 0x00301c01, 0x20180c10, 0x0a882820,
                0x00601801, 0x20182e02, 0x00800a11, 0x0c984420,
                0x00800801, 0x20180e03, 0x00500617, 0x0dc83427,
                0x00700801, 0x20281204, 0x00600a16, 0x0dc83427,
                0x00701c00, 0x00083a01, 0x00601a15, 0x0ba83022,
                0x20600000, 0x20281400, 0x00b01400, 0x0ed83e23,
                0x20482201, 0x00a03800, 0x20b80400, 0x0f48222a,
                0x20582601, 0x00a03800, 0x20b00000, 0x0f48222a,
                0x20200401, 0x20381800, 0x00d01400, 0x0d083e1e,
                0x00a00601, 0x20280c01, 0x00600e11, 0x0db8362b,
                0x00880801, 0x00100a02, 0x00300a0c, 0x0de82230,
                0x00980402, 0x00100203, 0x00300e0e, 0x0de82230,
                0x00600201, 0x20280402, 0x00700e07, 0x0c183222,
                0x20300002, 0x20100603, 0x0038040e, 0x0c482e2c,
                0x00080a01, 0x20101001, 0x0058080c, 0x0c582230,
                0x20280e01, 0x00001402, 0x0038080e, 0x0c582230,
                0x20100002, 0x20200602, 0x0060040a, 0x0af82a21,
                0x00180602, 0x00000803, 0x00480404, 0x0b083223,
                0x20300400, 0x20280601, 0x0080040c, 0x0b082624,
                0x20200400, 0x20280601, 0x0080080a, 0x0b082624,
                0x00000202, 0x20280803, 0x00601006, 0x0a182a19,
                0x00080401, 0x20100a02, 0x00600007, 0x0a08321d,
                0x00200400, 0x20280800, 0x00700002, 0x0a08261d,
                0x00200401, 0x20280a01, 0x00780403, 0x0a08221e,
                0x20200402, 0x20280603, 0x00500807, 0x09682213,
                0x00100401, 0x20280800, 0x00800008, 0x09483616,
                0x00280400, 0x20100400, 0x00580808, 0x09282618,
                0x00280400, 0x20100401, 0x00580808, 0x09282618,
                0x00480601, 0x20100802, 0x00480400, 0x08e8220f,
                0x20200201, 0x20100402, 0x0060000b, 0x08b8360c,
                0x20480400, 0x20100401, 0x0078040f, 0x08982a0d,
                0x20480400, 0x20100800, 0x0078040e, 0x08982a0d,
                0x20400001, 0x20200602, 0x0060000b, 0x0878220a,
                0x00200000, 0x20200000, 0x00700804, 0x08783205,
                0x00300000, 0x20200400, 0x00800003, 0x08582a04,
                0x00300000, 0x20300000, 0x00900003, 0x08582a04,
                0x00280a02, 0x20200c02, 0x00700400, 0x08482205,
                0x20180400, 0x20200c00, 0x0070000a, 0x08682c02,
                0x20200801, 0x20380e01, 0x0090040c, 0x08482803,
                0x20200400, 0x20280e01, 0x0090040b, 0x08582803,
                0x00000402, 0x20481203, 0x00b01006, 0x08282202,
                0x00000400, 0x20380400, 0x00a00406, 0x08982c0a,
                0x00200000, 0x20180401, 0x00600006, 0x0898280c,
                0x00100400, 0x20180801, 0x00600407, 0x0898280c,
                0x00100201, 0x20300802, 0x00780406, 0x08381c04,
                0x20200401, 0x20380e01, 0x00900806, 0x08f82c10,
                0x20300000, 0x20100000, 0x0050000b, 0x09182415,
                0x20300000, 0x20100000, 0x0040000b, 0x09182415,
                0x20200000, 0x20380601, 0x00800808, 0x08681c0b,
                0x00380c00, 0x20101401, 0x00680401, 0x09982413,
                0x00500001, 0x20100201, 0x00580401, 0x09d8241b,
                0x00400000, 0x20100400, 0x00580402, 0x09d8241c,
                0x00100400, 0x20380400, 0x00700003, 0x08e81811,
                0x20100201, 0x20400000, 0x00b0080a, 0x0a382819,
                0x20400201, 0x00000001, 0x0040000f, 0x0ac82823,
                0x20200000, 0x20100400, 0x0058040d, 0x0ad82823,
                0x00380601, 0x20300c01, 0x00680406, 0x09781815,
                0x20801002, 0x20481a03, 0x00b00007, 0x0b282821,
                0x20800400, 0x00080a01, 0x00400404, 0x0c18282d,
                0x20900c00, 0x20181601, 0x00600406, 0x0c18282d,
                0x20c00c02, 0x20481203, 0x00900010, 0x0a481820,
                0x00681201, 0x00001c03, 0x00581613, 0x0c28281f,
                0x00880400, 0x00100a01, 0x00280a19, 0x0d682827,
                0x00980400, 0x00200a01, 0x00180a1a, 0x0d682827,
                0x00781a01, 0x20102003, 0x00580e16, 0x0b581c21,
                0x20500801, 0x00281000, 0x00481400, 0x0e882223,
                0x20501400, 0x20682c00, 0x01100400, 0x0f081227,
                0x20601801, 0x20683000, 0x01100400, 0x0f081227,
                0x20200801, 0x00280c00, 0x00381000, 0x0cb81e1e,
                0x00980601, 0x00400004, 0x00180a0f, 0x0d582a2a,
                0x00900400, 0x20180c01, 0x00680a0f, 0x0db8122f,
                0x00b00400, 0x20180802, 0x00680a11, 0x0db8122f,
                0x00400000, 0x00480802, 0x00080606, 0x0bc82621,
                0x20200001, 0x00300400, 0x0010000c, 0x0be8262c,
                0x20100601, 0x00180402, 0x0030000d, 0x0c281230,
                0x20200a01, 0x00080c01, 0x00400010, 0x0c281230,
                0x00000000, 0x00400001, 0x20100408, 0x0ab82220,
                0x20100202, 0x00200002, 0x00200807, 0x0ab82623,
                0x20380401, 0x00100601, 0x0020000b, 0x0ad81224,
                0x20200001, 0x00200201, 0x00100009, 0x0ad81224,
                0x20200400, 0x00480400, 0x20100809, 0x09d82218,
                0x00100002, 0x00380603, 0x00200805, 0x09b8221c,
                0x00280400, 0x00100400, 0x00280402, 0x09d8121e,
                0x00280601, 0x00100801, 0x00180402, 0x09d8121e,
                0x00080800, 0x00500800, 0x20200403, 0x09381e12,
                0x00200000, 0x00300401, 0x00180808, 0x08f82216,
                0x00200000, 0x00000201, 0x00400008, 0x08f81219,
                0x00200400, 0x00080601, 0x00400009, 0x08f81219,
                0x00280400, 0x00300000, 0x00000803, 0x08a81a0f,
                0x20300000, 0x00300001, 0x0020040c, 0x0868220c,
                0x20400800, 0x00080800, 0x0038040f, 0x0858160d,
                0x20400400, 0x00180800, 0x0038040f, 0x0858160d,
                0x20280400, 0x00200000, 0x00000809, 0x08481609,
                0x00200400, 0x00380601, 0x00200404, 0x08282204,
                0x00300000, 0x00200001, 0x00180402, 0x08281604,
                0x00200201, 0x00200001, 0x00100003, 0x08281604,
                0x00000800, 0x00180c00, 0x00100802, 0x08181204,
                0x20100400, 0x00380401, 0x0010040a, 0x08281c03,
                0x20180400, 0x00200400, 0x0018040b, 0x08181403,
                0x20100001, 0x00100601, 0x0028040b, 0x08181403,
                0x00200401, 0x00300201, 0x20280803, 0x08080e01,
                0x00080a01, 0x00400801, 0x00000806, 0x0858180b,
                0x00100000, 0x00100000, 0x00200007, 0x0858180c,
                0x00100201, 0x00100001, 0x00280407, 0x0858180c,
                0x00080602, 0x00400003, 0x20200408, 0x08081004,
                0x20180400, 0x00200601, 0x00200405, 0x08c81410,
                0x20400000, 0x00200000, 0x0020000b, 0x08d81815,
                0x20300001, 0x00100201, 0x0030000b, 0x08d81815,
                0x20100002, 0x00380603, 0x20200407, 0x08480c0b,
                0x00300800, 0x00180c00, 0x00200402, 0x09581414,
                0x00580400, 0x00100400, 0x00280400, 0x09a8181b,
                0x00400201, 0x00100001, 0x00200002, 0x09a8181c,
                0x00180601, 0x00400402, 0x20280403, 0x08b81011,
                0x20200000, 0x00300001, 0x2010000a, 0x0a08141a,
                0x20480400, 0x00100400, 0x00300010, 0x0a981823,
                0x20380401, 0x00100201, 0x0020000d, 0x0a981823,
                0x00200401, 0x00380601, 0x20200407, 0x09581016,
                0x20681201, 0x00401801, 0x20100004, 0x0af81020,
                0x20880601, 0x00000801, 0x00400003, 0x0bd8182d,
                0x20980a02, 0x00000c02, 0x00380405, 0x0bd8182c,
                0x20a81202, 0x00401803, 0x2030000d, 0x0a280c20,
                0x00501401, 0x00081a04, 0x00600610, 0x0bf8141e,
                0x00900c01, 0x20180e03, 0x0068061a, 0x0d281826,
                0x00900c01, 0x20180a04, 0x0068061b, 0x0d281826,
                0x00602002, 0x00082606, 0x00300613, 0x0b380c21,
                0x20400c00, 0x20700400, 0x00c81800, 0x0e600626,
                0x20400201, 0x00001400, 0x20181400, 0x0f00122a,
                0x20500201, 0x00001400, 0x20181000, 0x0f00122a,
                0x20100601, 0x20500c00, 0x00980800, 0x0c980620,
                0x00800c02, 0x20481201, 0x00d80e0b, 0x0d280e2c,
                0x00900001, 0x00000602, 0x00480a0d, 0x0da00631,
                0x00b00402, 0x00000202, 0x00480a0f, 0x0da00631,
                0x00400802, 0x20380a03, 0x00c80604, 0x0b880e22,
                0x20180601, 0x20100004, 0x0098040c, 0x0bb8122c,
                0x20280601, 0x00000402, 0x0050000f, 0x0c100230,
                0x20380a01, 0x00100803, 0x00480411, 0x0c100230,
                0x00080601, 0x20200003, 0x00a80409, 0x0a881220,
                0x20280a02, 0x20200401, 0x00901009, 0x0a880e21,
                0x20200001, 0x20180602, 0x0060000a, 0x0ac00224,
                0x20200000, 0x20100201, 0x00600408, 0x0ac00224,
                0x20280601, 0x20200401, 0x00a00808, 0x09a80e17,
                0x00200403, 0x20380605, 0x00b00002, 0x09880a1c,
                0x00200201, 0x00000002, 0x00580402, 0x09c0021e,
                0x00200400, 0x20180800, 0x00600003, 0x09c0021e,
                0x00000802, 0x20480e03, 0x00b00804, 0x09080a11,
                0x00180602, 0x20200404, 0x00a80409, 0x08c80e17,
                0x00300001, 0x00000601, 0x00400008, 0x08e00219,
                0x00280400, 0x00000400, 0x00480408, 0x08e00219,
                0x00200201, 0x20280402, 0x00800003, 0x08880a0e,
                0x20300402, 0x20380603, 0x00b0040d, 0x08380a0c,
                0x20480601, 0x00000801, 0x0058040f, 0x0848060e,
                0x20380400, 0x00000800, 0x0050000e, 0x0848060e,
                0x20200401, 0x20180a01, 0x00600409, 0x08280608,
                0x00280400, 0x20200402, 0x00980403, 0x07f80a04,
                0x00300401, 0x20280602, 0x00700003, 0x08080605,
                0x00200400, 0x20180601, 0x00700004, 0x08080604,
                0x00080800, 0x00000c02, 0x00580401, 0x08080603,
                0x20180601, 0x20300401, 0x00a00c0b, 0x07f80803,
                0x20100400, 0x20180401, 0x0078040c, 0x07f80403,
                0x00000000, 0x20100000, 0x0068040a, 0x07f80403,
                0x00380a01, 0x20200c00, 0x00700402, 0x07e80602,
                0x20100801, 0x20480e03, 0x00c00807, 0x0838040c,
                0x00180601, 0x20100401, 0x00600007, 0x0838040c,
                0x00180601, 0x20100401, 0x00600008, 0x0838040c,
                0x20200401, 0x20480a02, 0x00a0080a, 0x07f00004,
                0x20100400, 0x20280401, 0x00880404, 0x08a00011,
                0x20400401, 0x20180602, 0x0070000b, 0x08b80415,
                0x20300401, 0x20180602, 0x0070000a, 0x08b80415,
                0x00100201, 0x20300401, 0x00880404, 0x0830000c,
                0x00380401, 0x20100800, 0x00780401, 0x09400014,
                0x00500601, 0x00080401, 0x00680401, 0x0978081b,
                0x00300601, 0x00080401, 0x00680403, 0x0978081b,
                0x00000401, 0x20380601, 0x00900005, 0x08a80410,
                0x20280a02, 0x20200402, 0x0090080b, 0x09e8041a,
                0x20400400, 0x00180a01, 0x00500010, 0x0a680823,
                0x20200401, 0x00180601, 0x0058040c, 0x0a780823,
                0x00380603, 0x20200402, 0x00800406, 0x09300016,
                0x20700c03, 0x20481604, 0x00a00805, 0x0ad00021,
                0x20a00000, 0x00280401, 0x00300004, 0x0bb80c2d,
                0x20b00400, 0x00180401, 0x00400007, 0x0bb80c2d,
                0x20c01005, 0x20381a06, 0x00900410, 0x0a100021,
                0x00781a02, 0x00002807, 0x00580a14, 0x0be0041e,
                0x00a81201, 0x00201c02, 0x0028061d, 0x0d080826,
                0x00a81201, 0x00201802, 0x0028061e, 0x0d080826,
                0x00882a03, 0x00103c0a, 0x00381218, 0x0b200021,
                0x20482202, 0x00802800, 0x20901800, 0x0e700a28,
                0x20581602, 0x00601800, 0x20101c00, 0x0f200a2a,
                0x20681601, 0x00601400, 0x20101c00, 0x0f200a29,
                0x20281602, 0x00501c00, 0x20502000, 0x0ca0061f,
                0x00980c02, 0x00001605, 0x00200a0d, 0x0d20122e,
                0x00b80402, 0x00100605, 0x00500e0f, 0x0dc01631,
                0x00c80801, 0x00100a04, 0x00400e11, 0x0dc01632,
                0x00680c02, 0x00001206, 0x00200e07, 0x0b901223,
                0x20200800, 0x20380801, 0x0070000f, 0x0bb0122d,
                0x20300400, 0x00080801, 0x00680411, 0x0c201630,
                0x20400401, 0x20180e01, 0x00600014, 0x0c201631,
                0x20100400, 0x20380800, 0x0058040c, 0x0a801220,
                0x20400c00, 0x20280c00, 0x0050040b, 0x0a801220,
                0x20100000, 0x00100000, 0x00480408, 0x0ad01224,
                0x20100000, 0x00100001, 0x00380807, 0x0ad01223,
                0x20300800, 0x20180801, 0x00300009, 0x09a00e16,
                0x00580800, 0x00100c00, 0x00180603, 0x0990121c,
                0x00100201, 0x00000001, 0x00400004, 0x09d0121e,
                0x00200000, 0x00100401, 0x00300003, 0x09d0121e,
                0x00180601, 0x00000801, 0x00180400, 0x09101211,
                0x20100400, 0x20180400, 0x0040040d, 0x08c01217,
                0x00300000, 0x00000201, 0x00500407, 0x08f01219,
                0x00200000, 0x00080601, 0x00500408, 0x08f01219,
                0x00100001, 0x20100201, 0x00300005, 0x0890120e,
                0x20200001, 0x00000601, 0x0030000a, 0x0840120b,
                0x20500400, 0x00080a01, 0x00400010, 0x0850120d,
                0x20400000, 0x00180400, 0x0040000f, 0x0850120e,
                0x20100000, 0x00000401, 0x00380407, 0x08300e08,
                0x00200601, 0x00080401, 0x00300405, 0x08001204,
                0x00480400, 0x00100401, 0x00280401, 0x08101205,
                0x00280400, 0x00100401, 0x00380403, 0x08101205,
                0x00000401, 0x00080a01, 0x00400403, 0x08000e03,
                0x20300801, 0x00180e01, 0x0020040c, 0x08001404,
                0x20100201, 0x00000401, 0x0040000c, 0x08001002,
                0x00000201, 0x00000401, 0x0040000a, 0x08001002,
                0x00200601, 0x00180802, 0x00100402, 0x07f01000,
                0x00080400, 0x00300801, 0x20180804, 0x0840140c,
                0x00000401, 0x00080601, 0x00500008, 0x0840100c,
                0x20100401, 0x00080601, 0x0050000a, 0x0840100c,
                0x20100001, 0x00200202, 0x00000008, 0x08001405,
                0x20180400, 0x00200800, 0x00100005, 0x08c01010,
                0x20280400, 0x00000801, 0x00380409, 0x08c01015,
                0x20180400, 0x00000801, 0x00380408, 0x08c01015,
                0x00080400, 0x00200402, 0x00080405, 0x0840100b,
                0x00400201, 0x00100000, 0x00300401, 0x09501014,
                0x00580400, 0x20100400, 0x00500002, 0x09800c1a,
                0x00380400, 0x20100400, 0x00500004, 0x09800c1b,
                0x00100201, 0x00100400, 0x00100405, 0x08b01010,
                0x20400802, 0x00180e02, 0x0020000d, 0x0a00141b,
                0x20480400, 0x20200800, 0x0068040f, 0x0a700c23,
                0x20180401, 0x20200601, 0x0068040c, 0x0a700c23,
                0x00100402, 0x00180a02, 0x00200408, 0x09501017,
                0x20480a03, 0x00301004, 0x20180801, 0x0af01421,
                0x20900201, 0x20300000, 0x00800005, 0x0bb00c2d,
                0x20b00201, 0x20300001, 0x00800008, 0x0bb00c2c,
                0x20780a03, 0x00201403, 0x2018080a, 0x0a201420,
                0x00401401, 0x00282604, 0x00401a0d, 0x0bf0141e,
                0x00900c01, 0x20381a02, 0x00800a1b, 0x0d000c26,
                0x00a00c01, 0x20381a02, 0x00800a1d, 0x0d000c27,
                0x00501c02, 0x00083a05, 0x00501e0e, 0x0b301021,
                0x20601c00, 0x20583400, 0x00e00800, 0x0e801623,
                0x20701800, 0x20982800, 0x01100400, 0x0f402a26,
                0x20701800, 0x20982800, 0x01100000, 0x0f402a26,
                0x20400e01, 0x20282000, 0x00a01800, 0x0ca00e1a,
                0x00b00c00, 0x00281001, 0x00280a12, 0x0d501a2c,
                0x00d00c00, 0x20380c00, 0x00780e14, 0x0e002e30,
                0x00d00e01, 0x20380c01, 0x00880a15, 0x0e002e30,
                0x00800c02, 0x00181203, 0x0028060d, 0x0bc01a21,
                0x20280800, 0x00500c02, 0x20380410, 0x0bd01a2d,
                0x20300201, 0x00000401, 0x00480812, 0x0c602a31,
                0x20300001, 0x20100601, 0x00580813, 0x0c602a32,
                0x20180400, 0x00500802, 0x20280c0c, 0x0aa01621,
                0x20480e02, 0x00301001, 0x0000080b, 0x0aa01a20,
                0x20100001, 0x20100201, 0x00680408, 0x0b102625,
                0x20200000, 0x20100001, 0x00680408, 0x0b102624,
                0x20380601, 0x00300801, 0x0000000a, 0x09c01616,
                0x00500802, 0x00080a03, 0x00400602, 0x09c01e1c,
                0x00000201, 0x00000002, 0x00500005, 0x0a00261e,
                0x00100201, 0x00000001, 0x00500404, 0x0a00261e,
                0x00100000, 0x00200201, 0x00200801, 0x09301611,
                0x20180602, 0x00200803, 0x0020000d, 0x08f01e16,
                0x00300400, 0x20100201, 0x00600006, 0x09202619,
                0x00200000, 0x20100201, 0x00600007, 0x09202619,
                0x00280400, 0x00200400, 0x00200404, 0x08b01a0e,
                0x20100001, 0x00100202, 0x00400409, 0x08701e0b,
                0x20500000, 0x00000000, 0x00580410, 0x0880260e,
                0x20400400, 0x20100201, 0x0068040e, 0x0880260e,
                0x20200000, 0x00100201, 0x00300408, 0x08501a08,
                0x00180601, 0x00100401, 0x00300006, 0x08302204,
                0x00400400, 0x00080400, 0x00580402, 0x08402205,
                0x00200400, 0x00080400, 0x00580404, 0x08402205,
                0x00000000, 0x00100400, 0x00380402, 0x08301a03,
                0x20280800, 0x00100c00, 0x0050040a, 0x08302005,
                0x20200201, 0x00180401, 0x0040000d, 0x08302002,
                0x20100000, 0x00180401, 0x0040000b, 0x08302002,
                0x00180601, 0x00100801, 0x00400804, 0x08201800,
                0x00000001, 0x20100201, 0x00700404, 0x0870200c,
                0x00100000, 0x00100201, 0x00300007, 0x0870200c,
                0x00080400, 0x00100000, 0x00300008, 0x0870200c,
                0x00000001, 0x00000203, 0x00600406, 0x08301c05,
                0x20100000, 0x20180401, 0x00700005, 0x08f02411,
                0x20300400, 0x00080800, 0x0038040a, 0x08f01c15,
                0x20100401, 0x00080a01, 0x00480409, 0x08f01c14,
                0x00000400, 0x20180401, 0x00680407, 0x08701c0b,
                0x00300400, 0x20100001, 0x00600002, 0x09802414,
                0x00400201, 0x00280401, 0x00100002, 0x09b01c1a,
                0x00200201, 0x00280402, 0x00180404, 0x09b01c1b,
                0x00000201, 0x00100001, 0x00500405, 0x08e01c11,
                0x20280801, 0x00000e01, 0x0060000b, 0x0a30241a,
                0x20300401, 0x00280a01, 0x0000000f, 0x0a901c23,
                0x20100401, 0x00280a01, 0x0008040b, 0x0aa01c22,
                0x00380401, 0x00000a01, 0x00500006, 0x09802017,
                0x20780601, 0x20200002, 0x00900c05, 0x0b202422,
                0x20a80601, 0x00300001, 0x20100005, 0x0be0182d,
                0x20c80601, 0x00300402, 0x20100009, 0x0bd0182c,
                0x20a00000, 0x20180401, 0x0070080e, 0x0a502020,
                0x00680800, 0x20301800, 0x00900212, 0x0c302c1f,
                0x00a80400, 0x00200c00, 0x20180a1d, 0x0d301826,
                0x00a80400, 0x00100e01, 0x2018061f, 0x0d301c26,
                0x00780c00, 0x20102000, 0x00580e14, 0x0b602421,
                0x20680c00, 0x00201c00, 0x20181000, 0x0ed03226,
                0x20781c00, 0x00b02400, 0x20b80400, 0x0fc03a28,
                0x20781c01, 0x00b02400, 0x20b80400, 0x0fc03a27,
                0x20500400, 0x20200400, 0x00580800, 0x0ce02e1a,
                0x00c80a01, 0x20101401, 0x00680611, 0x0d902a2e,
                0x00d81202, 0x00401801, 0x20200614, 0x0e603a32,
                0x00d80e03, 0x00401403, 0x20200614, 0x0e603a31,
                0x00a80e02, 0x20101401, 0x00600210, 0x0c002a22,
                0x20200800, 0x20380e02, 0x00b00812, 0x0c102a2d,
                0x20480402, 0x00000204, 0x00400813, 0x0cc03a32,
                0x20380803, 0x00100605, 0x00300812, 0x0cc03a32,
                0x20100402, 0x20480a04, 0x00c0000e, 0x0ad02a23,
                0x20600802, 0x20181201, 0x0080040c, 0x0ae02a1e,
                0x00000000, 0x00000001, 0x00480807, 0x0b603a25,
                0x20200201, 0x00000003, 0x00480809, 0x0b603a25,
                0x20400601, 0x20380803, 0x0098040c, 0x09f02616,
                0x00780a02, 0x00101004, 0x00400206, 0x0a102e1b,
                0x20100400, 0x00080400, 0x00400007, 0x0a50361e,
                0x00100801, 0x00080601, 0x00400005, 0x0a60361e,
                0x00100400, 0x20280400, 0x00800400, 0x09602a10,
                0x20300401, 0x20180603, 0x00800c10, 0x09303216,
                0x00480601, 0x00100401, 0x00300404, 0x09803618,
                0x00280601, 0x00100401, 0x00300007, 0x09803619,
                0x00100000, 0x20280400, 0x00700404, 0x08f02a0e,
                0x00080400, 0x00000401, 0x00700007, 0x08b0320b,
                0x20580401, 0x00000602, 0x00400010, 0x08e03a0f,
                0x20380400, 0x00100601, 0x0040000d, 0x08e03a0f,
                0x20200000, 0x20200000, 0x00600007, 0x08902e08,
                0x00100201, 0x20100000, 0x00800807, 0x08803603,
                0x00480400, 0x20100801, 0x00580402, 0x08903606,
                0x00200001, 0x20100400, 0x00580804, 0x08903606,
                0x00180400, 0x20200401, 0x00600403, 0x08702e03,
                0x20200401, 0x20180e02, 0x0070080a, 0x08803806,
                0x20200400, 0x20280400, 0x0070000e, 0x08803402,
                0x20100201, 0x20100001, 0x0068040b, 0x08803402,
                0x20100a01, 0x20380801, 0x00700805, 0x08603001,
                0x00100000, 0x00080400, 0x00480403, 0x08d0380c,
                0x00100401, 0x20180602, 0x00680406, 0x08b0300c,
                0x00000402, 0x20180a03, 0x00680408, 0x08b0300c,
                0x00200002, 0x20100203, 0x00500003, 0x08803405,
                0x20100000, 0x00000001, 0x00480406, 0x09403811,
                0x20280601, 0x00000802, 0x00580809, 0x09302c14,
                0x20180601, 0x00000802, 0x00480c07, 0x09302c13,
                0x00080602, 0x20200803, 0x00580408, 0x08c0300a,
                0x00380a02, 0x00100802, 0x00400c02, 0x09e03815,
                0x00400000, 0x20100000, 0x00680403, 0x09f02c1a,
                0x00100000, 0x20100201, 0x00680406, 0x09f02c1a,
                0x00000400, 0x20380601, 0x00700806, 0x09303411,
                0x20100403, 0x20280e05, 0x0060080a, 0x0a90401b,
                0x20300000, 0x20100000, 0x0068040e, 0x0ad02822,
                0x00000201, 0x20100000, 0x0078040a, 0x0ad02822,
                0x00300001, 0x20280601, 0x00600405, 0x09d03417,
                0x20700e01, 0x00080c03, 0x00380406, 0x0b903c23,
                0x20a00801, 0x20180e01, 0x00680806, 0x0c10242c,
                0x20d00c01, 0x20281201, 0x0078080b, 0x0c10242c,
                0x20a00800, 0x20280801, 0x0058040e, 0x0aa03421,
                0x00680400, 0x00300001, 0x00001212, 0x0ca04021,
                0x00a00201, 0x00180402, 0x00480a1d, 0x0d602026,
                0x00b00201, 0x00100002, 0x00380a20, 0x0d602026,
                0x00780400, 0x00080400, 0x00300e14, 0x0bc03422,
                0x20581c01, 0x00680400, 0x00500800, 0x0f303a25,
                0x20601802, 0x20a83000, 0x01681000, 0x10204e27,
                0x20601803, 0x20a83000, 0x01681800, 0x10204e27,
                0x20582c00, 0x00b01000, 0x00001000, 0x0d403619,
                0x00a00201, 0x20180804, 0x0050020f, 0x0df0422d,
                0x00b00e03, 0x20481406, 0x00a80a12, 0x0ed04a30,
                0x00a00605, 0x20481008, 0x00a80611, 0x0ed04630,
                0x00900800, 0x00081400, 0x0040020f, 0x0c603e21,
                0x20280601, 0x00000c01, 0x00200410, 0x0c80462c,
                0x20200801, 0x20180a02, 0x0058080f, 0x0d404a32,
                0x00001003, 0x20381206, 0x0068040d, 0x0d404e32,
                0x00100201, 0x00200401, 0x20180c0b, 0x0b403e23,
                0x20480401, 0x20200a02, 0x0050000b, 0x0b50461f,
                0x00000000, 0x00100002, 0x00380808, 0x0be04626,
                0x20380601, 0x00100004, 0x00380c0c, 0x0be04626,
                0x20580802, 0x00200601, 0x0008040f, 0x0a503a16,
                0x00500e01, 0x20380c02, 0x00700a02, 0x0a70461a,
                0x20180e01, 0x00100c01, 0x00300407, 0x0ad0461e,
                0x00180a01, 0x00000c02, 0x00300404, 0x0ad0461e,
                0x00100202, 0x20100804, 0x00100000, 0x09d03a0f,
                0x20280c00, 0x00000a01, 0x00400c0d, 0x09b04a15,
                0x00300601, 0x20280601, 0x00600805, 0x0a004a18,
                0x00200400, 0x20280602, 0x00600808, 0x0a004a18,
                0x00100801, 0x20180603, 0x00200404, 0x09503e0d,
                0x00000800, 0x20380a01, 0x00600408, 0x09304e0a,
                0x20400402, 0x20180a03, 0x0058040e, 0x09604a0f,
                0x20300801, 0x20180a02, 0x0068040c, 0x09604a0e,
                0x20100601, 0x00180401, 0x00100007, 0x09003a08,
                0x00080400, 0x20100000, 0x00500408, 0x09004e02,
                0x00300400, 0x00080402, 0x00380803, 0x09104a06,
                0x00300000, 0x00100001, 0x00380804, 0x09104606,
                0x00100802, 0x00280e03, 0x00100004, 0x08d03a03,
                0x20200401, 0x20200201, 0x00580408, 0x09105006,
                0x20380a01, 0x00200801, 0x0020040d, 0x08f04402,
                0x20380a01, 0x00100401, 0x0030040d, 0x08f04402,
                0x20281602, 0x00400c03, 0x20200806, 0x08d03802,
                0x00100400, 0x20100001, 0x00480803, 0x09504c0b,
                0x00280401, 0x20100203, 0x00480405, 0x0930440b,
                0x00180401, 0x20100602, 0x00480405, 0x0930440b,
                0x00400c01, 0x20180603, 0x00180400, 0x08f04005,
                0x20180800, 0x00000401, 0x00500407, 0x09c04811,
                0x20300800, 0x20280801, 0x00580c0b, 0x09a04013,
                0x20200800, 0x20280801, 0x00580c09, 0x09a04012,
                0x20200000, 0x00280401, 0x0000000b, 0x09303c0a,
                0x00001201, 0x20281000, 0x00500804, 0x0a604c16,
                0x00400201, 0x00000001, 0x00380402, 0x0a503c19,
                0x00200601, 0x00000001, 0x00380805, 0x0a503c1a,
                0x00080602, 0x00200402, 0x20100805, 0x09a03c12,
                0x00180404, 0x00200603, 0x00180c05, 0x0b204c1b,
                0x20300401, 0x00000202, 0x0048080e, 0x0b303c21,
                0x00000801, 0x00180601, 0x0038080a, 0x0b403c21,
                0x00400804, 0x00080605, 0x00080804, 0x0a504017,
                0x20881205, 0x00101c09, 0x0030040a, 0x0c104822,
                0x20980601, 0x00100c01, 0x00380805, 0x0c70382b,
                0x20c81201, 0x00301402, 0x00280409, 0x0c70382b,
                0x20b80a06, 0x00201009, 0x2010000f, 0x0b203c20,
                0x00500803, 0x20381208, 0x00a01e10, 0x0d305423,
                0x00900001, 0x00080602, 0x0060021b, 0x0db03425,
                0x00a00001, 0x20180602, 0x0070021e, 0x0db03425,
                0x00600804, 0x0018160c, 0x00301613, 0x0c304422,
                0x20405c04, 0x21385800, 0x01886000, 0x0fd07628,
                0x20401000, 0x20201800, 0x20782000, 0x10f06a2c,
                0x20301201, 0x20201c00, 0x20782000, 0x10f06a2d,
                0x20507006, 0x21a87400, 0x02186c00, 0x0dd07a1b,
                0x00900605, 0x0048040d, 0x0028260b, 0x0e804e2e,
                0x00900401, 0x00200a01, 0x2018060d, 0x0f805a32,
                0x00500802, 0x00200202, 0x20180609, 0x0f805a31,
                0x00900a07, 0x00200411, 0x00383a0f, 0x0cf04e23,
                0x20380800, 0x00580603, 0x00101011, 0x0d004a2b,
                0x20181601, 0x00301801, 0x0010040d, 0x0de05632,
                0x00381a03, 0x00402004, 0x20100007, 0x0de05a32,
                0x00180800, 0x00400604, 0x0040080c, 0x0bc04624,
                0x20380403, 0x00380601, 0x00080409, 0x0be04e1e,
                0x00080400, 0x20200202, 0x0060080a, 0x0c805a27,
                0x20300802, 0x20280e06, 0x0070040f, 0x0c705a27,
                0x20401803, 0x00281a03, 0x0058140e, 0x0ad04218,
                0x00481206, 0x00201408, 0x20100c01, 0x0b10521a,
                0x20200803, 0x20381602, 0x00680409, 0x0b705a1d,
                0x00080400, 0x00080c02, 0x00400006, 0x0b70561d,
                0x20180e01, 0x00800005, 0x20100004, 0x0a403a0e,
                0x20101007, 0x20181a0b, 0x00400c0c, 0x0a505a14,
                0x00280a04, 0x20100806, 0x00100004, 0x0aa05a17,
                0x00280601, 0x20100802, 0x00100006, 0x0aa05a17,
                0x00381601, 0x00501401, 0x20101001, 0x09d03e0c,
                0x00080a05, 0x00300c09, 0x20280807, 0x09e0560a,
                0x20200403, 0x20300605, 0x0038040b, 0x0a005e0f,
                0x20280400, 0x20200e01, 0x0020000a, 0x0a005a0f,
                0x20381002, 0x00000e02, 0x00500c09, 0x09804608,
                0x00000c03, 0x00080a06, 0x00100408, 0x09b05a02,
                0x00380a03, 0x20100c04, 0x00400005, 0x09b05607,
                0x00380601, 0x20300400, 0x00600405, 0x09b05a07,
                0x00300605, 0x20400803, 0x00800401, 0x09504e03,
                0x20180a01, 0x00400803, 0x20280807, 0x09b05405,
                0x20400c02, 0x20381605, 0x0070040e, 0x09905802,
                0x20401000, 0x20481602, 0x0078040e, 0x09905802,
                0x20402c08, 0x2038320b, 0x00a80c09, 0x09504802,
                0x00181202, 0x00201001, 0x00101004, 0x0a00540b,
                0x00400801, 0x00080801, 0x00281802, 0x09d0500a,
                0x00200c02, 0x00080e01, 0x00281403, 0x09d0500a,
                0x00581a06, 0x00701c0c, 0x20280e03, 0x09703c05,
                0x20100c05, 0x20281205, 0x00480408, 0x0a605811,
                0x20380a02, 0x00200c04, 0x0008080c, 0x0a304811,
                0x20280a03, 0x00301006, 0x20180c0a, 0x0a304811,
                0x20200c02, 0x00180a06, 0x00500c0d, 0x09a0440a,
                0x20180a06, 0x0010180a, 0x00180404, 0x0b005817,
                0x00380801, 0x00000a02, 0x00300804, 0x0ae04c19,
                0x00180802, 0x00000e03, 0x00300806, 0x0ae04c19,
                0x20300801, 0x00480c00, 0x00380407, 0x0a204014,
                0x00500403, 0x20180609, 0x00701002, 0x0bd05c1a,
                0x20280a01, 0x20100c01, 0x0050040c, 0x0bc04c21,
                0x00181204, 0x20201404, 0x00600809, 0x0bc04c20,
                0x00880e02, 0x00601404, 0x00100201, 0x0ad04416,
                0x20d00001, 0x00081801, 0x00600c12, 0x0cc05c24,
                0x20a00002, 0x20480603, 0x00800407, 0x0cf04c2a,
                0x20d00c05, 0x20681e09, 0x00b0040b, 0x0cf0502a,
                0x21181001, 0x00300202, 0x00502018, 0x0ba04422,
                0x00800a02, 0x00000c06, 0x00080a18, 0x0df06826,
                0x00a01201, 0x20480402, 0x0068161d, 0x0e304c24,
                0x00b00e03, 0x20200008, 0x00481e20, 0x0e304c25,
                0x00a02000, 0x20100401, 0x0058221f, 0x0cc05423,
                0x0018ec02, 0x0310bc00, 0x22101000, 0x10d06234,
                0x2048cc06, 0x02e04c00, 0x20d02800, 0x11a0422b,
                0x2048cc06, 0x02e04800, 0x20d02c00, 0x11a0422b,
                0x00090403, 0x0390d800, 0x22d00400, 0x0ee05e29,
                0x00480604, 0x20b00405, 0x00e80c02, 0x0f306e33,
                0x0098120b, 0x20601013, 0x00580e0d, 0x10306231,
                0x0078120a, 0x20501012, 0x0058120b, 0x10306231,
                0x00281a06, 0x20801409, 0x00a80401, 0x0d906628,
                0x20201802, 0x20c81e06, 0x00f80c0e, 0x0db06e2b,
                0x20201807, 0x2098260e, 0x0090140e, 0x0e906e31,
                0x00001407, 0x2098260c, 0x00a0140a, 0x0ea06a31,
                0x00101408, 0x20e8120a, 0x00f80c08, 0x0c606a24,
                0x00000400, 0x20680c02, 0x00981807, 0x0c906220,
                0x00001202, 0x20481006, 0x00081c08, 0x0d406626,
                0x20100206, 0x20400808, 0x0018140a, 0x0d406a27,
                0x20181e09, 0x2090300d, 0x00b80c0b, 0x0b60621a,
                0x20300800, 0x20481802, 0x00500409, 0x0bb05a18,
                0x00180401, 0x00100a02, 0x20380c07, 0x0c205e1f,
                0x00001006, 0x2048160a, 0x00380c07, 0x0c20621f,
                0x20201807, 0x2108260e, 0x01700c09, 0x0ac06210,
                0x00581202, 0x20301c03, 0x20180801, 0x0b005e13,
                0x20100c02, 0x00081001, 0x2028080a, 0x0b505617,
                0x00000a03, 0x00080808, 0x20281408, 0x0b505617,
                0x00101e04, 0x20a82807, 0x00e81402, 0x0a605a0a,
                0x20501002, 0x20681203, 0x00600810, 0x0a805e0b,
                0x00181204, 0x00201405, 0x20600406, 0x0ab0560f,
                0x20280602, 0x00100000, 0x20400c0a, 0x0ab05a0e,
                0x20101004, 0x20381e04, 0x00380406, 0x0a105606,
                0x00381a02, 0x20301c04, 0x00200402, 0x0a605e01,
                0x00000403, 0x20180e07, 0x20101009, 0x0a605e07,
                0x00200804, 0x00180e04, 0x20480405, 0x0a605e07,
                0x20281601, 0x00101408, 0x20480404, 0x0a005601,
                0x20200601, 0x20880a02, 0x0090100a, 0x0a606405,
                0x20280a01, 0x00001403, 0x20481409, 0x0a405c02,
                0x20381603, 0x00202006, 0x20780c0c, 0x0a405801,
                0x00483606, 0x20305005, 0x00101202, 0x0a006000,
                0x20101c05, 0x20782606, 0x00780c05, 0x0ab0640c,
                0x00580a01, 0x20301401, 0x00180402, 0x0a705808,
                0x00580801, 0x20301603, 0x00100002, 0x0a705808,
                0x20102809, 0x21082e0f, 0x01501009, 0x0a006404,
                0x00480e04, 0x0000180a, 0x20381002, 0x0b205c10,
                0x20500400, 0x20580e02, 0x00600c10, 0x0ad05411,
                0x20400601, 0x20580c00, 0x00700810, 0x0ad05411,
                0x00081a07, 0x20601c0d, 0x00980407, 0x0a40600c,
                0x20781002, 0x20300203, 0x0040280e, 0x0bc06018,
                0x00400401, 0x20480e01, 0x00400002, 0x0b80581a,
                0x00300401, 0x20481202, 0x00400403, 0x0b80581a,
                0x20180c05, 0x20c00e09, 0x01101007, 0x0ac06813,
                0x00900a06, 0x20600803, 0x00300e06, 0x0ca0701c,
                0x20300a02, 0x20381001, 0x0010000d, 0x0c605822,
                0x20301201, 0x20381c01, 0x0000000d, 0x0c705822,
                0x00600e08, 0x20f81006, 0x01401003, 0x0b706c17,
                0x20c0180d, 0x20581a0f, 0x00581413, 0x0d807423,
                0x20900805, 0x20180603, 0x20381404, 0x0da0542a,
                0x20880404, 0x00101202, 0x20781c02, 0x0da0582a,
                0x21002c10, 0x20c83a11, 0x00f81816, 0x0c507023,
                0x00681209, 0x0010281b, 0x20180e12, 0x0ec06427,
                0x00981205, 0x00102c0e, 0x20480e1a, 0x0ed05023,
                0x00880a04, 0x0000240c, 0x20380a18, 0x0ed05023,
                0x00a8360c, 0x00006425, 0x00281a1f, 0x0d806024,
                0x0030c02d, 0x229a4000, 0x07b9fc00, 0x11d10e38,
                0x0020c435, 0x22da5000, 0x088a7800, 0x12a12a36,
                0x0020c434, 0x22da4c00, 0x088a7000, 0x12a12a36,
                0x0030d02d, 0x22ea6c00, 0x08ba1000, 0x0fd10e2e,
                0x00000635, 0x00780c88, 0x21495408, 0x10106a34,
                0x20200e42, 0x0048209f, 0x20c96c06, 0x10f05a33,
                0x20300e40, 0x0048209d, 0x20c97007, 0x10f05a33,
                0x20401632, 0x00583887, 0x21096c0a, 0x0e706229,
                0x00081006, 0x00803617, 0x21704008, 0x0e90662c,
                0x00580c13, 0x00702627, 0x21504400, 0x0f705e30,
                0x00780c0f, 0x00702223, 0x21404a02, 0x0f705e30,
                0x00981002, 0x00a0320e, 0x21e03a02, 0x0d405625,
                0x00100003, 0x00300605, 0x20a81009, 0x0d506624,
                0x20380e0c, 0x00402812, 0x20b8140d, 0x0e00562a,
                0x20780606, 0x0040080a, 0x20c80c12, 0x0e005a28,
                0x20a01005, 0x00682e08, 0x21201818, 0x0c305a19,
                0x20200201, 0x00380403, 0x2098140b, 0x0c60561a,
                0x0020040a, 0x00080a12, 0x20101005, 0x0cd05a21,
                0x00680805, 0x00301e07, 0x20a80a02, 0x0ce05e21,
                0x00581201, 0x00a02c07, 0x21d82605, 0x0ba06210,
                0x00300404, 0x00381201, 0x20a80404, 0x0bb05212,
                0x00080a07, 0x0010140d, 0x2038180b, 0x0bf05219,
                0x20280604, 0x00100c06, 0x20380410, 0x0bf0521a,
                0x20281204, 0x00603403, 0x21100009, 0x0b205a0e,
                0x20280e0a, 0x0050200c, 0x20e0080d, 0x0b40560a,
                0x20300802, 0x20181a07, 0x00201c0c, 0x0b50520e,
                0x20300403, 0x00080a06, 0x00000c0a, 0x0b50560d,
                0x00380803, 0x00201608, 0x20500402, 0x0ac05a09,
                0x0000100b, 0x00282e13, 0x20602006, 0x0b105c00,
                0x00300001, 0x00180601, 0x20481003, 0x0b105606,
                0x00680602, 0x00100803, 0x20280c01, 0x0b105208,
                0x20300e03, 0x00082801, 0x00000c0c, 0x0a905201,
                0x20380604, 0x00600c0d, 0x21182008, 0x0b305807,
                0x20300400, 0x00280803, 0x2058040c, 0x0af05001,
                0x20600803, 0x00081e04, 0x00000812, 0x0ae04c01,
                0x2030180c, 0x00384e08, 0x20a00803, 0x0ab05006,
                0x00581000, 0x00503400, 0x20f80a01, 0x0b805c0a,
                0x00400202, 0x00280402, 0x20700c03, 0x0b205009,
                0x00600603, 0x00280805, 0x20700201, 0x0b20500a,
                0x00881a11, 0x00a04c1a, 0x21d81605, 0x0ae05c05,
                0x00000606, 0x00180c01, 0x2020280c, 0x0bd0580f,
                0x20400001, 0x00380604, 0x2090040e, 0x0b805811,
                0x20500000, 0x00300203, 0x20900410, 0x0b805411,
                0x2070100a, 0x00382e19, 0x20a04014, 0x0b10640c,
                0x2050100f, 0x00283211, 0x2050000b, 0x0c80641b,
                0x00400001, 0x00300201, 0x20981001, 0x0c305419,
                0x00400003, 0x00300203, 0x20981001, 0x0c305419,
                0x00400800, 0x00781405, 0x21581e02, 0x0ba06815,
                0x00280a0f, 0x00601c1b, 0x21180e03, 0x0d705c1f,
                0x20580601, 0x00300803, 0x2098100e, 0x0d104c20,
                0x20480603, 0x00301005, 0x20a8140d, 0x0d104821,
                0x20280800, 0x00901405, 0x21b80c09, 0x0c506418,
                0x0018100b, 0x00303211, 0x20901004, 0x0e707020,
                0x20480404, 0x00201201, 0x20780c00, 0x0e304428,
                0x20400006, 0x00200604, 0x20580800, 0x0e304427,
                0x00081c00, 0x00705804, 0x21681404, 0x0d306c1f,
                0x20300606, 0x20180c11, 0x00303409, 0x0f806c29,
                0x00400204, 0x0010000d, 0x20302a0c, 0x0f604425,
                0x00480605, 0x00100810, 0x2040220c, 0x0f604425,
                0x20201601, 0x00083804, 0x00007407, 0x0e406827,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000
            },
            {
                0x00782209, 0x00500000, 0x0000cc00, 0x1528ca4b,
                0x00181e03, 0x00500000, 0x0000a000, 0x1338ae42,
                0x00181e02, 0x00400000, 0x00009400, 0x1338aa41,
                0x00081a04, 0x00400000, 0x00009000, 0x1288aa38,
                0x2040040d, 0x2030021a, 0x00004015, 0x12e87640,
                0x00700202, 0x20300208, 0x00006804, 0x11386240,
                0x00900203, 0x20300205, 0x00006402, 0x11386640,
                0x00600007, 0x2030020c, 0x00004400, 0x10c86e38,
                0x0028060a, 0x2020000d, 0x0000140a, 0x11286e31,
                0x20700005, 0x2030020c, 0x00001419, 0x0f684231,
                0x20b00006, 0x2030020e, 0x0000141e, 0x0f684230,
                0x20280609, 0x20300008, 0x00003413, 0x0f28562e,
                0x20900409, 0x20300212, 0x00080412, 0x0fd85e23,
                0x00000000, 0x20300002, 0x00081405, 0x0e284622,
                0x00300201, 0x20300005, 0x00081202, 0x0e384a22,
                0x2070040b, 0x20300213, 0x0008040d, 0x0df83e1e,
                0x00700400, 0x20300008, 0x00082e09, 0x0ee8721e,
                0x00300202, 0x20300002, 0x00080405, 0x0d284e1d,
                0x00200201, 0x20300000, 0x00000408, 0x0d284a1f,
                0x00900207, 0x2020000d, 0x00081a06, 0x0d18521b,
                0x20100206, 0x20200009, 0x0000180c, 0x0de87a1d,
                0x20100003, 0x20200204, 0x00080c0c, 0x0c584e15,
                0x20400004, 0x20200204, 0x00080c0e, 0x0c584e14,
                0x20a00006, 0x20300207, 0x00080414, 0x0c585214,
                0x00280402, 0x20300209, 0x00001c0a, 0x0d286612,
                0x20180603, 0x20200005, 0x00000008, 0x0be8560b,
                0x00580604, 0x20200007, 0x00000001, 0x0be8560c,
                0x00b00207, 0x2020000b, 0x0000120b, 0x0bd8560f,
                0x20500402, 0x20300202, 0x0008180f, 0x0cc86606,
                0x00300002, 0x20300204, 0x00000005, 0x0ba85204,
                0x20400003, 0x20300206, 0x00000010, 0x0b984e04,
                0x20700005, 0x2030020a, 0x00001015, 0x0b68460a,
                0x00300202, 0x20300005, 0x00080801, 0x0cc87003,
                0x20300000, 0x20200002, 0x0008080d, 0x0ba85405,
                0x00100201, 0x20200003, 0x00080c05, 0x0ba85407,
                0x00400205, 0x20300006, 0x00000000, 0x0b484400,
                0x20100001, 0x20300000, 0x0000080a, 0x0ce86c08,
                0x00100000, 0x20200001, 0x00000405, 0x0bf8540e,
                0x20200001, 0x20200000, 0x00000408, 0x0bf8540d,
                0x20300406, 0x20300208, 0x0008080c, 0x0b584006,
                0x00080601, 0x20300001, 0x00001007, 0x0d486810,
                0x00200201, 0x20300001, 0x00000807, 0x0c785013,
                0x00500203, 0x20300004, 0x00001002, 0x0c785012,
                0x00300205, 0x2030000a, 0x00000001, 0x0ba8480c,
                0x20200002, 0x20300202, 0x00000407, 0x0de86018,
                0x20700001, 0x20200201, 0x0000080e, 0x0d384c1e,
                0x20700003, 0x20300206, 0x00000c12, 0x0d28481c,
                0x20200000, 0x20300204, 0x0000180a, 0x0c184012,
                0x00800206, 0x20300004, 0x00000c01, 0x0eb8601b,
                0x00a00203, 0x20200002, 0x00000e07, 0x0e384821,
                0x00700201, 0x20200002, 0x00080604, 0x0e384823,
                0x00000004, 0x20300205, 0x00081006, 0x0cc83c1a,
                0x20a00407, 0x2030020f, 0x00082019, 0x0fb85c28,
                0x20b00001, 0x20200206, 0x00080417, 0x0f584429,
                0x20800202, 0x20200202, 0x00080412, 0x0f58482a,
                0x00280606, 0x20300007, 0x00000006, 0x0db84420,
                0x00200202, 0x20200007, 0x00084a06, 0x11387c36,
                0x00400001, 0x20200204, 0x0008320a, 0x10c85034,
                0x00300002, 0x20200207, 0x00082a08, 0x10c85033,
                0x20500405, 0x2030020e, 0x00081c0e, 0x0ed8442c,
                0x20202800, 0x20385c00, 0x00e04c00, 0x13a8ae35,
                0x20102803, 0x20385800, 0x00e03400, 0x11f89231,
                0x20102803, 0x20285000, 0x00c03000, 0x11f89232,
                0x20402803, 0x20484c00, 0x00b02800, 0x11489629,
                0x00a80a02, 0x00700800, 0x20901a05, 0x11f88638,
                0x00581207, 0x00880408, 0x20803a03, 0x10687233,
                0x00681207, 0x00880408, 0x20803e03, 0x10687234,
                0x00d80605, 0x00600408, 0x2080260c, 0x0fe87e2f,
                0x20880801, 0x00581205, 0x20702018, 0x10487e2f,
                0x20200005, 0x0030020c, 0x2090140d, 0x0ed8522e,
                0x20400006, 0x0030060c, 0x20801010, 0x0ed8562d,
                0x20b80c02, 0x00480e08, 0x20803c1b, 0x0e686628,
                0x00000c01, 0x00200a02, 0x20a82400, 0x0f187223,
                0x00000201, 0x00300404, 0x20981407, 0x0d985624,
                0x00200202, 0x00300004, 0x20881003, 0x0d985a24,
                0x00400801, 0x00100e01, 0x20a81a06, 0x0d68521e,
                0x00780401, 0x00500802, 0x20981201, 0x0df88624,
                0x00100000, 0x00300000, 0x20800007, 0x0c885a1d,
                0x00000000, 0x00300000, 0x20800009, 0x0c885a1e,
                0x00200601, 0x00380401, 0x20780407, 0x0c78621e,
                0x20780e04, 0x00480405, 0x20701c14, 0x0cf8861a,
                0x00180400, 0x00400601, 0x20780409, 0x0bb85a16,
                0x20180401, 0x00400602, 0x2078080a, 0x0bb85a15,
                0x20400002, 0x00400602, 0x2088080d, 0x0ba86214,
                0x00400803, 0x00180a06, 0x20800801, 0x0c58760f,
                0x20400000, 0x00380800, 0x2060000d, 0x0b38620b,
                0x00100201, 0x00380802, 0x20600007, 0x0b38620d,
                0x00480604, 0x00380406, 0x20701400, 0x0b28620e,
                0x20200400, 0x00300801, 0x20a8140d, 0x0bf87a08,
                0x00500000, 0x00300401, 0x20880801, 0x0b086204,
                0x00000001, 0x00300602, 0x2088080a, 0x0ae85e04,
                0x20200403, 0x00280606, 0x2080080b, 0x0ac85608,
                0x00100400, 0x00400002, 0x20800006, 0x0bd88001,
                0x20300201, 0x00300401, 0x2070000f, 0x0af86004,
                0x00000202, 0x00300403, 0x20780409, 0x0af86005,
                0x20100201, 0x00480402, 0x20980406, 0x0ab85800,
                0x00000201, 0x00400000, 0x20800c09, 0x0c087c09,
                0x00100401, 0x00380601, 0x20600406, 0x0b48600e,
                0x20100402, 0x00380602, 0x20600408, 0x0b48600e,
                0x00200401, 0x00400800, 0x20a80c04, 0x0ac85405,
                0x20100801, 0x00580a02, 0x20800808, 0x0c787812,
                0x00280601, 0x00400002, 0x20800808, 0x0bc86015,
                0x00280603, 0x00400004, 0x20801006, 0x0bc86015,
                0x20280602, 0x00580403, 0x2080100b, 0x0b08580c,
                0x00080801, 0x00600401, 0x20a00405, 0x0d187418,
                0x20680402, 0x00300202, 0x2070080d, 0x0c985c1f,
                0x20580403, 0x00300205, 0x2080080c, 0x0c88541e,
                0x20200001, 0x00400202, 0x20900c06, 0x0b985015,
                0x00200a04, 0x00400003, 0x20900c05, 0x0df8701d,
                0x00700603, 0x00200004, 0x20700a05, 0x0da85822,
                0x00600a03, 0x00200004, 0x20780602, 0x0d985423,
                0x00400800, 0x00400400, 0x20980c01, 0x0c484c18,
                0x20300c03, 0x00600e09, 0x20981c0a, 0x0ef87024,
                0x20a00001, 0x00300606, 0x20780411, 0x0ec85028,
                0x20a80400, 0x00400204, 0x20700410, 0x0eb85429,
                0x20400602, 0x00680800, 0x2080040d, 0x0d18541f,
                0x00080400, 0x00900400, 0x20683001, 0x1038882d,
                0x00500401, 0x00300204, 0x2078320f, 0x10285c2e,
                0x00500402, 0x00300206, 0x20782e0f, 0x10285c2e,
                0x00080403, 0x00700a08, 0x20a82400, 0x0e385829,
                0x20280a01, 0x00001c00, 0x00401000, 0x12888a32,
                0x00180e04, 0x20202400, 0x00601c00, 0x11086a31,
                0x00180e04, 0x20202400, 0x00702000, 0x11086a31,
                0x20181001, 0x00402800, 0x20200c00, 0x10388629,
                0x00800604, 0x20281202, 0x00b02a05, 0x10e88235,
                0x20101c06, 0x20583a0d, 0x00f01c04, 0x0f88622f,
                0x00001c06, 0x20583a0d, 0x01002004, 0x0f88622f,
                0x00800207, 0x00080c02, 0x00803a04, 0x0ee87e2b,
                0x20701c0c, 0x20182a0f, 0x00781c13, 0x0f487a2e,
                0x00400202, 0x00200006, 0x00181c01, 0x0e28622c,
                0x00100202, 0x00200006, 0x00281803, 0x0e18622b,
                0x20901c0e, 0x00083213, 0x00580413, 0x0d986a24,
                0x00181a0a, 0x00602815, 0x20382202, 0x0e088e26,
                0x20280400, 0x00300401, 0x0010000b, 0x0cd86626,
                0x00080400, 0x00200400, 0x00200007, 0x0cd86626,
                0x00581a0b, 0x00802416, 0x20781607, 0x0ca8761e,
                0x00800402, 0x00080a0a, 0x00601c02, 0x0ce88a26,
                0x00080601, 0x00200400, 0x00200407, 0x0bc8661d,
                0x00080601, 0x00100400, 0x00300408, 0x0bc8661e,
                0x00180405, 0x0020060c, 0x00201c08, 0x0ba86a1e,
                0x20a01404, 0x00182a03, 0x00580c19, 0x0bd88a18,
                0x00200000, 0x00180602, 0x00300008, 0x0af86616,
                0x00000001, 0x00180602, 0x00380408, 0x0af86616,
                0x20200202, 0x00100003, 0x0038040b, 0x0ad86a14,
                0x00680a03, 0x00601008, 0x20581205, 0x0b588e0e,
                0x20400401, 0x00180601, 0x00280c0d, 0x0a68660c,
                0x00000400, 0x00180400, 0x00380809, 0x0a68660d,
                0x00000c02, 0x00181202, 0x00300806, 0x0a586a0c,
                0x20280801, 0x00401202, 0x00000c0e, 0x0ae88e0a,
                0x00500201, 0x00200003, 0x00180802, 0x0a286e05,
                0x00100000, 0x00200001, 0x00180808, 0x0a286e05,
                0x00180a03, 0x00400c04, 0x20100005, 0x0a186607,
                0x00080601, 0x00200802, 0x00300c08, 0x0ac88802,
                0x20480400, 0x00200400, 0x00100410, 0x0a286c04,
                0x20280400, 0x00200402, 0x0010000b, 0x0a286c05,
                0x20200405, 0x00280606, 0x00200008, 0x09f86601,
                0x20100002, 0x00000202, 0x00500c0a, 0x0af8840b,
                0x00280601, 0x00100801, 0x00200405, 0x0a78680e,
                0x00280601, 0x00100800, 0x00200806, 0x0a78680e,
                0x00480e06, 0x00301409, 0x00100403, 0x0a086805,
                0x00080603, 0x00000c03, 0x00600807, 0x0b787c13,
                0x00000800, 0x00180e02, 0x0040080a, 0x0af86815,
                0x20100800, 0x00181202, 0x00400c0b, 0x0af86816,
                0x20300803, 0x20181208, 0x0060140e, 0x0a48600d,
                0x00100805, 0x20181206, 0x00800406, 0x0c287819,
                0x20400804, 0x00280e03, 0x0028080b, 0x0bc86820,
                0x20200404, 0x00380602, 0x00080c07, 0x0bc8641f,
                0x20100002, 0x00200002, 0x00280c04, 0x0ad85c16,
                0x20280e04, 0x00101409, 0x00500407, 0x0d08781f,
                0x00480a07, 0x00400c0a, 0x20200a02, 0x0ce86824,
                0x00480e07, 0x0040140a, 0x20100c01, 0x0cd86823,
                0x00481605, 0x00202007, 0x00200c01, 0x0b985c18,
                0x00081a03, 0x20202e02, 0x00901401, 0x0e086c23,
                0x20900003, 0x0020060a, 0x0020080b, 0x0e085c29,
                0x20a00404, 0x0018060c, 0x00400c0c, 0x0e085c2a,
                0x20700001, 0x20300608, 0x00a0140d, 0x0c68501f,
                0x00000805, 0x2088060d, 0x01481001, 0x0f286c27,
                0x00680400, 0x00201201, 0x00382a13, 0x0f586429,
                0x00780400, 0x00201001, 0x00382e15, 0x0f58642a,
                0x00300402, 0x20300206, 0x00b82208, 0x0d885425,
                0x20281203, 0x00300800, 0x00404000, 0x11887a2e,
                0x20380e03, 0x00400000, 0x00003c00, 0x10485a2a,
                0x20380e03, 0x00480400, 0x00103c00, 0x10485a2a,
                0x20180e02, 0x00180400, 0x00903c00, 0x0f387624,
                0x00400004, 0x2018060a, 0x00601607, 0x10185e31,
                0x00581004, 0x00102209, 0x00080608, 0x0ee8462e,
                0x00681004, 0x00201e09, 0x00080609, 0x0ee8422e,
                0x00000001, 0x20280a05, 0x00802202, 0x0e085e25,
                0x00581001, 0x20202801, 0x00583004, 0x0e786233,
                0x00200202, 0x20300404, 0x00881007, 0x0d68522f,
                0x20100601, 0x20300004, 0x0078100a, 0x0d684e2e,
                0x00581001, 0x20202a02, 0x00681e01, 0x0cd85627,
                0x20901201, 0x20582002, 0x00f00813, 0x0d087628,
                0x20200400, 0x20380a01, 0x0090040c, 0x0c185626,
                0x00100000, 0x20280400, 0x00800007, 0x0c185226,
                0x20601201, 0x20682002, 0x0100100f, 0x0bb8661f,
                0x00a00000, 0x20100400, 0x00780608, 0x0be86e23,
                0x00000000, 0x20280400, 0x00700007, 0x0b08521d,
                0x20100000, 0x20280400, 0x00700009, 0x0b08521e,
                0x00600400, 0x20200000, 0x00700a04, 0x0ae85a1a,
                0x20680c02, 0x20101a02, 0x00881816, 0x0ad8721c,
                0x00200000, 0x20100000, 0x00580806, 0x0a485216,
                0x00100001, 0x20100400, 0x00580806, 0x0a485216,
                0x20400001, 0x20200201, 0x0070000e, 0x0a185615,
                0x00300602, 0x20480804, 0x00e00403, 0x0a387e0f,
                0x20280601, 0x20100c01, 0x0068080b, 0x09b8560e,
                0x00080601, 0x20100801, 0x00680809, 0x09a8560f,
                0x00280601, 0x20100c02, 0x00780403, 0x0998560c,
                0x20100801, 0x20380e03, 0x00c0100c, 0x09d87608,
                0x00400000, 0x20200201, 0x00900004, 0x09685a06,
                0x00100001, 0x20200201, 0x00900009, 0x09585a06,
                0x20200601, 0x20380800, 0x00a00c09, 0x09585606,
                0x20100601, 0x20180801, 0x0090080a, 0x09c87003,
                0x20400001, 0x20280800, 0x00800410, 0x09585804,
                0x20200000, 0x20280801, 0x0080000d, 0x09585805,
                0x00380401, 0x20200602, 0x00800002, 0x09385201,
                0x00100001, 0x20180601, 0x00700808, 0x0a086c0c,
                0x00100201, 0x20180401, 0x00700405, 0x09a8580f,
                0x00100000, 0x20180401, 0x00700806, 0x09a8580f,
                0x20200a01, 0x20281402, 0x00900c0c, 0x09485406,
                0x20300201, 0x00080401, 0x00600c09, 0x0a886414,
                0x00080400, 0x20100a01, 0x00600008, 0x0a385416,
                0x20180800, 0x20100c00, 0x00600009, 0x0a385416,
                0x00080801, 0x00000e01, 0x00400006, 0x09a84c0f,
                0x00680401, 0x00000e02, 0x00500201, 0x0b486019,
                0x00080802, 0x20200e01, 0x00880808, 0x0b08541e,
                0x00280402, 0x20300a01, 0x00980405, 0x0b08541d,
                0x00100000, 0x20200001, 0x00700006, 0x0a284c15,
                0x20600601, 0x20181402, 0x00701410, 0x0c286020,
                0x20200603, 0x20480c04, 0x00a01408, 0x0c185826,
                0x20400603, 0x20481004, 0x00a0140b, 0x0c185425,
                0x20100800, 0x20281801, 0x00701808, 0x0ae8481c,
                0x20301202, 0x00081800, 0x00301e01, 0x0d585428,
                0x20600001, 0x20300604, 0x00800801, 0x0d684c2a,
                0x20680401, 0x20200e04, 0x00600000, 0x0d58482b,
                0x20600202, 0x00100801, 0x00100805, 0x0be83c22,
                0x00400002, 0x00401207, 0x2038160d, 0x0e884c25,
                0x00700401, 0x20300602, 0x00981214, 0x0ea84c25,
                0x00700401, 0x20300202, 0x00981614, 0x0ea84c26,
                0x00500002, 0x00100e07, 0x0038160e, 0x0cf83822,
                0x20601a02, 0x20682800, 0x00d01c00, 0x10b85627,
                0x20601a01, 0x20682400, 0x00e00c00, 0x0fa83e25,
                0x20601a01, 0x20682400, 0x00e01000, 0x0fa83e24,
                0x20201a01, 0x20582400, 0x00b01400, 0x0e684e1f,
                0x00700804, 0x00080a06, 0x00380e11, 0x0f684e2f,
                0x00901003, 0x00081603, 0x00480e12, 0x0e783a2d,
                0x00a01003, 0x00081604, 0x00580e12, 0x0e683a2d,
                0x00200803, 0x00080e04, 0x00380607, 0x0d684622,
                0x00600a03, 0x00280406, 0x00181004, 0x0dc85636,
                0x00080603, 0x00400805, 0x2018080b, 0x0ce84231,
                0x20280602, 0x00400805, 0x00080c0d, 0x0ce84230,
                0x00700e03, 0x00280806, 0x00080a02, 0x0c484a27,
                0x20a80c02, 0x00400e04, 0x00000015, 0x0c485629,
                0x20180401, 0x00300602, 0x0010040b, 0x0b884226,
                0x00100000, 0x00300202, 0x00100407, 0x0b984226,
                0x20780c03, 0x00500e04, 0x20200411, 0x0b184a20,
                0x00a00202, 0x00100404, 0x00380609, 0x0b285a23,
                0x00000001, 0x00200201, 0x00280807, 0x0a78421d,
                0x20100001, 0x00200201, 0x00280809, 0x0a88421e,
                0x00680602, 0x00200804, 0x00100204, 0x0a484a19,
                0x20400803, 0x00180a04, 0x00400015, 0x0a185a1d,
                0x00200000, 0x00200402, 0x00280806, 0x09b84617,
                0x00200000, 0x00200402, 0x00280406, 0x09a84617,
                0x20300001, 0x00100603, 0x0020080d, 0x09884615,
                0x00180a03, 0x00400805, 0x00200407, 0x09785e0f,
                0x20300201, 0x00200401, 0x0020040c, 0x0918460e,
                0x20100201, 0x00200001, 0x0030080b, 0x0918460f,
                0x00100400, 0x00180401, 0x00300405, 0x0908420c,
                0x00180401, 0x00200a03, 0x00400c09, 0x09185606,
                0x00400000, 0x00200201, 0x00300404, 0x08d84206,
                0x00200000, 0x00200201, 0x00300407, 0x08c84206,
                0x20380601, 0x00200400, 0x00200c09, 0x08c83e05,
                0x20100000, 0x00100000, 0x0050040b, 0x09085404,
                0x20300001, 0x00180601, 0x00380410, 0x08c84004,
                0x20200000, 0x00280601, 0x0038040d, 0x08c84005,
                0x00500401, 0x00180602, 0x00300000, 0x08b83a01,
                0x00100000, 0x00100001, 0x00500407, 0x0958540d,
                0x00000000, 0x00280401, 0x00380407, 0x0918440f,
                0x00000000, 0x00280401, 0x00300007, 0x0918440f,
                0x20380400, 0x00200401, 0x0030000e, 0x08b83c06,
                0x20400001, 0x00100000, 0x0050040b, 0x09d85015,
                0x00000400, 0x00180400, 0x00200007, 0x09a84416,
                0x20100800, 0x00180800, 0x00200008, 0x09a84417,
                0x00100401, 0x00080800, 0x00400004, 0x09183c10,
                0x00700602, 0x00180402, 0x00500603, 0x0a984c19,
                0x00200401, 0x00380800, 0x00000007, 0x0a78441d,
                0x00400400, 0x00380401, 0x00000004, 0x0a78441d,
                0x00100201, 0x00200002, 0x00200406, 0x09a83c15,
                0x20780403, 0x00280603, 0x00400813, 0x0b784c21,
                0x20580400, 0x00480401, 0x2010080d, 0x0b884427,
                0x20680400, 0x00400000, 0x2010080f, 0x0b884427,
                0x20180802, 0x00200602, 0x00200809, 0x0a78381d,
                0x20581204, 0x00201406, 0x00300a01, 0x0cb8482a,
                0x20580601, 0x00300801, 0x20200a03, 0x0ce8402c,
                0x20500201, 0x00300401, 0x20100604, 0x0cd83c2c,
                0x20880603, 0x00000804, 0x00300c06, 0x0b783424,
                0x00700002, 0x20300e07, 0x00900614, 0x0de84024,
                0x00780c01, 0x00201202, 0x00000216, 0x0e183c24,
                0x00780c01, 0x00201202, 0x00000216, 0x0e183c24,
                0x00780401, 0x20101204, 0x00500615, 0x0c982c21,
                0x20881a03, 0x00902400, 0x20601800, 0x10284625,
                0x20781800, 0x00702000, 0x20400400, 0x0f582e25,
                0x20781800, 0x00702000, 0x20500800, 0x0f482a24,
                0x20481a03, 0x00802000, 0x20401800, 0x0de8421e,
                0x00b80807, 0x00301209, 0x00380617, 0x0ee84231,
                0x00c81201, 0x00102000, 0x00400215, 0x0e182a2f,
                0x00e81601, 0x00102201, 0x00400216, 0x0e18262f,
                0x00580409, 0x00200a0a, 0x00480a0b, 0x0cf83a23,
                0x00280e0a, 0x0000180c, 0x0070040a, 0x0d284637,
                0x20200400, 0x20480a02, 0x00c00810, 0x0c782a32,
                0x20500401, 0x20480a02, 0x00c00412, 0x0c782a31,
                0x00380e0b, 0x00101810, 0x00500404, 0x0bb84227,
                0x20800c0a, 0x20381a11, 0x00c00812, 0x0ba83e29,
                0x20100400, 0x20380601, 0x00a00009, 0x0b182a25,
                0x00100201, 0x20280401, 0x00a80405, 0x0b282a25,
                0x20400c0a, 0x20381a12, 0x00c0140d, 0x0a98361f,
                0x00780605, 0x0010040c, 0x00681605, 0x0a884a23,
                0x00100001, 0x20200201, 0x00980806, 0x0a182e1e,
                0x00000001, 0x20200201, 0x00980808, 0x0a182e1f,
                0x00300205, 0x0008040b, 0x00680c00, 0x09c83a18,
                0x20280c00, 0x00001601, 0x00800c11, 0x0978461d,
                0x00200000, 0x20200002, 0x00980407, 0x09383217,
                0x00100201, 0x20200002, 0x00980407, 0x09383217,
                0x20180402, 0x00000604, 0x0060100a, 0x09183613,
                0x20200401, 0x20380e02, 0x00d0100c, 0x08c8420e,
                0x20400201, 0x20280401, 0x0090080e, 0x08a8320d,
                0x20200000, 0x20280400, 0x0090080b, 0x08a82e0e,
                0x00180603, 0x00000803, 0x00700c07, 0x0898320b,
                0x00100400, 0x20180800, 0x00a00407, 0x08883a05,
                0x00400000, 0x20100201, 0x00800402, 0x08682e05,
                0x00200000, 0x20100201, 0x00800406, 0x08582e05,
                0x20400403, 0x20180e05, 0x00800809, 0x08582a04,
                0x20100001, 0x20180601, 0x0080000b, 0x08883804,
                0x20200000, 0x20100201, 0x0088040f, 0x08582c03,
                0x20200000, 0x20100201, 0x0088040d, 0x08582c04,
                0x00680604, 0x00000805, 0x00600202, 0x08582a01,
                0x00100201, 0x20100001, 0x00800007, 0x08c8380d,
                0x00000401, 0x20180601, 0x00880c08, 0x08a8300f,
                0x00000402, 0x20180601, 0x00880c08, 0x08a8300e,
                0x20400804, 0x20280e07, 0x0080000f, 0x08582406,
                0x20400003, 0x20180602, 0x0080000a, 0x09583816,
                0x00080601, 0x00000803, 0x00680807, 0x09383416,
                0x20180a01, 0x00000c04, 0x00680808, 0x09383416,
                0x00180a02, 0x00000c06, 0x00580c04, 0x08b8280f,
                0x00680a05, 0x00000c06, 0x00700a01, 0x0a18381a,
                0x00380601, 0x20100800, 0x00800406, 0x0a08301d,
                0x00380602, 0x20200400, 0x00900c05, 0x0a08301d,
                0x00000201, 0x20100201, 0x00801008, 0x09482816,
                0x20400403, 0x20280a08, 0x00a00c10, 0x0af83022,
                0x20500403, 0x20380a04, 0x00b0040e, 0x0b083027,
                0x20600804, 0x20381205, 0x00b0000f, 0x0b083027,
                0x00100803, 0x20281205, 0x00800008, 0x0a18241d,
                0x20901000, 0x20182002, 0x00880405, 0x0c38302c,
                0x20600603, 0x20180405, 0x00800602, 0x0c68302d,
                0x20600204, 0x20100007, 0x00700203, 0x0c68302d,
                0x20b00602, 0x00080806, 0x0040040a, 0x0b182426,
                0x00900201, 0x00300402, 0x0008061a, 0x0d882c26,
                0x00800c02, 0x20181205, 0x00700a19, 0x0db82c25,
                0x00800c02, 0x20181206, 0x00700e18, 0x0db82c25,
                0x00800401, 0x00100202, 0x00200e19, 0x0c481c23,
                0x20a00c00, 0x20882800, 0x01500c00, 0x0fa82a21,
                0x20701001, 0x20582400, 0x00f80400, 0x0f081623,
                0x20801001, 0x20682400, 0x01000000, 0x0f081622,
                0x20701201, 0x20882400, 0x01300c00, 0x0d882219,
                0x01200c03, 0x20481201, 0x00b8121f, 0x0e782631,
                0x00c00800, 0x20181802, 0x00600215, 0x0dd8162d,
                0x00d00c00, 0x20181802, 0x00600217, 0x0dd8122d,
                0x00e00804, 0x20480e03, 0x00a81615, 0x0c981e24,
                0x20700205, 0x20180c07, 0x00801416, 0x0cc82a35,
                0x20280601, 0x00200802, 0x0010000e, 0x0c481231,
                0x20480601, 0x00100802, 0x00180410, 0x0c481231,
                0x20800206, 0x20281009, 0x00701413, 0x0b582625,
                0x00200005, 0x20101208, 0x00581001, 0x0b581e29,
                0x20100000, 0x00000602, 0x00200008, 0x0ae81226,
                0x00100000, 0x00000201, 0x00300005, 0x0af81226,
                0x00500005, 0x20100e09, 0x00380a04, 0x0a58161e,
                0x00300603, 0x20280406, 0x00980407, 0x0a182a25,
                0x00200401, 0x00100201, 0x00380c05, 0x09d8161f,
                0x00100001, 0x00100201, 0x00380807, 0x09d81620,
                0x20200203, 0x20100006, 0x0068040b, 0x0968221a,
                0x20200401, 0x20180e02, 0x00801410, 0x0918261a,
                0x00200201, 0x00100002, 0x0038040a, 0x08f81a18,
                0x00100201, 0x00100002, 0x0030000a, 0x08f81a18,
                0x00100401, 0x20280602, 0x00600c06, 0x08c81e12,
                0x20180601, 0x00000801, 0x0040040a, 0x08781e0d,
                0x20480400, 0x00100401, 0x0030080e, 0x08681a0c,
                0x20280400, 0x00100400, 0x0030080c, 0x0868160d,
                0x20200201, 0x20180801, 0x00500c0a, 0x08581a0a,
                0x00100000, 0x20100400, 0x00600407, 0x08381e05,
                0x00400000, 0x20100201, 0x00400401, 0x08281204,
                0x00200000, 0x20100000, 0x00400405, 0x08281205,
                0x00080401, 0x20100a01, 0x00400003, 0x08281203,
                0x00000401, 0x20100201, 0x0060000a, 0x08381c04,
                0x20200400, 0x20100201, 0x0048040d, 0x08181003,
                0x20200000, 0x20100201, 0x0048040c, 0x08181404,
                0x00200601, 0x20280801, 0x00500802, 0x08181000,
                0x00000201, 0x00000001, 0x00600009, 0x08781c0d,
                0x00100000, 0x00000400, 0x00480c07, 0x0858180d,
                0x00200000, 0x00000400, 0x00480c07, 0x0858180d,
                0x00100002, 0x20100a02, 0x00480c08, 0x08280c05,
                0x20100002, 0x00000201, 0x00680408, 0x08f81c15,
                0x20100000, 0x20180401, 0x0050000a, 0x08e81c16,
                0x20200400, 0x20180801, 0x0050000c, 0x08e81c16,
                0x20100601, 0x20180802, 0x0050000b, 0x0878140f,
                0x00100603, 0x00080804, 0x00601005, 0x09c81c1c,
                0x00100201, 0x00080400, 0x00400807, 0x09b8181e,
                0x00200202, 0x00080401, 0x00300805, 0x09b8181f,
                0x20100201, 0x00000001, 0x00300807, 0x09181018,
                0x00000003, 0x00100606, 0x00380408, 0x0ac81423,
                0x20280402, 0x00000602, 0x0038040a, 0x0ac81427,
                0x20280403, 0x00000a03, 0x0038080a, 0x0ac81426,
                0x00400002, 0x00000a03, 0x00380803, 0x09e80c1d,
                0x20980e02, 0x00101805, 0x00480c07, 0x0bf8182a,
                0x20980a02, 0x20100804, 0x00400403, 0x0c28182e,
                0x20a80602, 0x20100404, 0x00500404, 0x0c28182d,
                0x20d80a01, 0x00000804, 0x00500410, 0x0ae81426,
                0x00880400, 0x20200601, 0x00a01218, 0x0d381826,
                0x00a80c01, 0x20201602, 0x00600a1d, 0x0d781425,
                0x00a80c01, 0x20201603, 0x0060061e, 0x0d781426,
                0x00980800, 0x20200a01, 0x0070121b, 0x0c280c25,
                0x20b00802, 0x00200400, 0x20282000, 0x0f900223,
                0x20600400, 0x00000c00, 0x00181800, 0x0f000e26,
                0x20700000, 0x00101000, 0x20181400, 0x0f000e25,
                0x20800001, 0x00400c00, 0x20581400, 0x0d68061b,
                0x01580e04, 0x00401806, 0x20180a21, 0x0e580e33,
                0x00c80400, 0x00100801, 0x00480e13, 0x0dc0022f,
                0x00d80400, 0x00200800, 0x00380e15, 0x0dc0022f,
                0x01280a01, 0x00401402, 0x20280a18, 0x0c780e27,
                0x20c00803, 0x00181206, 0x0050081d, 0x0c881234,
                0x20300400, 0x00180800, 0x00500010, 0x0c280631,
                0x20500000, 0x00180400, 0x00500012, 0x0c380631,
                0x20e00802, 0x00281203, 0x0030041d, 0x0b281225,
                0x00780a01, 0x00300c04, 0x00180a07, 0x0b281229,
                0x20180601, 0x00200401, 0x00300006, 0x0ad80626,
                0x00180400, 0x00100401, 0x00400004, 0x0ad80626,
                0x00a80a02, 0x00401004, 0x2018060d, 0x0a38121d,
                0x00080601, 0x00200400, 0x00400c0d, 0x09e81226,
                0x00380400, 0x00100a01, 0x00480404, 0x09c80620,
                0x00280400, 0x00100601, 0x00580406, 0x09c80621,
                0x20500001, 0x00280602, 0x00200c11, 0x09480e1b,
                0x20100401, 0x00180602, 0x0050040d, 0x08e80e19,
                0x00100201, 0x00000001, 0x0060040c, 0x08d80619,
                0x00000201, 0x00080401, 0x0060040c, 0x08d80618,
                0x00280601, 0x00200401, 0x00200404, 0x08980e10,
                0x20200400, 0x00180801, 0x0040000b, 0x08580e0d,
                0x20500801, 0x00081202, 0x0060000f, 0x0848060b,
                0x20200801, 0x00080e02, 0x0050000b, 0x0848060c,
                0x20300401, 0x00280602, 0x0030040b, 0x08380a09,
                0x00180601, 0x00300401, 0x00200406, 0x08180e04,
                0x00400201, 0x00200002, 0x00280400, 0x08180604,
                0x00200201, 0x00200002, 0x00280404, 0x08080604,
                0x00000400, 0x00280400, 0x00100002, 0x08080a02,
                0x00080400, 0x00200601, 0x00300409, 0x08180804,
                0x20280400, 0x00200800, 0x0020000c, 0x08080402,
                0x20180400, 0x00200400, 0x0020000b, 0x08080403,
                0x00100000, 0x00300401, 0x00000003, 0x08080800,
                0x20100000, 0x00100000, 0x0050000a, 0x0858040d,
                0x00200001, 0x00100201, 0x00480407, 0x0848080c,
                0x00200001, 0x00100201, 0x00480407, 0x0848080c,
                0x00280601, 0x00300800, 0x00100406, 0x08180405,
                0x00100001, 0x00100000, 0x00500006, 0x08d80415,
                0x20200201, 0x00100001, 0x0038040c, 0x08c80815,
                0x20200000, 0x00100001, 0x0038040d, 0x08c80816,
                0x20200001, 0x00200201, 0x0030040d, 0x0868040e,
                0x20200201, 0x00100001, 0x00500409, 0x09a8041d,
                0x00000000, 0x00180601, 0x00300007, 0x0998081f,
                0x00000000, 0x00180400, 0x00300007, 0x09980c1f,
                0x20200000, 0x00280400, 0x00300008, 0x08f80418,
                0x00380401, 0x00100a01, 0x00500002, 0x0aa00023,
                0x00000000, 0x00200000, 0x00380408, 0x0aa80c26,
                0x00100000, 0x00200000, 0x00300007, 0x0aa80826,
                0x00680602, 0x00200802, 0x00200400, 0x09d8041c,
                0x20b00400, 0x00080801, 0x00700c0c, 0x0bd0002a,
                0x20b00400, 0x00280c00, 0x00200407, 0x0bf80c2e,
                0x20c00400, 0x00280c00, 0x00200409, 0x0bf80c2e,
                0x20e00c02, 0x00181603, 0x00400814, 0x0ad00026,
                0x00800400, 0x00180a01, 0x00500a19, 0x0d200428,
                0x00b00800, 0x00381201, 0x20100620, 0x0d580827,
                0x00b00800, 0x00381000, 0x20100621, 0x0d580827,
                0x00900601, 0x00480c03, 0x2010061c, 0x0c100027,
                0x20981601, 0x00101c00, 0x00400800, 0x0f900625,
                0x20681202, 0x00101800, 0x00101400, 0x0f201227,
                0x20780e01, 0x00001000, 0x00301000, 0x0f201225,
                0x20880e01, 0x20201000, 0x00701000, 0x0d50021b,
                0x01100c00, 0x20481202, 0x00c00e1b, 0x0e400a33,
                0x00b00002, 0x20300205, 0x00800a12, 0x0dd01a30,
                0x00d00402, 0x20300204, 0x00800a16, 0x0de01a30,
                0x01000c00, 0x20580a02, 0x00b00a17, 0x0c600627,
                0x20980c01, 0x20100e01, 0x00880418, 0x0c800e34,
                0x20380400, 0x20200401, 0x00780810, 0x0c301631,
                0x20500000, 0x20200001, 0x00780412, 0x0c401632,
                0x20c80c01, 0x20200e01, 0x0098041a, 0x0b100a25,
                0x00600a01, 0x20480802, 0x00b00203, 0x0b200a2a,
                0x20100400, 0x20380400, 0x00800007, 0x0ae01626,
                0x00000400, 0x20380400, 0x00800005, 0x0ae01626,
                0x00800e01, 0x20580c02, 0x00c00209, 0x0a20061d,
                0x20100400, 0x20280a01, 0x0090080d, 0x09d00e25,
                0x00300601, 0x20280401, 0x00700003, 0x09c01620,
                0x00200400, 0x20280400, 0x00700006, 0x09c01621,
                0x20380400, 0x20200000, 0x0080080f, 0x09300a1a,
                0x00180401, 0x20100400, 0x0078040b, 0x08e00e19,
                0x00000000, 0x20180601, 0x0060000c, 0x08e01618,
                0x20100000, 0x20180601, 0x0060000d, 0x08e01618,
                0x00100400, 0x20380400, 0x00900405, 0x08900e10,
                0x20280601, 0x20200802, 0x0080000d, 0x08400e0d,
                0x20380800, 0x20100800, 0x0058080d, 0x0850120c,
                0x20180800, 0x20100800, 0x00680809, 0x0850120d,
                0x20280400, 0x20200400, 0x00700009, 0x08300e08,
                0x00000401, 0x20380a01, 0x00a00807, 0x08100e03,
                0x00300000, 0x20380400, 0x00880402, 0x08101204,
                0x00100000, 0x20380400, 0x00880406, 0x08101205,
                0x00180400, 0x20300400, 0x00900003, 0x08000e03,
                0x00100601, 0x20280401, 0x00800408, 0x08101005,
                0x20200400, 0x20380401, 0x0070000c, 0x08000c03,
                0x20200400, 0x20280401, 0x0070000b, 0x08000c03,
                0x00100000, 0x20400001, 0x00a00404, 0x08000c01,
                0x20100001, 0x20200201, 0x0070040a, 0x0850140d,
                0x00200000, 0x20200400, 0x00700006, 0x0840100b,
                0x00300000, 0x20200400, 0x00700006, 0x0840100c,
                0x00200800, 0x20480800, 0x00a00406, 0x08101006,
                0x00280601, 0x20200401, 0x00800406, 0x08e01415,
                0x20200000, 0x20200000, 0x0080000d, 0x08c00c15,
                0x20200000, 0x20200000, 0x0080000d, 0x08c00c15,
                0x20180400, 0x20300400, 0x0080040b, 0x0860140e,
                0x20300001, 0x20280602, 0x0090080b, 0x09b0181e,
                0x00100000, 0x20200000, 0x00780406, 0x09900c1f,
                0x00000000, 0x20200000, 0x00880407, 0x09900c1f,
                0x20200001, 0x20300000, 0x00900008, 0x09001418,
                0x00400601, 0x20380402, 0x00800001, 0x0ab01824,
                0x00000201, 0x20200401, 0x00880408, 0x0aa00c26,
                0x00100201, 0x20300001, 0x00880406, 0x0aa00c26,
                0x00500601, 0x20480401, 0x00900402, 0x09e0141d,
                0x20c00001, 0x20200202, 0x0070040c, 0x0be01c2a,
                0x20c80801, 0x20300601, 0x00800007, 0x0bf0082e,
                0x20c80801, 0x20200601, 0x00880409, 0x0bf0082d,
                0x20d80c01, 0x20200e02, 0x00700010, 0x0ae01426,
                0x00980400, 0x20200400, 0x0070021a, 0x0d401c28,
                0x00b80800, 0x20400801, 0x00980a20, 0x0d500827,
                0x00b80800, 0x20400801, 0x00980a21, 0x0d500827,
                0x00880400, 0x20500400, 0x00b00219, 0x0c201427,
                0x20a00c04, 0x00182000, 0x00680c00, 0x0fa01a23,
                0x20800800, 0x00281400, 0x00500c00, 0x0f501e23,
                0x20900400, 0x00381000, 0x00300c00, 0x0f501e22,
                0x20800403, 0x00481400, 0x00200000, 0x0d701219,
                0x01181209, 0x0050180b, 0x20200a1d, 0x0e601e31,
                0x00d80601, 0x00400401, 0x20100217, 0x0e10262f,
                0x00f80601, 0x00400801, 0x2010061a, 0x0e20262f,
                0x01181207, 0x00501808, 0x20300e19, 0x0c801a25,
                0x20801009, 0x00181a0f, 0x00400816, 0x0cb02634,
                0x20300402, 0x00380603, 0x00100011, 0x0c702632,
                0x20500001, 0x00300202, 0x00000013, 0x0c702632,
                0x20b01009, 0x00181a0e, 0x00300419, 0x0b301e26,
                0x00480e07, 0x0050140d, 0x20180e01, 0x0b401e2a,
                0x20180601, 0x00400803, 0x20180807, 0x0b102226,
                0x00080400, 0x00400402, 0x00080405, 0x0b202626,
                0x00781208, 0x0050140e, 0x20380e07, 0x0a40161d,
                0x00000003, 0x00200607, 0x0030100c, 0x0a002624,
                0x00280a01, 0x00300800, 0x00100804, 0x0a002620,
                0x00280601, 0x00300801, 0x00100406, 0x0a002621,
                0x20300404, 0x00280a09, 0x0020140f, 0x09601e19,
                0x00100400, 0x00280801, 0x0048040b, 0x09102619,
                0x00100000, 0x00100202, 0x0030040b, 0x09102619,
                0x20100000, 0x00200202, 0x0030000c, 0x09202618,
                0x00100202, 0x00300004, 0x00080405, 0x08c01e0f,
                0x20300401, 0x00380c00, 0x0020000e, 0x0870220d,
                0x20400802, 0x00181203, 0x0038080d, 0x0880260c,
                0x20100802, 0x00280e02, 0x00380809, 0x0880260d,
                0x20200402, 0x00380a03, 0x00100009, 0x08601e08,
                0x00180601, 0x00400402, 0x00080406, 0x08402203,
                0x00400000, 0x00400003, 0x20180c02, 0x08401e05,
                0x00200201, 0x00400003, 0x20180c06, 0x08401e06,
                0x00100601, 0x00480402, 0x20280403, 0x08301e03,
                0x00080601, 0x00400400, 0x00100809, 0x08402405,
                0x20280601, 0x00400802, 0x0000040d, 0x08301c02,
                0x20280601, 0x00400801, 0x0000040b, 0x08301c03,
                0x00000001, 0x00500000, 0x20300005, 0x08301c01,
                0x00000001, 0x00300201, 0x00200409, 0x0890280e,
                0x00200001, 0x00200202, 0x00200806, 0x0870200c,
                0x00200000, 0x00200201, 0x00200406, 0x0870200c,
                0x00280a02, 0x00500c03, 0x20300806, 0x08501c06,
                0x00000202, 0x00380401, 0x00300807, 0x09202816,
                0x20200000, 0x00200000, 0x0020000d, 0x08f02015,
                0x20200000, 0x00200000, 0x0020000d, 0x08f02015,
                0x20100401, 0x00380604, 0x0000080b, 0x08a0240f,
                0x20200403, 0x00380604, 0x00280408, 0x09f02c1e,
                0x00100401, 0x00280601, 0x00280406, 0x09c01c1e,
                0x00000401, 0x00280601, 0x00180807, 0x09c01c1f,
                0x20100402, 0x00480601, 0x20180807, 0x09402418,
                0x00280a04, 0x00400806, 0x00000403, 0x0b002824,
                0x20180602, 0x00300002, 0x00100009, 0x0ad01c26,
                0x00080603, 0x00300403, 0x00000007, 0x0ad01c26,
                0x00480a04, 0x00400805, 0x20200803, 0x0a10201e,
                0x20b00402, 0x00280605, 0x0030080b, 0x0c30302b,
                0x20b00802, 0x00281204, 0x00180806, 0x0c101c2d,
                0x20c00c03, 0x00281205, 0x00180407, 0x0c201c2d,
                0x20c01004, 0x00381a08, 0x0000040f, 0x0b202427,
                0x00900c00, 0x00380c01, 0x00180e1a, 0x0d902c28,
                0x00a00a01, 0x00580c03, 0x2038121f, 0x0d701426,
                0x00b00a01, 0x00580c04, 0x20381220, 0x0d701426,
                0x00800e01, 0x00680c04, 0x20681619, 0x0c602026,
                0x20600002, 0x20400800, 0x00a81c00, 0x0ff03a26,
                0x20700400, 0x20400000, 0x00a80800, 0x0fa03e23,
                0x20800401, 0x20580400, 0x00c80800, 0x0fa03a22,
                0x20600401, 0x20600000, 0x00d80c00, 0x0da02e1a,
                0x00800e04, 0x20481406, 0x00c00e11, 0x0ea0322f,
                0x00c00201, 0x20300001, 0x00a00616, 0x0e603a2e,
                0x00e00201, 0x20480402, 0x00b00618, 0x0e70362e,
                0x00901202, 0x20581802, 0x00c00e11, 0x0cc02a23,
                0x00281002, 0x20101e04, 0x00700007, 0x0d003a34,
                0x20180401, 0x20300602, 0x00a8040d, 0x0cd03a32,
                0x20300001, 0x20300202, 0x00a00010, 0x0cd03a32,
                0x20181002, 0x20101e03, 0x00680c0b, 0x0b803226,
                0x20200e01, 0x20581403, 0x00d0080c, 0x0b90362a,
                0x20200400, 0x20480801, 0x00b0000a, 0x0b603a27,
                0x00000400, 0x20480401, 0x00a00006, 0x0b703a27,
                0x00000e01, 0x20581403, 0x00d00807, 0x0a702a1e,
                0x00200001, 0x20200202, 0x00900805, 0x0a603e22,
                0x00200800, 0x20380800, 0x00a00404, 0x0a503a1f,
                0x00100400, 0x20380800, 0x00900407, 0x0a503a20,
                0x00180401, 0x20200a01, 0x00700406, 0x09a03217,
                0x00180400, 0x20200800, 0x0090000b, 0x09703e1a,
                0x00000000, 0x20100201, 0x0070000a, 0x09703e18,
                0x20100000, 0x20200601, 0x0080000a, 0x09703a18,
                0x20100201, 0x20300001, 0x00900409, 0x09003210,
                0x20280400, 0x20300a01, 0x00b8040e, 0x08d03e0d,
                0x20280801, 0x20200e01, 0x00880c0a, 0x08e03a0e,
                0x00180801, 0x20200e01, 0x00880c07, 0x08e03a0f,
                0x00080401, 0x20300a01, 0x00980405, 0x08a03209,
                0x00000400, 0x20480401, 0x00d00408, 0x08903e02,
                0x00300000, 0x20400001, 0x00b80805, 0x08903207,
                0x00100000, 0x20400001, 0x00b80409, 0x08803207,
                0x00000000, 0x20400401, 0x00b80405, 0x08702e04,
                0x20100400, 0x20480400, 0x00c00409, 0x08a03c06,
                0x20300601, 0x20480801, 0x00b0040e, 0x08703003,
                0x20300400, 0x20480800, 0x00b0040c, 0x08703004,
                0x00100201, 0x20400402, 0x00c00405, 0x08702c01,
                0x00000000, 0x20300000, 0x00a00408, 0x08f0400f,
                0x00300400, 0x20280601, 0x00900004, 0x08c0340c,
                0x00300400, 0x20280601, 0x00900004, 0x08c0340c,
                0x00000800, 0x20580e01, 0x00d01008, 0x08903008,
                0x20100201, 0x20300001, 0x00a00409, 0x09904017,
                0x20300000, 0x20200000, 0x0088040d, 0x09403415,
                0x20200000, 0x20200000, 0x0088040d, 0x09403415,
                0x00080400, 0x20300601, 0x00900007, 0x08f03410,
                0x00180401, 0x20300a01, 0x00a00005, 0x0a60441e,
                0x00280400, 0x20200400, 0x00880405, 0x0a00301d,
                0x00180400, 0x20200400, 0x00880405, 0x0a10301e,
                0x00080401, 0x20300601, 0x00a80407, 0x09903417,
                0x20100a01, 0x20480c01, 0x00c00809, 0x0b604424,
                0x20300400, 0x20380a01, 0x0098040b, 0x0b103025,
                0x20200400, 0x20380a01, 0x0098040a, 0x0b103025,
                0x20100a01, 0x20480c01, 0x00b00408, 0x0a60341f,
                0x20980402, 0x20200602, 0x00980405, 0x0ca0442b,
                0x20980801, 0x20201000, 0x00881002, 0x0c602c2c,
                0x20980c01, 0x20201000, 0x00781003, 0x0c602c2c,
                0x20880c02, 0x20201603, 0x00880c07, 0x0b703426,
                0x00880e01, 0x20301404, 0x00a80a18, 0x0df04427,
                0x00980a01, 0x20501002, 0x00b80e1c, 0x0da02424,
                0x00980a01, 0x20501002, 0x00b80a1c, 0x0da02423,
                0x00780e01, 0x20501804, 0x00d80e14, 0x0ca03023,
                0x20481804, 0x00800400, 0x20281800, 0x10704a29,
                0x20782002, 0x00900c00, 0x20300000, 0x10204a24,
                0x20881c02, 0x00a00c00, 0x20480400, 0x10204a23,
                0x20581802, 0x00900800, 0x20480800, 0x0e20421b,
                0x00580e07, 0x0010140d, 0x2018060b, 0x0f20462f,
                0x00b00a04, 0x00200006, 0x00080615, 0x0ef04e2e,
                0x00c00a04, 0x00200406, 0x20180617, 0x0ef04a2e,
                0x00881604, 0x00301406, 0x2020020f, 0x0d304223,
                0x00401804, 0x20181609, 0x00401003, 0x0d904e33,
                0x00000403, 0x00480606, 0x0000080c, 0x0d504e32,
                0x20300002, 0x00400205, 0x0000080f, 0x0d604e32,
                0x00001c03, 0x20281605, 0x00300008, 0x0bf04626,
                0x20481a02, 0x00501404, 0x2010080f, 0x0c104e2a,
                0x20280601, 0x00400403, 0x2018040b, 0x0bf04e27,
                0x00080601, 0x00400402, 0x00080407, 0x0c004e27,
                0x20181a02, 0x00501404, 0x20200409, 0x0af03e1e,
                0x00300801, 0x20100201, 0x00400403, 0x0af05621,
                0x00180800, 0x00300800, 0x00100405, 0x0ae04e1f,
                0x00180800, 0x00300800, 0x00100407, 0x0ae04e20,
                0x00200402, 0x00080603, 0x00200405, 0x0a204617,
                0x00100e01, 0x00080801, 0x0030040b, 0x0a005a1a,
                0x00000601, 0x00100201, 0x00300009, 0x0a005218,
                0x20100601, 0x00180601, 0x00300009, 0x0a005218,
                0x20200602, 0x00100002, 0x00100009, 0x09804610,
                0x20200002, 0x00480603, 0x0020040d, 0x09605a0d,
                0x20100802, 0x00280e03, 0x00380809, 0x09604e0f,
                0x00100802, 0x00280a03, 0x00280806, 0x09604e10,
                0x00000801, 0x00280a02, 0x00100004, 0x09204609,
                0x00080601, 0x00400403, 0x00080409, 0x09305602,
                0x00300000, 0x00400002, 0x00080c06, 0x09104a07,
                0x00100201, 0x00400003, 0x0008080b, 0x09004a08,
                0x00180401, 0x00480400, 0x20180405, 0x08f04204,
                0x20180800, 0x00300400, 0x00100809, 0x09405807,
                0x20480a01, 0x00400801, 0x2010040f, 0x08f04403,
                0x20380a01, 0x00400800, 0x0000040d, 0x08f04804,
                0x00000602, 0x00300004, 0x20100407, 0x08e04002,
                0x00100000, 0x00200000, 0x00300407, 0x0990580f,
                0x00380801, 0x00200603, 0x00100403, 0x0940480c,
                0x00380801, 0x00200602, 0x00100404, 0x0940480c,
                0x00080c01, 0x00400e02, 0x20100c07, 0x09104809,
                0x20280400, 0x00100000, 0x0030040a, 0x0a305c17,
                0x20300601, 0x00080401, 0x0028080d, 0x09b04814,
                0x20200800, 0x00080401, 0x0028080c, 0x09b04814,
                0x00000a01, 0x00180400, 0x00100007, 0x09704c10,
                0x00201000, 0x00080800, 0x00380403, 0x0b005c1e,
                0x00200a01, 0x00180400, 0x00280405, 0x0a80441d,
                0x00100a01, 0x00280400, 0x00180406, 0x0a80441d,
                0x00100401, 0x00380602, 0x00080406, 0x0a104817,
                0x20280e02, 0x00400801, 0x0000080a, 0x0c005c25,
                0x20380801, 0x00300202, 0x0008040a, 0x0b804024,
                0x20280c01, 0x00400602, 0x00080409, 0x0b904025,
                0x20280e03, 0x00400802, 0x2010040a, 0x0ae0481f,
                0x20780403, 0x00180604, 0x00380403, 0x0d505c2b,
                0x20800c00, 0x00281001, 0x00181003, 0x0cc03c2b,
                0x20801000, 0x00181001, 0x00181403, 0x0cc03c2a,
                0x20600c04, 0x00081205, 0x00180804, 0x0bf04825,
                0x00701602, 0x00080c07, 0x00180a14, 0x0e905827,
                0x00900a01, 0x00580c02, 0x2038061a, 0x0e003423,
                0x00900a01, 0x00580802, 0x2038061a, 0x0e003423,
                0x00501602, 0x00481007, 0x20381210, 0x0d204023,
                0x00107001, 0x21684800, 0x01585000, 0x11206e2f,
                0x20507404, 0x21d85000, 0x01985000, 0x10d07626,
                0x20506404, 0x21a84c00, 0x01984c00, 0x10d07225,
                0x20305a01, 0x21384400, 0x01783800, 0x0eb0661f,
                0x20280c04, 0x00580c03, 0x00300002, 0x0fb04a2e,
                0x00781e07, 0x2010180c, 0x00500a0e, 0x0f90562d,
                0x00981e07, 0x2010180d, 0x00600610, 0x0f90562d,
                0x00401408, 0x00382602, 0x00681e09, 0x0db04a23,
                0x0088220d, 0x0030380f, 0x00001a06, 0x0e305630,
                0x00300402, 0x20800607, 0x00b01006, 0x0e006632,
                0x00000403, 0x20800208, 0x00c0100a, 0x0e006631,
                0x0038320f, 0x00704014, 0x20200c03, 0x0c804625,
                0x20502c0c, 0x20683617, 0x00e01812, 0x0cc06a2a,
                0x20300800, 0x20780c00, 0x00c8040e, 0x0c906628,
                0x20100800, 0x20780c00, 0x00c80409, 0x0ca06627,
                0x2040200d, 0x20483219, 0x00e01c0d, 0x0b70561d,
                0x00381e04, 0x0060140d, 0x00081002, 0x0ba05e20,
                0x00100c01, 0x20581000, 0x00980405, 0x0b80621e,
                0x00000c01, 0x20580c00, 0x00980407, 0x0b90621f,
                0x00300207, 0x00400810, 0x00282002, 0x0ab04e16,
                0x20182203, 0x20102402, 0x0050200c, 0x0ac06a18,
                0x20180c00, 0x20200801, 0x00580408, 0x0ab06218,
                0x20280c00, 0x20200c01, 0x00500008, 0x0ab06218,
                0x20381003, 0x00300e06, 0x0040140c, 0x0a104e0f,
                0x00101402, 0x20980a06, 0x00d0040a, 0x0a30760d,
                0x00100202, 0x20501002, 0x00780806, 0x0a106210,
                0x00300601, 0x20500801, 0x00880c04, 0x0a106211,
                0x00180e03, 0x20101404, 0x00600001, 0x09b05609,
                0x20180400, 0x20380400, 0x00b0000b, 0x09e06e03,
                0x00380801, 0x20400603, 0x00b00809, 0x09a05e09,
                0x00080400, 0x20400601, 0x00a0040e, 0x09a05e09,
                0x00201404, 0x20480a06, 0x00b80805, 0x09805605,
                0x20100801, 0x20580e01, 0x00a80409, 0x0a007007,
                0x20500800, 0x20681000, 0x00c00011, 0x09905c04,
                0x20400800, 0x20680e01, 0x00b0000d, 0x09905c05,
                0x20280a06, 0x00100808, 0x00900c0b, 0x09705003,
                0x00100601, 0x20280402, 0x00780407, 0x0a506c0f,
                0x00501801, 0x20481601, 0x00881400, 0x09e0580c,
                0x00401801, 0x20481601, 0x00881402, 0x09e0580c,
                0x00101006, 0x20181e0b, 0x00b00805, 0x09a0580b,
                0x20201403, 0x20280e02, 0x0078080a, 0x0af06c17,
                0x20381000, 0x00200c03, 0x0038040e, 0x0a505014,
                0x20381601, 0x00201003, 0x0038040e, 0x0a505014,
                0x20181204, 0x00301009, 0x00480807, 0x0a105411,
                0x00282e05, 0x00402406, 0x00301403, 0x0bd0681e,
                0x00181603, 0x20201402, 0x00600c04, 0x0b10541d,
                0x00081204, 0x20201001, 0x00700c05, 0x0b20541d,
                0x00380a02, 0x20100a03, 0x00801005, 0x0ab05816,
                0x20401803, 0x20781e09, 0x00c0080b, 0x0cd07425,
                0x20101406, 0x20781609, 0x00b81408, 0x0c105823,
                0x20101c07, 0x20781e0a, 0x00b81806, 0x0c205823,
                0x20501805, 0x20382207, 0x00a80c0c, 0x0b80581f,
                0x20401004, 0x20180c00, 0x00582601, 0x0e106c2a,
                0x20881603, 0x20101c09, 0x00581803, 0x0d404828,
                0x20881e04, 0x0000200b, 0x00481803, 0x0d404428,
                0x20200602, 0x00301408, 0x00382a02, 0x0c905024,
                0x00582a04, 0x00202c0d, 0x0020060e, 0x0f506026,
                0x00800000, 0x20601000, 0x00c00618, 0x0e704822,
                0x00800001, 0x20600e02, 0x00c00a17, 0x0e704822,
                0x00382e01, 0x00403004, 0x00701e09, 0x0da04822,
                0x00294a08, 0x04310400, 0x22e09400, 0x11f03e34,
                0x20194607, 0x04a10400, 0x23e09400, 0x11b02e2c,
                0x20192204, 0x0420dc00, 0x23506800, 0x11a03a2c,
                0x20491000, 0x0380c400, 0x22304800, 0x0f804e23,
                0x0020200d, 0x20f83218, 0x01400405, 0x10607631,
                0x0000240d, 0x20784216, 0x00301a02, 0x1040662d,
                0x0020240a, 0x20683e0d, 0x00200a03, 0x1040662d,
                0x00b80a01, 0x20d01400, 0x00e8120b, 0x0e607228,
                0x20500e03, 0x20782c10, 0x00880809, 0x0ef0662a,
                0x00580a0a, 0x00301013, 0x20c81601, 0x0ed0662f,
                0x00280609, 0x00301010, 0x20d81002, 0x0ed0622e,
                0x20c02403, 0x20f84e03, 0x01301818, 0x0d206a22,
                0x00682e09, 0x20405408, 0x20401204, 0x0db07e28,
                0x20380405, 0x00100e0a, 0x2080100e, 0x0d706e28,
                0x20180805, 0x0020120a, 0x20901009, 0x0d806a28,
                0x00a81202, 0x20603007, 0x0018260c, 0x0c40721c,
                0x00002c08, 0x20f84214, 0x0110180f, 0x0c708223,
                0x00280e05, 0x00001405, 0x20500004, 0x0c606a1f,
                0x00180e05, 0x00001005, 0x20500007, 0x0c606a20,
                0x20480a03, 0x20a00400, 0x00d01c12, 0x0b506a19,
                0x20402004, 0x20483805, 0x0018200e, 0x0ba07614,
                0x00001808, 0x20381e09, 0x00080c09, 0x0b706a18,
                0x20201808, 0x20381e0a, 0x2018080a, 0x0b706a18,
                0x00001805, 0x20c82a0a, 0x00e00006, 0x0ac0720d,
                0x00382e0c, 0x00503810, 0x20d01404, 0x0b20760b,
                0x20181209, 0x0020140f, 0x20700408, 0x0ad06210,
                0x00381609, 0x0030180f, 0x20800005, 0x0ad06211,
                0x20200c01, 0x20581006, 0x00481806, 0x0a706a08,
                0x2010140a, 0x20681614, 0x0010140c, 0x0ae08a04,
                0x00401006, 0x2028120d, 0x20201006, 0x0a706e09,
                0x00000c05, 0x2028120d, 0x2020140c, 0x0a706e08,
                0x00681e09, 0x2030300a, 0x00001601, 0x0a406e05,
                0x00080e05, 0x2010100b, 0x20381809, 0x0af07c06,
                0x20680402, 0x00200c03, 0x20782011, 0x0a606403,
                0x20480403, 0x00100802, 0x2068200c, 0x0a606804,
                0x20800009, 0x20a81610, 0x00c02413, 0x0a307804,
                0x00000006, 0x20400a05, 0x00000009, 0x0b407c0f,
                0x00682a08, 0x0000380a, 0x20400e01, 0x0aa0600b,
                0x00582a09, 0x0000380b, 0x20400c01, 0x0aa0600a,
                0x00780606, 0x20a0180a, 0x00781e05, 0x0a807c0b,
                0x00182a0e, 0x2040300d, 0x00202007, 0x0be08017,
                0x20401805, 0x20a8260f, 0x00a01411, 0x0b006c13,
                0x20301806, 0x20a82a10, 0x00a01411, 0x0b006c13,
                0x20501003, 0x20b81e08, 0x00d01010, 0x0ad07810,
                0x20203c11, 0x20e8621c, 0x00e00809, 0x0cb08c1f,
                0x20201c04, 0x20482c00, 0x00182406, 0x0bd0601e,
                0x20301403, 0x20482402, 0x00082407, 0x0bd0601f,
                0x00100a01, 0x20781002, 0x00680c02, 0x0b807418,
                0x20181a08, 0x00102c17, 0x20983c02, 0x0dd07c25,
                0x00481e08, 0x00302c0c, 0x20a81601, 0x0cd05821,
                0x00681e08, 0x0020340b, 0x20981603, 0x0cd05820,
                0x00181404, 0x20502601, 0x00281c05, 0x0c50741c,
                0x00080602, 0x20502202, 0x00100e01, 0x0f007826,
                0x20b01809, 0x2048260c, 0x0010040c, 0x0de05426,
                0x20c0200a, 0x20682e0e, 0x0040080f, 0x0de05426,
                0x20481608, 0x20a01c0c, 0x00b01407, 0x0d406c22,
                0x00003403, 0x20684e08, 0x00901e01, 0x10207828,
                0x00800205, 0x00201010, 0x20780a18, 0x0f205025,
                0x00800206, 0x00201012, 0x20781219, 0x0f205025,
                0x00204005, 0x20f85210, 0x01302e05, 0x0e607c26,
                0x2061083b, 0x238b1000, 0x0a8a4c00, 0x12c12229,
                0x2081003a, 0x23ab0400, 0x0afa3c00, 0x1230fa21,
                0x2050ec37, 0x235abc00, 0x09ea3c00, 0x1250fe27,
                0x2030e436, 0x230aa800, 0x090a4c00, 0x10711e24,
                0x00f8124b, 0x009034b0, 0x21c9ba13, 0x11607233,
                0x00e81249, 0x006034ae, 0x2129aa18, 0x1100522d,
                0x00c81243, 0x006034a5, 0x21199e10, 0x11004e2f,
                0x00a00645, 0x009808a3, 0x21a97e0a, 0x0f406229,
                0x20700416, 0x00580a31, 0x20f06819, 0x0fb05e2f,
                0x20400413, 0x00280a2d, 0x20508411, 0x0f704630,
                0x2068040b, 0x00100a23, 0x20408812, 0x0f70462e,
                0x20880c15, 0x0090262b, 0x21c04414, 0x0e006224,
                0x20301205, 0x00683410, 0x21100003, 0x0e805a21,
                0x00200209, 0x0020040d, 0x20780404, 0x0e305625,
                0x00400400, 0x00181201, 0x20200601, 0x0e305a25,
                0x0080020c, 0x00600415, 0x21300205, 0x0d10561c,
                0x00881c00, 0x00a05001, 0x21e81205, 0x0d807222,
                0x20300809, 0x00281a0d, 0x20600c09, 0x0d105a1f,
                0x20400805, 0x00281603, 0x2068080c, 0x0d105a20,
                0x20700407, 0x0068120f, 0x21202412, 0x0c306a16,
                0x00081205, 0x00303001, 0x20a00814, 0x0c706a1b,
                0x00881209, 0x00402c0f, 0x20c81c00, 0x0c30561b,
                0x00781207, 0x00402c0b, 0x20b81400, 0x0c30561a,
                0x00580e01, 0x00702405, 0x21682a04, 0x0bb06a0f,
                0x20901c0b, 0x0008520f, 0x00102414, 0x0bf06607,
                0x20a00c07, 0x0008260c, 0x20102417, 0x0b80560f,
                0x20700c05, 0x0008260a, 0x00002414, 0x0b805610,
                0x20180400, 0x00401002, 0x20d0000c, 0x0b405e0b,
                0x00980e0c, 0x00602813, 0x21281e08, 0x0be06e01,
                0x00980a05, 0x00301c09, 0x20981607, 0x0b405e07,
                0x00580a03, 0x00301806, 0x20981601, 0x0b305e06,
                0x20201205, 0x00382c01, 0x2090340a, 0x0b105c00,
                0x2050040b, 0x00381210, 0x20801413, 0x0bd06c04,
                0x20400400, 0x00180a05, 0x20201014, 0x0b105800,
                0x20100202, 0x00100202, 0x20400c0e, 0x0b105801,
                0x0010040c, 0x0078120e, 0x21581403, 0x0b307006,
                0x0060020d, 0x00400410, 0x20c00404, 0x0c306c10,
                0x20201805, 0x00184a06, 0x20400c09, 0x0b50540e,
                0x20301806, 0x00184a08, 0x2040100b, 0x0b50540d,
                0x0018060b, 0x00800c15, 0x21980c05, 0x0b60600a,
                0x20d01c10, 0x00485618, 0x20b01c15, 0x0cd0741c,
                0x00280e03, 0x00702809, 0x21682c02, 0x0be05c14,
                0x00280e04, 0x0070280a, 0x21683001, 0x0be05c14,
                0x20180805, 0x0070160c, 0x21601408, 0x0bd06c10,
                0x00f8220f, 0x00b0641a, 0x22085613, 0x0dd0741d,
                0x00180e02, 0x00402a01, 0x20c80c06, 0x0c805018,
                0x00080e01, 0x00402202, 0x20c80c08, 0x0c805018,
                0x00080601, 0x00600802, 0x21181004, 0x0c606816,
                0x20900c0e, 0x00282613, 0x20702019, 0x0ea06020,
                0x20300c06, 0x00182a07, 0x2020080b, 0x0d604420,
                0x20200c05, 0x00182a05, 0x20400808, 0x0d704420,
                0x00500802, 0x00581602, 0x20f00404, 0x0d30601a,
                0x20280a09, 0x00501816, 0x21000603, 0x0fe0642b,
                0x20281202, 0x00402c0b, 0x20c82400, 0x0e804426,
                0x20281201, 0x00503409, 0x20e82401, 0x0e804825,
                0x20c00c04, 0x00782003, 0x21400c13, 0x0e206026,
                0x00382002, 0x00305e07, 0x20a02209, 0x11208028,
                0x00380602, 0x00001006, 0x20103608, 0x0fa04425,
                0x00280602, 0x00001007, 0x20103607, 0x0fa04425,
                0x00782a06, 0x00907812, 0x21c80e15, 0x0f607429,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000
            }
        },
        {//preview SVD
           {//2900K
                0x30, 0x90, 0x40, 0x90, 0x33, 0x00, 0x42, 0x00,
                0x07, 0x08,
                0x89, 0x00, 0x00, 0x00, 0x02, 0x3B, 0x00, 0x00, 0x00, 0x02,
                0xE7, 0xFF, 0xFF, 0xFF, 0x02, 0xE7, 0xFF, 0xFF, 0xFF, 0x02,
                0xEE, 0xFF, 0xFF, 0xFF, 0x02, 0xEF, 0xFF, 0xFF, 0xFF, 0x02,
                0xEF, 0xFF, 0xFF, 0xFF, 0x03, 0xF1, 0xFF, 0xFF, 0xFF, 0x03,
                0xF7, 0xFF, 0xFF, 0xFF, 0x03, 0xF5, 0xFF, 0xFF, 0xFF, 0x03,
                0xF6, 0xFF, 0xFF, 0xFF, 0x03, 0xF9, 0xFF, 0xFF, 0xFF, 0x03,
                0xF7, 0xFF, 0xFF, 0xFF, 0x03, 0xF9, 0xFF, 0xFF, 0xFF, 0x04,
                0xA1, 0x79, 0xE8, 0x4C, 0x82, 0x72, 0x33,
                0x7A, 0x5B, 0xBD, 0xA6, 0x24, 0x01, 0x28,
                0x41, 0x3C, 0x7F, 0xDB, 0x2D, 0x58, 0x8C,
                0x1C, 0x14, 0x4D, 0x84, 0x48, 0xA2, 0x58,
                0x07, 0x00, 0x24, 0x80, 0x02, 0x4C, 0x61,
                0x01, 0x08, 0x0F, 0x67, 0x38, 0x33, 0x30,
                0x0C, 0x1D, 0x03, 0x56, 0x4A, 0x55, 0x06,
                0x27, 0x4A, 0x05, 0x71, 0xB0, 0x3D, 0x66,
                0x51, 0x92, 0x0E, 0xDC, 0x80, 0x24, 0x55,
                0x88, 0xD7, 0x13, 0xF6, 0x2D, 0x82, 0x17,
                0xAF, 0xFD, 0x1F, 0x06, 0x16, 0x47, 0x6D,
                0xB1, 0xBA, 0xBB, 0x81, 0x84, 0x8B, 0x8B, 0x5B, 0x51, 0x53, 0x54, 0x33, 0x2E, 0x2C, 0x2D, 0x1A, 0x17, 0x13, 0x13, 0x0A, 0x10, 0x0A, 0x0A, 0x03, 0x17, 0x10, 0x10, 0x05, 0x29, 0x26, 0x25, 0x10, 0x44, 0x49, 0x48, 0x27, 0x6B, 0x7A, 0x79, 0x4A, 0x8B, 0x9A, 0x9A, 0x6A,
                0x38, 0x4B, 0x4D, 0x54, 0x3C, 0x51, 0x51, 0x41, 0x4C, 0x70, 0x70, 0x51, 0x71, 0x81, 0x83, 0x5F, 0x8E, 0x94, 0x95, 0x78, 0x98, 0x95, 0x95, 0x7F, 0x9E, 0x86, 0x87, 0x88, 0x98, 0x6B, 0x6C, 0x88, 0x8E, 0x4B, 0x4B, 0x82, 0x86, 0x1E, 0x1F, 0x74, 0x81, 0x03, 0x04, 0x6B,
                0x7D, 0x0E, 0x0D, 0x82, 0x73, 0x0D, 0x09, 0x6C, 0x7F, 0x1F, 0x1E, 0x68, 0x8B, 0x33, 0x32, 0x57, 0x8D, 0x4B, 0x47, 0x49, 0x81, 0x57, 0x56, 0x3C, 0x67, 0x5C, 0x5A, 0x2E, 0x4A, 0x56, 0x53, 0x2A, 0x35, 0x4E, 0x49, 0x1A, 0x1A, 0x3D, 0x3D, 0x06, 0x27, 0x4A, 0x49, 0x02,
                0x18, 0x58, 0x3F, 0x02, 0x72, 0x95, 0x9C, 0x7B, 0x91, 0x7F, 0x88, 0x76, 0x92, 0x90, 0x98, 0x7A, 0x87, 0x88, 0x90, 0x65, 0x87, 0x83, 0x83, 0x5C, 0x7B, 0x85, 0x87, 0x59, 0x73, 0x8F, 0x8F, 0x66, 0x6D, 0x90, 0x93, 0x64, 0xA2, 0xA9, 0xA9, 0x64, 0x64, 0x8A, 0x81, 0x3C,
                0x9B, 0x82, 0x5B, 0x4A, 0x47, 0x72, 0x6A, 0x07, 0x5E, 0x4F, 0x54, 0x2C, 0x67, 0x66, 0x62, 0x50, 0x73, 0x66, 0x60, 0x3E, 0x5D, 0x3E, 0x3A, 0x27, 0x6B, 0x57, 0x5F, 0x44, 0x7A, 0x52, 0x52, 0x4D, 0x6B, 0x51, 0x4D, 0x40, 0x6A, 0x4B, 0x4B, 0x3F, 0x5C, 0x63, 0x68, 0x43,
                0x4B, 0x2A, 0x09, 0x54, 0x32, 0x22, 0x2D, 0x35, 0x2D, 0x4A, 0x44, 0x22, 0x32, 0x45, 0x4E, 0x52, 0x42, 0x26, 0x33, 0x42, 0x23, 0x30, 0x30, 0x32, 0x34, 0x43, 0x41, 0x26, 0x2A, 0x40, 0x2F, 0x45, 0x2A, 0x39, 0x35, 0x3A, 0x6C, 0x38, 0x27, 0x81, 0x07, 0x44, 0x42, 0x29,
                0x51, 0x7A, 0x6B, 0x6F, 0x2D, 0x80, 0x2E, 0x5B, 0x8C, 0x71, 0x7C, 0x99, 0x58, 0x9E, 0x89, 0xA1, 0x88, 0x80, 0x80, 0x91, 0x0B, 0x43, 0x48, 0x52, 0xA5, 0x91, 0x9C, 0xAC, 0x7E, 0x7C, 0x64, 0xB2, 0x28, 0x7C, 0x91, 0x78, 0x1A, 0x6E, 0x66, 0x54, 0x7B, 0x9A, 0x6B, 0x64,
            },
            {//4000K
                0x30, 0x90, 0x40, 0x90, 0x33, 0x00, 0x42, 0x00,
                0x07, 0x08,
                0x89, 0x00, 0x00, 0x00, 0x02, 0x3C, 0x00, 0x00, 0x00, 0x02,
                0xE6, 0xFF, 0xFF, 0xFF, 0x01, 0xE7, 0xFF, 0xFF, 0xFF, 0x02,
                0xEF, 0xFF, 0xFF, 0xFF, 0x02, 0xF1, 0xFF, 0xFF, 0xFF, 0x02,
                0xEE, 0xFF, 0xFF, 0xFF, 0x03, 0xF0, 0xFF, 0xFF, 0xFF, 0x03,
                0xF6, 0xFF, 0xFF, 0xFF, 0x03, 0xF8, 0xFF, 0xFF, 0xFF, 0x04,
                0xF5, 0xFF, 0xFF, 0xFF, 0x03, 0xF9, 0xFF, 0xFF, 0xFF, 0x04,
                0xF3, 0xFF, 0xFF, 0xFF, 0x03, 0xFA, 0xFF, 0xFF, 0xFF, 0x04,
                0xA2, 0x44, 0xE2, 0x4B, 0x6A, 0x91, 0x83,
                0x7A, 0x37, 0xB8, 0xD5, 0x4C, 0x1C, 0x9A,
                0x42, 0x22, 0x81, 0xCA, 0x45, 0x70, 0x04,
                0x1C, 0x0B, 0x50, 0x67, 0x4F, 0x01, 0x3D,
                0x06, 0x01, 0x29, 0x7E, 0x0C, 0x6F, 0x6B,
                0x02, 0x03, 0x11, 0x73, 0x37, 0x86, 0x80,
                0x0D, 0x0E, 0x04, 0x79, 0x50, 0x59, 0x8A,
                0x28, 0x24, 0x01, 0x84, 0xB2, 0x3F, 0x7D,
                0x52, 0x48, 0x05, 0xF5, 0x98, 0x7D, 0x54,
                0x89, 0x6A, 0x0B, 0xF4, 0x05, 0x4E, 0x81,
                0xAF, 0x80, 0x0C, 0x06, 0x41, 0x4B, 0x4C,
                0xAF, 0xB6, 0xB7, 0x7D, 0x80, 0x86, 0x87, 0x57, 0x4E, 0x4F, 0x50, 0x2F, 0x2A, 0x29, 0x29, 0x17, 0x13, 0x0F, 0x10, 0x07, 0x0C, 0x06, 0x06, 0x00, 0x12, 0x0C, 0x0C, 0x02, 0x25, 0x22, 0x21, 0x0D, 0x40, 0x44, 0x44, 0x23, 0x68, 0x76, 0x75, 0x47, 0x86, 0x96, 0x96, 0x66,
                0x44, 0x45, 0x48, 0x58, 0x3A, 0x4C, 0x4C, 0x48, 0x5D, 0x6C, 0x6E, 0x56, 0x72, 0x80, 0x80, 0x64, 0x96, 0x94, 0x95, 0x79, 0xA0, 0x95, 0x95, 0x81, 0x9E, 0x87, 0x88, 0x85, 0x97, 0x6D, 0x6D, 0x89, 0x8B, 0x4A, 0x4B, 0x7B, 0x88, 0x1A, 0x1B, 0x6C, 0x81, 0x02, 0x05, 0x65,
                0x71, 0x07, 0x02, 0x77, 0x70, 0x04, 0x03, 0x69, 0x7B, 0x18, 0x17, 0x64, 0x83, 0x28, 0x27, 0x4F, 0x85, 0x3F, 0x3B, 0x45, 0x76, 0x4B, 0x4A, 0x2D, 0x5A, 0x50, 0x4F, 0x24, 0x3D, 0x4B, 0x48, 0x18, 0x26, 0x45, 0x44, 0x0C, 0x14, 0x3F, 0x3B, 0x00, 0x1C, 0x4C, 0x49, 0x00,
                0x0B, 0x68, 0x4E, 0x06, 0x96, 0x9C, 0xAC, 0x80, 0x86, 0x7A, 0x8D, 0x7B, 0x90, 0x8F, 0x94, 0x7F, 0x94, 0x90, 0x99, 0x6F, 0x98, 0x95, 0x96, 0x6A, 0x87, 0x81, 0x85, 0x67, 0x82, 0x92, 0x8B, 0x6C, 0x8E, 0xA4, 0xA6, 0x6A, 0x8B, 0xB2, 0xBD, 0x75, 0x7A, 0x80, 0x8D, 0x3D,
                0x83, 0xC5, 0xE9, 0x80, 0x74, 0x89, 0x87, 0x0B, 0x8E, 0x85, 0x7D, 0x2E, 0xC0, 0x8D, 0x9D, 0x41, 0xC9, 0x95, 0x8D, 0x67, 0x67, 0x41, 0x4F, 0x1B, 0xBC, 0x9B, 0x8B, 0x47, 0xB9, 0x7D, 0x74, 0x70, 0x80, 0x80, 0x80, 0x54, 0x83, 0x6B, 0x60, 0x0C, 0xCE, 0x94, 0xA7, 0x6B,
                0x14, 0x85, 0x6B, 0xA2, 0x54, 0x78, 0x45, 0x23, 0xE4, 0x80, 0x93, 0xAD, 0x66, 0x5F, 0x6B, 0x04, 0x3B, 0x7F, 0x64, 0x72, 0xA1, 0x88, 0x93, 0x9B, 0x53, 0x6F, 0x6D, 0x63, 0x93, 0x7B, 0x63, 0x73, 0x24, 0x65, 0x7F, 0x96, 0x80, 0x76, 0x78, 0x41, 0x43, 0xAA, 0x5E, 0x9C,
                0x94, 0x87, 0x8F, 0x05, 0xBC, 0x33, 0x7C, 0xA7, 0x70, 0x7A, 0x5A, 0x71, 0x33, 0x56, 0x4F, 0x31, 0x52, 0x33, 0x36, 0x3E, 0xB5, 0x7C, 0x88, 0x45, 0x92, 0x38, 0x45, 0x3B, 0x56, 0x37, 0x3D, 0x43, 0x48, 0x36, 0x43, 0x70, 0xA8, 0x57, 0x58, 0x3C, 0x7E, 0x55, 0x32, 0x79,
            },
            {//6300K
                0x30, 0x90, 0x40, 0x90, 0x33, 0x00, 0x42, 0x00,
                0x07, 0x08,
                0x8B, 0x00, 0x00, 0x00, 0x02, 0x3C, 0x00, 0x00, 0x00, 0x02,
                0xE0, 0xFF, 0xFF, 0xFF, 0x01, 0xEB, 0xFF, 0xFF, 0xFF, 0x02,
                0xE5, 0xFF, 0xFF, 0xFF, 0x02, 0xF0, 0xFF, 0xFF, 0xFF, 0x02,
                0xEC, 0xFF, 0xFF, 0xFF, 0x02, 0xF4, 0xFF, 0xFF, 0xFF, 0x03,
                0xF4, 0xFF, 0xFF, 0xFF, 0x03, 0xF9, 0xFF, 0xFF, 0xFF, 0x04,
                0xF7, 0xFF, 0xFF, 0xFF, 0x03, 0xFA, 0xFF, 0xFF, 0xFF, 0x04,
                0xF4, 0xFF, 0xFF, 0xFF, 0x03, 0xF8, 0xFF, 0xFF, 0xFF, 0x04,
                0xAC, 0x7A, 0xEE, 0x44, 0x04, 0x4A, 0x81,
                0x83, 0x5E, 0xD7, 0x56, 0x7F, 0x62, 0x04,
                0x48, 0x37, 0xB8, 0x69, 0x9C, 0x10, 0xA2,
                0x1E, 0x15, 0x92, 0x42, 0x95, 0x2D, 0x5F,
                0x07, 0x05, 0x7A, 0x4B, 0x8A, 0x74, 0x52,
                0x01, 0x00, 0x61, 0x3B, 0x4F, 0x7B, 0x8B,
                0x0B, 0x08, 0x4A, 0x46, 0x23, 0x60, 0x5B,
                0x28, 0x1A, 0x33, 0x45, 0x2C, 0x0B, 0x34,
                0x54, 0x43, 0x23, 0x7E, 0x4F, 0x05, 0x52,
                0x8E, 0x6E, 0x0E, 0x94, 0x69, 0x88, 0x6F,
                0xB4, 0x89, 0x03, 0x03, 0x88, 0x42, 0x6A,
                0xC5, 0xAD, 0xAE, 0x8A, 0x98, 0x82, 0x82, 0x66, 0x5E, 0x4D, 0x4D, 0x3A, 0x34, 0x26, 0x26, 0x1B, 0x18, 0x0D, 0x0D, 0x08, 0x11, 0x04, 0x04, 0x02, 0x19, 0x0B, 0x0B, 0x05, 0x31, 0x22, 0x22, 0x15, 0x55, 0x46, 0x46, 0x31, 0x83, 0x76, 0x75, 0x58, 0xA7, 0x95, 0x95, 0x79,
                0x28, 0x1A, 0x1D, 0x3E, 0x37, 0x22, 0x22, 0x3C, 0x67, 0x50, 0x4E, 0x5A, 0x99, 0x6E, 0x6E, 0x72, 0xB1, 0x81, 0x81, 0x7D, 0xB8, 0x84, 0x84, 0x7E, 0xB1, 0x7E, 0x7E, 0x82, 0x9C, 0x69, 0x67, 0x7A, 0x78, 0x40, 0x40, 0x60, 0x4C, 0x11, 0x10, 0x38, 0x45, 0x02, 0x03, 0x31,
                0x74, 0x16, 0x10, 0x81, 0x7E, 0x16, 0x15, 0x77, 0x7D, 0x1B, 0x1A, 0x6F, 0x75, 0x27, 0x25, 0x59, 0x6C, 0x33, 0x32, 0x43, 0x5B, 0x3F, 0x3A, 0x34, 0x41, 0x48, 0x44, 0x23, 0x2C, 0x51, 0x4E, 0x1A, 0x16, 0x55, 0x54, 0x06, 0x0C, 0x5C, 0x5B, 0x02, 0x0E, 0x70, 0x6D, 0x04,
                0x04, 0x2E, 0x25, 0x08, 0x87, 0xAC, 0x9B, 0x6F, 0x7A, 0x7A, 0x76, 0x56, 0x6B, 0x77, 0x84, 0x5E, 0x55, 0x6A, 0x6F, 0x45, 0x55, 0x66, 0x61, 0x39, 0x51, 0x64, 0x5F, 0x32, 0x7E, 0x74, 0x75, 0x59, 0x59, 0x8E, 0x8B, 0x66, 0x7D, 0x8B, 0x78, 0x4C, 0x33, 0x57, 0x5E, 0x26,
                0x78, 0x2F, 0x4D, 0xA7, 0x56, 0x40, 0x68, 0xDD, 0x3E, 0x9F, 0x82, 0x9B, 0x6F, 0x80, 0x7F, 0xC7, 0x34, 0x60, 0x60, 0x5B, 0x39, 0x59, 0x6F, 0x86, 0x38, 0x69, 0x74, 0x92, 0x56, 0x9D, 0xAF, 0x9A, 0x6B, 0x86, 0x76, 0xEE, 0x1F, 0x7A, 0x95, 0x92, 0x28, 0x04, 0x53, 0x9A,
                0x54, 0x3A, 0x61, 0x27, 0xA9, 0x76, 0x59, 0x90, 0x25, 0x4F, 0x50, 0x61, 0x0E, 0x33, 0x36, 0x6A, 0x62, 0x43, 0x5B, 0x4F, 0xB6, 0xBC, 0xA7, 0xD8, 0x4E, 0x61, 0x61, 0x99, 0x47, 0x38, 0x2F, 0x54, 0x24, 0x4F, 0x60, 0x53, 0x80, 0x78, 0x79, 0xA2, 0x20, 0x78, 0x56, 0x6F,
                0xB1, 0x88, 0x9B, 0x8F, 0xBB, 0x73, 0x9A, 0x44, 0xC2, 0xAC, 0xA8, 0x9F, 0x5A, 0x7F, 0x81, 0x92, 0x63, 0x85, 0x92, 0x9F, 0x2C, 0x6F, 0x7E, 0x7A, 0xAC, 0x84, 0x6A, 0xCB, 0x68, 0x53, 0x66, 0xA4, 0x96, 0x97, 0x7E, 0x65, 0x8E, 0x85, 0x39, 0x95, 0x02, 0x83, 0x55, 0x41,
            }
        },
        {//Capture SVD
            {//2900K
                0x40, 0xE0, 0x55, 0xE0, 0x43, 0x00, 0x5C, 0x00,
                0x07, 0x08,
                0x88, 0x00, 0x00, 0x00, 0x02, 0x3C, 0x00, 0x00, 0x00, 0x02,
                0xC6, 0xFF, 0xFF, 0xFF, 0x01, 0xEF, 0xFF, 0xFF, 0xFF, 0x02,
                0xEF, 0xFF, 0xFF, 0xFF, 0x02, 0xEE, 0xFF, 0xFF, 0xFF, 0x02,
                0xD9, 0xFF, 0xFF, 0xFF, 0x01, 0xE2, 0xFF, 0xFF, 0xFF, 0x02,
                0xF5, 0xFF, 0xFF, 0xFF, 0x03, 0xF9, 0xFF, 0xFF, 0xFF, 0x03,
                0xF5, 0xFF, 0xFF, 0xFF, 0x03, 0xF7, 0xFF, 0xFF, 0xFF, 0x03,
                0xF6, 0xFF, 0xFF, 0xFF, 0x03, 0xFA, 0xFF, 0xFF, 0xFF, 0x04,
                0xB9, 0x67, 0xEB, 0x42, 0xB2,0x04, 0x00,
                0x94, 0x76, 0xD0, 0x54, 0x53,0x3B, 0xBC,
                0x68, 0x7F, 0xA4, 0x4E, 0x17,0xA0, 0x4C,
                0x44, 0x8B, 0x7A, 0x4E, 0x06,0x8A, 0x2B,
                0x29, 0x92, 0x59, 0x42, 0x27,0x76, 0x70,
                0x16, 0x98, 0x34, 0x3A, 0x6D,0x73, 0x41,
                0x09, 0x9E, 0x1A, 0x38, 0x80,0x73, 0x51,
                0x03, 0x9C, 0x0C, 0x37, 0x70,0x88, 0x2A,
                0x06, 0x97, 0x02, 0x38, 0x7E,0x21, 0x4D,
                0x0F, 0x90, 0x02, 0x43, 0x7C,0x49, 0x50,
                0x1F, 0x85, 0x00, 0x4E, 0x52,0x3F, 0x75,
                0x37, 0x79, 0x05, 0x64, 0x4A,0x05, 0x93,
                0x55, 0x69, 0x0F, 0x74, 0x1D,0x1B, 0x09,
                0x79, 0x56, 0x1B, 0x82, 0x00,0x4F, 0x33,
                0xA1, 0x42, 0x29, 0x8F, 0xDE,0xB3, 0x60,
                0xCB, 0x00, 0x10, 0x01, 0x3D,0x63, 0x59,
                0xBC, 0xCA, 0xCB, 0x90, 0x92, 0x9D, 0x9E, 0x6B, 0x6A, 0x72, 0x72, 0x4A, 0x4C, 0x50, 0x50, 0x33, 0x32, 0x35, 0x35, 0x20, 0x1F, 0x1F, 0x1F, 0x12, 0x12, 0x10, 0x10, 0x09, 0x0C, 0x09, 0x08, 0x04, 0x0B, 0x07, 0x07, 0x02, 0x11, 0x0D, 0x0D, 0x04, 0x1B, 0x19, 0x19, 0x0A, 0x2A, 0x2C, 0x2C, 0x15, 0x3D, 0x44, 0x44, 0x25, 0x56, 0x64, 0x64, 0x3B, 0x72, 0x86, 0x86, 0x58, 0x8E, 0xA1, 0xA1, 0x73,
                0x18, 0x08, 0x01, 0x04, 0x89, 0x70, 0x71, 0x67, 0x6F, 0x57, 0x57, 0x69, 0x5C, 0x41, 0x40, 0x60, 0x52, 0x33, 0x34, 0x54, 0x3B, 0x28, 0x26, 0x48, 0x28, 0x1D, 0x1E, 0x3B, 0x1F, 0x1B, 0x1B, 0x31, 0x1C, 0x21, 0x21, 0x2C, 0x19, 0x28, 0x26, 0x2B, 0x21, 0x39, 0x38, 0x2A, 0x20, 0x4C, 0x4C, 0x28, 0x22, 0x63, 0x63, 0x31, 0x27, 0x85, 0x7F, 0x3B, 0x31, 0x9D, 0x9D, 0x40, 0x14, 0xA3, 0xA1, 0x33,
                0x75, 0x07, 0x03, 0x7F, 0x71, 0x0C, 0x0B, 0x75, 0x78, 0x13, 0x13, 0x6D, 0x86, 0x23, 0x23, 0x6B, 0x8C, 0x31, 0x30, 0x62, 0x8E, 0x41, 0x40, 0x5A, 0x96, 0x53, 0x53, 0x55, 0x8A, 0x59, 0x57, 0x45, 0x7C, 0x5F, 0x5F, 0x3F, 0x6B, 0x61, 0x5F, 0x37, 0x60, 0x5C, 0x5B, 0x33, 0x49, 0x55, 0x53, 0x24, 0x3C, 0x4D, 0x4C, 0x1C, 0x2F, 0x43, 0x42, 0x13, 0x29, 0x3D, 0x3A, 0x09, 0x32, 0x52, 0x50, 0x0E,
                0x05, 0x0B, 0x03, 0x11, 0x66, 0x8D, 0x8F, 0x67, 0x72, 0x8C, 0x8C, 0x76, 0x72, 0x89, 0x8B, 0x74, 0x7F, 0x8D, 0x8D, 0x7A, 0x84, 0x90, 0x93, 0x80, 0x87, 0x92, 0x92, 0x87, 0x93, 0x8D, 0x8D, 0x83, 0x8D, 0x8B, 0x8B, 0x83, 0x92, 0x8A, 0x88, 0x87, 0x95, 0x82, 0x83, 0x8B, 0x90, 0x7E, 0x7E, 0x84, 0x96, 0x7C, 0x7B, 0x93, 0x90, 0x75, 0x75, 0x8E, 0x8F, 0x6A, 0x6A, 0x7E, 0x82, 0x5C, 0x5E, 0x72,
                0x44, 0x06, 0x03, 0x64, 0x5F, 0x31, 0x25, 0x54, 0x2A, 0x2A, 0x2A, 0x51, 0x22, 0x3D, 0x36, 0x52, 0x58, 0x35, 0x38, 0x4E, 0x23, 0x1A, 0x1D, 0x3C, 0x15, 0x1C, 0x1D, 0x44, 0x38, 0x28, 0x26, 0x47, 0x42, 0x2A, 0x2A, 0x54, 0x2D, 0x20, 0x1D, 0x3E, 0x3D, 0x24, 0x22, 0x5B, 0x40, 0x27, 0x2F, 0x45, 0x4C, 0x21, 0x23, 0x4E, 0x41, 0x0F, 0x03, 0x48, 0x1A, 0x2D, 0x33, 0x33, 0x98, 0x4F, 0x46, 0xB0,
                0x43, 0x38, 0x36, 0x6B, 0x05, 0x1A, 0x20, 0x29, 0x56, 0x40, 0x40, 0x69, 0x59, 0x5E, 0x5C, 0x8B, 0x3F, 0x53, 0x55, 0x44, 0x30, 0x3F, 0x47, 0x68, 0x25, 0x5C, 0x5D, 0x77, 0x31, 0x54, 0x56, 0x66, 0x2C, 0x45, 0x45, 0x61, 0x31, 0x52, 0x54, 0x57, 0x1D, 0x4B, 0x4A, 0x4F, 0x35, 0x56, 0x4D, 0x5D, 0x26, 0x5A, 0x64, 0x5C, 0x44, 0x48, 0x48, 0x78, 0x09, 0x4F, 0x42, 0x6A, 0x2C, 0x48, 0x4E, 0x30,
                0xBD, 0x37, 0x4E, 0x27, 0xD1, 0x1B, 0x1A, 0x68, 0x4C, 0x90, 0x90, 0x03, 0xA7, 0x63, 0x51, 0x58, 0x28, 0x5B, 0x61, 0x0E, 0xA5, 0x4E, 0x4C, 0x97, 0x4D, 0x54, 0x52, 0x68, 0x3C, 0x31, 0x42, 0x3D, 0x7A, 0x21, 0x21, 0xA1, 0x7B, 0x43, 0x31, 0x87, 0x86, 0x66, 0x67, 0x5B, 0x8B, 0x93, 0x9B, 0xBC, 0x5E, 0x73, 0x47, 0x51, 0x8A, 0x7B, 0x6E, 0x92, 0x53, 0x33, 0x3F, 0xA2, 0x36, 0x7D, 0x22, 0x4A,
            },
            {//4000K
                0x40, 0xE0, 0x55, 0xE0, 0x43, 0x00, 0x5C, 0x00,
                0x07, 0x08,
                0x88, 0x00, 0x00, 0x00, 0x02, 0x3C, 0x00, 0x00, 0x00, 0x02,
                0xC4, 0xFF, 0xFF, 0xFF, 0x01, 0xED, 0xFF, 0xFF, 0xFF, 0x02,
                0xED, 0xFF, 0xFF, 0xFF, 0x02, 0xEF, 0xFF, 0xFF, 0xFF, 0x02,
                0xDA, 0xFF, 0xFF, 0xFF, 0x01, 0xE3, 0xFF, 0xFF, 0xFF, 0x02,
                0xF1, 0xFF, 0xFF, 0xFF, 0x03, 0xF7, 0xFF, 0xFF, 0xFF, 0x03,
                0xEF, 0xFF, 0xFF, 0xFF, 0x03, 0xF7, 0xFF, 0xFF, 0xFF, 0x03,
                0xF2, 0xFF, 0xFF, 0xFF, 0x03, 0xF9, 0xFF, 0xFF, 0xFF, 0x04,
                0xB8, 0x6B, 0xF0, 0x45, 0xB5,0x05, 0x5B,
                0x95, 0x7B, 0xDA, 0x50, 0x93,0xA6, 0x9B,
                0x67, 0x84, 0xAE, 0x4C, 0x36,0xB2, 0x93,
                0x44, 0x91, 0x7E, 0x4F, 0x03,0xB5, 0x05,
                0x29, 0x9A, 0x60, 0x43, 0x85,0xBF, 0x87,
                0x15, 0xA0, 0x3F, 0x37, 0x81,0xB0, 0x64,
                0x09, 0xA0, 0x27, 0x36, 0x9E,0xB3, 0x6E,
                0x03, 0x9D, 0x11, 0x31, 0x7C,0x8F, 0x87,
                0x06, 0x98, 0x0C, 0x33, 0xA5,0x6D, 0x7D,
                0x0F, 0x96, 0x0A, 0x3F, 0x8A,0x68, 0x72,
                0x1F, 0x89, 0x01, 0x4B, 0x78,0x3F, 0x6D,
                0x36, 0x7B, 0x09, 0x61, 0x77,0x5C, 0x5C,
                0x54, 0x6B, 0x14, 0x72, 0x20,0x47, 0x57,
                0x78, 0x5B, 0x26, 0x82, 0x40,0x8E, 0xDB,
                0xA0, 0x49, 0x2C, 0x8C, 0xF3,0xD4, 0x35,
                0xCC, 0x00, 0x24, 0x01, 0x5F,0x9F, 0x6D,
                0xBE, 0xCB, 0xCB, 0x8C, 0x93, 0x9D, 0x9D, 0x68, 0x6B, 0x73, 0x73, 0x48, 0x4D, 0x50, 0x50, 0x30, 0x34, 0x35, 0x35, 0x1E, 0x20, 0x1F, 0x1F, 0x11, 0x13, 0x10, 0x10, 0x07, 0x0D, 0x09, 0x09, 0x02, 0x0C, 0x07, 0x07, 0x00, 0x12, 0x0D, 0x0D, 0x02, 0x1C, 0x19, 0x19, 0x08, 0x2B, 0x2C, 0x2C, 0x14, 0x3E, 0x44, 0x44, 0x24, 0x57, 0x64, 0x64, 0x3A, 0x74, 0x86, 0x86, 0x57, 0x8F, 0xA1, 0xA1, 0x71,
                0x1D, 0x0A, 0x0A, 0x03, 0x8E, 0x78, 0x78, 0x78, 0x7C, 0x5D, 0x5C, 0x74, 0x65, 0x4B, 0x4B, 0x68, 0x56, 0x3C, 0x3C, 0x5A, 0x43, 0x33, 0x33, 0x4E, 0x36, 0x26, 0x26, 0x3E, 0x27, 0x26, 0x26, 0x3B, 0x23, 0x2B, 0x2C, 0x32, 0x21, 0x34, 0x34, 0x2F, 0x27, 0x43, 0x44, 0x2B, 0x2A, 0x57, 0x57, 0x2F, 0x2C, 0x6E, 0x6E, 0x37, 0x31, 0x8B, 0x89, 0x3E, 0x3B, 0xA8, 0xA8, 0x49, 0x19, 0xA8, 0xA7, 0x30,
                0x74, 0x09, 0x09, 0x7E, 0x71, 0x03, 0x02, 0x74, 0x6D, 0x0F, 0x0E, 0x65, 0x84, 0x1F, 0x1F, 0x6B, 0x85, 0x2D, 0x2A, 0x56, 0x8C, 0x3E, 0x3E, 0x52, 0x93, 0x4F, 0x4E, 0x49, 0x87, 0x57, 0x57, 0x42, 0x78, 0x5A, 0x5A, 0x35, 0x6B, 0x5B, 0x5B, 0x33, 0x56, 0x58, 0x58, 0x29, 0x44, 0x4F, 0x4F, 0x22, 0x34, 0x4C, 0x47, 0x17, 0x29, 0x3D, 0x3E, 0x0E, 0x26, 0x36, 0x35, 0x03, 0x34, 0x4D, 0x4E, 0x10,
                0x05, 0x0A, 0x0A, 0x01, 0x65, 0x81, 0x80, 0x6D, 0x6D, 0x88, 0x8A, 0x75, 0x70, 0x89, 0x88, 0x6F, 0x7B, 0x86, 0x88, 0x75, 0x86, 0x8E, 0x8E, 0x7A, 0x8B, 0x8F, 0x8F, 0x7B, 0x8A, 0x8C, 0x8D, 0x7F, 0x92, 0x8D, 0x8B, 0x85, 0x91, 0x8A, 0x8A, 0x8B, 0x8C, 0x80, 0x81, 0x80, 0x8A, 0x7B, 0x7B, 0x83, 0x93, 0x78, 0x78, 0x87, 0x86, 0x70, 0x70, 0x81, 0x88, 0x66, 0x67, 0x7B, 0x7F, 0x52, 0x53, 0x66,
                0x77, 0x04, 0x04, 0x5D, 0x6A, 0x3E, 0x42, 0x62, 0x41, 0x3E, 0x35, 0x53, 0x3C, 0x4A, 0x4D, 0x5C, 0x4C, 0x3B, 0x46, 0x6A, 0x3B, 0x2B, 0x2B, 0x4A, 0x3B, 0x29, 0x2D, 0x47, 0x35, 0x40, 0x3D, 0x3F, 0x40, 0x3C, 0x36, 0x5D, 0x58, 0x31, 0x31, 0x68, 0x46, 0x3F, 0x3C, 0x66, 0x3C, 0x3A, 0x3A, 0x67, 0x53, 0x34, 0x39, 0x60, 0x68, 0x30, 0x37, 0x77, 0x31, 0x2E, 0x2D, 0x3D, 0x80, 0x61, 0x5D, 0xC1,
                0x34, 0x32, 0x32, 0x89, 0x2B, 0x14, 0x11, 0x2E, 0x7A, 0x54, 0x4D, 0x7A, 0x4D, 0x49, 0x4B, 0x65, 0x10, 0x53, 0x52, 0x5B, 0x3D, 0x3E, 0x3E, 0x61, 0x27, 0x43, 0x40, 0x64, 0x42, 0x44, 0x45, 0x68, 0x3E, 0x55, 0x4D, 0x6A, 0x22, 0x50, 0x50, 0x51, 0x2E, 0x44, 0x3F, 0x5F, 0x41, 0x5D, 0x5D, 0x74, 0x54, 0x5C, 0x60, 0x6F, 0x38, 0x64, 0x68, 0x5F, 0x22, 0x49, 0x43, 0x68, 0x06, 0x2D, 0x28, 0x39,
                0xDA, 0x08, 0x08, 0xF5, 0x4C, 0x89, 0x8D, 0x5E, 0x1F, 0x68, 0x60, 0x37, 0x37, 0x9F, 0x9E, 0x4C, 0x60, 0x99, 0x7F, 0x14, 0x77, 0x80, 0x80, 0x2D, 0x49, 0x8E, 0x88, 0x66, 0x58, 0x80, 0x94, 0x91, 0x44, 0x91, 0x9C, 0x98, 0x69, 0x69, 0x69, 0x2E, 0x93, 0x53, 0x51, 0x66, 0x68, 0x64, 0x64, 0x41, 0x8F, 0x7A, 0x84, 0x33, 0x8F, 0x95, 0xB0, 0x63, 0x88, 0x9E, 0x96, 0x80, 0x7A, 0x70, 0x71, 0x40,
            },
            {//6300K
                0x40, 0xE0, 0x55, 0xE0, 0x43, 0x00, 0x5C, 0x00,
                0x07, 0x08,
                0x8A, 0x00, 0x00, 0x00, 0x02, 0x3C, 0x00, 0x00, 0x00, 0x02,
                0xDA, 0xFF, 0xFF, 0xFF, 0x01, 0xE8, 0xFF, 0xFF, 0xFF, 0x02,
                0xE1, 0xFF, 0xFF, 0xFF, 0x01, 0xEE, 0xFF, 0xFF, 0xFF, 0x02,
                0xDD, 0xFF, 0xFF, 0xFF, 0x01, 0xF7, 0xFF, 0xFF, 0xFF, 0x02,
                0xEC, 0xFF, 0xFF, 0xFF, 0x03, 0xF1, 0xFF, 0xFF, 0xFF, 0x03,
                0xF3, 0xFF, 0xFF, 0xFF, 0x03, 0xF9, 0xFF, 0xFF, 0xFF, 0x03,
                0xF5, 0xFF, 0xFF, 0xFF, 0x03, 0xFA, 0xFF, 0xFF, 0xFF, 0x04,
                0xC5, 0x09, 0x01, 0x5B, 0x02,0x6E, 0x85,
                0x9E, 0x1C, 0x01, 0x45, 0x9B,0x7B, 0x28,
                0x72, 0x35, 0x0A, 0x48, 0xFD,0x4F, 0x0A,
                0x4B, 0x52, 0x19, 0x4C, 0xF1,0x39, 0x7C,
                0x2D, 0x69, 0x22, 0x4E, 0xED,0x4D, 0x95,
                0x16, 0x7A, 0x2F, 0x55, 0xC0,0x77, 0x95,
                0x08, 0x83, 0x38, 0x51, 0xAF,0x8B, 0x45,
                0x03, 0x88, 0x40, 0x55, 0x8A,0xA4, 0x23,
                0x04, 0x87, 0x49, 0x52, 0x6F,0x8A, 0x31,
                0x0E, 0x81, 0x4E, 0x47, 0x6F,0x89, 0x3F,
                0x1D, 0x75, 0x52, 0x3D, 0x7F,0x4D, 0x72,
                0x37, 0x63, 0x56, 0x30, 0x80,0x37, 0x7A,
                0x56, 0x4B, 0x5A, 0x21, 0x89,0x00, 0x79,
                0x7E, 0x2F, 0x5F, 0x12, 0x92,0x1B, 0x02,
                0xA6, 0x13, 0x5D, 0x00, 0xCF,0xFD, 0x83,
                0xD3, 0x01, 0x94, 0x9D, 0xC3,0x65, 0x57,
                0xD6, 0xC1, 0xC1, 0x9A, 0xAA, 0x98, 0x98, 0x77, 0x80, 0x70, 0x70, 0x56, 0x5D, 0x4E, 0x4F, 0x3C, 0x40, 0x33, 0x33, 0x26, 0x27, 0x1D, 0x1D, 0x15, 0x18, 0x0E, 0x0E, 0x0A, 0x11, 0x07, 0x06, 0x04, 0x11, 0x05, 0x05, 0x03, 0x18, 0x0C, 0x0C, 0x06, 0x26, 0x19, 0x19, 0x0F, 0x3A, 0x2D, 0x2D, 0x1E, 0x52, 0x47, 0x47, 0x32, 0x70, 0x66, 0x66, 0x4B, 0x91, 0x87, 0x87, 0x69, 0xAE, 0xA1, 0xA1, 0x84,
                0x59, 0x77, 0x76, 0x41, 0x97, 0xA8, 0xAB, 0x81, 0x74, 0x89, 0x8B, 0x73, 0x4C, 0x6A, 0x69, 0x5F, 0x29, 0x53, 0x54, 0x4B, 0x14, 0x41, 0x42, 0x3F, 0x05, 0x36, 0x37, 0x3A, 0x01, 0x32, 0x33, 0x3C, 0x02, 0x33, 0x32, 0x39, 0x0A, 0x38, 0x38, 0x38, 0x15, 0x44, 0x44, 0x3B, 0x26, 0x59, 0x5B, 0x49, 0x40, 0x73, 0x75, 0x5F, 0x5E, 0x9C, 0x9C, 0x7B, 0x73, 0xB6, 0xB6, 0x93, 0x68, 0xAB, 0xAA, 0x87,
                0x4C, 0xA2, 0xA4, 0x4B, 0x02, 0x5F, 0x60, 0x04, 0x08, 0x64, 0x65, 0x0F, 0x0A, 0x63, 0x66, 0x1A, 0x0A, 0x60, 0x60, 0x23, 0x14, 0x58, 0x59, 0x35, 0x1D, 0x51, 0x52, 0x3C, 0x2D, 0x4B, 0x4D, 0x4C, 0x37, 0x45, 0x45, 0x57, 0x42, 0x3F, 0x3F, 0x5F, 0x51, 0x37, 0x37, 0x6A, 0x5D, 0x32, 0x34, 0x71, 0x68, 0x28, 0x2D, 0x75, 0x73, 0x24, 0x26, 0x7B, 0x7A, 0x1B, 0x1B, 0x85, 0x73, 0x11, 0x10, 0x86,
                0xAF, 0x86, 0x82, 0xAD, 0x2B, 0x01, 0x01, 0x2B, 0x21, 0x00, 0x00, 0x25, 0x21, 0x0A, 0x0D, 0x24, 0x26, 0x0F, 0x0E, 0x29, 0x27, 0x0E, 0x0E, 0x24, 0x27, 0x15, 0x15, 0x1F, 0x22, 0x1B, 0x1B, 0x1F, 0x22, 0x1F, 0x1E, 0x21, 0x1B, 0x1D, 0x1D, 0x13, 0x19, 0x1B, 0x1B, 0x15, 0x0C, 0x1A, 0x19, 0x11, 0x07, 0x1A, 0x18, 0x0D, 0x00, 0x19, 0x19, 0x07, 0x0E, 0x21, 0x21, 0x0D, 0x18, 0x35, 0x35, 0x1E,
                0x82, 0x6A, 0x6F, 0xA2, 0x6B, 0x53, 0x47, 0x5D, 0x7A, 0x95, 0x8F, 0xA7, 0x77, 0x8C, 0x8D, 0xAA, 0x71, 0x87, 0x87, 0xA3, 0x4F, 0x8C, 0x8A, 0x94, 0x6B, 0x75, 0x6F, 0x76, 0x66, 0x70, 0x75, 0x8C, 0x4B, 0x62, 0x64, 0x94, 0x54, 0x6C, 0x6C, 0x89, 0x69, 0x85, 0x85, 0x95, 0x7B, 0x89, 0x95, 0xA6, 0x62, 0x88, 0x86, 0xA0, 0x7E, 0x9F, 0x96, 0x99, 0x49, 0x73, 0x73, 0x98, 0x06, 0x48, 0x4D, 0x4F,
                0x1E, 0x00, 0x22, 0x5B, 0x59, 0x29, 0x2D, 0x5E, 0x0D, 0x0E, 0x0F, 0x34, 0x3B, 0x2E, 0x28, 0x56, 0x39, 0x2A, 0x25, 0x40, 0x20, 0x1D, 0x1E, 0x53, 0x1F, 0x15, 0x19, 0x3F, 0x4E, 0x45, 0x45, 0x51, 0x3B, 0x3C, 0x3B, 0x75, 0x32, 0x29, 0x29, 0x68, 0x34, 0x3A, 0x3A, 0x57, 0x47, 0x27, 0x27, 0x53, 0x26, 0x17, 0x1C, 0x52, 0x1C, 0x1F, 0x22, 0x41, 0x3A, 0x2F, 0x2F, 0x84, 0x3D, 0x60, 0x5D, 0x91,
                0x89, 0x4C, 0x51, 0x5C, 0xAC, 0x90, 0x86, 0x7E, 0xB3, 0x27, 0x28, 0xC4, 0x10, 0x27, 0x35, 0x07, 0xB5, 0x4A, 0x4E, 0x97, 0x82, 0x72, 0x6E, 0x8C, 0x15, 0x5C, 0x53, 0x6B, 0x38, 0x3A, 0x3D, 0x34, 0x4B, 0x32, 0x36, 0x5C, 0x6E, 0x56, 0x56, 0x3B, 0x7B, 0x8C, 0x8C, 0x92, 0xA0, 0x61, 0x55, 0x5E, 0x37, 0x28, 0x27, 0x46, 0x8D, 0x62, 0x79, 0xA3, 0xD8, 0x2A, 0x2A, 0x89, 0x73, 0x29, 0x30, 0x26,
            }
        },
        {0},
        {0}
    }
};


const NVRAM_CAMERA_ISP_PARAM_STRUCT CAMERA_ISP_DEFAULT_VALUE =
{{
    //Version
    Version: NVRAM_CAMERA_PARA_FILE_VERSION,

    //SensorId
    SensorId: SENSOR_ID,
    ISPComm:{
        {// 0~30 reserve for compatiblilty with WCP1 setting  
         // [31] for table defect control 0x0154h  Enable :0x010000 disable : 0
         // [32] for defect table address 0x0158h
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xA8A8A8A8, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x08000810, 0x00000414, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000500, 0x000003C0, 0x00000A00, 0x00000780, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000
        }
    },
    ISPRegs:{
        #include INCLUDE_FILENAME_ISP_REGS_PARAM
    },
    ISPPca: {
        #include INCLUDE_FILENAME_ISP_PCA_PARAM
    }
}};

const NVRAM_CAMERA_3A_STRUCT CAMERA_3A_NVRAM_DEFAULT_VALUE =
{
	NVRAM_CAMERA_3A_FILE_VERSION, // u4Version
	SENSOR_ID, // SensorId

    // AE NVRAM
	{
        // rDevicesInfo
		{
            1560,    // u4MinGain, 1024 base = 1x
            10240,    // u4MaxGain, 16x
            50,    // u4MiniISOGain, ISOxx  
            128,    // u4GainStepUnit, 1x/8 
            31,    // u4PreExpUnit 
            30,    // u4PreMaxFrameRate
            31,    // u4VideoExpUnit  
            30,    // u4VideoMaxFrameRate 
            1024,    // u4Video2PreRatio, 1024 base = 1x 
            34,    // u4CapExpUnit 
            14,    // u4CapMaxFrameRate
            1024,   // u4Cap2PreRatio, 1024 base = 1x
            28      // u4LensFno, Fno = 2.8
		},
	    // rHistConfig
		{
            2,   // u4HistHighThres
            40,  // u4HistLowThres
            2,   // u4MostBrightRatio
            1,   // u4MostDarkRatio
            160, // u4CentralHighBound
            20,  // u4CentralLowBound
			{240, 230, 220, 210, 200}, // u4OverExpThres[AE_CCT_STRENGTH_NUM]
			{86, 108, 120, 148, 170},  // u4HistStretchThres[AE_CCT_STRENGTH_NUM]
			{18, 22, 26, 30, 34}       // u4BlackLightThres[AE_CCT_STRENGTH_NUM]
		},
        // rCCTConfig
		{
		    TRUE,            // bEnableBlackLight
            TRUE,            // bEnableHistStretch
            FALSE,           // bEnableAntiOverExposure
            TRUE,            // bEnableTimeLPF
            FALSE,            // bEnableCaptureThres
            47,    // u4AETarget
            20,              // u4InitIndex
            4,               // u4BackLightWeight
            32,              // u4HistStretchWeight
            4,               // u4AntiOverExpWeight
            2,               // u4BlackLightStrengthIndex
            0,               // u4HistStretchStrengthIndex
            2,               // u4AntiOverExpStrengthIndex
            2,               // u4TimeLPFStrengthIndex
			{1, 3, 5, 7, 8}, // u4LPFConvergeTable[AE_CCT_STRENGTH_NUM]
            90,              // u4InDoorEV = 9.0, 10 base
            -16,    // u4BVOffset delta BV = value/10 
            3,               // u4PreviewFlareOffset
            3,               // u4CaptureFlareOffset
            5,                // u4CaptureFlareThres
            8,                 // u4MaxCaptureFlareThres
            10,                // u4FlatnessThres              // 10 base for flatness condition.
            180                 // u4FlatnessStrength
		}
	},

    // AWB NVRAM
    {								
    	// AWB calibration data							
    	{							
    		// rCalGain (calibration gain: 1.0 = 512)						
    		{						
    			0,	// u4R				
    			0,	// u4G				
    			0	// u4B				
    		},						
    		// rDefGain (Default calibration gain: 1.0 = 512)						
    		{						
	            0,	// u4R
	            0,	// u4G
	            0	// u4B
            },
            {// rD65Gain (D65 WB gain: 1.0 = 512)
                905,    // u4R
                512,    // u4G
                632    // u4B
            }
        },
        {// Original XY coordinate of AWB light source
            {// Horizon
                -517,    // i4X
                -523    // i4Y
            },
            {// A
                -377,    // i4X
                -510    // i4Y
            },
            {// TL84
                -189,    // i4X
                -505    // i4Y
            },
            {// CWF
                -127,    // i4X
                -583    // i4Y
            },
            {// DNP
                -28,    // i4X
                -435    // i4Y
            },
            {// D65
                156,    // i4X
                -339    // i4Y
            },
            {// D75
                189,    // i4X
                -357    // i4Y
            },
            {// DF
			0,	// i4X				
			0	// i4Y				
    		}						
    	},							
        {// Rotated XY coordinate of AWB light source
            {// Horizon
                -656,    // i4X
                -337    // i4Y
            },
            {// A
                -519,    // i4X
                -368    // i4Y
            },
            {// TL84
                -338,    // i4X
                -422    // i4Y
            },
            {// CWF
                -303,    // i4X
                -516    // i4Y
            },
            {// DNP
                -163,    // i4X
                -406    // i4Y
            },
            {// D65
                43,    // i4X
                -372    // i4Y
            },
            {// D75
                69,    // i4X
                -399    // i4Y
            },
            {// DF
			0,	// i4X				
			0	// i4Y				
    		}						
    	},							
        {// Rotation matrix parameter
            18,    // i4RotationAngle
            122,    // i4H11
            40,    // i4H12
            -40,    // i4H21
            122    // i4H22
        },
        {// Daylight locus parameter
            -244,    // i4SlopeNumerator
            128    // i4SlopeDenominator
        },
        {// AWB light area
            {// Tungsten
            -388,    // i4RightBound
            -1038,    // i4LeftBound
            -282,    // i4UpperBound
            -402    // i4LowerBound
            },
            {// Warm fluorescent
            -388,    // i4RightBound
            -1038,    // i4LeftBound
            -402,    // i4UpperBound
            -522    // i4LowerBound
            },
            {// Fluorescent
            -213,    // i4RightBound
            -388,    // i4LeftBound
            -357,    // i4UpperBound
            -459    // i4LowerBound
            },
            {// CWF
            -213,    // i4RightBound
            -388,    // i4LeftBound
            -459,    // i4UpperBound
            -566    // i4LowerBound
            },
            {// Daylight
            56,    // i4RightBound
            -213,    // i4LeftBound
            -292,    // i4UpperBound
            -452    // i4LowerBound
            },
            {// Shade
            416,    // i4RightBound
            56,    // i4LeftBound
            -319,    // i4UpperBound
            -479    // i4LowerBound
            },
            {// Daylight Fluorescent
            56,    // i4RightBound
            -213,    // i4LeftBound
            -452,    // i4UpperBound
            -566    // i4LowerBound
            }
        },
        {// PWB light area
            {// Reference area
            416,    // i4RightBound
            -1038,    // i4LeftBound
            -282,    // i4UpperBound
            -566    // i4LowerBound
            },
            {// Daylight
            56,    // i4RightBound
            -213,    // i4LeftBound
            -292,    // i4UpperBound
            -452    // i4LowerBound
            },
            {// Cloudy daylight
            149,    // i4RightBound
            56,    // i4LeftBound
            -319,    // i4UpperBound
            -479    // i4LowerBound
            },
            {// Shade
            309,    // i4RightBound
            149,    // i4LeftBound
            -319,    // i4UpperBound
            -479    // i4LowerBound
            },
            {// Twilight
            -213,    // i4RightBound
            -373,    // i4LeftBound
            -292,    // i4UpperBound
            -452    // i4LowerBound
            },
            {// Fluorescent
            93,    // i4RightBound
            -388,    // i4LeftBound
            -372,    // i4UpperBound
            -566    // i4LowerBound
            },
            {// Warm fluorescent
            -388,    // i4RightBound
            -569,    // i4LeftBound
            -372,    // i4UpperBound
            -566    // i4LowerBound
            },
            {// Incandescent
            -388,    // i4RightBound
            -569,    // i4LeftBound
            -292,    // i4UpperBound
            -452    // i4LowerBound
            },
            {// Gray World
			10000,	// i4RightBound				
			-10000,	// i4LeftBound				
			10000,	// i4UpperBound				
			-10000	// i4LowerBound				
		}						
    	},							
        {// PWB default gain	
            {// Daylight
            828,    // u4R
            512,    // u4G
            753    // u4B
            },
            {// Cloudy daylight
            984,    // u4R
            512,    // u4G
            591    // u4B
            },
            {// Shade
            1079,    // u4R
            512,    // u4G
            492    // u4B
            },
            {// Twilight
            708,    // u4R
            512,    // u4G
            1028    // u4B
            },
            {// Fluorescent
            906,    // u4R
            512,    // u4G
            894    // u4B
            },
            {// Warm fluorescent
            711,    // u4R
            512,    // u4G
            1444    // u4B
            },
            {// Incandescent
            618,    // u4R
            512,    // u4G
            1345    // u4B
            },
            {// Gray World
			512,	// u4R				
			512,	// u4G				
			512	// u4B				
    		}						
    	},							
        {// AWB preference color	
            {// Tungsten
            0,    // i4SliderValue
            7894    // i4OffsetThr
            },
            {// Warm fluorescent	
            0,    // i4SliderValue
            6240    // i4OffsetThr
            },
            {// Shade
            0,    // i4SliderValue
            1158    // i4OffsetThr
            },
            {// Daylight WB gain
            803,    // u4R
            512,    // u4G
            802    // u4B
            },
            {// Preference gain: tungsten
            512,    // u4R
            512,    // u4G
            512    // u4B
            },
            {// Preference gain: warm fluorescent
            512,    // u4R
            512,    // u4G
            512    // u4B
            },
            {// Preference gain: fluorescent
            512,    // u4R
            512,    // u4G
            512    // u4B
            },
            {// Preference gain: CWF
            525,    // u4R
            512,    // u4G
            506    // u4B
            },
            {// Preference gain: daylight
            525,    // u4R
            512,    // u4G
            498    // u4B
            },
            {// Preference gain: shade
            512,    // u4R
            512,    // u4G
            512    // u4B
            },
            {// Preference gain: daylight fluorescent
            512,    // u4R
            512,    // u4G
            512    // u4B
  		}						
    	},							
    	// CCT estimation 							
    	{							
    		// CCT						
    		{						
			2300,	// i4CCT[0]				
    			2850,	// i4CCT[1]				
    			4100,	// i4CCT[2]				
    			5100,	// i4CCT[3]				
    			6500,	// i4CCT[4]				
    			7500	// i4CCT[5]				
    		},						
            {// Rotated X coordinate
                -699,    // i4RotatedXCoordinate[0]
                -562,    // i4RotatedXCoordinate[1]
                -381,    // i4RotatedXCoordinate[2]
                -206,    // i4RotatedXCoordinate[3]
                0,    // i4RotatedXCoordinate[4]
                26    // i4RotatedXCoordinate[5]
            }
        }
    },
    {0}
};

};  //  namespace


typedef NSFeature::RAWSensorInfo<SENSOR_ID> SensorInfoSingleton_T;


namespace NSFeature {
template <>
UINT32
SensorInfoSingleton_T::
impGetDefaultData(CAMERA_DATA_TYPE_ENUM const CameraDataType, VOID*const pDataBuf, UINT32 const size) const
{
    UINT32 dataSize[CAMERA_DATA_TYPE_NUM] = {sizeof(NVRAM_CAMERA_ISP_PARAM_STRUCT),
                                             sizeof(NVRAM_CAMERA_3A_STRUCT),
                                             sizeof(NVRAM_CAMERA_SHADING_STRUCT),
                                             sizeof(NVRAM_CAMERA_DEFECT_STRUCT),
                                             sizeof(NVRAM_SENSOR_DATA_STRUCT),
                                             sizeof(NVRAM_LENS_PARA_STRUCT),
                                             sizeof(AAA_PARAM_T),
                                             sizeof(AAA_STAT_CONFIG_PARAM_T)};

    if (CameraDataType > CAMERA_DATA_3A_STAT_CONFIG_PARA || NULL == pDataBuf || (size < dataSize[CameraDataType]))
    {
        return 1;
    }

    switch(CameraDataType)
    {
        case CAMERA_NVRAM_DATA_ISP:
            memcpy(pDataBuf,&CAMERA_ISP_DEFAULT_VALUE,sizeof(NVRAM_CAMERA_ISP_PARAM_STRUCT));
            break;
        case CAMERA_NVRAM_DATA_3A:
            memcpy(pDataBuf,&CAMERA_3A_NVRAM_DEFAULT_VALUE,sizeof(NVRAM_CAMERA_3A_STRUCT));
            break;
        case CAMERA_NVRAM_DATA_SHADING:
            memcpy(pDataBuf,&CAMERA_SHADING_DEFAULT_VALUE,sizeof(NVRAM_CAMERA_SHADING_STRUCT));
            break;
        case CAMERA_NVRAM_DATA_DEFECT:
            memcpy(pDataBuf,&CAMERA_DEFECT_DEFAULT_VALUE,sizeof(NVRAM_CAMERA_DEFECT_STRUCT));
            break;
        case CAMERA_NVRAM_DATA_SENSOR:
            break;
        case CAMERA_DATA_3A_PARA:
            memcpy(pDataBuf,&CAMERA_3A_PARA,sizeof(AAA_PARAM_T));
            break;
        case CAMERA_DATA_3A_STAT_CONFIG_PARA:
            memcpy(pDataBuf,&CAMERA_3A_STAT_CONFIG_PARAM,sizeof(AAA_STAT_CONFIG_PARAM_T));
            break;
        default:
            break;
    }
    return 0;
}};  //  NSFeature


#endif  //  defined

################################Camera End ##########################
################################Sensor Start#########################
/* Copyright Statement:
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein
 * is confidential and proprietary to MediaTek Inc. and/or its licensors.
 * Without the prior written permission of MediaTek inc. and/or its licensors,
 * any reproduction, modification, use or disclosure of MediaTek Software,
 * and information contained herein, in whole or in part, shall be strictly prohibited.
 */
/* MediaTek Inc. (C) 2010. All rights reserved.
 *
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
 * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
 * AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
 * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
 * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
 * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
 * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
 * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
 * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
 * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
 * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
 * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
 * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
 * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 *
 * The following software/firmware and/or related documentation ("MediaTek Software")
 * have been modified by MediaTek Inc. All revisions are subject to any receiver's
 * applicable license agreements with MediaTek Inc.
 */

/* BMA250 motion sensor driver
 *
 *
 *
 * This software is licensed under the terms of the GNU General Public
 * License version 2, as published by the Free Software Foundation, and
 * may be copied, distributed, and modified under those terms.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 */

#include <linux/interrupt.h>
#include <linux/i2c.h>
#include <linux/slab.h>
#include <linux/irq.h>
#include <linux/miscdevice.h>
#include <asm/uaccess.h>
#include <linux/delay.h>
#include <linux/input.h>
#include <linux/workqueue.h>
#include <linux/kobject.h>
#include <linux/earlysuspend.h>
#include <linux/platform_device.h>
#include <asm/atomic.h>

#ifdef MT6516
#include <mach/mt6516_devs.h>
#include <mach/mt6516_typedefs.h>
#include <mach/mt6516_gpio.h>
#include <mach/mt6516_pll.h>
#endif

#ifdef MT6573
#include <mach/mt6573_devs.h>
#include <mach/mt6573_typedefs.h>
#include <mach/mt6573_gpio.h>
#include <mach/mt6573_pll.h>
#endif

#ifdef MT6575
#include <mach/mt6575_devs.h>
#include <mach/mt6575_typedefs.h>
#include <mach/mt6575_gpio.h>
#include <mach/mt6575_pm_ldo.h>
#endif

#ifdef MT6516
#define POWER_NONE_MACRO MT6516_POWER_NONE
#endif

#ifdef MT6573
#define POWER_NONE_MACRO MT65XX_POWER_NONE
#endif

#ifdef MT6575
#define POWER_NONE_MACRO MT65XX_POWER_NONE
#endif


#include <cust_acc.h>
#include <linux/hwmsensor.h>
#include <linux/hwmsen_dev.h>
#include <linux/sensors_io.h>
#include "bma250.h"
#include <linux/hwmsen_helper.h>


/*
Name	Date			Sign					Content
==============================================
kaka		11/10/29	kaka_11_1029_2		add direction attr for debug

*/

/*----------------------------------------------------------------------------*/
#define I2C_DRIVERID_BMA250 250
/*----------------------------------------------------------------------------*/
#define DEBUG 1
/*----------------------------------------------------------------------------*/
//#define CONFIG_BMA250_LOWPASS   /*apply low pass filter on output*/       
#define SW_CALIBRATION

/*----------------------------------------------------------------------------*/
#define BMA250_AXIS_X          0
#define BMA250_AXIS_Y          1
#define BMA250_AXIS_Z          2
#define BMA250_AXES_NUM        3
#define BMA250_DATA_LEN        6
#define BMA250_DEV_NAME        "BMA250"

#define BMA250_ACC_X_LSB__POS           6
#define BMA250_ACC_X_LSB__LEN           2
#define BMA250_ACC_X_LSB__MSK           0xC0
//#define BMA250_ACC_X_LSB__REG           BMA250_X_AXIS_LSB_REG

#define BMA250_ACC_X_MSB__POS           0
#define BMA250_ACC_X_MSB__LEN           8
#define BMA250_ACC_X_MSB__MSK           0xFF
//#define BMA250_ACC_X_MSB__REG           BMA250_X_AXIS_MSB_REG

#define BMA250_ACC_Y_LSB__POS           6
#define BMA250_ACC_Y_LSB__LEN           2
#define BMA250_ACC_Y_LSB__MSK           0xC0
//#define BMA250_ACC_Y_LSB__REG           BMA250_Y_AXIS_LSB_REG

#define BMA250_ACC_Y_MSB__POS           0
#define BMA250_ACC_Y_MSB__LEN           8
#define BMA250_ACC_Y_MSB__MSK           0xFF
//#define BMA250_ACC_Y_MSB__REG           BMA250_Y_AXIS_MSB_REG

#define BMA250_ACC_Z_LSB__POS           6
#define BMA250_ACC_Z_LSB__LEN           2
#define BMA250_ACC_Z_LSB__MSK           0xC0
//#define BMA250_ACC_Z_LSB__REG           BMA250_Z_AXIS_LSB_REG

#define BMA250_ACC_Z_MSB__POS           0
#define BMA250_ACC_Z_MSB__LEN           8
#define BMA250_ACC_Z_MSB__MSK           0xFF
//#define BMA250_ACC_Z_MSB__REG           BMA250_Z_AXIS_MSB_REG

#define BMA250_EEPROM_CTRL_REG                  0x33
#define BMA250_OFFSET_CTRL_REG                  0x36
#define BMA250_OFFSET_PARAMS_REG                0x37

#define BMA250_GET_BITSLICE(regvar, bitname)\
	((regvar & bitname##__MSK) >> bitname##__POS)

/*----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------*/
static const struct i2c_device_id bma250_i2c_id[] = {{BMA250_DEV_NAME,0},{}};
static struct i2c_board_info __initdata i2c_BMA250={ I2C_BOARD_INFO("BMA250", (BMA250_I2C_SLAVE_WRITE_ADDR>>1))}; //kaka_12_0328 for Linux 3.0
/*the adapter id will be available in customization*/
//static unsigned short bma250_force[] = {0x00, BMA250_I2C_SLAVE_WRITE_ADDR, I2C_CLIENT_END, I2C_CLIENT_END};
//static const unsigned short *const bma250_forces[] = { bma250_force, NULL };
//static struct i2c_client_address_data bma250_addr_data = { .forces = bma250_forces,};

/*----------------------------------------------------------------------------*/
static int bma250_i2c_probe(struct i2c_client *client, const struct i2c_device_id *id); 
static int bma250_i2c_remove(struct i2c_client *client);
static int bma250_i2c_detect(struct i2c_client *client, int kind, struct i2c_board_info *info);

/*----------------------------------------------------------------------------*/

static int BMA250_SetPowerMode(struct i2c_client *client, bool enable);
static int BMA250_SetDataFormat(struct i2c_client *client, u8 dataformat);
static int BMA250_SetBWRate(struct i2c_client *client, u8 bwrate);

typedef enum {
    ADX_TRC_FILTER  = 0x01,
    ADX_TRC_RAWDATA = 0x02,
    ADX_TRC_IOCTL   = 0x04,
    ADX_TRC_CALI	= 0X08,
    ADX_TRC_INFO	= 0X10,
} ADX_TRC;
/*----------------------------------------------------------------------------*/
struct scale_factor{
    u8  whole;
    u8  fraction;
};
/*----------------------------------------------------------------------------*/
struct data_resolution {
    struct scale_factor scalefactor;
    int                 sensitivity;
};
/*----------------------------------------------------------------------------*/
#define C_MAX_FIR_LENGTH (32)
/*----------------------------------------------------------------------------*/
struct data_filter {
    s16 raw[C_MAX_FIR_LENGTH][BMA250_AXES_NUM];
    int sum[BMA250_AXES_NUM];
    int num;
    int idx;
};
/*----------------------------------------------------------------------------*/
struct bma250_i2c_data {
    struct i2c_client *client;
    struct acc_hw *hw;
    struct hwmsen_convert   cvt;
    
    /*misc*/
    struct data_resolution *reso;
    atomic_t                trace;
    atomic_t                suspend;
    atomic_t                selftest;
	atomic_t				filter;
    s16                     cali_sw[BMA250_AXES_NUM+1];

    /*data*/
    s8                      offset[BMA250_AXES_NUM+1];  /*+1: for 4-byte alignment*/
    s16                     data[BMA250_AXES_NUM+1];

#if defined(CONFIG_BMA250_LOWPASS)
    atomic_t                firlen;
    atomic_t                fir_en;
    struct data_filter      fir;
#endif 
    /*early suspend*/
#if defined(CONFIG_HAS_EARLYSUSPEND)
    struct early_suspend    early_drv;
#endif     
};
/*----------------------------------------------------------------------------*/
static struct i2c_driver bma250_i2c_driver = {
    .driver = {
//       .owner          = THIS_MODULE,
        .name           = BMA250_DEV_NAME,
    },
	.probe      		= bma250_i2c_probe,
	.remove    			= bma250_i2c_remove,
	.detect				= bma250_i2c_detect,
#if !defined(CONFIG_HAS_EARLYSUSPEND)    
    .suspend            = bma250_suspend,
    .resume             = bma250_resume,
#endif
	.id_table = bma250_i2c_id,
//	.address_data = &bma250_addr_data,
};

/*----------------------------------------------------------------------------*/
static struct i2c_client *bma250_i2c_client = NULL;
static struct platform_driver bma250_gsensor_driver;
static struct bma250_i2c_data *obj_i2c_data = NULL;
static bool sensor_power = true;
static GSENSOR_VECTOR3D gsensor_gain;
static char selftestRes[8]= {0}; 

/*----------------------------------------------------------------------------*/
#define GSE_TAG                  "[Gsensor] "
#define GSE_FUN(f)               printk(KERN_INFO GSE_TAG"%s\n", __FUNCTION__)
#define GSE_ERR(fmt, args...)    printk(KERN_ERR GSE_TAG"%s %d : "fmt, __FUNCTION__, __LINE__, ##args)
#define GSE_LOG(fmt, args...)    printk(KERN_INFO GSE_TAG fmt, ##args)
/*----------------------------------------------------------------------------*/
static struct data_resolution bma250_data_resolution[1] = {
 /* combination by {FULL_RES,RANGE}*/
    {{ 3, 9}, 256},   // dataformat +/-2g  in 10-bit resolution;  { 3, 9} = 3.9= (2*2*1000)/(2^10);  256 = (2^10)/(2*2)          
};
/*----------------------------------------------------------------------------*/
static struct data_resolution bma250_offset_resolution = {{3, 9}, 256};

/*--------------------BMA250 power control function----------------------------------*/
static void BMA250_power(struct acc_hw *hw, unsigned int on) 
{
	static unsigned int power_on = 0;

	if(hw->power_id != POWER_NONE_MACRO)		// have externel LDO
	{        
		GSE_LOG("power %s\n", on ? "on" : "off");
		if(power_on == on)	// power status not change
		{
			GSE_LOG("ignore power control: %d\n", on);
		}
		else if(on)	// power on
		{
			if(!hwPowerOn(hw->power_id, hw->power_vol, "BMA250"))
			{
				GSE_ERR("power on fails!!\n");
			}
		}
		else	// power off
		{
			if (!hwPowerDown(hw->power_id, "BMA250"))
			{
				GSE_ERR("power off fail!!\n");
			}			  
		}
	}
	power_on = on;    
}
/*----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------*/
static int BMA250_SetDataResolution(struct bma250_i2c_data *obj)
{

/*set g sensor dataresolution here*/

/*BMA250 only can set to 10-bit dataresolution, so do nothing in bma250 driver here*/

/*end of set dataresolution*/


 
 /*we set measure range from -2g to +2g in BMA250_SetDataFormat(client, BMA250_RANGE_2G), 
                                                    and set 10-bit dataresolution BMA250_SetDataResolution()*/
                                                    
 /*so bma250_data_resolution[0] set value as {{ 3, 9}, 256} when declaration, and assign the value to obj->reso here*/  

 	obj->reso = &bma250_data_resolution[0];
	return 0;
	
/*if you changed the measure range, for example call: BMA250_SetDataFormat(client, BMA250_RANGE_4G), 
you must set the right value to bma250_data_resolution*/

}
/*----------------------------------------------------------------------------*/
static int BMA250_ReadData(struct i2c_client *client, s16 data[BMA250_AXES_NUM])
{
	struct bma250_i2c_data *priv = i2c_get_clientdata(client);        
	u8 addr = BMA250_REG_DATAXLOW;
	u8 buf[BMA250_DATA_LEN] = {0};
	int err = 0;

	if(NULL == client)
	{
		err = -EINVAL;
	}
	else if(err = hwmsen_read_block(client, addr, buf, BMA250_DATA_LEN))
	{
		GSE_ERR("error: %d\n", err);
	}
	else
	{
		/* Convert sensor raw data to 16-bit integer */
		data[BMA250_AXIS_X] = BMA250_GET_BITSLICE(buf[0], BMA250_ACC_X_LSB)
			|(BMA250_GET_BITSLICE(buf[1],
						BMA250_ACC_X_MSB)<<BMA250_ACC_X_LSB__LEN);
		data[BMA250_AXIS_X] = data[BMA250_AXIS_X] << (sizeof(short)*8-(BMA250_ACC_X_LSB__LEN
					+ BMA250_ACC_X_MSB__LEN));
		data[BMA250_AXIS_X] = data[BMA250_AXIS_X] >> (sizeof(short)*8-(BMA250_ACC_X_LSB__LEN
					+ BMA250_ACC_X_MSB__LEN));
		data[BMA250_AXIS_Y] = BMA250_GET_BITSLICE(buf[2], BMA250_ACC_Y_LSB)
			| (BMA250_GET_BITSLICE(buf[3],
						BMA250_ACC_Y_MSB)<<BMA250_ACC_Y_LSB__LEN);
		data[BMA250_AXIS_Y] = data[BMA250_AXIS_Y] << (sizeof(short)*8-(BMA250_ACC_Y_LSB__LEN
					+ BMA250_ACC_Y_MSB__LEN));
		data[BMA250_AXIS_Y] = data[BMA250_AXIS_Y] >> (sizeof(short)*8-(BMA250_ACC_Y_LSB__LEN
					+ BMA250_ACC_Y_MSB__LEN));
		data[BMA250_AXIS_Z] = BMA250_GET_BITSLICE(buf[4], BMA250_ACC_Z_LSB)
			| (BMA250_GET_BITSLICE(buf[5],
						BMA250_ACC_Z_MSB)<<BMA250_ACC_Z_LSB__LEN);
		data[BMA250_AXIS_Z] = data[BMA250_AXIS_Z] << (sizeof(short)*8-(BMA250_ACC_Z_LSB__LEN
					+ BMA250_ACC_Z_MSB__LEN));
		data[BMA250_AXIS_Z] = data[BMA250_AXIS_Z] >> (sizeof(short)*8-(BMA250_ACC_Z_LSB__LEN
					+ BMA250_ACC_Z_MSB__LEN));

#ifdef CONFIG_BMA250_LOWPASS
		if(atomic_read(&priv->filter))
		{
			if(atomic_read(&priv->fir_en) && !atomic_read(&priv->suspend))
			{
				int idx, firlen = atomic_read(&priv->firlen);   
				if(priv->fir.num < firlen)
				{                
					priv->fir.raw[priv->fir.num][BMA250_AXIS_X] = data[BMA250_AXIS_X];
					priv->fir.raw[priv->fir.num][BMA250_AXIS_Y] = data[BMA250_AXIS_Y];
					priv->fir.raw[priv->fir.num][BMA250_AXIS_Z] = data[BMA250_AXIS_Z];
					priv->fir.sum[BMA250_AXIS_X] += data[BMA250_AXIS_X];
					priv->fir.sum[BMA250_AXIS_Y] += data[BMA250_AXIS_Y];
					priv->fir.sum[BMA250_AXIS_Z] += data[BMA250_AXIS_Z];
					if(atomic_read(&priv->trace) & ADX_TRC_FILTER)
					{
						GSE_LOG("add [%2d] [%5d %5d %5d] => [%5d %5d %5d]\n", priv->fir.num,
							priv->fir.raw[priv->fir.num][BMA250_AXIS_X], priv->fir.raw[priv->fir.num][BMA250_AXIS_Y], priv->fir.raw[priv->fir.num][BMA250_AXIS_Z],
							priv->fir.sum[BMA250_AXIS_X], priv->fir.sum[BMA250_AXIS_Y], priv->fir.sum[BMA250_AXIS_Z]);
					}
					priv->fir.num++;
					priv->fir.idx++;
				}
				else
				{
					idx = priv->fir.idx % firlen;
					priv->fir.sum[BMA250_AXIS_X] -= priv->fir.raw[idx][BMA250_AXIS_X];
					priv->fir.sum[BMA250_AXIS_Y] -= priv->fir.raw[idx][BMA250_AXIS_Y];
					priv->fir.sum[BMA250_AXIS_Z] -= priv->fir.raw[idx][BMA250_AXIS_Z];
					priv->fir.raw[idx][BMA250_AXIS_X] = data[BMA250_AXIS_X];
					priv->fir.raw[idx][BMA250_AXIS_Y] = data[BMA250_AXIS_Y];
					priv->fir.raw[idx][BMA250_AXIS_Z] = data[BMA250_AXIS_Z];
					priv->fir.sum[BMA250_AXIS_X] += data[BMA250_AXIS_X];
					priv->fir.sum[BMA250_AXIS_Y] += data[BMA250_AXIS_Y];
					priv->fir.sum[BMA250_AXIS_Z] += data[BMA250_AXIS_Z];
					priv->fir.idx++;
					data[BMA250_AXIS_X] = priv->fir.sum[BMA250_AXIS_X]/firlen;
					data[BMA250_AXIS_Y] = priv->fir.sum[BMA250_AXIS_Y]/firlen;
					data[BMA250_AXIS_Z] = priv->fir.sum[BMA250_AXIS_Z]/firlen;
					if(atomic_read(&priv->trace) & ADX_TRC_FILTER)
					{
						GSE_LOG("add [%2d] [%5d %5d %5d] => [%5d %5d %5d] : [%5d %5d %5d]\n", idx,
						priv->fir.raw[idx][BMA250_AXIS_X], priv->fir.raw[idx][BMA250_AXIS_Y], priv->fir.raw[idx][BMA250_AXIS_Z],
						priv->fir.sum[BMA250_AXIS_X], priv->fir.sum[BMA250_AXIS_Y], priv->fir.sum[BMA250_AXIS_Z],
						data[BMA250_AXIS_X], data[BMA250_AXIS_Y], data[BMA250_AXIS_Z]);
					}
				}
			}
		}	
#endif         
	}
	return err;
}
/*----------------------------------------------------------------------------*/
static int BMA250_ReadOffset(struct i2c_client *client, s8 ofs[BMA250_AXES_NUM])
{    
	int err;
#ifdef SW_CALIBRATION
	ofs[0]=ofs[1]=ofs[2]=0x0;
#else
	if(err = hwmsen_read_block(client, BMA250_REG_OFSX, ofs, BMA250_AXES_NUM))
	{
		GSE_ERR("error: %d\n", err);
	}
#endif
	//printk("offesx=%x, y=%x, z=%x",ofs[0],ofs[1],ofs[2]);
	
	return err;    
}
/*----------------------------------------------------------------------------*/
static int BMA250_ResetCalibration(struct i2c_client *client)
{
	struct bma250_i2c_data *obj = i2c_get_clientdata(client);
	u8 ofs[4]={0,0,0,0};
	int err;
	
	#ifdef SW_CALIBRATION
		
	#else
		if(err = hwmsen_write_block(client, BMA250_REG_OFSX, ofs, 4))
		{
			GSE_ERR("error: %d\n", err);
		}
	#endif

	memset(obj->cali_sw, 0x00, sizeof(obj->cali_sw));
	memset(obj->offset, 0x00, sizeof(obj->offset));
	return err;    
}
/*----------------------------------------------------------------------------*/
static int BMA250_ReadCalibration(struct i2c_client *client, int dat[BMA250_AXES_NUM])
{
    struct bma250_i2c_data *obj = i2c_get_clientdata(client);
    int err;
    int mul;

	#ifdef SW_CALIBRATION
		mul = 0;//only SW Calibration, disable HW Calibration
	#else
	    if ((err = BMA250_ReadOffset(client, obj->offset))) {
        GSE_ERR("read offset fail, %d\n", err);
        return err;
    	}    
    	mul = obj->reso->sensitivity/bma250_offset_resolution.sensitivity;
	#endif

    dat[obj->cvt.map[BMA250_AXIS_X]] = obj->cvt.sign[BMA250_AXIS_X]*(obj->offset[BMA250_AXIS_X]*mul + obj->cali_sw[BMA250_AXIS_X]);
    dat[obj->cvt.map[BMA250_AXIS_Y]] = obj->cvt.sign[BMA250_AXIS_Y]*(obj->offset[BMA250_AXIS_Y]*mul + obj->cali_sw[BMA250_AXIS_Y]);
    dat[obj->cvt.map[BMA250_AXIS_Z]] = obj->cvt.sign[BMA250_AXIS_Z]*(obj->offset[BMA250_AXIS_Z]*mul + obj->cali_sw[BMA250_AXIS_Z]);                        
                                       
    return 0;
}
/*----------------------------------------------------------------------------*/
static int BMA250_ReadCalibrationEx(struct i2c_client *client, int act[BMA250_AXES_NUM], int raw[BMA250_AXES_NUM])
{  
	/*raw: the raw calibration data; act: the actual calibration data*/
	struct bma250_i2c_data *obj = i2c_get_clientdata(client);
	int err;
	int mul;

 

	#ifdef SW_CALIBRATION
		mul = 0;//only SW Calibration, disable HW Calibration
	#else
		if(err = BMA250_ReadOffset(client, obj->offset))
		{
			GSE_ERR("read offset fail, %d\n", err);
			return err;
		}   
		mul = obj->reso->sensitivity/bma250_offset_resolution.sensitivity;
	#endif
	
	raw[BMA250_AXIS_X] = obj->offset[BMA250_AXIS_X]*mul + obj->cali_sw[BMA250_AXIS_X];
	raw[BMA250_AXIS_Y] = obj->offset[BMA250_AXIS_Y]*mul + obj->cali_sw[BMA250_AXIS_Y];
	raw[BMA250_AXIS_Z] = obj->offset[BMA250_AXIS_Z]*mul + obj->cali_sw[BMA250_AXIS_Z];

	act[obj->cvt.map[BMA250_AXIS_X]] = obj->cvt.sign[BMA250_AXIS_X]*raw[BMA250_AXIS_X];
	act[obj->cvt.map[BMA250_AXIS_Y]] = obj->cvt.sign[BMA250_AXIS_Y]*raw[BMA250_AXIS_Y];
	act[obj->cvt.map[BMA250_AXIS_Z]] = obj->cvt.sign[BMA250_AXIS_Z]*raw[BMA250_AXIS_Z];                        
	                       
	return 0;
}
/*----------------------------------------------------------------------------*/
static int BMA250_WriteCalibration(struct i2c_client *client, int dat[BMA250_AXES_NUM])
{
	struct bma250_i2c_data *obj = i2c_get_clientdata(client);
	int err;
	int cali[BMA250_AXES_NUM], raw[BMA250_AXES_NUM];
	int lsb = bma250_offset_resolution.sensitivity;
	int divisor = obj->reso->sensitivity/lsb;

	if(err = BMA250_ReadCalibrationEx(client, cali, raw))	/*offset will be updated in obj->offset*/
	{ 
		GSE_ERR("read offset fail, %d\n", err);
		return err;
	}

	GSE_LOG("OLDOFF: (%+3d %+3d %+3d): (%+3d %+3d %+3d) / (%+3d %+3d %+3d)\n", 
		raw[BMA250_AXIS_X], raw[BMA250_AXIS_Y], raw[BMA250_AXIS_Z],
		obj->offset[BMA250_AXIS_X], obj->offset[BMA250_AXIS_Y], obj->offset[BMA250_AXIS_Z],
		obj->cali_sw[BMA250_AXIS_X], obj->cali_sw[BMA250_AXIS_Y], obj->cali_sw[BMA250_AXIS_Z]);

	/*calculate the real offset expected by caller*/
	cali[BMA250_AXIS_X] += dat[BMA250_AXIS_X];
	cali[BMA250_AXIS_Y] += dat[BMA250_AXIS_Y];
	cali[BMA250_AXIS_Z] += dat[BMA250_AXIS_Z];

	GSE_LOG("UPDATE: (%+3d %+3d %+3d)\n", 
		dat[BMA250_AXIS_X], dat[BMA250_AXIS_Y], dat[BMA250_AXIS_Z]);

#ifdef SW_CALIBRATION
	obj->cali_sw[BMA250_AXIS_X] = obj->cvt.sign[BMA250_AXIS_X]*(cali[obj->cvt.map[BMA250_AXIS_X]]);
	obj->cali_sw[BMA250_AXIS_Y] = obj->cvt.sign[BMA250_AXIS_Y]*(cali[obj->cvt.map[BMA250_AXIS_Y]]);
/*ergate*/
	obj->cali_sw[BMA250_AXIS_Z] = obj->cvt.sign[BMA250_AXIS_Z]*(cali[obj->cvt.map[BMA250_AXIS_Z]]);	
#else
	obj->offset[BMA250_AXIS_X] = (s8)(obj->cvt.sign[BMA250_AXIS_X]*(cali[obj->cvt.map[BMA250_AXIS_X]])/(divisor));
	obj->offset[BMA250_AXIS_Y] = (s8)(obj->cvt.sign[BMA250_AXIS_Y]*(cali[obj->cvt.map[BMA250_AXIS_Y]])/(divisor));
	obj->offset[BMA250_AXIS_Z] = (s8)(obj->cvt.sign[BMA250_AXIS_Z]*(cali[obj->cvt.map[BMA250_AXIS_Z]])/(divisor));

	/*convert software calibration using standard calibration*/
	obj->cali_sw[BMA250_AXIS_X] = obj->cvt.sign[BMA250_AXIS_X]*(cali[obj->cvt.map[BMA250_AXIS_X]])%(divisor);
	obj->cali_sw[BMA250_AXIS_Y] = obj->cvt.sign[BMA250_AXIS_Y]*(cali[obj->cvt.map[BMA250_AXIS_Y]])%(divisor);
	obj->cali_sw[BMA250_AXIS_Z] = obj->cvt.sign[BMA250_AXIS_Z]*(cali[obj->cvt.map[BMA250_AXIS_Z]])%(divisor);

	GSE_LOG("NEWOFF: (%+3d %+3d %+3d): (%+3d %+3d %+3d) / (%+3d %+3d %+3d)\n", 
		obj->offset[BMA250_AXIS_X]*divisor + obj->cali_sw[BMA250_AXIS_X], 
		obj->offset[BMA250_AXIS_Y]*divisor + obj->cali_sw[BMA250_AXIS_Y], 
		obj->offset[BMA250_AXIS_Z]*divisor + obj->cali_sw[BMA250_AXIS_Z], 
		obj->offset[BMA250_AXIS_X], obj->offset[BMA250_AXIS_Y], obj->offset[BMA250_AXIS_Z],
		obj->cali_sw[BMA250_AXIS_X], obj->cali_sw[BMA250_AXIS_Y], obj->cali_sw[BMA250_AXIS_Z]);

	if(err = hwmsen_write_block(obj->client, BMA250_REG_OFSX, obj->offset, BMA250_AXES_NUM))
	{
		GSE_ERR("write offset fail: %d\n", err);
		return err;
	}
#endif

	return err;
}
/*----------------------------------------------------------------------------*/
/*
	BMA250 offset fast compensation
	target:
	0 => 0g; 1 => +1g; 2 => -1g; 3 => 0g
*/
static int BMA250_FastCompensation(struct i2c_client *client, const unsigned char target[3])
{
	int res = 0, timeout = 0;
	unsigned char databuf[2];    
	
	/*** set normal mode, make sure that lowpower_en bit is '0' ***/
	res = BMA250_SetPowerMode(client, true);
	if (res != BMA250_SUCCESS)
	{
		return res;
	}
	
	/*** set 2g range ***/
	res = BMA250_SetDataFormat(client, BMA250_RANGE_2G);
	if(res != BMA250_SUCCESS)
	{
		return res;
	}
	
	/*** set 25Hz bandwidth ***/
	res = BMA250_SetBWRate(client, BMA250_BW_25HZ);
	if(res != BMA250_SUCCESS ) 
	{
		return res;
	}
	/*** set offset target (x/y/z) ***/
	GSE_LOG("set offset target: %d %d %d\n", target[0], target[1], target[2]);
	if(hwmsen_read_block(client, BMA250_OFFSET_PARAMS_REG, &(databuf[1]), 1))
	{
		return BMA250_ERR_I2C;
	}
	/* combine three target value */
	databuf[1] &= 0x81;	//clean old value
	databuf[1] |= (((target[0] & 0x03) << 1) | ((target[1] & 0x03) << 3) | ((target[2] & 0x03) << 5));
	databuf[0] = BMA250_OFFSET_PARAMS_REG;
	if(i2c_master_send(client, databuf, 2) <= 0)
	{
		return BMA250_ERR_I2C;
	}

	/*** trigger x-axis offset compensation ***/
	GSE_LOG("trigger x-axis offset compensation\n");
	if(hwmsen_read_block(client, BMA250_OFFSET_CTRL_REG, &(databuf[1]), 1))
	{
		return BMA250_ERR_I2C;
	}
	databuf[1] &= 0x9F;	//clean old value
	databuf[1] |= 0x01 << 5;
	databuf[0] = BMA250_OFFSET_CTRL_REG;
	if(i2c_master_send(client, databuf, 2) <= 0)
	{
		return BMA250_ERR_I2C;
	}

	/*** checking status and waiting x-axis offset compensation done ***/
	timeout = 0;
	do 
	{
		mdelay(2);
		hwmsen_read_block(client, BMA250_OFFSET_CTRL_REG, databuf, 1);
		databuf[0] = (databuf[0] >> 4) & 0x01;	//get cal_rdy bit
		GSE_LOG("wait 2ms and get cal_rdy = %d\n", databuf[0]);
		if(++timeout == 100)
		{
			GSE_ERR("check cal_rdy time out\n");
			return BMA250_ERR_GETGSENSORDATA;
		}
	} while (databuf[0] == 0);

	/*** trigger y-axis offset compensation ***/
	GSE_LOG("trigger y-axis offset compensation\n");
	if(hwmsen_read_block(client, BMA250_OFFSET_CTRL_REG, &(databuf[1]), 1))
	{
		return BMA250_ERR_I2C;
	}
	databuf[1] &= 0x9F;	//clean old value
	databuf[1] |= 0x02 << 5;
	databuf[0] = BMA250_OFFSET_CTRL_REG;
	if(i2c_master_send(client, databuf, 2) <= 0)
	{
		return BMA250_ERR_I2C;
	}

	/*** checking status and waiting y-axis offset compensation done ***/
	timeout = 0;
	do 
	{
		mdelay(2);
		hwmsen_read_block(client, BMA250_OFFSET_CTRL_REG, databuf, 1);
		databuf[0] = (databuf[0] >> 4) & 0x01;	//get cal_rdy bit
		GSE_LOG("wait 2ms and get cal_rdy = %d\n", databuf[0]);
		if(++timeout == 100)
		{
			GSE_ERR("check cal_rdy time out\n");
			return BMA250_ERR_GETGSENSORDATA;
		}
	} while (databuf[0] == 0);
	
	/*** trigger z-axis offset compensation ***/
	GSE_LOG("trigger z-axis offset compensation\n");
	if(hwmsen_read_block(client, BMA250_OFFSET_CTRL_REG, &(databuf[1]), 1))
	{
		return BMA250_ERR_I2C;
	}
	databuf[1] &= 0x9F;	//clean old value
	databuf[1] |= 0x03 << 5;
	databuf[0] = BMA250_OFFSET_CTRL_REG;
	if(i2c_master_send(client, databuf, 2) <= 0)
	{
		return BMA250_ERR_I2C;
	}

	/*** checking status and waiting z-axis offset compensation done ***/
	timeout = 0;
	do 
	{
		mdelay(2);
		hwmsen_read_block(client, BMA250_OFFSET_CTRL_REG, databuf, 1);
		databuf[0] = (databuf[0] >> 4) & 0x01;	//get cal_rdy bit
		GSE_LOG("wait 2ms and get cal_rdy = %d\n", databuf[0]);
		if(++timeout == 100)
		{
			GSE_ERR("check cal_rdy time out\n");
			return BMA250_ERR_GETGSENSORDATA;
		}
	} while (databuf[0] == 0);
	
	return BMA250_SUCCESS;
}
/*----------------------------------------------------------------------------*/
static int BMA250_InlineCalibration(struct i2c_client *client)
{
	int res = BMA250_SUCCESS, timeout = 0;
	unsigned char databuf[2];    

	/*** unlock EEPROM: write '1' to bit (0x33) nvm_prog_mode ***/
	GSE_LOG("unlock EEPROM\n");
	if(hwmsen_read_block(client, BMA250_EEPROM_CTRL_REG, &(databuf[1]), 1))
	{
		return BMA250_ERR_I2C;
	}
	databuf[1] |= 0x01;
	databuf[0] = BMA250_EEPROM_CTRL_REG;
	if(i2c_master_send(client, databuf, 2) <= 0)
	{
		return BMA250_ERR_I2C;
	}
	
	/*** need to delay ??? ***/
	
	/*** trigger the write process: write '1' to bit (0x33) nvm_prog_trig and keep '1' in bit (0x33) nvm_prog_mode ***/
	GSE_LOG("trigger EEPROM write process\n");
	if(hwmsen_read_block(client, BMA250_EEPROM_CTRL_REG, &(databuf[1]), 1))
	{
		res = BMA250_ERR_I2C;
		goto __lock_eeprom__;
	}
	databuf[1] |= 0x02;
	databuf[0] = BMA250_EEPROM_CTRL_REG;
	if(i2c_master_send(client, databuf, 2) <= 0)
	{
		res = BMA250_ERR_I2C;
		goto __lock_eeprom__;
	}
	
	/*** check the write status by reading bit (0x33) nvm_rdy
	while nvm_rdy = '0', the write process is still enduring; if nvm_rdy = '1', then writing is completed ***/
	do 
	{
		mdelay(2);
		hwmsen_read_block(client, BMA250_EEPROM_CTRL_REG, databuf, 1);
		databuf[0] = (databuf[0] >> 2) & 0x01;	//get nvm_rdy bit
		GSE_LOG("wait 2ms and get nvm_rdy = %d\n", databuf[0]);
		if(++timeout == 50)
		{
			GSE_ERR("check nvm_rdy time out\n");
			res = BMA250_ERR_GETGSENSORDATA;
			goto __lock_eeprom__;
		}
	} while (databuf[0] == 0);
	
	/*** lock EEPROM: write '0' to nvm_prog_mode ***/
__lock_eeprom__:
	GSE_LOG("lock EEPROM\n");
	if(hwmsen_read_block(client, BMA250_EEPROM_CTRL_REG, &(databuf[1]), 1))
	{
		return BMA250_ERR_I2C;
	}
	databuf[1] &= 0xFE;
	databuf[0] = BMA250_EEPROM_CTRL_REG;
	if(i2c_master_send(client, databuf, 2) <= 0)
	{
		return BMA250_ERR_I2C;
	}
	
	return res;
}
/*----------------------------------------------------------------------------*/
static int BMA250_CheckDeviceID(struct i2c_client *client)
{
	u8 databuf[2];    
	int res = 0;

	memset(databuf, 0, sizeof(u8)*2);    
	databuf[0] = BMA250_REG_DEVID;    

	res = i2c_master_send(client, databuf, 0x1);
	if(res <= 0)
	{
		goto exit_BMA250_CheckDeviceID;
	}
	
	udelay(500);

	databuf[0] = 0x0;        
	res = i2c_master_recv(client, databuf, 0x01);
	if(res <= 0)
	{
		goto exit_BMA250_CheckDeviceID;
	}
	

	if(databuf[0]!=BMA250_FIXED_DEVID)
	{
		printk("BMA250_CheckDeviceID %d failt!\n ", databuf[0]);
		return BMA250_ERR_IDENTIFICATION;
	}
	else
	{
		printk("BMA250_CheckDeviceID %d pass!\n ", databuf[0]);
	}

	exit_BMA250_CheckDeviceID:
	if (res <= 0)
	{
		return BMA250_ERR_I2C;
	}
	
	return BMA250_SUCCESS;
}
/*----------------------------------------------------------------------------*/
static int BMA250_SetPowerMode(struct i2c_client *client, bool enable)
{
	u8 databuf[2];    
	int res = 0;
	u8 addr = BMA250_REG_POWER_CTL;
	struct bma250_i2c_data *obj = i2c_get_clientdata(client);
	
	
	if(enable == sensor_power )
	{
		GSE_LOG("Sensor power status is newest!\n");
		return BMA250_SUCCESS;
	}

	if(hwmsen_read_block(client, addr, databuf, 0x01))
	{
		GSE_ERR("read power ctl register err!\n");
		return BMA250_ERR_I2C;
	}

	
	if(enable == TRUE)
	{
		databuf[0] &= ~BMA250_MEASURE_MODE;
	}
	else
	{
		databuf[0] |= BMA250_MEASURE_MODE;
	}
	databuf[1] = databuf[0];
	databuf[0] = BMA250_REG_POWER_CTL;
	

	res = i2c_master_send(client, databuf, 0x2);

	if(res <= 0)
	{
		GSE_LOG("set power mode failed!\n");
		return BMA250_ERR_I2C;
	}
	else if(atomic_read(&obj->trace) & ADX_TRC_INFO)
	{
		GSE_LOG("set power mode ok %d!\n", databuf[1]);
	}

	//GSE_LOG("BMA250_SetPowerMode ok!\n");


	sensor_power = enable;

	mdelay(20);
	
	return BMA250_SUCCESS;    
}
/*----------------------------------------------------------------------------*/
static int BMA250_SetDataFormat(struct i2c_client *client, u8 dataformat)
{
	struct bma250_i2c_data *obj = i2c_get_clientdata(client);
	u8 databuf[10];    
	int res = 0;

	memset(databuf, 0, sizeof(u8)*10);    

	if(hwmsen_read_block(client, BMA250_REG_DATA_FORMAT, databuf, 0x01))
	{
		printk("bma250 read Dataformat failt \n");
		return BMA250_ERR_I2C;
	}

	databuf[0] &= ~BMA250_RANGE_MASK;
	databuf[0] |= dataformat;
	databuf[1] = databuf[0];
	databuf[0] = BMA250_REG_DATA_FORMAT;


	res = i2c_master_send(client, databuf, 0x2);

	if(res <= 0)
	{
		return BMA250_ERR_I2C;
	}
	
	//printk("BMA250_SetDataFormat OK! \n");
	

	return BMA250_SetDataResolution(obj);    
}
/*----------------------------------------------------------------------------*/
static int BMA250_SetBWRate(struct i2c_client *client, u8 bwrate)
{
	u8 databuf[10];    
	int res = 0;

	memset(databuf, 0, sizeof(u8)*10);    

	if(hwmsen_read_block(client, BMA250_REG_BW_RATE, databuf, 0x01))
	{
		printk("bma250 read rate failt \n");
		return BMA250_ERR_I2C;
	}

	databuf[0] &= ~BMA250_BW_MASK;
	databuf[0] |= bwrate;
	databuf[1] = databuf[0];
	databuf[0] = BMA250_REG_BW_RATE;


	res = i2c_master_send(client, databuf, 0x2);

	if(res <= 0)
	{
		return BMA250_ERR_I2C;
	}
	
	//printk("BMA250_SetBWRate OK! \n");
	
	return BMA250_SUCCESS;    
}
/*----------------------------------------------------------------------------*/
static int BMA250_SetIntEnable(struct i2c_client *client, u8 intenable)
{
			u8 databuf[10];    
			int res = 0;
		
			res = hwmsen_write_byte(client, BMA250_INT_REG_1, 0x00);
			if(res != BMA250_SUCCESS) 
			{
				return res;
			}
			res = hwmsen_write_byte(client, BMA250_INT_REG_2, 0x00);
			if(res != BMA250_SUCCESS) 
			{
				return res;
			}
			printk("BMA250 disable interrupt ...\n");
		
			/*for disable interrupt function*/
			
			return BMA250_SUCCESS;	  
}

/*----------------------------------------------------------------------------*/
static int bma250_init_client(struct i2c_client *client, int reset_cali)
{
	struct bma250_i2c_data *obj = i2c_get_clientdata(client);
	int res = 0;
	printk("bma250_init_client \n");

	res = BMA250_CheckDeviceID(client); 
	if(res != BMA250_SUCCESS)
	{
		return res;
	}	
	printk("BMA250_CheckDeviceID ok \n");
	
	res = BMA250_SetBWRate(client, BMA250_BW_100HZ);
	if(res != BMA250_SUCCESS ) 
	{
		return res;
	}
	printk("BMA250_SetBWRate OK!\n");
	
	res = BMA250_SetDataFormat(client, BMA250_RANGE_2G);
	if(res != BMA250_SUCCESS) 
	{
		return res;
	}
	printk("BMA250_SetDataFormat OK!\n");

	gsensor_gain.x = gsensor_gain.y = gsensor_gain.z = obj->reso->sensitivity;


	res = BMA250_SetIntEnable(client, 0x00);        
	if(res != BMA250_SUCCESS)
	{
		return res;
	}
	printk("BMA250 disable interrupt function!\n");

	res = BMA250_SetPowerMode(client, false);
		if(res != BMA250_SUCCESS)
		{
			return res;
		}
		printk("BMA250_SetPowerMode OK!\n");


	if(0 != reset_cali)
	{ 
		/*reset calibration only in power on*/
		res = BMA250_ResetCalibration(client);
		if(res != BMA250_SUCCESS)
		{
			return res;
		}
	}
	printk("bma250_init_client OK!\n");
#ifdef CONFIG_BMA250_LOWPASS
	memset(&obj->fir, 0x00, sizeof(obj->fir));  
#endif

	mdelay(20);

	return BMA250_SUCCESS;
}
/*----------------------------------------------------------------------------*/
static int BMA250_ReadChipInfo(struct i2c_client *client, char *buf, int bufsize)
{
	u8 databuf[10];    

	memset(databuf, 0, sizeof(u8)*10);

	if((NULL == buf)||(bufsize<=30))
	{
		return -1;
	}
	
	if(NULL == client)
	{
		*buf = 0;
		return -2;
	}

	sprintf(buf, "BMA250 Chip");
	return 0;
}
/*----------------------------------------------------------------------------*/
static int BMA250_ReadSensorData(struct i2c_client *client, char *buf, int bufsize)
{
	struct bma250_i2c_data *obj = (struct bma250_i2c_data*)i2c_get_clientdata(client);
	u8 databuf[20];
	int acc[BMA250_AXES_NUM];
	int res = 0;
	memset(databuf, 0, sizeof(u8)*10);

	if(NULL == buf)
	{
		return -1;
	}
	if(NULL == client)
	{
		*buf = 0;
		return -2;
	}

	if(sensor_power == FALSE)
	{
		res = BMA250_SetPowerMode(client, true);
		if(res)
		{
			GSE_ERR("Power on bma250 error %d!\n", res);
		}
	}

	if(res = BMA250_ReadData(client, obj->data))
	{        
		GSE_ERR("I2C error: ret value=%d", res);
		return -3;
	}
	else
	{
		//printk("raw data x=%d, y=%d, z=%d \n",obj->data[BMA250_AXIS_X],obj->data[BMA250_AXIS_Y],obj->data[BMA250_AXIS_Z]);
		obj->data[BMA250_AXIS_X] += obj->cali_sw[BMA250_AXIS_X];
		obj->data[BMA250_AXIS_Y] += obj->cali_sw[BMA250_AXIS_Y];
		obj->data[BMA250_AXIS_Z] += obj->cali_sw[BMA250_AXIS_Z];
		
		//printk("cali_sw x=%d, y=%d, z=%d \n",obj->cali_sw[BMA250_AXIS_X],obj->cali_sw[BMA250_AXIS_Y],obj->cali_sw[BMA250_AXIS_Z]);
		
		/*remap coordinate*/
		acc[obj->cvt.map[BMA250_AXIS_X]] = obj->cvt.sign[BMA250_AXIS_X]*obj->data[BMA250_AXIS_X];
		acc[obj->cvt.map[BMA250_AXIS_Y]] = obj->cvt.sign[BMA250_AXIS_Y]*obj->data[BMA250_AXIS_Y];
		acc[obj->cvt.map[BMA250_AXIS_Z]] = obj->cvt.sign[BMA250_AXIS_Z]*obj->data[BMA250_AXIS_Z];
		//printk("cvt x=%d, y=%d, z=%d \n",obj->cvt.sign[BMA250_AXIS_X],obj->cvt.sign[BMA250_AXIS_Y],obj->cvt.sign[BMA250_AXIS_Z]);


		//GSE_LOG("Mapped gsensor data: %d, %d, %d!\n", acc[BMA250_AXIS_X], acc[BMA250_AXIS_Y], acc[BMA250_AXIS_Z]);

		//Out put the mg
		//printk("mg acc=%d, GRAVITY=%d, sensityvity=%d \n",acc[BMA250_AXIS_X],GRAVITY_EARTH_1000,obj->reso->sensitivity);
		acc[BMA250_AXIS_X] = acc[BMA250_AXIS_X] * GRAVITY_EARTH_1000 / obj->reso->sensitivity;
		acc[BMA250_AXIS_Y] = acc[BMA250_AXIS_Y] * GRAVITY_EARTH_1000 / obj->reso->sensitivity;
		acc[BMA250_AXIS_Z] = acc[BMA250_AXIS_Z] * GRAVITY_EARTH_1000 / obj->reso->sensitivity;		
		
	

		sprintf(buf, "%04x %04x %04x", acc[BMA250_AXIS_X], acc[BMA250_AXIS_Y], acc[BMA250_AXIS_Z]);
		if(atomic_read(&obj->trace) & ADX_TRC_IOCTL)
		{
			GSE_LOG("gsensor data: %s!\n", buf);
		}
	}
	/*ergate*/
	#if 1
	if(atomic_read(&obj->suspend))
	{
		BMA250_SetPowerMode(client, false);
	}
	#endif
	
	return 0;
}
/*----------------------------------------------------------------------------*/
static int BMA250_ReadRawData(struct i2c_client *client, char *buf)
{
	struct bma250_i2c_data *obj = (struct bma250_i2c_data*)i2c_get_clientdata(client);
	int res = 0;

	if (!buf || !client)
	{
		return EINVAL;
	}
	
	if(res = BMA250_ReadData(client, obj->data))
	{        
		GSE_ERR("I2C error: ret value=%d", res);
		return EIO;
	}
	else
	{
		sprintf(buf, "BMA250_ReadRawData %04x %04x %04x", obj->data[BMA250_AXIS_X], 
			obj->data[BMA250_AXIS_Y], obj->data[BMA250_AXIS_Z]);
	
	}
	
	return 0;
}
/*----------------------------------------------------------------------------*/
static ssize_t show_chipinfo_value(struct device_driver *ddri, char *buf)
{
	struct i2c_client *client = bma250_i2c_client;
	char strbuf[BMA250_BUFSIZE];
	if(NULL == client)
	{
		GSE_ERR("i2c client is null!!\n");
		return 0;
	}
	
	BMA250_ReadChipInfo(client, strbuf, BMA250_BUFSIZE);
	return snprintf(buf, PAGE_SIZE, "%s\n", strbuf);        
}

static ssize_t gsensor_init(struct device_driver *ddri, char *buf, size_t count)
	{
		struct i2c_client *client = bma250_i2c_client;
		char strbuf[BMA250_BUFSIZE];
		
		if(NULL == client)
		{
			GSE_ERR("i2c client is null!!\n");
			return 0;
		}
		bma250_init_client(client, 1);
		return snprintf(buf, PAGE_SIZE, "%s\n", strbuf);			
	}



/*----------------------------------------------------------------------------*/
static ssize_t show_sensordata_value(struct device_driver *ddri, char *buf)
{
	struct i2c_client *client = bma250_i2c_client;
	char strbuf[BMA250_BUFSIZE];
	
	if(NULL == client)
	{
		GSE_ERR("i2c client is null!!\n");
		return 0;
	}
	BMA250_ReadSensorData(client, strbuf, BMA250_BUFSIZE);
	//BMA250_ReadRawData(client, strbuf);
	return snprintf(buf, PAGE_SIZE, "%s\n", strbuf);            
}

static ssize_t show_sensorrawdata_value(struct device_driver *ddri, char *buf, size_t count)
	{
		struct i2c_client *client = bma250_i2c_client;
		char strbuf[BMA250_BUFSIZE];
		
		if(NULL == client)
		{
			GSE_ERR("i2c client is null!!\n");
			return 0;
		}
		//BMA250_ReadSensorData(client, strbuf, BMA250_BUFSIZE);
		BMA250_ReadRawData(client, strbuf);
		return snprintf(buf, PAGE_SIZE, "%s\n", strbuf);			
	}

/*----------------------------------------------------------------------------*/
static ssize_t show_cali_value(struct device_driver *ddri, char *buf)
{
	struct i2c_client *client = bma250_i2c_client;
	struct bma250_i2c_data *obj;
	int err, len = 0, mul;
	int tmp[BMA250_AXES_NUM];

	if(NULL == client)
	{
		GSE_ERR("i2c client is null!!\n");
		return 0;
	}

	obj = i2c_get_clientdata(client);



	if(err = BMA250_ReadOffset(client, obj->offset))
	{
		return -EINVAL;
	}
	else if(err = BMA250_ReadCalibration(client, tmp))
	{
		return -EINVAL;
	}
	else
	{    
		mul = obj->reso->sensitivity/bma250_offset_resolution.sensitivity;
		len += snprintf(buf+len, PAGE_SIZE-len, "[HW ][%d] (%+3d, %+3d, %+3d) : (0x%02X, 0x%02X, 0x%02X)\n", mul,                        
			obj->offset[BMA250_AXIS_X], obj->offset[BMA250_AXIS_Y], obj->offset[BMA250_AXIS_Z],
			obj->offset[BMA250_AXIS_X], obj->offset[BMA250_AXIS_Y], obj->offset[BMA250_AXIS_Z]);
		len += snprintf(buf+len, PAGE_SIZE-len, "[SW ][%d] (%+3d, %+3d, %+3d)\n", 1, 
			obj->cali_sw[BMA250_AXIS_X], obj->cali_sw[BMA250_AXIS_Y], obj->cali_sw[BMA250_AXIS_Z]);

		len += snprintf(buf+len, PAGE_SIZE-len, "[ALL]    (%+3d, %+3d, %+3d) : (%+3d, %+3d, %+3d)\n", 
			obj->offset[BMA250_AXIS_X]*mul + obj->cali_sw[BMA250_AXIS_X],
			obj->offset[BMA250_AXIS_Y]*mul + obj->cali_sw[BMA250_AXIS_Y],
			obj->offset[BMA250_AXIS_Z]*mul + obj->cali_sw[BMA250_AXIS_Z],
			tmp[BMA250_AXIS_X], tmp[BMA250_AXIS_Y], tmp[BMA250_AXIS_Z]);
		
		return len;
    }
}
/*----------------------------------------------------------------------------*/
static ssize_t store_cali_value(struct device_driver *ddri, char *buf, size_t count)
{
	struct i2c_client *client = bma250_i2c_client;  
	int err, x, y, z;
	int dat[BMA250_AXES_NUM];

	if(!strncmp(buf, "rst", 3))
	{
		if(err = BMA250_ResetCalibration(client))
		{
			GSE_ERR("reset offset err = %d\n", err);
		}	
	}
	else if(3 == sscanf(buf, "0x%02X 0x%02X 0x%02X", &x, &y, &z))
	{
		dat[BMA250_AXIS_X] = x;
		dat[BMA250_AXIS_Y] = y;
		dat[BMA250_AXIS_Z] = z;
		if(err = BMA250_WriteCalibration(client, dat))
		{
			GSE_ERR("write calibration err = %d\n", err);
		}		
	}
	else
	{
		GSE_ERR("invalid format\n");
	}
	
	return count;
}
/*ergate-045*/
static unsigned char fastcali = 0;
/*----------------------------------------------------------------------------*/
static ssize_t show_fastcali_value(struct device_driver *ddri, char *buf)
{
	int len = 0;
	len = snprintf(buf, PAGE_SIZE, "%d",fastcali);
	
	return len;
}
/*----------------------------------------------------------------------------*/
static ssize_t store_fastcali_value(struct device_driver *ddri, char *buf, size_t count)
{
	struct i2c_client *client = bma250_i2c_client;  
	int target_int[3];
	unsigned char target[3];
	int res;

	if (3 == sscanf(buf, "%d %d %d", &(target_int[0]), &(target_int[1]), &(target_int[2])))
	{
		target[0]=target_int[0],target[1]=target_int[1],target[2]=target_int[2];
		fastcali = 0;
		if(BMA250_FastCompensation(client, target) == BMA250_SUCCESS)
		{
			res = BMA250_InlineCalibration(client);
			if(res == BMA250_SUCCESS)
				fastcali = 1;
		}		
	}
	else
	{
		GSE_ERR("invalid format\n");
	}

	return count;
}
/*----------------------------------------------------------------------------*/
static ssize_t show_firlen_value(struct device_driver *ddri, char *buf)
{
#ifdef CONFIG_BMA250_LOWPASS
	struct i2c_client *client = bma250_i2c_client;
	struct bma250_i2c_data *obj = i2c_get_clientdata(client);
	if(atomic_read(&obj->firlen))
	{
		int idx, len = atomic_read(&obj->firlen);
		GSE_LOG("len = %2d, idx = %2d\n", obj->fir.num, obj->fir.idx);

		for(idx = 0; idx < len; idx++)
		{
			GSE_LOG("[%5d %5d %5d]\n", obj->fir.raw[idx][BMA250_AXIS_X], obj->fir.raw[idx][BMA250_AXIS_Y], obj->fir.raw[idx][BMA250_AXIS_Z]);
		}
		
		GSE_LOG("sum = [%5d %5d %5d]\n", obj->fir.sum[BMA250_AXIS_X], obj->fir.sum[BMA250_AXIS_Y], obj->fir.sum[BMA250_AXIS_Z]);
		GSE_LOG("avg = [%5d %5d %5d]\n", obj->fir.sum[BMA250_AXIS_X]/len, obj->fir.sum[BMA250_AXIS_Y]/len, obj->fir.sum[BMA250_AXIS_Z]/len);
	}
	return snprintf(buf, PAGE_SIZE, "%d\n", atomic_read(&obj->firlen));
#else
	return snprintf(buf, PAGE_SIZE, "not support\n");
#endif
}
/*----------------------------------------------------------------------------*/
static ssize_t store_firlen_value(struct device_driver *ddri, char *buf, size_t count)
{
#ifdef CONFIG_BMA250_LOWPASS
	struct i2c_client *client = bma250_i2c_client;  
	struct bma250_i2c_data *obj = i2c_get_clientdata(client);
	int firlen;

	if(1 != sscanf(buf, "%d", &firlen))
	{
		GSE_ERR("invallid format\n");
	}
	else if(firlen > C_MAX_FIR_LENGTH)
	{
		GSE_ERR("exceeds maximum filter length\n");
	}
	else
	{ 
		atomic_set(&obj->firlen, firlen);
		if(NULL == firlen)
		{
			atomic_set(&obj->fir_en, 0);
		}
		else
		{
			memset(&obj->fir, 0x00, sizeof(obj->fir));
			atomic_set(&obj->fir_en, 1);
		}
	}
#endif    
	return count;
}
/*----------------------------------------------------------------------------*/
static ssize_t show_trace_value(struct device_driver *ddri, char *buf)
{
	ssize_t res;
	struct bma250_i2c_data *obj = obj_i2c_data;
	if (obj == NULL)
	{
		GSE_ERR("i2c_data obj is null!!\n");
		return 0;
	}
	
	res = snprintf(buf, PAGE_SIZE, "0x%04X\n", atomic_read(&obj->trace));     
	return res;    
}
/*----------------------------------------------------------------------------*/
static ssize_t store_trace_value(struct device_driver *ddri, char *buf, size_t count)
{
	struct bma250_i2c_data *obj = obj_i2c_data;
	int trace;
	if (obj == NULL)
	{
		GSE_ERR("i2c_data obj is null!!\n");
		return 0;
	}
	
	if(1 == sscanf(buf, "0x%x", &trace))
	{
		atomic_set(&obj->trace, trace);
	}	
	else
	{
		GSE_ERR("invalid content: '%s', length = %d\n", buf, count);
	}
	
	return count;    
}
/*----------------------------------------------------------------------------*/
static ssize_t show_status_value(struct device_driver *ddri, char *buf)
{
	ssize_t len = 0;    
	struct bma250_i2c_data *obj = obj_i2c_data;
	if (obj == NULL)
	{
		GSE_ERR("i2c_data obj is null!!\n");
		return 0;
	}	
	
	if(obj->hw)
	{
		len += snprintf(buf+len, PAGE_SIZE-len, "CUST: %d %d (%d %d)\n", 
	            obj->hw->i2c_num, obj->hw->direction, obj->hw->power_id, obj->hw->power_vol);   
	}
	else
	{
		len += snprintf(buf+len, PAGE_SIZE-len, "CUST: NULL\n");
	}
	return len;    
}
/*----------------------------------------------------------------------------*/
static ssize_t show_power_status_value(struct device_driver *ddri, char *buf)
{
	if(sensor_power)
		printk("G sensor is in work mode, sensor_power = %d\n", sensor_power);
	else
		printk("G sensor is in standby mode, sensor_power = %d\n", sensor_power);

	return 0;
}
/*----------------------------------------------------------------------------*/


//kaka_11_1029_2 add

static ssize_t show_direction(struct device_driver *ddri, char *buf)
{
	ssize_t res;
	struct acc_hw *hw = get_cust_acc_hw();
	
	if (hw == NULL)
	{
		printk("show_direction hw is null!!\n");
		return 0;
	}
	res = snprintf(buf, PAGE_SIZE, "%d\n", hw->direction);     
	return res;    
}
/*----------------------------------------------------------------------------*/
static ssize_t store_direction(struct device_driver *ddri, char *buf, size_t count)
{
	struct acc_hw *hw = get_cust_acc_hw();
	int direction;
	if (hw == NULL)
	{
		printk("store_direction hw is null!!\n");
		return 0;
	}
	
	if(1 == sscanf(buf, "%d", &direction))
	{
		hw->direction  = direction;
			//kaka_11_1108_3 add
			if(hwmsen_get_convert(direction, &(obj_i2c_data->cvt)))
			{
				printk("store_direction: call hwmsen_get_convert failed\n");				
			}
			//kaka_11_1108_3 end

	}	
	else
	{
		printk("invalid content: '%s', length = %d\n", buf, count);
	}
	
	return count;    
}

static DRIVER_ATTR(direction,   S_IWUSR | S_IRUGO, show_direction,store_direction);
//kaka_11_1029_2 end


/*-----------------------------------------------------------------------------*/
static DRIVER_ATTR(chipinfo,   S_IWUSR | S_IRUGO, show_chipinfo_value,      NULL);
static DRIVER_ATTR(sensordata, S_IWUSR | S_IRUGO, show_sensordata_value,    NULL);
static DRIVER_ATTR(cali,       S_IWUSR | S_IRUGO, show_cali_value,          store_cali_value);
static DRIVER_ATTR(firlen,     S_IWUSR | S_IRUGO, show_firlen_value,        store_firlen_value);
static DRIVER_ATTR(trace,      S_IWUSR | S_IRUGO, show_trace_value,         store_trace_value);
static DRIVER_ATTR(status,               S_IRUGO, show_status_value,        NULL);
static DRIVER_ATTR(powerstatus,               S_IRUGO, show_power_status_value,        NULL);
static DRIVER_ATTR(fastcali,	S_IWUSR | S_IRUGO, show_fastcali_value, store_fastcali_value);

/*----------------------------------------------------------------------------*/
static struct driver_attribute *bma250_attr_list[] = {
	&driver_attr_chipinfo,     /*chip information*/
	&driver_attr_sensordata,   /*dump sensor data*/
	&driver_attr_cali,         /*show calibration data*/
	&driver_attr_firlen,       /*filter length: 0: disable, others: enable*/
	&driver_attr_trace,        /*trace log*/
	&driver_attr_status,
	&driver_attr_powerstatus,
	&driver_attr_fastcali,	/* BMA250 fast calibration */
	&driver_attr_direction, //kaka_12_0328
};
/*----------------------------------------------------------------------------*/
static int bma250_create_attr(struct device_driver *driver) 
{
	int idx, err = 0;
	int num = (int)(sizeof(bma250_attr_list)/sizeof(bma250_attr_list[0]));
	if (driver == NULL)
	{
		return -EINVAL;
	}

	for(idx = 0; idx < num; idx++)
	{
		if(err = driver_create_file(driver, bma250_attr_list[idx]))
		{            
			GSE_ERR("driver_create_file (%s) = %d\n", bma250_attr_list[idx]->attr.name, err);
			break;
		}
	}    
	return err;
}
/*----------------------------------------------------------------------------*/
static int bma250_delete_attr(struct device_driver *driver)
{
	int idx ,err = 0;
	int num = (int)(sizeof(bma250_attr_list)/sizeof(bma250_attr_list[0]));

	if(driver == NULL)
	{
		return -EINVAL;
	}
	

	for(idx = 0; idx < num; idx++)
	{
		driver_remove_file(driver, bma250_attr_list[idx]);
	}
	

	return err;
}

/*----------------------------------------------------------------------------*/
int gsensor_operate(void* self, uint32_t command, void* buff_in, int size_in,
		void* buff_out, int size_out, int* actualout)
{
	int err = 0;
	int value, sample_delay;	
	struct bma250_i2c_data *priv = (struct bma250_i2c_data*)self;
	hwm_sensor_data* gsensor_data;
	char buff[BMA250_BUFSIZE];
	
	//GSE_FUN(f);
	switch (command)
	{
		case SENSOR_DELAY:
			if((buff_in == NULL) || (size_in < sizeof(int)))
			{
				GSE_ERR("Set delay parameter error!\n");
				err = -EINVAL;
			}
			else
			{
				value = *(int *)buff_in;
				if(value <= 5)
				{
					sample_delay = BMA250_BW_200HZ;
				}
				else if(value <= 10)
				{
					sample_delay = BMA250_BW_100HZ;
				}
				else
				{
					sample_delay = BMA250_BW_50HZ;
				}
				
				err = BMA250_SetBWRate(priv->client, sample_delay);
				if(err != BMA250_SUCCESS ) //0x2C->BW=100Hz
				{
					GSE_ERR("Set delay parameter error!\n");
				}

				if(value >= 50)
				{
					atomic_set(&priv->filter, 0);
				}
				else
				{	
				#if defined(CONFIG_BMA250_LOWPASS)
					priv->fir.num = 0;
					priv->fir.idx = 0;
					priv->fir.sum[BMA250_AXIS_X] = 0;
					priv->fir.sum[BMA250_AXIS_Y] = 0;
					priv->fir.sum[BMA250_AXIS_Z] = 0;
					atomic_set(&priv->filter, 1);
				#endif
				}
			}
			break;

		case SENSOR_ENABLE:
			if((buff_in == NULL) || (size_in < sizeof(int)))
			{
				GSE_ERR("Enable sensor parameter error!\n");
				err = -EINVAL;
			}
			else
			{
				value = *(int *)buff_in;
				if(((value == 0) && (sensor_power == false)) ||((value == 1) && (sensor_power == true)))
				{
					GSE_LOG("Gsensor device have updated!\n");
				}
				else
				{
					err = BMA250_SetPowerMode( priv->client, !sensor_power);
				}
			}
			break;

		case SENSOR_GET_DATA:
			if((buff_out == NULL) || (size_out< sizeof(hwm_sensor_data)))
			{
				GSE_ERR("get sensor data parameter error!\n");
				err = -EINVAL;
			}
			else
			{
				gsensor_data = (hwm_sensor_data *)buff_out;
				BMA250_ReadSensorData(priv->client, buff, BMA250_BUFSIZE);
				sscanf(buff, "%x %x %x", &gsensor_data->values[0], 
					&gsensor_data->values[1], &gsensor_data->values[2]);				
				gsensor_data->status = SENSOR_STATUS_ACCURACY_MEDIUM;				
				gsensor_data->value_divide = 1000;
			}
			break;
		default:
			GSE_ERR("gsensor operate function no this parameter %d!\n", command);
			err = -1;
			break;
	}
	
	return err;
}

/****************************************************************************** 
 * Function Configuration
******************************************************************************/
static int bma250_open(struct inode *inode, struct file *file)
{
	file->private_data = bma250_i2c_client;

	if(file->private_data == NULL)
	{
		GSE_ERR("null pointer!!\n");
		return -EINVAL;
	}
	return nonseekable_open(inode, file);
}
/*----------------------------------------------------------------------------*/
static int bma250_release(struct inode *inode, struct file *file)
{
	file->private_data = NULL;
	return 0;
}
/*----------------------------------------------------------------------------*/
static int bma250_unlocked_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
{
	struct i2c_client *client = (struct i2c_client*)file->private_data;
	struct bma250_i2c_data *obj = (struct bma250_i2c_data*)i2c_get_clientdata(client);	
	char strbuf[BMA250_BUFSIZE];
	void __user *data;
	SENSOR_DATA sensor_data;
	int err = 0;
	int cali[3];

	//GSE_FUN(f);
	if(_IOC_DIR(cmd) & _IOC_READ)
	{
		err = !access_ok(VERIFY_WRITE, (void __user *)arg, _IOC_SIZE(cmd));
	}
	else if(_IOC_DIR(cmd) & _IOC_WRITE)
	{
		err = !access_ok(VERIFY_READ, (void __user *)arg, _IOC_SIZE(cmd));
	}

	if(err)
	{
		GSE_ERR("access error: %08X, (%2d, %2d)\n", cmd, _IOC_DIR(cmd), _IOC_SIZE(cmd));
		return -EFAULT;
	}

	switch(cmd)
	{
		case GSENSOR_IOCTL_INIT:
			bma250_init_client(client, 0);			
			break;

		case GSENSOR_IOCTL_READ_CHIPINFO:
			data = (void __user *) arg;
			if(data == NULL)
			{
				err = -EINVAL;
				break;	  
			}
			
			BMA250_ReadChipInfo(client, strbuf, BMA250_BUFSIZE);
			if(copy_to_user(data, strbuf, strlen(strbuf)+1))
			{
				err = -EFAULT;
				break;
			}				 
			break;	  

		case GSENSOR_IOCTL_READ_SENSORDATA:
			data = (void __user *) arg;
			if(data == NULL)
			{
				err = -EINVAL;
				break;	  
			}
			
			BMA250_ReadSensorData(client, strbuf, BMA250_BUFSIZE);
			if(copy_to_user(data, strbuf, strlen(strbuf)+1))
			{
				err = -EFAULT;
				break;	  
			}				 
			break;

		case GSENSOR_IOCTL_READ_GAIN:
			data = (void __user *) arg;
			if(data == NULL)
			{
				err = -EINVAL;
				break;	  
			}			
			
			if(copy_to_user(data, &gsensor_gain, sizeof(GSENSOR_VECTOR3D)))
			{
				err = -EFAULT;
				break;
			}				 
			break;

		case GSENSOR_IOCTL_READ_RAW_DATA:
			data = (void __user *) arg;
			if(data == NULL)
			{
				err = -EINVAL;
				break;	  
			}
			BMA250_ReadRawData(client, strbuf);
			if(copy_to_user(data, &strbuf, strlen(strbuf)+1))
			{
				err = -EFAULT;
				break;	  
			}
			break;	  

		case GSENSOR_IOCTL_SET_CALI:
			data = (void __user*)arg;
			if(data == NULL)
			{
				err = -EINVAL;
				break;	  
			}
			if(copy_from_user(&sensor_data, data, sizeof(sensor_data)))
			{
				err = -EFAULT;
				break;	  
			}
			if(atomic_read(&obj->suspend))
			{
				GSE_ERR("Perform calibration in suspend state!!\n");
				err = -EINVAL;
			}
			else
			{
				cali[BMA250_AXIS_X] = sensor_data.x * obj->reso->sensitivity / GRAVITY_EARTH_1000;
				cali[BMA250_AXIS_Y] = sensor_data.y * obj->reso->sensitivity / GRAVITY_EARTH_1000;
				cali[BMA250_AXIS_Z] = sensor_data.z * obj->reso->sensitivity / GRAVITY_EARTH_1000;			  
				err = BMA250_WriteCalibration(client, cali);			 
			}
			break;

		case GSENSOR_IOCTL_CLR_CALI:
			err = BMA250_ResetCalibration(client);
			break;

		case GSENSOR_IOCTL_GET_CALI:
			data = (void __user*)arg;
			if(data == NULL)
			{
				err = -EINVAL;
				break;	  
			}
			if(err = BMA250_ReadCalibration(client, cali))
			{
				break;
			}
			
			sensor_data.x = cali[BMA250_AXIS_X] * GRAVITY_EARTH_1000 / obj->reso->sensitivity;
			sensor_data.y = cali[BMA250_AXIS_Y] * GRAVITY_EARTH_1000 / obj->reso->sensitivity;
			sensor_data.z = cali[BMA250_AXIS_Z] * GRAVITY_EARTH_1000 / obj->reso->sensitivity;
			if(copy_to_user(data, &sensor_data, sizeof(sensor_data)))
			{
				err = -EFAULT;
				break;
			}		
			break;
		

		default:
			GSE_ERR("unknown IOCTL: 0x%08x\n", cmd);
			err = -ENOIOCTLCMD;
			break;
			
	}

	return err;
}


/*----------------------------------------------------------------------------*/
static struct file_operations bma250_fops = {
	.owner = THIS_MODULE,
	.open = bma250_open,
	.release = bma250_release,
	.unlocked_ioctl = bma250_unlocked_ioctl,
};
/*----------------------------------------------------------------------------*/
static struct miscdevice bma250_device = {
	.minor = MISC_DYNAMIC_MINOR,
	.name = "gsensor",
	.fops = &bma250_fops,
};
/*----------------------------------------------------------------------------*/
#ifndef CONFIG_HAS_EARLYSUSPEND
/*----------------------------------------------------------------------------*/
static int bma250_suspend(struct i2c_client *client, pm_message_t msg) 
{
	struct bma250_i2c_data *obj = i2c_get_clientdata(client);    
	int err = 0;
	GSE_FUN();    

	if(msg.event == PM_EVENT_SUSPEND)
	{   
		if(obj == NULL)
		{
			GSE_ERR("null pointer!!\n");
			return -EINVAL;
		}
		atomic_set(&obj->suspend, 1);
		if(err = BMA250_SetPowerMode(obj->client, false))
		{
			GSE_ERR("write power control fail!!\n");
			return;
		}       
		BMA250_power(obj->hw, 0);
	}
	return err;
}
/*----------------------------------------------------------------------------*/
static int bma250_resume(struct i2c_client *client)
{
	struct bma250_i2c_data *obj = i2c_get_clientdata(client);        
	int err;
	GSE_FUN();

	if(obj == NULL)
	{
		GSE_ERR("null pointer!!\n");
		return -EINVAL;
	}

	BMA250_power(obj->hw, 1);
	if(err = bma250_init_client(client, 0))
	{
		GSE_ERR("initialize client fail!!\n");
		return err;        
	}
	atomic_set(&obj->suspend, 0);

	return 0;
}
/*----------------------------------------------------------------------------*/
#else /*CONFIG_HAS_EARLY_SUSPEND is defined*/
/*----------------------------------------------------------------------------*/
static void bma250_early_suspend(struct early_suspend *h) 
{
	struct bma250_i2c_data *obj = container_of(h, struct bma250_i2c_data, early_drv);   
	int err;
	GSE_FUN();    

	if(obj == NULL)
	{
		GSE_ERR("null pointer!!\n");
		return;
	}
	atomic_set(&obj->suspend, 1); 
	if(err = BMA250_SetPowerMode(obj->client, false))
	{
		GSE_ERR("write power control fail!!\n");
		return;
	}

	sensor_power = false;
	
	BMA250_power(obj->hw, 0);
}
/*----------------------------------------------------------------------------*/
static void bma250_late_resume(struct early_suspend *h)
{
	struct bma250_i2c_data *obj = container_of(h, struct bma250_i2c_data, early_drv);         
	int err;
	GSE_FUN();

	if(obj == NULL)
	{
		GSE_ERR("null pointer!!\n");
		return;
	}

	BMA250_power(obj->hw, 1);
	if(err = bma250_init_client(obj->client, 0))
	{
		GSE_ERR("initialize client fail!!\n");
		return;        
	}
	atomic_set(&obj->suspend, 0);    
}
/*----------------------------------------------------------------------------*/
#endif /*CONFIG_HAS_EARLYSUSPEND*/
/*----------------------------------------------------------------------------*/
static int bma250_i2c_detect(struct i2c_client *client, int kind, struct i2c_board_info *info) 
{    
	strcpy(info->type, BMA250_DEV_NAME);
	return 0;
}

/*----------------------------------------------------------------------------*/
static int bma250_i2c_probe(struct i2c_client *client, const struct i2c_device_id *id)
{
	struct i2c_client *new_client;
	struct bma250_i2c_data *obj;
	struct hwmsen_object sobj;
	int err = 0;
	GSE_FUN();

	if(!(obj = kzalloc(sizeof(*obj), GFP_KERNEL)))
	{
		err = -ENOMEM;
		goto exit;
	}
	
	memset(obj, 0, sizeof(struct bma250_i2c_data));

	obj->hw = get_cust_acc_hw();
	
	if(err = hwmsen_get_convert(obj->hw->direction, &obj->cvt))
	{
		GSE_ERR("invalid direction: %d\n", obj->hw->direction);
		goto exit;
	}

	obj_i2c_data = obj;
	obj->client = client;
	new_client = obj->client;
	i2c_set_clientdata(new_client,obj);
	
	atomic_set(&obj->trace, 0);
	atomic_set(&obj->suspend, 0);
	
#ifdef CONFIG_BMA250_LOWPASS
	if(obj->hw->firlen > C_MAX_FIR_LENGTH)
	{
		atomic_set(&obj->firlen, C_MAX_FIR_LENGTH);
	}	
	else
	{
		atomic_set(&obj->firlen, obj->hw->firlen);
	}
	
	if(atomic_read(&obj->firlen) > 0)
	{
		atomic_set(&obj->fir_en, 1);
	}
	
#endif

	bma250_i2c_client = new_client;	

	if(err = bma250_init_client(new_client, 1))
	{
		goto exit_init_failed;
	}
	

	if(err = misc_register(&bma250_device))
	{
		GSE_ERR("bma250_device register failed\n");
		goto exit_misc_device_register_failed;
	}

	if(err = bma250_create_attr(&bma250_gsensor_driver.driver))
	{
		GSE_ERR("create attribute err = %d\n", err);
		goto exit_create_attr_failed;
	}

	sobj.self = obj;
    sobj.polling = 1;
    sobj.sensor_operate = gsensor_operate;
	if(err = hwmsen_attach(ID_ACCELEROMETER, &sobj))
	{
		GSE_ERR("attach fail = %d\n", err);
		goto exit_kfree;
	}

#ifdef CONFIG_HAS_EARLYSUSPEND
	obj->early_drv.level    = EARLY_SUSPEND_LEVEL_DISABLE_FB - 1,
	obj->early_drv.suspend  = bma250_early_suspend,
	obj->early_drv.resume   = bma250_late_resume,    
	register_early_suspend(&obj->early_drv);
#endif 

	GSE_LOG("%s: OK\n", __func__);    
	extern int gsensor_driver_load;
	gsensor_driver_load = 1;  
	return 0;

	exit_create_attr_failed:
	misc_deregister(&bma250_device);
	exit_misc_device_register_failed:
	exit_init_failed:
	//i2c_detach_client(new_client);
	exit_kfree:
	kfree(obj);
	exit:
	GSE_ERR("%s: err = %d\n", __func__, err);        
	return err;
}

/*----------------------------------------------------------------------------*/
static int bma250_i2c_remove(struct i2c_client *client)
{
	int err = 0;	
	
	if(err = bma250_delete_attr(&bma250_gsensor_driver.driver))
	{
		GSE_ERR("bma150_delete_attr fail: %d\n", err);
	}
	
	if(err = misc_deregister(&bma250_device))
	{
		GSE_ERR("misc_deregister fail: %d\n", err);
	}

	if(err = hwmsen_detach(ID_ACCELEROMETER))
	    

	bma250_i2c_client = NULL;
	i2c_unregister_device(client);
	kfree(i2c_get_clientdata(client));
	return 0;
}
/*----------------------------------------------------------------------------*/
//kaka_12_0115 add
extern char *g_gsensor_name;
char *bma_250_name = "bma250";
//kaka_12_0115 end


static int bma250_probe(struct platform_device *pdev) 
{
	struct acc_hw *hw = get_cust_acc_hw();
	GSE_FUN();

	BMA250_power(hw, 1);
	//bma250_force[0] = hw->i2c_num;
	if(i2c_add_driver(&bma250_i2c_driver))
	{
		GSE_ERR("add driver error\n");
		return -1;
	}

	g_gsensor_name = bma_250_name; //kaka_12_0115
	
	return 0;
}
/*----------------------------------------------------------------------------*/
static int bma250_remove(struct platform_device *pdev)
{
    struct acc_hw *hw = get_cust_acc_hw();

    GSE_FUN();    
    BMA250_power(hw, 0);    
    i2c_del_driver(&bma250_i2c_driver);
    return 0;
}
/*----------------------------------------------------------------------------*/
static struct platform_driver bma250_gsensor_driver = {
	.probe      = bma250_probe,
	.remove     = bma250_remove,    
	.driver     = {
		.name  = "gsensor",
		.owner = THIS_MODULE,
	}
};

/*----------------------------------------------------------------------------*/
static int __init bma250_init(void)
{
	GSE_FUN();
	i2c_register_board_info(0, &i2c_BMA250, 1);
	extern int gsensor_driver_register(struct platform_driver *pdrv);
    if(gsensor_driver_register(&bma250_gsensor_driver))
	//if(platform_driver_register(&bma250_gsensor_driver))
	{
		GSE_ERR("failed to register driver");
		return -ENODEV;
	}
	return 0;    
}
/*----------------------------------------------------------------------------*/
static void __exit bma250_exit(void)
{
	GSE_FUN();
	platform_driver_unregister(&bma250_gsensor_driver);
}
/*----------------------------------------------------------------------------*/
module_init(bma250_init);
module_exit(bma250_exit);
/*----------------------------------------------------------------------------*/
MODULE_LICENSE("GPL");
MODULE_DESCRIPTION("BMA250 I2C driver");
MODULE_AUTHOR("Xiaoli.li@mediatek.com");

/* Copyright Statement:
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein
 * is confidential and proprietary to MediaTek Inc. and/or its licensors.
 * Without the prior written permission of MediaTek inc. and/or its licensors,
 * any reproduction, modification, use or disclosure of MediaTek Software,
 * and information contained herein, in whole or in part, shall be strictly prohibited.
 */
/* MediaTek Inc. (C) 2010. All rights reserved.
 *
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
 * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
 * AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
 * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
 * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
 * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
 * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
 * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
 * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
 * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
 * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
 * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
 * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
 * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 *
 * The following software/firmware and/or related documentation ("MediaTek Software")
 * have been modified by MediaTek Inc. All revisions are subject to any receiver's
 * applicable license agreements with MediaTek Inc.
 */

/* 
 *
 * (C) Copyright 2008 
 * MediaTek <www.mediatek.com>
 *
 * BMA250 driver for MT6516
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA  BMA150
 */
#ifndef BMA250_H
#define BMA250_H
	 
#include <linux/ioctl.h>
	 
	#define BMA250_I2C_SLAVE_WRITE_ADDR		0x30
	#define BMA250_FIXED_DEVID			0x03
	
	 /* BMA250 Register Map  (Please refer to BMA250 Specifications) */
	#define BMA250_REG_DEVID				0x00
	#define BMA250_REG_OFSX				0x16
	#define BMA250_REG_OFSX_HIGH			0x1A
	#define BMA250_REG_BW_RATE			0x10
	#define BMA250_BW_MASK				0x1f
	#define BMA250_BW_200HZ				0x0d
	#define BMA250_BW_100HZ				0x0c
	#define BMA250_BW_50HZ				0x0b
	#define BMA250_BW_25HZ				0x0a
	#define BMA250_REG_POWER_CTL		0x11		
	#define BMA250_REG_DATA_FORMAT		0x0f
	#define BMA250_RANGE_MASK			0x0f
	#define BMA250_RANGE_2G				0x03
	#define BMA250_RANGE_4G				0x05
	#define BMA250_RANGE_8G				0x08
	#define BMA250_REG_DATAXLOW			0x02
	#define BMA250_REG_DATA_RESOLUTION	0x14
	#define BMA250_MEASURE_MODE			0x80	
	#define BMA250_SELF_TEST           			0x32
	#define BMA250_SELF_TEST_AXIS_X		0x01
	#define BMA250_SELF_TEST_AXIS_Y		0x02
	#define BMA250_SELF_TEST_AXIS_Z		0x03
	#define BMA250_SELF_TEST_POSITIVE	0x00
	#define BMA250_SELF_TEST_NEGATIVE	0x04
	#define BMA250_INT_REG_1           			0x16
	#define BMA250_INT_REG_2          		 	0x17

	
#define BMA250_SUCCESS						0
#define BMA250_ERR_I2C						-1
#define BMA250_ERR_STATUS					-3
#define BMA250_ERR_SETUP_FAILURE			-4
#define BMA250_ERR_GETGSENSORDATA			-5
#define BMA250_ERR_IDENTIFICATION			-6
	 
	 
	 
#define BMA250_BUFSIZE				256
	 
#endif

/* Copyright Statement:
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein
 * is confidential and proprietary to MediaTek Inc. and/or its licensors.
 * Without the prior written permission of MediaTek inc. and/or its licensors,
 * any reproduction, modification, use or disclosure of MediaTek Software,
 * and information contained herein, in whole or in part, shall be strictly prohibited.
 */
/* MediaTek Inc. (C) 2010. All rights reserved.
 *
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
 * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
 * AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
 * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
 * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
 * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
 * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
 * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
 * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
 * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
 * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
 * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
 * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
 * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 *
 * The following software/firmware and/or related documentation ("MediaTek Software")
 * have been modified by MediaTek Inc. All revisions are subject to any receiver's
 * applicable license agreements with MediaTek Inc.
 */

/* drivers/hwmon/mt6516/amit/tmd2771.c - TMD2771 ALS/PS driver
 * 
 * Author: MingHsien Hsieh <minghsien.hsieh@mediatek.com>
 *
 * This software is licensed under the terms of the GNU General Public
 * License version 2, as published by the Free Software Foundation, and
 * may be copied, distributed, and modified under those terms.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 */

#include <linux/interrupt.h>
#include <linux/i2c.h>
#include <linux/slab.h>
#include <linux/irq.h>
#include <linux/miscdevice.h>
#include <asm/uaccess.h>
#include <linux/delay.h>
#include <linux/input.h>
#include <linux/workqueue.h>
#include <linux/kobject.h>
#include <linux/earlysuspend.h>
#include <linux/platform_device.h>
#include <asm/atomic.h>
#ifdef MT6516
#include <mach/mt6516_devs.h>
#include <mach/mt6516_typedefs.h>
#include <mach/mt6516_gpio.h>
#include <mach/mt6516_pll.h>
#endif

#ifdef MT6573
#include <mach/mt6573_devs.h>
#include <mach/mt6573_typedefs.h>
#include <mach/mt6573_gpio.h>
#include <mach/mt6573_pll.h>
#endif

#ifdef MT6575
#include <mach/mt6575_devs.h>
#include <mach/mt6575_typedefs.h>
#include <mach/mt6575_gpio.h>
#include <mach/mt6575_pm_ldo.h>
#endif

#ifdef MT6516
#define POWER_NONE_MACRO MT6516_POWER_NONE
#endif

#ifdef MT6573
#define POWER_NONE_MACRO MT65XX_POWER_NONE
#endif

#ifdef MT6575
#define POWER_NONE_MACRO MT65XX_POWER_NONE
#endif

#include <linux/hwmsensor.h>
#include <linux/hwmsen_dev.h>
#include <linux/sensors_io.h>
#include <asm/io.h>
#include <cust_eint.h>
#include <cust_alsps.h>
#include "tmd2771.h"
/******************************************************************************
 * configuration
*******************************************************************************/
/*----------------------------------------------------------------------------*/

#define TMD2771_DEV_NAME     "TMD2771"
/*----------------------------------------------------------------------------*/
#define APS_TAG                  "[ALS/PS] "
#define APS_FUN(f)               printk(KERN_INFO APS_TAG"%s\n", __FUNCTION__)
#define APS_ERR(fmt, args...)    printk(KERN_ERR  APS_TAG"%s %d : "fmt, __FUNCTION__, __LINE__, ##args)
#define APS_LOG(fmt, args...)    printk(KERN_INFO APS_TAG fmt, ##args)
#define APS_DBG(fmt, args...)    printk(KERN_INFO APS_TAG fmt, ##args)                 
/******************************************************************************
 * extern functions
*******************************************************************************/
/*for interrup work mode support --add by liaoxl.lenovo 12.08.2011*/
#ifdef MT6575
	extern void mt65xx_eint_unmask(unsigned int line);
	extern void mt65xx_eint_mask(unsigned int line);
	extern void mt65xx_eint_set_polarity(kal_uint8 eintno, kal_bool ACT_Polarity);
	extern void mt65xx_eint_set_hw_debounce(kal_uint8 eintno, kal_uint32 ms);
	extern kal_uint32 mt65xx_eint_set_sens(kal_uint8 eintno, kal_bool sens);
	extern void mt65xx_eint_registration(kal_uint8 eintno, kal_bool Dbounce_En,
										 kal_bool ACT_Polarity, void (EINT_FUNC_PTR)(void),
										 kal_bool auto_umask);
	
#endif
#ifdef MT6516
extern void MT6516_EINTIRQUnmask(unsigned int line);
extern void MT6516_EINTIRQMask(unsigned int line);
extern void MT6516_EINT_Set_Polarity(kal_uint8 eintno, kal_bool ACT_Polarity);
extern void MT6516_EINT_Set_HW_Debounce(kal_uint8 eintno, kal_uint32 ms);
extern kal_uint32 MT6516_EINT_Set_Sensitivity(kal_uint8 eintno, kal_bool sens);
extern void MT6516_EINT_Registration(kal_uint8 eintno, kal_bool Dbounce_En,
                                     kal_bool ACT_Polarity, void (EINT_FUNC_PTR)(void),
                                     kal_bool auto_umask);
#endif
/*----------------------------------------------------------------------------*/
static struct i2c_client *tmd2771_i2c_client = NULL;
/*----------------------------------------------------------------------------*/
static const struct i2c_device_id tmd2771_i2c_id[] = {{TMD2771_DEV_NAME,0},{}};
static struct i2c_board_info __initdata i2c_TMD2771={ I2C_BOARD_INFO("TMD2771", (0X72>>1))};
/*the adapter id & i2c address will be available in customization*/
//static unsigned short tmd2771_force[] = {0x02, 0X72, I2C_CLIENT_END, I2C_CLIENT_END};
//static const unsigned short *const tmd2771_forces[] = { tmd2771_force, NULL };
//static struct i2c_client_address_data tmd2771_addr_data = { .forces = tmd2771_forces,};
/*----------------------------------------------------------------------------*/
static int tmd2771_i2c_probe(struct i2c_client *client, const struct i2c_device_id *id); 
static int tmd2771_i2c_remove(struct i2c_client *client);
static int tmd2771_i2c_detect(struct i2c_client *client, int kind, struct i2c_board_info *info);
/*----------------------------------------------------------------------------*/
static int tmd2771_i2c_suspend(struct i2c_client *client, pm_message_t msg);
static int tmd2771_i2c_resume(struct i2c_client *client);

static struct tmd2771_priv *g_tmd2771_ptr = NULL;

 struct PS_CALI_DATA_STRUCT
{
    int close;
    int far_away;
    int valid;
} ;

static struct PS_CALI_DATA_STRUCT ps_cali={{0,0,0},};
static int intr_flag_value = 0;
/*----------------------------------------------------------------------------*/
typedef enum {
    CMC_BIT_ALS    = 1,
    CMC_BIT_PS     = 2,
} CMC_BIT;
/*----------------------------------------------------------------------------*/
struct tmd2771_i2c_addr {    /*define a series of i2c slave address*/
    u8  write_addr;  
    u8  ps_thd;     /*PS INT threshold*/
};
/*----------------------------------------------------------------------------*/
struct tmd2771_priv {
    struct alsps_hw  *hw;
    struct i2c_client *client;
    struct work_struct  eint_work;

    /*i2c address group*/
    struct tmd2771_i2c_addr  addr;
    
    /*misc*/
    u16		    als_modulus;
    atomic_t    i2c_retry;
    atomic_t    als_suspend;
    atomic_t    als_debounce;   /*debounce time after enabling als*/
    atomic_t    als_deb_on;     /*indicates if the debounce is on*/
    atomic_t    als_deb_end;    /*the jiffies representing the end of debounce*/
    atomic_t    ps_mask;        /*mask ps: always return far away*/
    atomic_t    ps_debounce;    /*debounce time after enabling ps*/
    atomic_t    ps_deb_on;      /*indicates if the debounce is on*/
    atomic_t    ps_deb_end;     /*the jiffies representing the end of debounce*/
    atomic_t    ps_suspend;


    /*data*/
    u16         als;
    u16          ps;
    u8          _align;
    u16         als_level_num;
    u16         als_value_num;
    u32         als_level[C_CUST_ALS_LEVEL-1];
    u32         als_value[C_CUST_ALS_LEVEL];

    atomic_t    als_cmd_val;    /*the cmd value can't be read, stored in ram*/
    atomic_t    ps_cmd_val;     /*the cmd value can't be read, stored in ram*/
    atomic_t    ps_thd_val_high;     /*the cmd value can't be read, stored in ram*/
	atomic_t    ps_thd_val_low;     /*the cmd value can't be read, stored in ram*/
    ulong       enable;         /*enable mask*/
    ulong       pending_intr;   /*pending interrupt*/

    /*early suspend*/
#if defined(CONFIG_HAS_EARLYSUSPEND)
    struct early_suspend    early_drv;
#endif     
};
/*----------------------------------------------------------------------------*/
static struct i2c_driver tmd2771_i2c_driver = {	
	.probe      = tmd2771_i2c_probe,
	.remove     = tmd2771_i2c_remove,
	.detect     = tmd2771_i2c_detect,
	.suspend    = tmd2771_i2c_suspend,
	.resume     = tmd2771_i2c_resume,
	.id_table   = tmd2771_i2c_id,
//	.address_data = &tmd2771_addr_data,
	.driver = {
//		.owner          = THIS_MODULE,
		.name           = TMD2771_DEV_NAME,
	},
};

static struct tmd2771_priv *tmd2771_obj = NULL;
static struct platform_driver tmd2771_alsps_driver;
/*----------------------------------------------------------------------------*/
int tmd2771_get_addr(struct alsps_hw *hw, struct tmd2771_i2c_addr *addr)
{
	if(!hw || !addr)
	{
		return -EFAULT;
	}
	addr->write_addr= hw->i2c_addr[0];
	return 0;
}
/*----------------------------------------------------------------------------*/
static void tmd2771_power(struct alsps_hw *hw, unsigned int on) 
{
	static unsigned int power_on = 0;

	APS_LOG("power %s\n", on ? "on" : "off");

	if(hw->power_id != POWER_NONE_MACRO)
	{
		if(power_on == on)
		{
			APS_LOG("ignore power control: %d\n", on);
		}
		else if(on)
		{
			if(!hwPowerOn(hw->power_id, hw->power_vol, "TMD2771")) 
			{
				APS_ERR("power on fails!!\n");
			}
		}
		else
		{
			if(!hwPowerDown(hw->power_id, "TMD2771")) 
			{
				APS_ERR("power off fail!!\n");   
			}
		}
	}
	power_on = on;
}
/*----------------------------------------------------------------------------*/
static long tmd2771_enable_als(struct i2c_client *client, int enable)
{
		struct tmd2771_priv *obj = i2c_get_clientdata(client);
		u8 databuf[2];	  
		long res = 0;
		u8 buffer[1];
		u8 reg_value[1];
		uint32_t testbit_PS;
		
	
		if(client == NULL)
		{
			APS_DBG("CLIENT CANN'T EQUL NULL\n");
			return -1;
		}
		
		#if 0	/*yucong MTK enable_als function modified for fixing reading register error problem 2012.2.16*/
		buffer[0]=TMD2771_CMM_ENABLE;
		res = i2c_master_send(client, buffer, 0x1);
		if(res <= 0)
		{
			goto EXIT_ERR;
		}
		res = i2c_master_recv(client, reg_value, 0x1);
		if(res <= 0)
		{
			goto EXIT_ERR;
		}
		printk("Yucong:0x%x, %d, %s\n", reg_value[0], __LINE__, __FUNCTION__);
		
		if(enable)
		{
			databuf[0] = TMD2771_CMM_ENABLE;	
			databuf[1] = reg_value[0] |0x0B;
			res = i2c_master_send(client, databuf, 0x2);
			if(res <= 0)
			{
				goto EXIT_ERR;
			}
			/*Lenovo-sw chenlj2 add 2011-06-03,modify ps to ALS below two lines */
			atomic_set(&obj->als_deb_on, 1);
			atomic_set(&obj->als_deb_end, jiffies+atomic_read(&obj->als_debounce)/(1000/HZ));
			APS_DBG("tmd2771 power on\n");
		}
		else
		{
			databuf[0] = TMD2771_CMM_ENABLE;	
			databuf[1] = reg_value[0] &0xFD;
			res = i2c_master_send(client, databuf, 0x2);
			if(res <= 0)
			{
				goto EXIT_ERR;
			}
			/*Lenovo-sw chenlj2 add 2011-06-03,modify ps_deb_on to als_deb_on */
			atomic_set(&obj->als_deb_on, 0);
			APS_DBG("tmd2771 power off\n");
		}
		#endif
		#if 1
		/*yucong MTK enable_als function modified for fixing reading register error problem 2012.2.16*/
		testbit_PS = test_bit(CMC_BIT_PS, &obj->enable) ? (1) : (0);
		if(enable)
		{
			if(testbit_PS){	
			databuf[0] = TMD2771_CMM_ENABLE;	
			databuf[1] = 0x2F;
			res = i2c_master_send(client, databuf, 0x2);
			if(res <= 0)
				{
					goto EXIT_ERR;
				}
			/*debug code for reading register value*/
			#if 1
			res = i2c_master_recv(client, reg_value, 0x1);
			if(res <= 0)
				{
					goto EXIT_ERR;
				}
			printk("Yucong:0x%x, %d, %s\n", reg_value[0], __LINE__, __FUNCTION__);
			#endif
			}
			else{
			databuf[0] = TMD2771_CMM_ENABLE;	
			databuf[1] = 0x2B;
			res = i2c_master_send(client, databuf, 0x2);
			if(res <= 0)
				{
					goto EXIT_ERR;
				}

			/*debug code for reading register value*/
			#if 1
			res = i2c_master_recv(client, reg_value, 0x1);
			if(res <= 0)
				{
					goto EXIT_ERR;
				}
			printk("Yucong:0x%x, %d, %s\n", reg_value[0], __LINE__, __FUNCTION__);
			#endif

			}
			atomic_set(&obj->als_deb_on, 1);
			atomic_set(&obj->als_deb_end, jiffies+atomic_read(&obj->als_debounce)/(1000/HZ));
			APS_DBG("tmd2771 power on\n");
		}
		else
		{	
			if(testbit_PS){
			databuf[0] = TMD2771_CMM_ENABLE;	
			databuf[1] = 0x2D;
			res = i2c_master_send(client, databuf, 0x2);
			if(res <= 0)
				{
					goto EXIT_ERR;
				}
			}
			else{
			databuf[0] = TMD2771_CMM_ENABLE;	
			databuf[1] = 0x00;
			res = i2c_master_send(client, databuf, 0x2);
			if(res <= 0)
				{
					goto EXIT_ERR;
				}
			}
			/*Lenovo-sw chenlj2 add 2011-06-03,modify ps_deb_on to als_deb_on */
			atomic_set(&obj->als_deb_on, 0);
			APS_DBG("tmd2771 power off\n");
		}
		#endif
		#if 1 /*yucong add for debug*/
			buffer[0]=TMD2771_CMM_ENABLE;
			res = i2c_master_send(client, buffer, 0x1);
			if(res <= 0)
			{
				goto EXIT_ERR;
			}
			res = i2c_master_recv(client, reg_value, 0x1);
			if(res <= 0)
			{
				goto EXIT_ERR;
			}
			printk("Yucong:0x%x, %d, %s\n", reg_value[0], __LINE__, __FUNCTION__);
		#endif
		
		return 0;
		
	EXIT_ERR:
		APS_ERR("tmd2771_enable_als fail\n");
		return res;
}

/*----------------------------------------------------------------------------*/
static long tmd2771_enable_ps(struct i2c_client *client, int enable)
{
	struct tmd2771_priv *obj = i2c_get_clientdata(client);
	u8 databuf[2];    
	long res = 0;
	u8 buffer[1];
	u8 reg_value[1];
	uint32_t testbit_ALS;

	if(client == NULL)
	{
		APS_DBG("CLIENT CANN'T EQUL NULL\n");
		return -1;
	}
#if 0	/*yucong MTK modified for fixing reading register error problem 2012.2.16*/
	buffer[0]=TMD2771_CMM_ENABLE;
	res = i2c_master_send(client, buffer, 0x1);
	if(res <= 0)
	{
		goto EXIT_ERR;
	}
	res = i2c_master_recv(client, reg_value, 0x1);
	if(res <= 0)
	{
		goto EXIT_ERR;
	}
	/*yucong MTK: lenovo orignal code*/
	if(enable)
	{
		databuf[0] = TMD2771_CMM_ENABLE;    
		databuf[1] = reg_value[0] |0x0d;
		res = i2c_master_send(client, databuf, 0x2);
		if(res <= 0)
		{
			goto EXIT_ERR;
		}
		atomic_set(&obj->ps_deb_on, 1);
		atomic_set(&obj->ps_deb_end, jiffies+atomic_read(&obj->ps_debounce)/(1000/HZ));
		APS_DBG("tmd2771 power on\n");

		/*for interrup work mode support -- by liaoxl.lenovo 12.08.2011*/
		if(0 == obj->hw->polling_mode_ps)
		{
			if(1 == ps_cali.valid)
			{
				databuf[0] = TMD2771_CMM_INT_LOW_THD_LOW;	
				databuf[1] = (u8)(ps_cali.far_away & 0x00FF);
				res = i2c_master_send(client, databuf, 0x2);
				if(res <= 0)
				{
					goto EXIT_ERR;
					return TMD2771_ERR_I2C;
				}
				databuf[0] = TMD2771_CMM_INT_LOW_THD_HIGH;	
				databuf[1] = (u8)((ps_cali.far_away & 0xFF00) >> 8);
				res = i2c_master_send(client, databuf, 0x2);
				if(res <= 0)
				{
					goto EXIT_ERR;
					return TMD2771_ERR_I2C;
				}
				databuf[0] = TMD2771_CMM_INT_HIGH_THD_LOW;	
				databuf[1] = (u8)(ps_cali.close & 0x00FF);
				res = i2c_master_send(client, databuf, 0x2);
				if(res <= 0)
				{
					goto EXIT_ERR;
					return TMD2771_ERR_I2C;
				}
				databuf[0] = TMD2771_CMM_INT_HIGH_THD_HIGH; 
				databuf[1] = (u8)((ps_cali.close & 0xFF00) >> 8);;
				res = i2c_master_send(client, databuf, 0x2);
				if(res <= 0)
				{
					goto EXIT_ERR;
					return TMD2771_ERR_I2C;
				}
			}
			else
			{
				databuf[0] = TMD2771_CMM_INT_LOW_THD_LOW;	
				databuf[1] = (u8)(480 & 0x00FF);
				res = i2c_master_send(client, databuf, 0x2);
				if(res <= 0)
				{
					goto EXIT_ERR;
					return TMD2771_ERR_I2C;
				}
				databuf[0] = TMD2771_CMM_INT_LOW_THD_HIGH;	
				databuf[1] = (u8)((480 & 0xFF00) >> 8);
				res = i2c_master_send(client, databuf, 0x2);
				if(res <= 0)
				{
					goto EXIT_ERR;
					return TMD2771_ERR_I2C;
				}
				databuf[0] = TMD2771_CMM_INT_HIGH_THD_LOW;	
				databuf[1] = (u8)(700 & 0x00FF);
				res = i2c_master_send(client, databuf, 0x2);
				if(res <= 0)
				{
					goto EXIT_ERR;
					return TMD2771_ERR_I2C;
				}
				databuf[0] = TMD2771_CMM_INT_HIGH_THD_HIGH; 
				databuf[1] = (u8)((700 & 0xFF00) >> 8);;
				res = i2c_master_send(client, databuf, 0x2);
				if(res <= 0)
				{
					goto EXIT_ERR;
					return TMD2771_ERR_I2C;
				}
		
			}
		
			databuf[0] = TMD2771_CMM_Persistence;
			databuf[1] = 0x20;
			res = i2c_master_send(client, databuf, 0x2);
			if(res <= 0)
			{
				goto EXIT_ERR;
				return TMD2771_ERR_I2C;
			}
			databuf[0] = TMD2771_CMM_ENABLE;	
			databuf[1] = reg_value[0] | 0x0d | 0x20;
			res = i2c_master_send(client, databuf, 0x2);
			if(res <= 0)
			{
				goto EXIT_ERR;
				return TMD2771_ERR_I2C;
			}
		
			mt65xx_eint_unmask(CUST_EINT_ALS_NUM);
		}
	}
	else
	{
		databuf[0] = TMD2771_CMM_ENABLE;    
		databuf[1] = reg_value[0] &0xfb;
		res = i2c_master_send(client, databuf, 0x2);
		if(res <= 0)
		{
			goto EXIT_ERR;
		}
		atomic_set(&obj->ps_deb_on, 0);
		APS_DBG("tmd2771 power off\n");

		/*for interrup work mode support -- by liaoxl.lenovo 12.08.2011*/
		if(0 == obj->hw->polling_mode_ps)
		{
			cancel_work_sync(&obj->eint_work);
			mt65xx_eint_mask(CUST_EINT_ALS_NUM);
		}
	}
#endif
#if 1	
	/*yucong MTK: enable_ps function modified for fixing reading register error problem 2012.2.16*/
	testbit_ALS = test_bit(CMC_BIT_ALS, &obj->enable) ? (1) : (0);
	if(enable)
	{
		if(testbit_ALS){
		databuf[0] = TMD2771_CMM_ENABLE;    
		databuf[1] = 0x0F;
		res = i2c_master_send(client, databuf, 0x2);
		if(res <= 0)
			{
				goto EXIT_ERR;
			}
		/*debug code for reading register value*/
		#if 1
		res = i2c_master_recv(client, reg_value, 0x1);
		if(res <= 0)
			{
				goto EXIT_ERR;
			}
		printk("Yucong:0x%x, %d, %s\n", reg_value[0], __LINE__, __FUNCTION__);
		#endif
		}else{
		databuf[0] = TMD2771_CMM_ENABLE;    
		databuf[1] = 0x0D;
		res = i2c_master_send(client, databuf, 0x2);
		if(res <= 0)
			{
				goto EXIT_ERR;
			}
		}
		/*debug code for reading register value*/
		#if 1
		res = i2c_master_recv(client, reg_value, 0x1);
		if(res <= 0)
			{
				goto EXIT_ERR;
			}
		printk("Yucong:0x%x, %d, %s\n", reg_value[0], __LINE__, __FUNCTION__);
		#endif
		atomic_set(&obj->ps_deb_on, 1);
		atomic_set(&obj->ps_deb_end, jiffies+atomic_read(&obj->ps_debounce)/(1000/HZ));
		APS_DBG("tmd2771 power on\n");

		/*for interrup work mode support -- by liaoxl.lenovo 12.08.2011*/
		if(0 == obj->hw->polling_mode_ps)
		{
			if(1 == ps_cali.valid)
			{
				databuf[0] = TMD2771_CMM_INT_LOW_THD_LOW;	
				databuf[1] = (u8)(ps_cali.far_away & 0x00FF);
				res = i2c_master_send(client, databuf, 0x2);
				if(res <= 0)
				{
					goto EXIT_ERR;
					return TMD2771_ERR_I2C;
				}
				databuf[0] = TMD2771_CMM_INT_LOW_THD_HIGH;	
				databuf[1] = (u8)((ps_cali.far_away & 0xFF00) >> 8);
				res = i2c_master_send(client, databuf, 0x2);
				if(res <= 0)
				{
					goto EXIT_ERR;
					return TMD2771_ERR_I2C;
				}
				databuf[0] = TMD2771_CMM_INT_HIGH_THD_LOW;	
				databuf[1] = (u8)(ps_cali.close & 0x00FF);
				res = i2c_master_send(client, databuf, 0x2);
				if(res <= 0)
				{
					goto EXIT_ERR;
					return TMD2771_ERR_I2C;
				}
				databuf[0] = TMD2771_CMM_INT_HIGH_THD_HIGH; 
				databuf[1] = (u8)((ps_cali.close & 0xFF00) >> 8);;
				res = i2c_master_send(client, databuf, 0x2);
				if(res <= 0)
				{
					goto EXIT_ERR;
					return TMD2771_ERR_I2C;
				}
			}
			else
			{
				databuf[0] = TMD2771_CMM_INT_LOW_THD_LOW;	
				databuf[1] = (u8)(atomic_read(&obj->ps_thd_val_low) & 0x00FF);
				res = i2c_master_send(client, databuf, 0x2);
				if(res <= 0)
				{
					goto EXIT_ERR;
					return TMD2771_ERR_I2C;
				}
				databuf[0] = TMD2771_CMM_INT_LOW_THD_HIGH;	
				databuf[1] = (u8)((atomic_read(&obj->ps_thd_val_low) & 0xFF00) >> 8);
				res = i2c_master_send(client, databuf, 0x2);
				if(res <= 0)
				{
					goto EXIT_ERR;
					return TMD2771_ERR_I2C;
				}
				databuf[0] = TMD2771_CMM_INT_HIGH_THD_LOW;	
				databuf[1] = (u8)(atomic_read(&obj->ps_thd_val_high) & 0x00FF);
				res = i2c_master_send(client, databuf, 0x2);
				if(res <= 0)
				{
					goto EXIT_ERR;
					return TMD2771_ERR_I2C;
				}
				databuf[0] = TMD2771_CMM_INT_HIGH_THD_HIGH; 
				databuf[1] = (u8)((atomic_read(&obj->ps_thd_val_high) & 0xFF00) >> 8);;
				res = i2c_master_send(client, databuf, 0x2);
				if(res <= 0)
				{
					goto EXIT_ERR;
					return TMD2771_ERR_I2C;
				}
		
			}
		
			databuf[0] = TMD2771_CMM_Persistence;
			databuf[1] = 0x20;
			res = i2c_master_send(client, databuf, 0x2);
			if(res <= 0)
			{
				goto EXIT_ERR;
				return TMD2771_ERR_I2C;
			}
			if(testbit_ALS){
			databuf[0] = TMD2771_CMM_ENABLE;    
			databuf[1] = 0x2F;
			res = i2c_master_send(client, databuf, 0x2);
			if(res <= 0)
				{
					goto EXIT_ERR;
				}
			/*debug code for reading register value*/
			#if 1
			res = i2c_master_recv(client, reg_value, 0x1);
			if(res <= 0)
				{
					goto EXIT_ERR;
				}
			printk("Yucong:0x%x, %d, %s\n", reg_value[0], __LINE__, __FUNCTION__);
			#endif
			}else{
			databuf[0] = TMD2771_CMM_ENABLE;    
			databuf[1] = 0x2D;
			res = i2c_master_send(client, databuf, 0x2);
			if(res <= 0)
				{
					goto EXIT_ERR;
				}
			}
			/*debug code for reading register value*/
			#if 1
			res = i2c_master_recv(client, reg_value, 0x1);
			if(res <= 0)
				{
					goto EXIT_ERR;
				}
			printk("Yucong:0x%x, %d, %s\n", reg_value[0], __LINE__, __FUNCTION__);
			#endif
		
			mt65xx_eint_unmask(CUST_EINT_ALS_NUM);
		}
	}
	else
	{
	/*yucong MTK: enable_ps function modified for fixing reading register error problem 2012.2.16*/
	if(testbit_ALS){
		databuf[0] = TMD2771_CMM_ENABLE;    
		databuf[1] = 0x2B;
		res = i2c_master_send(client, databuf, 0x2);
		if(res <= 0)
			{
				goto EXIT_ERR;
			}
		}else{
		databuf[0] = TMD2771_CMM_ENABLE;    
		databuf[1] = 0x00;
		res = i2c_master_send(client, databuf, 0x2);
		if(res <= 0)
			{
				goto EXIT_ERR;
			}
		}
		atomic_set(&obj->ps_deb_on, 0);
		APS_DBG("tmd2771 power off\n");

		/*for interrup work mode support -- by liaoxl.lenovo 12.08.2011*/
		if(0 == obj->hw->polling_mode_ps)
		{
			cancel_work_sync(&obj->eint_work);
			mt65xx_eint_mask(CUST_EINT_ALS_NUM);
		}
	}
#endif
	return 0;
	
EXIT_ERR:
	APS_ERR("tmd2771_enable_ps fail\n");
	return res;
}
/*----------------------------------------------------------------------------*/
static int tmd2771_enable(struct i2c_client *client, int enable)
{
	struct tmd2771_priv *obj = i2c_get_clientdata(client);
	u8 databuf[2];    
	int res = 0;
	u8 buffer[1];
	u8 reg_value[1];

	if(client == NULL)
	{
		APS_DBG("CLIENT CANN'T EQUL NULL\n");
		return -1;
	}

	/* modify to restore reg setting after cali ---liaoxl.lenovo */
	buffer[0]=TMD2771_CMM_ENABLE;
	res = i2c_master_send(client, buffer, 0x1);
	if(res <= 0)
	{
		goto EXIT_ERR;
	}
	res = i2c_master_recv(client, reg_value, 0x1);
	if(res <= 0)
	{
		goto EXIT_ERR;
	}

	if(enable)
	{
		databuf[0] = TMD2771_CMM_ENABLE;    
		databuf[1] = reg_value[0] | 0x01;
		res = i2c_master_send(client, databuf, 0x2);
		if(res <= 0)
		{
			goto EXIT_ERR;
		}
		APS_DBG("tmd2771 power on\n");
	}
	else
	{
		databuf[0] = TMD2771_CMM_ENABLE;    
		databuf[1] = reg_value[0] & 0xFE;
		res = i2c_master_send(client, databuf, 0x2);
		if(res <= 0)
		{
			goto EXIT_ERR;
		}
		atomic_set(&obj->ps_deb_on, 0);
		/*Lenovo-sw chenlj2 add 2011-06-03,close als_deb_on */
		atomic_set(&obj->als_deb_on, 0);
		APS_DBG("tmd2771 power off\n");
	}
	return 0;
	
EXIT_ERR:
	APS_ERR("tmd2771_enable fail\n");
	return res;
}

/*----------------------------------------------------------------------------*/
/*for interrup work mode support -- by liaoxl.lenovo 12.08.2011*/
static int tmd2771_check_and_clear_intr(struct i2c_client *client) 
{
	struct tmd2771_priv *obj = i2c_get_clientdata(client);
	int res,intp,intl;
	u8 buffer[2];

	//if (mt_get_gpio_in(GPIO_ALS_EINT_PIN) == 1) /*skip if no interrupt*/  
	//    return 0;

	buffer[0] = TMD2771_CMM_STATUS;
	res = i2c_master_send(client, buffer, 0x1);
	if(res <= 0)
	{
		goto EXIT_ERR;
	}
	res = i2c_master_recv(client, buffer, 0x1);
	if(res <= 0)
	{
		goto EXIT_ERR;
	}
	printk("yucong tmd2771_check_and_clear_intr status=0x%x\n", buffer[0]);
	res = 1;
	intp = 0;
	intl = 0;
	if(0 != (buffer[0] & 0x20))
	{
		res = 0;
		intp = 1;
	}
	if(0 != (buffer[0] & 0x10))
	{
		res = 0;
		intl = 1;		
	}

	if(0 == res)
	{
		if((1 == intp) && (0 == intl))
		{
			buffer[0] = (TAOS_TRITON_CMD_REG|TAOS_TRITON_CMD_SPL_FN|0x05);
		}
		else if((0 == intp) && (1 == intl))
		{
			buffer[0] = (TAOS_TRITON_CMD_REG|TAOS_TRITON_CMD_SPL_FN|0x06);
		}
		else
		{
			buffer[0] = (TAOS_TRITON_CMD_REG|TAOS_TRITON_CMD_SPL_FN|0x07);
		}
		res = i2c_master_send(client, buffer, 0x1);
		if(res <= 0)
		{
			goto EXIT_ERR;
		}
		else
		{
			res = 0;
		}
	}

	return res;

EXIT_ERR:
	APS_ERR("tmd2771_check_and_clear_intr fail\n");
	return 1;
}
/*----------------------------------------------------------------------------*/

/*yucong add for interrupt mode support MTK inc 2012.3.7*/
static int tmd2771_check_intr(struct i2c_client *client) 
{
	struct tmd2771_priv *obj = i2c_get_clientdata(client);
	int res,intp,intl;
	u8 buffer[2];

	//if (mt_get_gpio_in(GPIO_ALS_EINT_PIN) == 1) /*skip if no interrupt*/  
	//    return 0;

	buffer[0] = TMD2771_CMM_STATUS;
	res = i2c_master_send(client, buffer, 0x1);
	if(res <= 0)
	{
		goto EXIT_ERR;
	}
	res = i2c_master_recv(client, buffer, 0x1);
	if(res <= 0)
	{
		goto EXIT_ERR;
	}
	APS_ERR("tmd2771_check_and_clear_intr status=0x%x\n", buffer[0]);
	res = 1;
	intp = 0;
	intl = 0;
	if(0 != (buffer[0] & 0x20))
	{
		res = 0;
		intp = 1;
	}
	if(0 != (buffer[0] & 0x10))
	{
		res = 0;
		intl = 1;		
	}

	return res;

EXIT_ERR:
	APS_ERR("tmd2771_check_intr fail\n");
	return 1;
}

static int tmd2771_clear_intr(struct i2c_client *client) 
{
	struct tmd2771_priv *obj = i2c_get_clientdata(client);
	int res;
	u8 buffer[2];

#if 0
	if((1 == intp) && (0 == intl))
	{
		buffer[0] = (TAOS_TRITON_CMD_REG|TAOS_TRITON_CMD_SPL_FN|0x05);
	}
	else if((0 == intp) && (1 == intl))
	{
		buffer[0] = (TAOS_TRITON_CMD_REG|TAOS_TRITON_CMD_SPL_FN|0x06);
	}
	else
#endif
	{
		buffer[0] = (TAOS_TRITON_CMD_REG|TAOS_TRITON_CMD_SPL_FN|0x07);
	}
	res = i2c_master_send(client, buffer, 0x1);
	if(res <= 0)
	{
		goto EXIT_ERR;
	}
	else
	{
		res = 0;
	}

	return res;

EXIT_ERR:
	APS_ERR("tmd2771_check_and_clear_intr fail\n");
	return 1;
}


/*-----------------------------------------------------------------------------*/
void tmd2771_eint_func(void)
{
	struct tmd2771_priv *obj = g_tmd2771_ptr;
	if(!obj)
	{
		return;
	}
	
	schedule_work(&obj->eint_work);
}

/*----------------------------------------------------------------------------*/
/*for interrup work mode support -- by liaoxl.lenovo 12.08.2011*/
int tmd2771_setup_eint(struct i2c_client *client)
{
	struct tmd2771_priv *obj = i2c_get_clientdata(client);        

	g_tmd2771_ptr = obj;
	
	mt_set_gpio_dir(GPIO_ALS_EINT_PIN, GPIO_DIR_IN);
	mt_set_gpio_mode(GPIO_ALS_EINT_PIN, GPIO_ALS_EINT_PIN_M_EINT);
	mt_set_gpio_pull_enable(GPIO_ALS_EINT_PIN, TRUE);
	mt_set_gpio_pull_select(GPIO_ALS_EINT_PIN, GPIO_PULL_UP);

	mt65xx_eint_set_sens(CUST_EINT_ALS_NUM, CUST_EINT_ALS_SENSITIVE);
	mt65xx_eint_set_polarity(CUST_EINT_ALS_NUM, CUST_EINT_ALS_POLARITY);
	mt65xx_eint_set_hw_debounce(CUST_EINT_ALS_NUM, CUST_EINT_ALS_DEBOUNCE_CN);
	mt65xx_eint_registration(CUST_EINT_ALS_NUM, CUST_EINT_ALS_DEBOUNCE_EN, CUST_EINT_ALS_POLARITY, tmd2771_eint_func, 0);

	mt65xx_eint_unmask(CUST_EINT_ALS_NUM);  
    return 0;
}

/*----------------------------------------------------------------------------*/

static int tmd2771_init_client_for_cali(struct i2c_client *client)
{

	struct tmd2771_priv *obj = i2c_get_clientdata(client);
	u8 databuf[2];    
	int res = 0;
   
	databuf[0] = TMD2771_CMM_ENABLE;    
	databuf[1] = 0x01;
	res = i2c_master_send(client, databuf, 0x2);
	if(res <= 0)
	{
		goto EXIT_ERR;
		return TMD2771_ERR_I2C;
	}
	
	databuf[0] = TMD2771_CMM_ATIME;    
	databuf[1] = 0xEE;//0xEE
	res = i2c_master_send(client, databuf, 0x2);
	if(res <= 0)
	{
		goto EXIT_ERR;
		return TMD2771_ERR_I2C;
	}

	databuf[0] = TMD2771_CMM_PTIME;    
	databuf[1] = 0xFF;
	res = i2c_master_send(client, databuf, 0x2);
	if(res <= 0)
	{
		goto EXIT_ERR;
		return TMD2771_ERR_I2C;
	}

	databuf[0] = TMD2771_CMM_WTIME;    
	databuf[1] = 0xFF;//0xFF
	res = i2c_master_send(client, databuf, 0x2);
	if(res <= 0)
	{
		goto EXIT_ERR;
		return TMD2771_ERR_I2C;
	}

	databuf[0] = TMD2771_CMM_CONFIG;    
	databuf[1] = 0x00;
	res = i2c_master_send(client, databuf, 0x2);
	if(res <= 0)
	{
		goto EXIT_ERR;
		return TMD2771_ERR_I2C;
	}

	databuf[0] = TMD2771_CMM_PPCOUNT;    
	databuf[1] = TMD2771_CMM_PPCOUNT_VALUE;//0x02
	res = i2c_master_send(client, databuf, 0x2);
	if(res <= 0)
	{
		goto EXIT_ERR;
		return TMD2771_ERR_I2C;
	}

	databuf[0] = TMD2771_CMM_CONTROL;    
	databuf[1] = 0x20;//0x22
	res = i2c_master_send(client, databuf, 0x2);
	if(res <= 0)
	{
		goto EXIT_ERR;
		return TMD2771_ERR_I2C;
	}
	databuf[0] = TMD2771_CMM_ENABLE;	
		databuf[1] = 0x0F;
		res = i2c_master_send(client, databuf, 0x2);
		if(res <= 0)
		{
			goto EXIT_ERR;
			return TMD2771_ERR_I2C;
		}

	return TMD2771_SUCCESS;

EXIT_ERR:
	APS_ERR("init dev: %d\n", res);
	return res;

}

static int tmd2771_init_client(struct i2c_client *client)
{
	struct tmd2771_priv *obj = i2c_get_clientdata(client);
	u8 databuf[2];    
	int res = 0;
   
	databuf[0] = TMD2771_CMM_ENABLE;    
	databuf[1] = 0x00;
	res = i2c_master_send(client, databuf, 0x2);
	if(res <= 0)
	{
		goto EXIT_ERR;
		return TMD2771_ERR_I2C;
	}
	
	databuf[0] = TMD2771_CMM_ATIME;    
	databuf[1] = 0xC9;
	res = i2c_master_send(client, databuf, 0x2);
	if(res <= 0)
	{
		goto EXIT_ERR;
		return TMD2771_ERR_I2C;
	}

	databuf[0] = TMD2771_CMM_PTIME;    
	databuf[1] = 0xFF;
	res = i2c_master_send(client, databuf, 0x2);
	if(res <= 0)
	{
		goto EXIT_ERR;
		return TMD2771_ERR_I2C;
	}

	databuf[0] = TMD2771_CMM_WTIME;    
	databuf[1] = 0xEE;
	res = i2c_master_send(client, databuf, 0x2);
	if(res <= 0)
	{
		goto EXIT_ERR;
		return TMD2771_ERR_I2C;
	}
	/*for interrup work mode support -- by liaoxl.lenovo 12.08.2011*/
	if(0 == obj->hw->polling_mode_ps)
	{
		if(1 == ps_cali.valid)
		{
			databuf[0] = TMD2771_CMM_INT_LOW_THD_LOW;	
			databuf[1] = (u8)(ps_cali.far_away & 0x00FF);
			res = i2c_master_send(client, databuf, 0x2);
			if(res <= 0)
			{
				goto EXIT_ERR;
				return TMD2771_ERR_I2C;
			}
			databuf[0] = TMD2771_CMM_INT_LOW_THD_HIGH;	
			databuf[1] = (u8)((ps_cali.far_away & 0xFF00) >> 8);
			res = i2c_master_send(client, databuf, 0x2);
			if(res <= 0)
			{
				goto EXIT_ERR;
				return TMD2771_ERR_I2C;
			}
			databuf[0] = TMD2771_CMM_INT_HIGH_THD_LOW;	
			databuf[1] = (u8)(ps_cali.close & 0x00FF);
			res = i2c_master_send(client, databuf, 0x2);
			if(res <= 0)
			{
				goto EXIT_ERR;
				return TMD2771_ERR_I2C;
			}
			databuf[0] = TMD2771_CMM_INT_HIGH_THD_HIGH;	
			databuf[1] = (u8)((ps_cali.close & 0xFF00) >> 8);;
			res = i2c_master_send(client, databuf, 0x2);
			if(res <= 0)
			{
				goto EXIT_ERR;
				return TMD2771_ERR_I2C;
			}
		}
		else
		{
			databuf[0] = TMD2771_CMM_INT_LOW_THD_LOW;	
			databuf[1] = (u8)(atomic_read(&obj->ps_thd_val_low) & 0x00FF);
			res = i2c_master_send(client, databuf, 0x2);
			if(res <= 0)
			{
				goto EXIT_ERR;
				return TMD2771_ERR_I2C;
			}
			databuf[0] = TMD2771_CMM_INT_LOW_THD_HIGH;	
			databuf[1] = (u8)((atomic_read(&obj->ps_thd_val_low) & 0xFF00) >> 8);
			res = i2c_master_send(client, databuf, 0x2);
			if(res <= 0)
			{
				goto EXIT_ERR;
				return TMD2771_ERR_I2C;
			}
			databuf[0] = TMD2771_CMM_INT_HIGH_THD_LOW;	
			databuf[1] = (u8)(atomic_read(&obj->ps_thd_val_high) & 0x00FF);
			res = i2c_master_send(client, databuf, 0x2);
			if(res <= 0)
			{
				goto EXIT_ERR;
				return TMD2771_ERR_I2C;
			}
			databuf[0] = TMD2771_CMM_INT_HIGH_THD_HIGH;	
			databuf[1] = (u8)((atomic_read(&obj->ps_thd_val_high) & 0xFF00) >> 8);;
			res = i2c_master_send(client, databuf, 0x2);
			if(res <= 0)
			{
				goto EXIT_ERR;
				return TMD2771_ERR_I2C;
			}

		}

		databuf[0] = TMD2771_CMM_Persistence;
		databuf[1] = 0x20;
		res = i2c_master_send(client, databuf, 0x2);
		if(res <= 0)
		{
			goto EXIT_ERR;
			return TMD2771_ERR_I2C;
		}
		databuf[0] = TMD2771_CMM_ENABLE;	
		databuf[1] = 0x20;
		res = i2c_master_send(client, databuf, 0x2);
		if(res <= 0)
		{
			goto EXIT_ERR;
			return TMD2771_ERR_I2C;
		}

	}

	databuf[0] = TMD2771_CMM_CONFIG;    
	databuf[1] = 0x00;
	res = i2c_master_send(client, databuf, 0x2);
	if(res <= 0)
	{
		goto EXIT_ERR;
		return TMD2771_ERR_I2C;
	}

       /*Lenovo-sw chenlj2 add 2011-06-03,modified pulse 2  to 4 */
	databuf[0] = TMD2771_CMM_PPCOUNT;    
	databuf[1] = TMD2771_CMM_PPCOUNT_VALUE;
	res = i2c_master_send(client, databuf, 0x2);
	if(res <= 0)
	{
		goto EXIT_ERR;
		return TMD2771_ERR_I2C;
	}

        /*Lenovo-sw chenlj2 add 2011-06-03,modified gain 16  to 1 */
	databuf[0] = TMD2771_CMM_CONTROL;    
	databuf[1] = 0x20;
	res = i2c_master_send(client, databuf, 0x2);
	if(res <= 0)
	{
		goto EXIT_ERR;
		return TMD2771_ERR_I2C;
	}
	/*for interrup work mode support -- by liaoxl.lenovo 12.08.2011*/
	if(res = tmd2771_setup_eint(client))
	{
		APS_ERR("setup eint: %d\n", res);
		return res;
	}
	if(res = tmd2771_check_and_clear_intr(client))
	{
		APS_ERR("check/clear intr: %d\n", res);
		//    return res;
	}
	
	return TMD2771_SUCCESS;

EXIT_ERR:
	APS_ERR("init dev: %d\n", res);
	return res;
}

/****************************************************************************** 
 * Function Configuration
******************************************************************************/
int tmd2771_read_als(struct i2c_client *client, u16 *data)
{
	struct tmd2771_priv *obj = i2c_get_clientdata(client);	 
	u16 c0_value, c1_value;	 
	u32 c0_nf, c1_nf;
	u8 als_value_low[1], als_value_high[1];
	u8 buffer[1];
	u16 atio;
	u16 als_value;
	int res = 0;
	u8 reg_value[1];
	
	if(client == NULL)
	{
		APS_DBG("CLIENT CANN'T EQUL NULL\n");
		return -1;
	}

	/*debug tag for yucong*/
	#if 1
	buffer[0]=TMD2771_CMM_ENABLE;
	res = i2c_master_send(client, buffer, 0x1);
	if(res <= 0)
	{
		goto EXIT_ERR;
	}
	res = i2c_master_recv(client, reg_value, 0x1);
	if(res <= 0)
	{
		goto EXIT_ERR;
	}
	printk("Yucong:0x%x, %d, %s\n", reg_value[0], __LINE__, __FUNCTION__);
	#endif
//get adc channel 0 value
	buffer[0]=TMD2771_CMM_C0DATA_L;
	res = i2c_master_send(client, buffer, 0x1);
	if(res <= 0)
	{
		goto EXIT_ERR;
	}
	res = i2c_master_recv(client, als_value_low, 0x1);
	if(res <= 0)
	{
		goto EXIT_ERR;
	}
	printk("yucong: TMD2771_CMM_C0DATA_L = 0x%x\n", als_value_low[0]);

	buffer[0]=TMD2771_CMM_C0DATA_H;
	res = i2c_master_send(client, buffer, 0x1);
	if(res <= 0)
	{
		goto EXIT_ERR;
	}
	res = i2c_master_recv(client, als_value_high, 0x01);
	if(res <= 0)
	{
		goto EXIT_ERR;
	}
	printk("yucong: TMD2771_CMM_C0DATA_H = 0x%x\n", als_value_high[0]);
	c0_value = als_value_low[0] | (als_value_high[0]<<8);
	c0_nf = obj->als_modulus*c0_value;
	APS_DBG("c0_value=%d, c0_nf=%d, als_modulus=%d\n", c0_value, c0_nf, obj->als_modulus);

//get adc channel 1 value
	buffer[0]=TMD2771_CMM_C1DATA_L;
	res = i2c_master_send(client, buffer, 0x1);
	if(res <= 0)
	{
		goto EXIT_ERR;
	}
	res = i2c_master_recv(client, als_value_low, 0x1);
	if(res <= 0)
	{
		goto EXIT_ERR;
	}
	printk("yucong: TMD2771_CMM_C1DATA_L = 0x%x\n", als_value_low[0]);	

	buffer[0]=TMD2771_CMM_C1DATA_H;
	res = i2c_master_send(client, buffer, 0x1);
	if(res <= 0)
	{
		goto EXIT_ERR;
	}
	res = i2c_master_recv(client, als_value_high, 0x01);
	if(res <= 0)
	{
		goto EXIT_ERR;
	}
	printk("yucong: TMD2771_CMM_C1DATA_H = 0x%x\n", als_value_high[0]);	

	c1_value = als_value_low[0] | (als_value_high[0]<<8);
	c1_nf = obj->als_modulus*c1_value;	
	APS_DBG("c1_value=%d, c1_nf=%d, als_modulus=%d\n", c1_value, c1_nf, obj->als_modulus);

	if((c0_value > c1_value) &&(c0_value < 50000))
	{  	/*Lenovo-sw chenlj2 add 2011-06-03,add {*/
		atio = (c1_nf*100)/c0_nf;

	APS_DBG("atio = %d\n", atio);
	if(atio<30)
	{
		*data = (13*c0_nf - 24*c1_nf)/10000;
	}
	else if(atio>= 30 && atio<38) /*Lenovo-sw chenlj2 add 2011-06-03,modify > to >=*/
	{ 
		*data = (16*c0_nf - 35*c1_nf)/10000;
	}
	else if(atio>= 38 && atio<45)  /*Lenovo-sw chenlj2 add 2011-06-03,modify > to >=*/
	{ 
		*data = (9*c0_nf - 17*c1_nf)/10000;
	}
	else if(atio>= 45 && atio<54) /*Lenovo-sw chenlj2 add 2011-06-03,modify > to >=*/
	{ 
		*data = (6*c0_nf - 10*c1_nf)/10000;
	}
	else
		*data = 0;
	/*Lenovo-sw chenlj2 add 2011-06-03,add }*/
    }
	else if (c0_value > 50000)
	{
		*data = 65535;
	}
	else if(c0_value == 0)
        {
                *data = 0;
        }
        else
	{
		APS_DBG("als_value is invalid!!\n");
		return -1;
	}	
	APS_DBG("als_value_lux = %d\n", *data);
	//printk("yucong: als_value_lux = %d\n", *data);
	return 0;	 

	
	
EXIT_ERR:
	APS_ERR("tmd2771_read_ps fail\n");
	return res;
}
int tmd2771_read_als_ch0(struct i2c_client *client, u16 *data)
{
	struct tmd2771_priv *obj = i2c_get_clientdata(client);	 
	u16 c0_value;	 
	u8 als_value_low[1], als_value_high[1];
	u8 buffer[1];
	int res = 0;
	
	if(client == NULL)
	{
		APS_DBG("CLIENT CANN'T EQUL NULL\n");
		return -1;
	}
//get adc channel 0 value
	buffer[0]=TMD2771_CMM_C0DATA_L;
	res = i2c_master_send(client, buffer, 0x1);
	if(res <= 0)
	{
		goto EXIT_ERR;
	}
	res = i2c_master_recv(client, als_value_low, 0x1);
	if(res <= 0)
	{
		goto EXIT_ERR;
	}
	
	buffer[0]=TMD2771_CMM_C0DATA_H;
	res = i2c_master_send(client, buffer, 0x1);
	if(res <= 0)
	{
		goto EXIT_ERR;
	}
	res = i2c_master_recv(client, als_value_high, 0x01);
	if(res <= 0)
	{
		goto EXIT_ERR;
	}
	
	c0_value = als_value_low[0] | (als_value_high[0]<<8);
	*data = c0_value;
	return 0;	 

	
	
EXIT_ERR:
	APS_ERR("tmd2771_read_ps fail\n");
	return res;
}
/*----------------------------------------------------------------------------*/

static int tmd2771_get_als_value(struct tmd2771_priv *obj, u16 als)
{
	int idx;
	int invalid = 0;
	for(idx = 0; idx < obj->als_level_num; idx++)
	{
		if(als < obj->hw->als_level[idx])
		{
			break;
		}
	}
	
	if(idx >= obj->als_value_num)
	{
		APS_ERR("exceed range\n"); 
		idx = obj->als_value_num - 1;
	}
	
	if(1 == atomic_read(&obj->als_deb_on))
	{
		unsigned long endt = atomic_read(&obj->als_deb_end);
		if(time_after(jiffies, endt))
		{
			atomic_set(&obj->als_deb_on, 0);
		}
		
		if(1 == atomic_read(&obj->als_deb_on))
		{
			invalid = 1;
		}
	}

	if(!invalid)
	{
		APS_DBG("ALS: %05d => %05d\n", als, obj->hw->als_value[idx]);	
		return obj->hw->als_value[idx];
	}
	else
	{
		APS_ERR("ALS: %05d => %05d (-1)\n", als, obj->hw->als_value[idx]);    
		return -1;
	}
}
/*----------------------------------------------------------------------------*/
long tmd2771_read_ps(struct i2c_client *client, u16 *data)
{
	struct tmd2771_priv *obj = i2c_get_clientdata(client);    
	u16 ps_value;    
	u8 ps_value_low[1], ps_value_high[1];
	u8 buffer[1];
	long res = 0;

	if(client == NULL)
	{
		APS_DBG("CLIENT CANN'T EQUL NULL\n");
		return -1;
	}

	buffer[0]=TMD2771_CMM_PDATA_L;
	res = i2c_master_send(client, buffer, 0x1);
	if(res <= 0)
	{
		goto EXIT_ERR;
	}
	res = i2c_master_recv(client, ps_value_low, 0x1);
	if(res <= 0)
	{
		goto EXIT_ERR;
	}

	buffer[0]=TMD2771_CMM_PDATA_H;
	res = i2c_master_send(client, buffer, 0x1);
	if(res <= 0)
	{
		goto EXIT_ERR;
	}
	res = i2c_master_recv(client, ps_value_high, 0x01);
	if(res <= 0)
	{
		goto EXIT_ERR;
	}

	*data = ps_value_low[0] | (ps_value_high[0]<<8);
	APS_DBG("ps_data=%d, low:%d  high:%d", *data, ps_value_low[0], ps_value_high[0]);
	return 0;    

EXIT_ERR:
	APS_ERR("tmd2771_read_ps fail\n");
	return res;
}
/*----------------------------------------------------------------------------*/
static int tmd2771_get_ps_value(struct tmd2771_priv *obj, u16 ps)
{
	int val, mask = atomic_read(&obj->ps_mask);
	int invalid = 0;
	static int val_temp=1;
	 /*Lenovo-sw chenlj2 add 2011-10-12 begin*/
	 u16 temp_ps[1];
	 /*Lenovo-sw chenlj2 add 2011-10-12 end*/
	 
	
	//APS_LOG("tmd2771_get_ps_value  1 %d," ,ps_cali.close);
	//APS_LOG("tmd2771_get_ps_value  2 %d," ,ps_cali.far_away);
	//APS_LOG("tmd2771_get_ps_value  3 %d,", ps_cali.valid);

	APS_LOG("tmd2771_get_ps_value  ps %d,", ps);
    /*Lenovo-sw zhuhc delete 2011-10-12 begin*/
	//return 1;
    /*Lenovo-sw zhuhc delete 2011-10-12 end*/

        mdelay(160);
	tmd2771_read_ps(obj->client,temp_ps);
	APS_LOG("tmd2771_get_temp_ps_value  temp_ps[0] %d,", temp_ps[0]);
	if(ps_cali.valid == 1)
		{
			APS_LOG("tmd2771_get_ps_value val_temp  = %d",val_temp);
			if((ps >ps_cali.close)&&(temp_ps[0] >ps_cali.close))
			{
				val = 0;  /*close*/
				val_temp = 0;
				intr_flag_value = 1;
			}
			else if((ps <ps_cali.far_away)&&(temp_ps[0] < ps_cali.far_away))
			{
				val = 1;  /*far away*/
				val_temp = 1;
				intr_flag_value = 0;
			}
			else
				val = val_temp;

			APS_LOG("tmd2771_get_ps_value val  = %d",val);
	}
	else
	{
			if((ps > atomic_read(&obj->ps_thd_val_high))&&(temp_ps[0]  > atomic_read(&obj->ps_thd_val_high)))
			{
				val = 0;  /*close*/
				val_temp = 0;
				intr_flag_value = 1;
			}
			else if((ps < atomic_read(&obj->ps_thd_val_low))&&(temp_ps[0]  < atomic_read(&obj->ps_thd_val_low)))
			{
				val = 1;  /*far away*/
				val_temp = 1;
				intr_flag_value = 0;
			}
			else
			       val = val_temp;	
			
	}
	
	if(atomic_read(&obj->ps_suspend))
	{
		invalid = 1;
	}
	else if(1 == atomic_read(&obj->ps_deb_on))
	{
		unsigned long endt = atomic_read(&obj->ps_deb_end);
		if(time_after(jiffies, endt))
		{
			atomic_set(&obj->ps_deb_on, 0);
		}
		
		if (1 == atomic_read(&obj->ps_deb_on))
		{
			invalid = 1;
		}
	}
	else if (obj->als > 45000)
	{
		//invalid = 1;
		APS_DBG("ligh too high will result to failt proximiy\n");
		return 1;  /*far away*/
	}

	if(!invalid)
	{
		APS_DBG("PS:  %05d => %05d\n", ps, val);
		return val;
	}	
	else
	{
		return -1;
	}	
}


/*----------------------------------------------------------------------------*/
/*for interrup work mode support -- by liaoxl.lenovo 12.08.2011*/
static void tmd2771_eint_work(struct work_struct *work)
{
	struct tmd2771_priv *obj = (struct tmd2771_priv *)container_of(work, struct tmd2771_priv, eint_work);
	int err;
	hwm_sensor_data sensor_data;
	u8 buffer[1];
	u8 reg_value[1];
	u8 databuf[2];
	int res = 0;

	if((err = tmd2771_check_intr(obj->client)))
	{
		APS_ERR("tmd2771_eint_work check intrs: %d\n", err);
	}
	else
	{
		//get raw data
		tmd2771_read_ps(obj->client, &obj->ps);
		//mdelay(160);
		tmd2771_read_als_ch0(obj->client, &obj->als);
		APS_DBG("tmd2771_eint_work rawdata ps=%d als_ch0=%d!\n",obj->ps,obj->als);
		//printk("tmd2771_eint_work rawdata ps=%d als_ch0=%d!\n",obj->ps,obj->als);
		sensor_data.values[0] = tmd2771_get_ps_value(obj, obj->ps);
		sensor_data.value_divide = 1;
		sensor_data.status = SENSOR_STATUS_ACCURACY_MEDIUM;			
/*singal interrupt function add*/
#if 1
		if(intr_flag_value){
				printk("yucong interrupt value ps will < 750");
				databuf[0] = TMD2771_CMM_INT_LOW_THD_LOW;	
				databuf[1] = (u8)((atomic_read(&obj->ps_thd_val_low)) & 0x00FF);
				res = i2c_master_send(obj->client, databuf, 0x2);
				if(res <= 0)
				{
					return;
				}
				databuf[0] = TMD2771_CMM_INT_LOW_THD_HIGH;	
				databuf[1] = (u8)(((atomic_read(&obj->ps_thd_val_low)) & 0xFF00) >> 8);
				res = i2c_master_send(obj->client, databuf, 0x2);
				if(res <= 0)
				{
					return;
				}
				databuf[0] = TMD2771_CMM_INT_HIGH_THD_LOW;	
				databuf[1] = (u8)(0x00FF);
				res = i2c_master_send(obj->client, databuf, 0x2);
				if(res <= 0)
				{
					return;
				}
				databuf[0] = TMD2771_CMM_INT_HIGH_THD_HIGH; 
				databuf[1] = (u8)((0xFF00) >> 8);;
				res = i2c_master_send(obj->client, databuf, 0x2);
				if(res <= 0)
				{
					return;
				}
		}
		else{	
				printk("yucong interrupt value ps will > 900");
				databuf[0] = TMD2771_CMM_INT_LOW_THD_LOW;	
				databuf[1] = (u8)(0 & 0x00FF);
				res = i2c_master_send(obj->client, databuf, 0x2);
				if(res <= 0)
				{
					return;
				}
				databuf[0] = TMD2771_CMM_INT_LOW_THD_HIGH;	
				databuf[1] = (u8)((0 & 0xFF00) >> 8);
				res = i2c_master_send(obj->client, databuf, 0x2);
				if(res <= 0)
				{
					return;
				}
				databuf[0] = TMD2771_CMM_INT_HIGH_THD_LOW;	
				databuf[1] = (u8)((atomic_read(&obj->ps_thd_val_high)) & 0x00FF);
				res = i2c_master_send(obj->client, databuf, 0x2);
				if(res <= 0)
				{
					return;
				}
				databuf[0] = TMD2771_CMM_INT_HIGH_THD_HIGH; 
				databuf[1] = (u8)(((atomic_read(&obj->ps_thd_val_high)) & 0xFF00) >> 8);;
				res = i2c_master_send(obj->client, databuf, 0x2);
				if(res <= 0)
				{
					return;
				}
		}
#endif
		//let up layer to know
		if((err = hwmsen_get_interrupt_data(ID_PROXIMITY, &sensor_data)))
		{
		  APS_ERR("call hwmsen_get_interrupt_data fail = %d\n", err);
		}
	}
	tmd2771_clear_intr(obj->client);
	mt65xx_eint_unmask(CUST_EINT_ALS_NUM);      
}


/****************************************************************************** 
 * Function Configuration
******************************************************************************/
static int tmd2771_open(struct inode *inode, struct file *file)
{
	file->private_data = tmd2771_i2c_client;

	if (!file->private_data)
	{
		APS_ERR("null pointer!!\n");
		return -EINVAL;
	}
	
	return nonseekable_open(inode, file);
}
/*----------------------------------------------------------------------------*/
static int tmd2771_release(struct inode *inode, struct file *file)
{
	file->private_data = NULL;
	return 0;
}

static tmd2771_WriteCalibration(struct PS_CALI_DATA_STRUCT *data_cali)
{

	   APS_LOG("tmd2771_WriteCalibration  1 %d," ,data_cali->close);
		   APS_LOG("tmd2771_WriteCalibration  2 %d," ,data_cali->far_away);
		   APS_LOG("tmd2771_WriteCalibration  3 %d,", data_cali->valid);
		   
	  if(data_cali->valid == 1)
	  {
	      if(data_cali->close < 100)
	      	{
		  	ps_cali.close = 200;
			ps_cali.far_away= 150;
			ps_cali.valid = 1;
	      	}
		  else if(data_cali->close > 900)
		  {
		  	ps_cali.close = 900;
			ps_cali.far_away= 750;
			ps_cali.valid = 1;
	      	}
		  else
		  {
			  ps_cali.close = data_cali->close;
			ps_cali.far_away= data_cali->far_away;
			ps_cali.valid = 1;
		  }
	  }
	  

}

static int tmd2771_read_data_for_cali(struct i2c_client *client, struct PS_CALI_DATA_STRUCT *ps_data_cali)
{
     int i=0 ,err = 0,j = 0;
	 u16 data[21],sum,data_cali;

	 for(i = 0;i<20;i++)
	 	{
	 		mdelay(5);//50
			if(err = tmd2771_read_ps(client,&data[i]))
			{
				APS_ERR("tmd2771_read_data_for_cali fail: %d\n", i); 
				break;
			}
			else
				{
					sum += data[i];
			}
			mdelay(55);//160
	 	}
	 
	 for(j = 0;j<20;j++)
	 	APS_LOG("%d\t",data[j]);
	 
	 if(i == 20)
	 	{
			data_cali = sum/20;
			APS_LOG("tmd2771_read_data_for_cali data = %d",data_cali);
			if(data_cali>600)
			return -1;
			if(data_cali<=100)
			{
				ps_data_cali->close =data_cali*22/10;
				ps_data_cali->far_away = data_cali*19/10;
				ps_data_cali->valid =1;
			}
			else if(100<data_cali&&data_cali<300)
			{
				ps_data_cali->close = data_cali*2;
				ps_data_cali->far_away =data_cali*17/10;
				ps_data_cali->valid = 1;
			}
			else
			{
				ps_data_cali->close = data_cali*18/10;
				ps_data_cali->far_away =data_cali*15/10;
				ps_data_cali->valid = 1;
			}
		        if(ps_data_cali->close > 900)
		       {
		  	ps_data_cali->close = 900;
			ps_data_cali->far_away = 750;
			err= 0;
	         	}
			else  if(ps_data_cali->close < 100)
			{
			   ps_data_cali->close = 200;
			   ps_data_cali->far_away = 150;
			   err= 0;
			}

			ps_cali.close = ps_data_cali->close;
			ps_cali.far_away= ps_data_cali->far_away;
			ps_cali.valid = 1;
			APS_LOG("tmd2771_read_data_for_cali close  = %d,far_away = %d,valid = %d",ps_data_cali->close,ps_data_cali->far_away,ps_data_cali->valid);
	
	 	}
	 else
	 	{
	 	ps_data_cali->valid = 0;
	 	err=  -1;
	 	}
	 return err;
	 	

}


/*----------------------------------------------------------------------------*/
static long tmd2771_unlocked_ioctl(struct file *file, unsigned int cmd,
       unsigned long arg)
{
	struct i2c_client *client = (struct i2c_client*)file->private_data;
	struct tmd2771_priv *obj = i2c_get_clientdata(client);  
	long err = 0;
	void __user *ptr = (void __user*) arg;
	int dat;
	uint32_t enable;
	struct PS_CALI_DATA_STRUCT ps_cali_temp;

	switch (cmd)
	{
		case ALSPS_SET_PS_MODE:
			if(copy_from_user(&enable, ptr, sizeof(enable)))
			{
				err = -EFAULT;
				goto err_out;
			}
			if(enable)
			{
				if(err = tmd2771_enable_ps(obj->client, 1))
				{
					APS_ERR("enable ps fail: %d\n", err); 
					goto err_out;
				}
				
				set_bit(CMC_BIT_PS, &obj->enable);
			}
			else
			{
				if(err = tmd2771_enable_ps(obj->client, 0))
				{
					APS_ERR("disable ps fail: %d\n", err); 
					goto err_out;
				}
				
				clear_bit(CMC_BIT_PS, &obj->enable);
			}
			break;

		case ALSPS_GET_PS_MODE:
			enable = test_bit(CMC_BIT_PS, &obj->enable) ? (1) : (0);
			if(copy_to_user(ptr, &enable, sizeof(enable)))
			{
				err = -EFAULT;
				goto err_out;
			}
			break;

		case ALSPS_GET_PS_DATA:    
			if(err = tmd2771_read_ps(obj->client, &obj->ps))
			{
				goto err_out;
			}
			
			dat = tmd2771_get_ps_value(obj, obj->ps);
			if(copy_to_user(ptr, &dat, sizeof(dat)))
			{
				err = -EFAULT;
				goto err_out;
			}  
			break;

		case ALSPS_GET_PS_RAW_DATA:    
			if(err = tmd2771_read_ps(obj->client, &obj->ps))
			{
				goto err_out;
			}
			
			dat = obj->ps;
			if(dat > atomic_read(&obj->ps_thd_val_high))
		
				dat = 0x80;
			else
				dat = 0x00;
			if(copy_to_user(ptr, &dat, sizeof(dat)))
			{
				err = -EFAULT;
				goto err_out;
			}  
			break;              

		case ALSPS_SET_ALS_MODE:
			if(copy_from_user(&enable, ptr, sizeof(enable)))
			{
				err = -EFAULT;
				goto err_out;
			}
			if(enable)
			{
				if(err = tmd2771_enable_als(obj->client, 1))
				{
					APS_ERR("enable als fail: %d\n", err); 
					goto err_out;
				}
				set_bit(CMC_BIT_ALS, &obj->enable);
			}
			else
			{
				if(err = tmd2771_enable_als(obj->client, 0))
				{
					APS_ERR("disable als fail: %d\n", err); 
					goto err_out;
				}
				clear_bit(CMC_BIT_ALS, &obj->enable);
			}
			break;

		case ALSPS_GET_ALS_MODE:
			enable = test_bit(CMC_BIT_ALS, &obj->enable) ? (1) : (0);
			if(copy_to_user(ptr, &enable, sizeof(enable)))
			{
				err = -EFAULT;
				goto err_out;
			}
			break;

		case ALSPS_GET_ALS_DATA: 
			if(err = tmd2771_read_als(obj->client, &obj->als))
			{
				goto err_out;
			}

			dat = tmd2771_get_als_value(obj, obj->als);
			if(copy_to_user(ptr, &dat, sizeof(dat)))
			{
				err = -EFAULT;
				goto err_out;
			}              
			break;

		case ALSPS_GET_ALS_RAW_DATA:    
			if(err = tmd2771_read_als(obj->client, &obj->als))
			{
				goto err_out;
			}

			dat = obj->als;
			if(copy_to_user(ptr, &dat, sizeof(dat)))
			{
				err = -EFAULT;
				goto err_out;
			}              
			break;

/*		case ALSPS_SET_PS_CALI:
			dat = (void __user*)arg;
			if(dat == NULL)
			{
				APS_LOG("dat == NULL\n");
				err = -EINVAL;
				break;	  
			}
			if(copy_from_user(&ps_cali_temp,dat, sizeof(ps_cali_temp)))
			{
				APS_LOG("copy_from_user\n");
				err = -EFAULT;
				break;	  
			}
			tmd2771_WriteCalibration(&ps_cali_temp);
			APS_LOG(" ALSPS_SET_PS_CALI %d,%d,%d\t",ps_cali_temp.close,ps_cali_temp.far_away,ps_cali_temp.valid);
			break;
		case ALSPS_GET_PS_RAW_DATA_FOR_CALI:
			tmd2771_init_client_for_cali(obj->client);
			err = tmd2771_read_data_for_cali(obj->client,&ps_cali_temp);
			if(err)
			{
			   goto err_out;
			}
			tmd2771_init_client(obj->client);
			// tmd2771_enable_ps(obj->client, 1);
			tmd2771_enable(obj->client, 0);
			if(copy_to_user(ptr, &ps_cali_temp, sizeof(ps_cali_temp)))
			{
				err = -EFAULT;
				goto err_out;
			}              
			break;
*/
		default:
			APS_ERR("%s not supported = 0x%04x", __FUNCTION__, cmd);
			err = -ENOIOCTLCMD;
			break;
	}

	err_out:
	return err;    
}
/*----------------------------------------------------------------------------*/
static struct file_operations tmd2771_fops = {
	.owner = THIS_MODULE,
	.open = tmd2771_open,
	.release = tmd2771_release,
	.unlocked_ioctl = tmd2771_unlocked_ioctl,
};
/*----------------------------------------------------------------------------*/
static struct miscdevice tmd2771_device = {
	.minor = MISC_DYNAMIC_MINOR,
	.name = "als_ps",
	.fops = &tmd2771_fops,
};
/*----------------------------------------------------------------------------*/
static int tmd2771_i2c_suspend(struct i2c_client *client, pm_message_t msg) 
{
	//struct tmd2771_priv *obj = i2c_get_clientdata(client);    
	//int err;
	APS_FUN();    
#if 0
	if(msg.event == PM_EVENT_SUSPEND)
	{   
		if(!obj)
		{
			APS_ERR("null pointer!!\n");
			return -EINVAL;
		}
		
		atomic_set(&obj->als_suspend, 1);
		if(err = tmd2771_enable_als(client, 0))
		{
			APS_ERR("disable als: %d\n", err);
			return err;
		}

		atomic_set(&obj->ps_suspend, 1);
		if(err = tmd2771_enable_ps(client, 0))
		{
			APS_ERR("disable ps:  %d\n", err);
			return err;
		}
		
		tmd2771_power(obj->hw, 0);
	}
#endif
	return 0;
}
/*----------------------------------------------------------------------------*/
static int tmd2771_i2c_resume(struct i2c_client *client)
{
	//struct tmd2771_priv *obj = i2c_get_clientdata(client);        
	//int err;
	APS_FUN();
#if 0
	if(!obj)
	{
		APS_ERR("null pointer!!\n");
		return -EINVAL;
	}

	tmd2771_power(obj->hw, 1);
	if(err = tmd2771_init_client(client))
	{
		APS_ERR("initialize client fail!!\n");
		return err;        
	}
	atomic_set(&obj->als_suspend, 0);
	if(test_bit(CMC_BIT_ALS, &obj->enable))
	{
		if(err = tmd2771_enable_als(client, 1))
		{
			APS_ERR("enable als fail: %d\n", err);        
		}
	}
	atomic_set(&obj->ps_suspend, 0);
	if(test_bit(CMC_BIT_PS,  &obj->enable))
	{
		if(err = tmd2771_enable_ps(client, 1))
		{
			APS_ERR("enable ps fail: %d\n", err);                
		}
	}
#endif
	return 0;
}
/*----------------------------------------------------------------------------*/
static void tmd2771_early_suspend(struct early_suspend *h) 
{   /*early_suspend is only applied for ALS*/
	struct tmd2771_priv *obj = container_of(h, struct tmd2771_priv, early_drv);   
	int err;
	APS_FUN();    

	if(!obj)
	{
		APS_ERR("null pointer!!\n");
		return;
	}

	#if 1
	atomic_set(&obj->als_suspend, 1);
	if(test_bit(CMC_BIT_ALS, &obj->enable))
	{
		if(err = tmd2771_enable_als(obj->client, 0))
		{
			APS_ERR("disable als fail: %d\n", err); 
		}
	}
	#endif
}
/*----------------------------------------------------------------------------*/
static void tmd2771_late_resume(struct early_suspend *h)
{   /*early_suspend is only applied for ALS*/
	struct tmd2771_priv *obj = container_of(h, struct tmd2771_priv, early_drv);         
	int err;
	APS_FUN();

	if(!obj)
	{
		APS_ERR("null pointer!!\n");
		return;
	}

        #if 1
	atomic_set(&obj->als_suspend, 0);
	if(test_bit(CMC_BIT_ALS, &obj->enable))
	{
		if(err = tmd2771_enable_als(obj->client, 1))
		{
			APS_ERR("enable als fail: %d\n", err);        

		}
	}
	#endif
}

int tmd2771_ps_operate(void* self, uint32_t command, void* buff_in, int size_in,
		void* buff_out, int size_out, int* actualout)
{
	int err = 0;
	int value;
	hwm_sensor_data* sensor_data;
	struct tmd2771_priv *obj = (struct tmd2771_priv *)self;
	
	//APS_FUN(f);
	switch (command)
	{
		case SENSOR_DELAY:
			if((buff_in == NULL) || (size_in < sizeof(int)))
			{
				APS_ERR("Set delay parameter error!\n");
				err = -EINVAL;
			}
			// Do nothing
			break;

		case SENSOR_ENABLE:
			if((buff_in == NULL) || (size_in < sizeof(int)))
			{
				APS_ERR("Enable sensor parameter error!\n");
				err = -EINVAL;
			}
			else
			{				
				value = *(int *)buff_in;
				if(value)
				{
					if(err = tmd2771_enable_ps(obj->client, 1))
					{
						APS_ERR("enable ps fail: %d\n", err); 
						return -1;
					}
					set_bit(CMC_BIT_PS, &obj->enable);
					#if 0	
					if(err = tmd2771_enable_als(obj->client, 1))
					{
						APS_ERR("enable als fail: %d\n", err); 
						return -1;
					}
					set_bit(CMC_BIT_ALS, &obj->enable);
					#endif
				}
				else
				{
					if(err = tmd2771_enable_ps(obj->client, 0))
					{
						APS_ERR("disable ps fail: %d\n", err); 
						return -1;
					}
					clear_bit(CMC_BIT_PS, &obj->enable);
					#if 0
					if(err = tmd2771_enable_als(obj->client, 0))
					{
						APS_ERR("disable als fail: %d\n", err); 
						return -1;
					}
					clear_bit(CMC_BIT_ALS, &obj->enable);
					#endif
				}
			}
			break;

		case SENSOR_GET_DATA:
			if((buff_out == NULL) || (size_out< sizeof(hwm_sensor_data)))
			{
				APS_ERR("get sensor data parameter error!\n");
				err = -EINVAL;
			}
			else
			{
				sensor_data = (hwm_sensor_data *)buff_out;	
				tmd2771_read_ps(obj->client, &obj->ps);
				
                                //mdelay(160);
				tmd2771_read_als_ch0(obj->client, &obj->als);
				APS_ERR("tmd2771_ps_operate als data=%d!\n",obj->als);
				sensor_data->values[0] = tmd2771_get_ps_value(obj, obj->ps);
				sensor_data->value_divide = 1;
				sensor_data->status = SENSOR_STATUS_ACCURACY_MEDIUM;			
			}
			break;
		default:
			APS_ERR("proxmy sensor operate function no this parameter %d!\n", command);
			err = -1;
			break;
	}
	
	return err;
}

int tmd2771_als_operate(void* self, uint32_t command, void* buff_in, int size_in,
		void* buff_out, int size_out, int* actualout)
{
	int err = 0;
	int value;
	hwm_sensor_data* sensor_data;
	struct tmd2771_priv *obj = (struct tmd2771_priv *)self;

	switch (command)
	{
		case SENSOR_DELAY:
			if((buff_in == NULL) || (size_in < sizeof(int)))
			{
				APS_ERR("Set delay parameter error!\n");
				err = -EINVAL;
			}
			// Do nothing
			break;

		case SENSOR_ENABLE:
			if((buff_in == NULL) || (size_in < sizeof(int)))
			{
				APS_ERR("Enable sensor parameter error!\n");
				err = -EINVAL;
			}
			else
			{
				value = *(int *)buff_in;				
				if(value)
				{
					if(err = tmd2771_enable_als(obj->client, 1))
					{
						APS_ERR("enable als fail: %d\n", err); 
						return -1;
					}
					set_bit(CMC_BIT_ALS, &obj->enable);
				}
				else
				{
					if(err = tmd2771_enable_als(obj->client, 0))
					{
						APS_ERR("disable als fail: %d\n", err); 
						return -1;
					}
					clear_bit(CMC_BIT_ALS, &obj->enable);
				}
				
			}
			break;

		case SENSOR_GET_DATA:
			if((buff_out == NULL) || (size_out< sizeof(hwm_sensor_data)))
			{
				APS_ERR("get sensor data parameter error!\n");
				err = -EINVAL;
			}
			else
			{
				sensor_data = (hwm_sensor_data *)buff_out;
				/*yucong MTK add for fixing know issue*/
				#if 1
				tmd2771_read_als(obj->client, &obj->als);
				if(obj->als == 0)
				{
					sensor_data->values[0] = -1;				
				}else{
					u16 b[2];
					int i;
					for(i = 0;i < 2;i++){
					tmd2771_read_als(obj->client, &obj->als);
					b[i] = obj->als;
					}
					(b[1] > b[0])?(obj->als = b[0]):(obj->als = b[1]);
					sensor_data->values[0] = tmd2771_get_als_value(obj, obj->als);
				}
				#endif
				sensor_data->value_divide = 1;
				sensor_data->status = SENSOR_STATUS_ACCURACY_MEDIUM;
			}
			break;
		default:
			APS_ERR("light sensor operate function no this parameter %d!\n", command);
			err = -1;
			break;
	}
	
	return err;
}


/*----------------------------------------------------------------------------*/
static int tmd2771_i2c_detect(struct i2c_client *client, int kind, struct i2c_board_info *info) 
{    
	strcpy(info->type, TMD2771_DEV_NAME);
	return 0;
}

/*----------------------------------------------------------------------------*/
static int tmd2771_i2c_probe(struct i2c_client *client, const struct i2c_device_id *id)
{
	struct tmd2771_priv *obj;
	struct hwmsen_object obj_ps, obj_als;
	int err = 0;

	if(!(obj = kzalloc(sizeof(*obj), GFP_KERNEL)))
	{
		err = -ENOMEM;
		goto exit;
	}
	memset(obj, 0, sizeof(*obj));
	tmd2771_obj = obj;

	obj->hw = get_cust_alsps_hw();
	tmd2771_get_addr(obj->hw, &obj->addr);

	/*for interrup work mode support -- by liaoxl.lenovo 12.08.2011*/
	INIT_WORK(&obj->eint_work, tmd2771_eint_work);
	obj->client = client;
	i2c_set_clientdata(client, obj);	
	atomic_set(&obj->als_debounce, 300);
	atomic_set(&obj->als_deb_on, 0);
	atomic_set(&obj->als_deb_end, 0);
	atomic_set(&obj->ps_debounce, 200);
	atomic_set(&obj->ps_deb_on, 0);
	atomic_set(&obj->ps_deb_end, 0);
	atomic_set(&obj->ps_mask, 0);
	atomic_set(&obj->als_suspend, 0);
	atomic_set(&obj->als_cmd_val, 0xDF);
	atomic_set(&obj->ps_cmd_val,  0xC1);
	atomic_set(&obj->ps_thd_val_high,  obj->hw->ps_threshold_high);
	atomic_set(&obj->ps_thd_val_low,  obj->hw->ps_threshold_low);
	obj->enable = 0;
	obj->pending_intr = 0;
	obj->als_level_num = sizeof(obj->hw->als_level)/sizeof(obj->hw->als_level[0]);
	obj->als_value_num = sizeof(obj->hw->als_value)/sizeof(obj->hw->als_value[0]);  
	/*Lenovo-sw chenlj2 add 2011-06-03,modified gain 16 to 1/5 accoring to actual thing */
	obj->als_modulus = (400*100*ZOOM_TIME)/(1*150);//(1/Gain)*(400/Tine), this value is fix after init ATIME and CONTROL register value
										//(400)/16*2.72 here is amplify *100 //16
	BUG_ON(sizeof(obj->als_level) != sizeof(obj->hw->als_level));
	memcpy(obj->als_level, obj->hw->als_level, sizeof(obj->als_level));
	BUG_ON(sizeof(obj->als_value) != sizeof(obj->hw->als_value));
	memcpy(obj->als_value, obj->hw->als_value, sizeof(obj->als_value));
	atomic_set(&obj->i2c_retry, 3);
	set_bit(CMC_BIT_ALS, &obj->enable);
	set_bit(CMC_BIT_PS, &obj->enable);

	
	tmd2771_i2c_client = client;

	
	if(err = tmd2771_init_client(client))
	{
		goto exit_init_failed;
	}
	APS_LOG("tmd2771_init_client() OK!\n");

	if(err = misc_register(&tmd2771_device))
	{
		APS_ERR("tmd2771_device register failed\n");
		goto exit_misc_device_register_failed;
	}
/*
	if(err = tmd2771_create_attr(&tmd2771_alsps_driver.driver))
	{
		APS_ERR("create attribute err = %d\n", err);
		goto exit_create_attr_failed;
	}
*/
	obj_ps.self = tmd2771_obj;
	/*for interrup work mode support -- by liaoxl.lenovo 12.08.2011*/
	
	if(1 == obj->hw->polling_mode_ps)
	{
		obj_ps.polling = 1;
	}
	else
	{
		obj_ps.polling = 0;
	}
   
	
	obj_ps.sensor_operate = tmd2771_ps_operate;
	if(err = hwmsen_attach(ID_PROXIMITY, &obj_ps))
	{
		APS_ERR("attach fail = %d\n", err);
		goto exit_create_attr_failed;
	}
	
	obj_als.self = tmd2771_obj;
	obj_als.polling = 1;
	obj_als.sensor_operate = tmd2771_als_operate;
	if(err = hwmsen_attach(ID_LIGHT, &obj_als))
	{
		APS_ERR("attach fail = %d\n", err);
		goto exit_create_attr_failed;
	}


#if defined(CONFIG_HAS_EARLYSUSPEND)
	obj->early_drv.level    = EARLY_SUSPEND_LEVEL_DISABLE_FB - 1,
	obj->early_drv.suspend  = tmd2771_early_suspend,
	obj->early_drv.resume   = tmd2771_late_resume,    
	register_early_suspend(&obj->early_drv);
#endif

	APS_LOG("%s: OK\n", __func__);
	return 0;

	exit_create_attr_failed:
	misc_deregister(&tmd2771_device);
	exit_misc_device_register_failed:
	exit_init_failed:
	//i2c_detach_client(client);
	exit_kfree:
	kfree(obj);
	exit:
	tmd2771_i2c_client = NULL;           
//	MT6516_EINTIRQMask(CUST_EINT_ALS_NUM);  /*mask interrupt if fail*/
	APS_ERR("%s: err = %d\n", __func__, err);
	return err;
}
/*----------------------------------------------------------------------------*/
static int tmd2771_i2c_remove(struct i2c_client *client)
{
	int err;	
/*	
	if(err = tmd2771_delete_attr(&tmd2771_i2c_driver.driver))
	{
		APS_ERR("tmd2771_delete_attr fail: %d\n", err);
	} 
*/
	if(err = misc_deregister(&tmd2771_device))
	{
		APS_ERR("misc_deregister fail: %d\n", err);    
	}
	
	tmd2771_i2c_client = NULL;
	i2c_unregister_device(client);
	kfree(i2c_get_clientdata(client));

	return 0;
}
/*----------------------------------------------------------------------------*/

//kaka_12_0115 add
extern char *g_alsps_name;
char *tmd_2771_name = "tmd2771";
//kaka_12_0115 end

static int tmd2771_probe(struct platform_device *pdev) 
{
	struct alsps_hw *hw = get_cust_alsps_hw();

	tmd2771_power(hw, 1);    
	//tmd2771_force[0] = hw->i2c_num;
	//tmd2771_force[1] = hw->i2c_addr[0];
	//APS_DBG("I2C = %d, addr =0x%x\n",tmd2771_force[0],tmd2771_force[1]);
	if(i2c_add_driver(&tmd2771_i2c_driver))
	{
		APS_ERR("add driver error\n");
		return -1;
	} 
	
        g_alsps_name = tmd_2771_name; //kaka_12_0115
	
	
	return 0;
} 
/*----------------------------------------------------------------------------*/
static int tmd2771_remove(struct platform_device *pdev)
{
	struct alsps_hw *hw = get_cust_alsps_hw();
	APS_FUN();    
	tmd2771_power(hw, 0);    
	i2c_del_driver(&tmd2771_i2c_driver);
	return 0;
}
/*----------------------------------------------------------------------------*/
static struct platform_driver tmd2771_alsps_driver = {
	.probe      = tmd2771_probe,
	.remove     = tmd2771_remove,    
	.driver     = {
		.name  = "als_ps",
//		.owner = THIS_MODULE,
	}
};
/*----------------------------------------------------------------------------*/
static int __init tmd2771_init(void)
{
	APS_FUN();
	i2c_register_board_info(0, &i2c_TMD2771, 1);
	if(platform_driver_register(&tmd2771_alsps_driver))
	{
		APS_ERR("failed to register driver");
		return -ENODEV;
	}
	return 0;
}
/*----------------------------------------------------------------------------*/
static void __exit tmd2771_exit(void)
{
	APS_FUN();
	platform_driver_unregister(&tmd2771_alsps_driver);
}


/*----------------------------------------------------------------------------*/
module_init(tmd2771_init);
module_exit(tmd2771_exit);
/*----------------------------------------------------------------------------*/
MODULE_AUTHOR("Dexiang Liu");
MODULE_DESCRIPTION("tmd2771 driver");
MODULE_LICENSE("GPL");

/* Copyright Statement:
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein
 * is confidential and proprietary to MediaTek Inc. and/or its licensors.
 * Without the prior written permission of MediaTek inc. and/or its licensors,
 * any reproduction, modification, use or disclosure of MediaTek Software,
 * and information contained herein, in whole or in part, shall be strictly prohibited.
 */
/* MediaTek Inc. (C) 2010. All rights reserved.
 *
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
 * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
 * AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
 * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
 * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
 * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
 * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
 * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
 * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
 * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
 * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
 * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
 * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
 * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 *
 * The following software/firmware and/or related documentation ("MediaTek Software")
 * have been modified by MediaTek Inc. All revisions are subject to any receiver's
 * applicable license agreements with MediaTek Inc.
 */

/* 
 *
 * This software is licensed under the terms of the GNU General Public
 * License version 2, as published by the Free Software Foundation, and
 * may be copied, distributed, and modified under those terms.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 */
/*
 * Definitions for tmd2771 als/ps sensor chip.
 */
#ifndef __TMD2771_H__
#define __TMD2771_H__

#include <linux/ioctl.h>

extern int TMD2771_CMM_PPCOUNT_VALUE;
extern int ZOOM_TIME;

#define TMD2771_CMM_ENABLE 		0X80
#define TMD2771_CMM_ATIME 		0X81
#define TMD2771_CMM_PTIME 		0X82
#define TMD2771_CMM_WTIME 		0X83
/*for interrup work mode support -- by liaoxl.lenovo 12.08.2011*/
#define TMD2771_CMM_INT_LOW_THD_LOW   0X88
#define TMD2771_CMM_INT_LOW_THD_HIGH  0X89
#define TMD2771_CMM_INT_HIGH_THD_LOW  0X8A
#define TMD2771_CMM_INT_HIGH_THD_HIGH 0X8B
#define TMD2771_CMM_Persistence       0X8C
#define TMD2771_CMM_STATUS            0X93
#define TAOS_TRITON_CMD_REG           0X80
#define TAOS_TRITON_CMD_SPL_FN        0x60

#define TMD2771_CMM_CONFIG 		0X8D
#define TMD2771_CMM_PPCOUNT 		0X8E
#define TMD2771_CMM_CONTROL 		0X8F

#define TMD2771_CMM_PDATA_L 		0X98
#define TMD2771_CMM_PDATA_H 		0X99
#define TMD2771_CMM_C0DATA_L 	0X94
#define TMD2771_CMM_C0DATA_H 	0X95
#define TMD2771_CMM_C1DATA_L 	0X96
#define TMD2771_CMM_C1DATA_H 	0X97


#define TMD2771_SUCCESS						0
#define TMD2771_ERR_I2C						-1
#define TMD2771_ERR_STATUS					-3
#define TMD2771_ERR_SETUP_FAILURE				-4
#define TMD2771_ERR_GETGSENSORDATA			-5
#define TMD2771_ERR_IDENTIFICATION			-6


#endif

/* Copyright Statement:
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein
 * is confidential and proprietary to MediaTek Inc. and/or its licensors.
 * Without the prior written permission of MediaTek inc. and/or its licensors,
 * any reproduction, modification, use or disclosure of MediaTek Software,
 * and information contained herein, in whole or in part, shall be strictly prohibited.
 */
/* MediaTek Inc. (C) 2010. All rights reserved.
 *
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
 * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
 * AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
 * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
 * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
 * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
 * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
 * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
 * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
 * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
 * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
 * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
 * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
 * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 *
 * The following software/firmware and/or related documentation ("MediaTek Software")
 * have been modified by MediaTek Inc. All revisions are subject to any receiver's
 * applicable license agreements with MediaTek Inc.
 */
#include <linux/types.h>
#include <mach/mt6575_pm_ldo.h>
#include <cust_alsps.h>
//#include <mach/mt6575_pm_ldo.h>

static struct alsps_hw cust_alsps_hw = {
    .i2c_num    = 0,
	.polling_mode_ps =0,
	.polling_mode_als =1,
    .power_id   = MT65XX_POWER_NONE,    /*LDO is not used*/
    .power_vol  = VOL_DEFAULT,          /*LDO is not used*/
    .i2c_addr   = {0x72, 0x48, 0x78, 0x00},
    /*Lenovo-sw chenlj2 add 2011-06-03,modify parameter below two lines*/
#ifdef HQ_PROJECT_A51
    .als_level  = { 0,  40,   80,  100,  150,  200,  400,  1000,  2000,  3000,   6000,  10000, 14000, 18000, 20000},
    .als_value  = {20,  40,   40,  120,  120,  255,  255,  10240, 10240, 10240,  10240, 10240, 10240, 10240, 10240 },
#else
    .als_level  = { 4, 40,  80,   120,   160, 250,  400, 800, 1200,  1600, 2000, 3000, 5000, 10000, 65535},
    .als_value  = {10, 20,20,  120, 120, 280,  280,  280, 1600,  1600,  1600,  6000,  6000, 9000,  10240, 10240},
#endif
    .ps_threshold_high = 650,
    .ps_threshold_low = 450,
    .ps_threshold = 900,
};

struct alsps_hw *get_cust_alsps_hw(void) {
    return &cust_alsps_hw;
}
int TMD2771_CMM_PPCOUNT_VALUE = 0x04;//0002    
int ZOOM_TIME = 4;
#################################Sensor End##########################
#################################Lcm Start###########################
/* Copyright Statement:
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein
 * is confidential and proprietary to MediaTek Inc. and/or its licensors.
 * Without the prior written permission of MediaTek inc. and/or its licensors,
 * any reproduction, modification, use or disclosure of MediaTek Software,
 * and information contained herein, in whole or in part, shall be strictly prohibited.
 */
/* MediaTek Inc. (C) 2010. All rights reserved.
 *
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
 * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
 * AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
 * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
 * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
 * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
 * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
 * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
 * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
 * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
 * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
 * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
 * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
 * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 *
 * The following software/firmware and/or related documentation ("MediaTek Software")
 * have been modified by MediaTek Inc. All revisions are subject to any receiver's
 * applicable license agreements with MediaTek Inc.
 */

/*****************************************************************************
*  Copyright Statement:
*  --------------------
*  This software is protected by Copyright and the information contained
*  herein is confidential. The software may not be copied and the information
*  contained herein may not be used or disclosed except with the written
*  permission of MediaTek Inc. (C) 2008
*
*  BY OPENING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
*  THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
*  RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON
*  AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
*  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
*  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
*  NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
*  SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
*  SUPPLIED WITH THE MEDIATEK SOFTWARE, AND BUYER AGREES TO LOOK ONLY TO SUCH
*  THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. MEDIATEK SHALL ALSO
*  NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE RELEASES MADE TO BUYER'S
*  SPECIFICATION OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.
*
*  BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE
*  LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
*  AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
*  OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY BUYER TO
*  MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
*
*  THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE
*  WITH THE LAWS OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF
*  LAWS PRINCIPLES.  ANY DISPUTES, CONTROVERSIES OR CLAIMS ARISING THEREOF AND
*  RELATED THERETO SHALL BE SETTLED BY ARBITRATION IN SAN FRANCISCO, CA, UNDER
*  THE RULES OF THE INTERNATIONAL CHAMBER OF COMMERCE (ICC).
*
*****************************************************************************/
#ifndef BUILD_UBOOT
#include <linux/kernel.h>
#endif
#include <linux/string.h>

#include "lcm_drv.h"

// ---------------------------------------------------------------------------
//  Local Constants
// ---------------------------------------------------------------------------

#define FRAME_WIDTH  										(480)
#define FRAME_HEIGHT 										(800)

#define REGFLAG_DELAY             							0XFE
#define REGFLAG_END_OF_TABLE      							0xFF   // END OF REGISTERS MARKER

// ---------------------------------------------------------------------------
//  Local Variables
// ---------------------------------------------------------------------------

static LCM_UTIL_FUNCS lcm_util = {0};

#define SET_RESET_PIN(v)    								(lcm_util.set_reset_pin((v)))

#define UDELAY(n) 											(lcm_util.udelay(n))
#define MDELAY(n) 											(lcm_util.mdelay(n))


// ---------------------------------------------------------------------------
//  Local Functions
// ---------------------------------------------------------------------------

#define dsi_set_cmdq_V2(cmd, count, ppara, force_update)	lcm_util.dsi_set_cmdq_V2(cmd, count, ppara, force_update)
#define dsi_set_cmdq(pdata, queue_size, force_update)		lcm_util.dsi_set_cmdq(pdata, queue_size, force_update) 
#define wrtie_cmd(cmd)										lcm_util.dsi_write_cmd(cmd)
#define write_regs(addr, pdata, byte_nums)					lcm_util.dsi_write_regs(addr, pdata, byte_nums)
#define read_reg											lcm_util.dsi_read_reg()
#define read_reg_v2(cmd, buffer, buffer_size)   				lcm_util.dsi_dcs_read_lcm_reg_v2(cmd, buffer, buffer_size)

#define dsi_set_cmdq_HQ(cmd, count, ppara, force_update)	lcm_util.dsi_set_cmdq_HQ(cmd, count, ppara, force_update)
extern int IMM_GetOneChannelValue(int dwChannel, int deCount);
int lcd_id_voltage_nt35510h_dsi_BM9000B = 0;
struct LCM_setting_table {
    unsigned cmd;
    unsigned char count;
    unsigned char para_list[64];
};


static struct LCM_setting_table lcm_initialization_setting[] = {
	
	/*
	Note :

	Data ID will depends on the following rule.
	
		count of parameters > 1	=> Data ID = 0x39
		count of parameters = 1	=> Data ID = 0x15
		count of parameters = 0	=> Data ID = 0x05

	Structure Format :

	{DCS command, count of parameters, {parameter list}}
	{REGFLAG_DELAY, milliseconds of time, {}},

	...

	Setting ending by predefined flag
	
	{REGFLAG_END_OF_TABLE, 0x00, {}}
	*/
#if 0

{0xB9,	3,	{0xFF, 0x83, 0x63}},
{REGFLAG_DELAY, 10, {}},

{0xB1,	19, {0x01, 0x00, 0x44, 0x07,
			 0x01, 0x11, 0x11, 0x2F,
			 0x37, 0x27, 0x27, 0x40,
			 0x32, 0x00, 0xE6, 0xE6,
			 0xE6, 0xE6, 0xE6}},
{REGFLAG_DELAY, 10, {}},

{0xB2,	2,	{0x08, 0x00}},
{REGFLAG_DELAY, 10, {}},


{0xB4,	7,	{0x00, 0x19, 0x9C, 0x08,
			 0x19, 0x05, 0x73}},
{REGFLAG_DELAY, 10, {}},

{0xB6,	1,	{0x42}},
{REGFLAG_DELAY, 10, {}},

{0xCC,	1,	{0x01}},
{REGFLAG_DELAY, 10, {}},
	
// ENABLE FMARK
{0x44,	2,	{((FRAME_HEIGHT/2)>>8), ((FRAME_HEIGHT/2)&0xFF)}},
{0x35,	1,	{0x00}},

// SET GAMMA
{0xE0,	34, {0x00, 0x0A, 0x0F, 0x2F,
			 0x32, 0x3F, 0x22, 0x42,
			 0x87, 0x8C, 0xCF, 0xD3,
			 0xD6, 0x14, 0x15, 0x12,
			 0x18, 0x00, 0x0A, 0x0F,
			 0x2F, 0x32, 0x3F, 0x22,
			 0x42, 0x87, 0x8C, 0xCF,
			 0xD3, 0xD6, 0x14, 0x15,
			 0x12, 0x18}},
{REGFLAG_DELAY, 10, {}},

{0xBA,	5,	{0x11, 0x00, 0x56, 0xC6,
			 0x10}},

{0xC2,	1,	{0x04}},
{REGFLAG_DELAY, 10, {}},

{0x3A,	1,	{0x77}},
{REGFLAG_DELAY, 10, {}},


#else

	{0xF0,	5,	{0x55, 0xAA,0x52,0x08,0x01}},
	{REGFLAG_DELAY, 10, {}},
	
	{0xBC,	3,	{0x00,0x90,0x1A}},
	{REGFLAG_DELAY, 3, {}},


	{0xBD,	3,	{0x00,0x90,0x1A}},
	{REGFLAG_DELAY, 3, {}},
	
	{0xBE,	2,	{0x00,0x4E}},
	{REGFLAG_DELAY, 3, {}},
	
	{0xD1,	52, {0x00,0x00,0x00,0x2D,0x00,0x5C,0x00,0x80,0x00,0xAB,0x00,0xE4,0x01,0x15,0x01,0x5C,0x01,0x8E,0x01,0xD3,0x02,0x03,0x02,0x45,0x02,0x77,0x02,0x78,0x02,0xA4,0x02,0xD1,0x02,0xEA,0x03,0x09,0x03,0x1A,0x03,0x32,0x03,0x40,0x03,0x59,0x03,0x68,0x03,0x7C,0x03,0xB2,0x03,0xD8}}, 
	{REGFLAG_DELAY, 3, {}},
	{0xD2,	52, {0x00,0x00,0x00,0x2D,0x00,0x5C,0x00,0x80,0x00,0xAB,0x00,0xE4,0x01,0x15,0x01,0x5C,0x01,0x8E,0x01,0xD3,0x02,0x03,0x02,0x45,0x02,0x77,0x02,0x78,0x02,0xA4,0x02,0xD1,0x02,0xEA,0x03,0x09,0x03,0x1A,0x03,0x32,0x03,0x40,0x03,0x59,0x03,0x68,0x03,0x7C,0x03,0xB2,0x03,0xD8}},
	{REGFLAG_DELAY, 3, {}},
	{0xD3,	52, {0x00,0x00,0x00,0x2D,0x00,0x5C,0x00,0x80,0x00,0xAB,0x00,0xE4,0x01,0x15,0x01,0x5C,0x01,0x8E,0x01,0xD3,0x02,0x03,0x02,0x45,0x02,0x77,0x02,0x78,0x02,0xA4,0x02,0xD1,0x02,0xEA,0x03,0x09,0x03,0x1A,0x03,0x32,0x03,0x40,0x03,0x59,0x03,0x68,0x03,0x7C,0x03,0xB2,0x03,0xD8}},
	{REGFLAG_DELAY, 3, {}},
	{0xD4,	52, {0x00,0x00,0x00,0x2D,0x00,0x5C,0x00,0x80,0x00,0xAB,0x00,0xE4,0x01,0x15,0x01,0x5C,0x01,0x8E,0x01,0xD3,0x02,0x03,0x02,0x45,0x02,0x77,0x02,0x78,0x02,0xA4,0x02,0xD1,0x02,0xEA,0x03,0x09,0x03,0x1A,0x03,0x32,0x03,0x40,0x03,0x59,0x03,0x68,0x03,0x7C,0x03,0xB2,0x03,0xD8}},
	{REGFLAG_DELAY, 3, {}},
	{0xD5,	52, {0x00,0x00,0x00,0x2D,0x00,0x5C,0x00,0x80,0x00,0xAB,0x00,0xE4,0x01,0x15,0x01,0x5C,0x01,0x8E,0x01,0xD3,0x02,0x03,0x02,0x45,0x02,0x77,0x02,0x78,0x02,0xA4,0x02,0xD1,0x02,0xEA,0x03,0x09,0x03,0x1A,0x03,0x32,0x03,0x40,0x03,0x59,0x03,0x68,0x03,0x7C,0x03,0xB2,0x03,0xD8}},
	{REGFLAG_DELAY, 3, {}},
	{0xD6,	52, {0x00,0x00,0x00,0x2D,0x00,0x5C,0x00,0x80,0x00,0xAB,0x00,0xE4,0x01,0x15,0x01,0x5C,0x01,0x8E,0x01,0xD3,0x02,0x03,0x02,0x45,0x02,0x77,0x02,0x78,0x02,0xA4,0x02,0xD1,0x02,0xEA,0x03,0x09,0x03,0x1A,0x03,0x32,0x03,0x40,0x03,0x59,0x03,0x68,0x03,0x7C,0x03,0xB2,0x03,0xD8}},
	{REGFLAG_DELAY, 3, {}},
	{0xB0,	3,	{0x00,0x00,0x00}},
	{REGFLAG_DELAY, 3, {}},
	{0xB6,	3,	{0x45,0x45,0x45}},
	{REGFLAG_DELAY, 3, {}},
	{0xB8,	3,	{0x26,0x26,0x26}},
	{REGFLAG_DELAY, 3, {}},
	{0xB1,	3,	{0x00,0x00,0x00}},
	{REGFLAG_DELAY, 3, {}},
	{0xB7,	3,	{0x36,0x36,0x36}},
	{REGFLAG_DELAY, 3, {}},
	{0xB9,	3,	{0x34,0x34,0x34}},
	{REGFLAG_DELAY, 3, {}},
	{0xBA,	3,	{0x26,0x26,0x26}},
	{REGFLAG_DELAY, 3, {}},
	{0xF0,	3,	{0x55,0xAA,0x52,0x08,0x00}},
	{REGFLAG_DELAY, 3, {}},
	{0xB1,	1,	{0xCC}},
	{REGFLAG_DELAY, 3, {}},
	{0xB4,	1,	{0x10}},
	{REGFLAG_DELAY, 3, {}},
	{0xB6,	1,	{0x07}},
	{REGFLAG_DELAY, 3, {}},
	{0xB7,	2,	{0x71,0x71}},
	{REGFLAG_DELAY, 3, {}},
	{0xB8,	4,	{0x01,0x0A,0x0A,0x0A}},
	{REGFLAG_DELAY, 3, {}},
	{0xBC,	3,	{0x05,0x05,0x05}},
	{REGFLAG_DELAY, 3, {}},
	{0xBD,	5,	{0x01,0x84,0x07,0x31,0x00}},
	{REGFLAG_DELAY, 3, {}},
	{0xBE,	5,	{0x01,0x84,0x07,0x31,0x00}},
	{REGFLAG_DELAY, 3, {}},
	{0xBF,	5,	{0x01,0x84,0x07,0x31,0x00}},
	{REGFLAG_DELAY, 3, {}},
	
	{0x35,	1,	{0x00}},
	{REGFLAG_DELAY, 3, {}},
	{0x11,	1,	{0x00}},
	
	{REGFLAG_DELAY, 120, {}},
	
	{0x29,	1,	{0x00}},
	{REGFLAG_DELAY, 3, {}},
	{0x3A,	1,	{0x77}},
	{REGFLAG_DELAY, 3, {}},
	{0xF0,	5,	{0x55,0xAA,0x52,0x08,0x00}},
	{REGFLAG_DELAY, 3, {}},
	{0xC7,	1,	{0x02}},
	{REGFLAG_DELAY, 3, {}},
	{0xC9,	5,	{0x11,0x00,0x00,0x00,0x00}},
	{REGFLAG_DELAY, 3, {}},
	{0x21,	1,	{0x00}},
	{REGFLAG_DELAY, 3, {}},
	{0x29, 1, {0x00}},
	{REGFLAG_DELAY, 3, {}},
	{0xF0,	5,	{0x55,0xAA,0x52,0x08,0x01}},

	{REGFLAG_DELAY, 200, {}},
	
#endif
	// Note
	// Strongly recommend not to set Sleep out / Display On here. That will cause messed frame to be shown as later the backlight is on.


	// Setting ending by predefined flag
	{REGFLAG_END_OF_TABLE, 0x00, {}}
};


static struct LCM_setting_table lcm_set_window[] = {
	{0x2A,	4,	{0x00, 0x00, (FRAME_WIDTH>>8), (FRAME_WIDTH&0xFF)}},
	{0x2B,	4,	{0x00, 0x00, (FRAME_HEIGHT>>8), (FRAME_HEIGHT&0xFF)}},
	{REGFLAG_END_OF_TABLE, 0x00, {}}
};


static struct LCM_setting_table lcm_sleep_out_setting[] = {
    // Sleep Out
	{0x11, 1, {0x00}},
    {REGFLAG_DELAY, 150, {}},

    // Display ON
	{0x29, 1, {0x00}},
	{REGFLAG_DELAY, 100, {}},
	
	{REGFLAG_END_OF_TABLE, 0x00, {}}
};


static struct LCM_setting_table lcm_deep_sleep_mode_in_setting[] = {
	// Display off sequence
	{0x28, 1, {0x00}},
	{REGFLAG_DELAY, 150, {}},

    // Sleep Mode On
	{0x10, 1, {0x00}},
	{REGFLAG_DELAY, 100, {}},

	{REGFLAG_END_OF_TABLE, 0x00, {}}
};


static struct LCM_setting_table lcm_backlight_level_setting[] = {
	{0x51, 1, {0xFF}},
	{REGFLAG_END_OF_TABLE, 0x00, {}}
};


static void push_table(struct LCM_setting_table *table, unsigned int count, unsigned char force_update)
{
	unsigned int i;

    for(i = 0; i < count; i++) {
		
        unsigned cmd;
        cmd = table[i].cmd;
		
        switch (cmd) {
			
            case REGFLAG_DELAY :
                MDELAY(table[i].count);
                break;
				
            case REGFLAG_END_OF_TABLE :
                break;
				
            default:
				//dsi_set_cmdq_HQ(cmd, table[i].count, table[i].para_list, force_update);
				dsi_set_cmdq_V2(cmd, table[i].count, table[i].para_list, force_update);
       	}
    }
	
}


// ---------------------------------------------------------------------------
//  LCM Driver Implementations
// ---------------------------------------------------------------------------

static void lcm_set_util_funcs(const LCM_UTIL_FUNCS *util)
{
    memcpy(&lcm_util, util, sizeof(LCM_UTIL_FUNCS));
}


static void lcm_get_params(LCM_PARAMS *params)
{
		memset(params, 0, sizeof(LCM_PARAMS));
	
		params->type   = LCM_TYPE_DSI;

		params->width  = FRAME_WIDTH;
		params->height = FRAME_HEIGHT;

		// enable tearing-free
		params->dbi.te_mode 				= LCM_DBI_TE_MODE_VSYNC_ONLY;
		params->dbi.te_edge_polarity		= LCM_POLARITY_RISING;

		params->dsi.mode   = CMD_MODE; //SYNC_EVENT_VDO_MODE; 

		// DSI
		/* Command mode setting */
		params->dsi.LANE_NUM				= LCM_TWO_LANE;
		//The following defined the fomat for data coming from LCD engine.
		params->dsi.data_format.color_order = LCM_COLOR_ORDER_RGB;
		params->dsi.data_format.trans_seq   = LCM_DSI_TRANS_SEQ_MSB_FIRST;
		params->dsi.data_format.padding     = LCM_DSI_PADDING_ON_LSB;
		params->dsi.data_format.format      = LCM_DSI_FORMAT_RGB888;

		// Highly depends on LCD driver capability.
		params->dsi.packet_size=256;

		// Video mode setting		
		params->dsi.PS=LCM_PACKED_PS_24BIT_RGB888;

		params->dsi.word_count=480*3;	
		params->dsi.vertical_sync_active=2;
		params->dsi.vertical_backporch=2; 
		params->dsi.vertical_frontporch=2; 
		params->dsi.vertical_active_line=800;
	
		params->dsi.line_byte=2180;		// 2256 = 752*3
		params->dsi.horizontal_sync_active_byte=26;
		params->dsi.horizontal_backporch_byte=206;  // 206
		params->dsi.horizontal_frontporch_byte=206;  // 206
		params->dsi.rgb_byte=(480*3+6);	
	
		params->dsi.horizontal_sync_active_word_count=20;	
		params->dsi.horizontal_backporch_word_count=200;
		params->dsi.horizontal_frontporch_word_count=200;

		// Bit rate calculation
		params->dsi.pll_div1=32;//38;// ynn  modify from 0x1a to 38,for a51 tcl lcm. 0x1a;//38; 	// fref=26MHz, fvco=fref*(div1+1)	(div1=0~63, fvco=500MHZ~1GHz)
		params->dsi.pll_div2=1;			// div2=0~15: fout=fvo/(2*div2)

}

#if 0
static void lcm_init(void)
{
	unsigned int data_array[16];
	
    SET_RESET_PIN(1);	
    MDELAY(10);
    SET_RESET_PIN(0);
    MDELAY(10);
    SET_RESET_PIN(1);
    MDELAY(150);

#if 0
	push_table(lcm_initialization_setting, sizeof(lcm_initialization_setting) / sizeof(struct LCM_setting_table), 1);
#else
//------------------------------------------
		//{0xB9,	3,	{0xFF, 0x83, 0x63}},

		//data_array[0]=0x00043902;
		//data_array[1]=0x6383FFB9; // SET password
		//dsi_set_cmdq(&data_array, 2, 1);
		//MDELAY(10);
//---------------------------------------------

////ENABLE CMD2 Page 1//
		//{0xF0,	5,	{0x55, 0xAA,0x52,0x08,0x01}},
		//{REGFLAG_DELAY, 10, {}},
		data_array[0]=0x00063902;
		data_array[1]=0x52AA55F0; // SET password
		data_array[2]=0x00000108; 
		dsi_set_cmdq(&data_array, 3, 1);
		MDELAY(10);

//#VGMP/VGMN/VOOM Setting, VGMP=4.8V  #VGSP=0.6125V
		//{0xBC,	3,	{0x00,0x90,0x1A}},
		data_array[0]=0x00043902;
		data_array[1]=0x1A9000BC; // SET password
		dsi_set_cmdq(&data_array, 2, 1);
		MDELAY(3);

		//{0xBD,	3,	{0x00,0x90,0x1A}},
		data_array[0]=0x00043902;
		data_array[1]=0x1A9000BD; // SET password
		dsi_set_cmdq(&data_array, 2, 1);
		MDELAY(3);
//#VCOM=		
		//{0xBE,	2,	{0x00,0x4E}},
		data_array[0]=0x00033902;
		data_array[1]=0x004E00BE; // SET password
		dsi_set_cmdq(&data_array, 2, 1);
		MDELAY(3);

		//# R+ G+ B+ R- G- B-
		//{0xD1,	52, {0x00,0x00,0x00,0x2D,
		//             0x00,0x5C,0x00,0x80,
		//             0x00,0xAB,0x00,0xE4,
		//             0x01,0x15,0x01,0x5C,
		//             0x01,0x8E,0x01,0xD3,
		//             0x02,0x03,0x02,0x45,
		//             0x02,0x77,0x02,0x78,
		//             0x02,0xA4,0x02,0xD1,
		//             0x02,0xEA,0x03,0x09,
		//             0x03,0x1A,0x03,0x32,
		//             0x03,0x40,0x03,0x59,
		//             0x03,0x68,0x03,0x7C,
		//            0x03,0xB2,0x03,0xD8}}, 
		             
		data_array[0]=0x00353902;
		data_array[1]=0x000000D1; 
		data_array[2]=0x005C002D; 
		data_array[3]=0x00AB0080;
		data_array[4]=0x011501E4;
		data_array[5]=0x018E015C;
		data_array[6]=0x020302D3;
		data_array[7]=0x02770245;
		data_array[8]=0x02A40278;
		data_array[9]=0x03EA02D1;
		data_array[10]=0x031A0309;
		data_array[11]=0x03400332;
		data_array[12]=0x03680359;
		data_array[13]=0x03B2037C;
		data_array[14]=0x000000D8;
		dsi_set_cmdq(&data_array, 15, 1);
		MDELAY(3);

		data_array[0]=0x00353902;
		data_array[1]=0x000000D2; 
		data_array[2]=0x005C002D; 
		data_array[3]=0x00AB0080;
		data_array[4]=0x011501E4;
		data_array[5]=0x018E015C;
		data_array[6]=0x020302D3;
		data_array[7]=0x02770245;
		data_array[8]=0x02A40278;
		data_array[9]=0x03EA02D1;
		data_array[10]=0x031A0309;
		data_array[11]=0x03400332;
		data_array[12]=0x03680359;
		data_array[13]=0x03B2037C;
		data_array[14]=0x000000D8;
		dsi_set_cmdq(&data_array, 15, 1);
		MDELAY(3);

		data_array[0]=0x00353902;
		data_array[1]=0x000000D3; 
		data_array[2]=0x005C002D; 
		data_array[3]=0x00AB0080;
		data_array[4]=0x011501E4;
		data_array[5]=0x018E015C;
		data_array[6]=0x020302D3;
		data_array[7]=0x02770245;
		data_array[8]=0x02A40278;
		data_array[9]=0x03EA02D1;
		data_array[10]=0x031A0309;
		data_array[11]=0x03400332;
		data_array[12]=0x03680359;
		data_array[13]=0x03B2037C;
		data_array[14]=0x000000D8;
		dsi_set_cmdq(&data_array, 15, 1);
		MDELAY(3);

		data_array[0]=0x00353902;
		data_array[1]=0x000000D4; 
		data_array[2]=0x005C002D; 
		data_array[3]=0x00AB0080;
		data_array[4]=0x011501E4;
		data_array[5]=0x018E015C;
		data_array[6]=0x020302D3;
		data_array[7]=0x02770245;
		data_array[8]=0x02A40278;
		data_array[9]=0x03EA02D1;
		data_array[10]=0x031A0309;
		data_array[11]=0x03400332;
		data_array[12]=0x03680359;
		data_array[13]=0x03B2037C;
		data_array[14]=0x000000D8;
		dsi_set_cmdq(&data_array, 15, 1);
		MDELAY(3);

		data_array[0]=0x00353902;
		data_array[1]=0x000000D5; 
		data_array[2]=0x005C002D; 
		data_array[3]=0x00AB0080;
		data_array[4]=0x011501E4;
		data_array[5]=0x018E015C;
		data_array[6]=0x020302D3;
		data_array[7]=0x02770245;
		data_array[8]=0x02A40278;
		data_array[9]=0x03EA02D1;
		data_array[10]=0x031A0309;
		data_array[11]=0x03400332;
		data_array[12]=0x03680359;
		data_array[13]=0x03B2037C;
		data_array[14]=0x000000D8;
		dsi_set_cmdq(&data_array, 15, 1);
		MDELAY(3);

		data_array[0]=0x00353902;
		data_array[1]=0x000000D6; 
		data_array[2]=0x005C002D; 
		data_array[3]=0x00AB0080;
		data_array[4]=0x011501E4;
		data_array[5]=0x018E015C;
		data_array[6]=0x020302D3;
		data_array[7]=0x02770245;
		data_array[8]=0x02A40278;
		data_array[9]=0x03EA02D1;
		data_array[10]=0x031A0309;
		data_array[11]=0x03400332;
		data_array[12]=0x03680359;
		data_array[13]=0x03B2037C;
		data_array[14]=0x000000D8;
		dsi_set_cmdq(&data_array, 15, 1);
		MDELAY(3);
		
		//{0xB0,	3,	{0x00,0x00,0x00}},
		data_array[0]=0x00043902;
		data_array[1]=0x000000B0;
		dsi_set_cmdq(&data_array, 2, 1);
		MDELAY(3);
		
		//{0xB6,	3,	{0x45,0x45,0x45}},
		data_array[0]=0x00043902;
		data_array[1]=0x454545B6;
		dsi_set_cmdq(&data_array, 2, 1);
		MDELAY(3);
		
		//{0xB8,	3,	{0x26,0x26,0x26}},
		data_array[0]=0x00043902;
		data_array[1]=0x262626B8;
		dsi_set_cmdq(&data_array, 2, 1);
		MDELAY(3);
		
		//{0xB1,	3,	{0x00,0x00,0x00}},
		data_array[0]=0x00043902;
		data_array[1]=0x000000B1;
		dsi_set_cmdq(&data_array, 2, 1);
		MDELAY(3);

		//{0xB7,	3,	{0x36,0x36,0x36}},
		data_array[0]=0x00043902;
		data_array[1]=0x363636B7;
		dsi_set_cmdq(&data_array, 2, 1);
		MDELAY(3);

		//{0xB9,	3,	{0x34,0x34,0x34}},
		data_array[0]=0x00043902;
		data_array[1]=0x343434B9;
		dsi_set_cmdq(&data_array, 2, 1);
		MDELAY(3);

		//{0xBA,	3,	{0x26,0x26,0x26}},
		data_array[0]=0x00043902;
		data_array[1]=0x262626BA;
		dsi_set_cmdq(&data_array, 2, 1);
		MDELAY(3);

		//{0xF0,	5,	{0x55,0xAA,0x52,0x08,0x00}},
		data_array[0]=0x00063902;
		data_array[1]=0x52AA55F0;
		data_array[2]=0x00000008;
		dsi_set_cmdq(&data_array, 3, 1);
		MDELAY(3);

		//{0xB1,	1,	{0xCC}},
		data_array[0]=0xDCB11500;
		//data_array[0]=0xCCB11500;
		dsi_set_cmdq(&data_array, 1, 1);
		MDELAY(3);

		//{0xB4,	1,	{0x10}},
		data_array[0]=0x10B41500;
		dsi_set_cmdq(&data_array, 1, 1);
		MDELAY(3);

		//{0xB6,	1,	{0x07}},
		data_array[0]=0x03B61500;
		dsi_set_cmdq(&data_array, 1, 1);
		MDELAY(3);

		//{0xB7,	2,	{0x71,0x71}},
		data_array[0]=0x00033902;
		data_array[1]=0x007070B7;
		dsi_set_cmdq(&data_array, 2, 1);
		MDELAY(3);

		//{0xB8,	4,	{0x01,0x0A,0x0A,0x0A}},
		data_array[0]=0x00053902;
		data_array[1]=0x050501B8;
		data_array[2]=0x00000005;
		dsi_set_cmdq(&data_array, 3, 1);
		MDELAY(3);
		
		//{0xBC,	3,	{0x05,0x05,0x05}},
		data_array[0]=0x00043902;
		data_array[1]=0x050505BC;
		dsi_set_cmdq(&data_array, 2, 1);
		MDELAY(3);
		
		//{0xBD,	5,	{0x01,0x84,0x07,0x31,0x00}},
		data_array[0]=0x00063902;
		data_array[1]=0x078401BD;
		data_array[2]=0x00000031;
		dsi_set_cmdq(&data_array, 3, 1);
		MDELAY(3);
		
		//{0xBE,	5,	{0x01,0x84,0x07,0x31,0x00}},
		data_array[0]=0x00063902;
		data_array[1]=0x078401BE;
		data_array[2]=0x00000031;
		dsi_set_cmdq(&data_array, 3, 1);
		MDELAY(3);

		//{0xBF,	5,	{0x01,0x84,0x07,0x31,0x00}},
		data_array[0]=0x00063902;
		data_array[1]=0x078401BF;
		data_array[2]=0x00000031;
		dsi_set_cmdq(&data_array, 3, 1);
		MDELAY(3);

		//{0x35,	1,	{0x00}},
		data_array[0]=0x00351500;
		dsi_set_cmdq(&data_array, 1, 1);
		MDELAY(3);

		//{0x11,	1,	{0x00}},
		data_array[0] = 0x00110500;	// Display On
		dsi_set_cmdq(&data_array, 1, 1);			
		MDELAY(200);

		//{0x29,	1,	{0x00}},
		data_array[0] = 0x00290500;	// Display On
		dsi_set_cmdq(&data_array, 1, 1);			
		MDELAY(200);
		
		//{0x3A,	1,	{0x77}},
		data_array[0]=0x773A1500;
		dsi_set_cmdq(&data_array, 1, 1);
		MDELAY(3);

		//{0xF0,	5,	{0x55,0xAA,0x52,0x08,0x00}},
		data_array[0]=0x00063902;
		data_array[1]=0x52AA55F0;
		data_array[2]=0x00000008;
		dsi_set_cmdq(&data_array, 3, 1);
		MDELAY(3);

		//{0xC7,	1,	{0x02}},
		data_array[0]=0x02C71500;
		dsi_set_cmdq(&data_array, 1, 1);
		MDELAY(3);

		//{0xC9,	5,	{0x11,0x00,0x00,0x00,0x00}},
		data_array[0]=0x00063902;
		data_array[1]=0x000011C9;
		data_array[2]=0x00000000;
		dsi_set_cmdq(&data_array, 3, 1);
		MDELAY(3);
		//{0x21},
		data_array[0] = 0x00211500;	// Display inversion On
		dsi_set_cmdq(&data_array, 1, 1);	
		MDELAY(10);
        data_array[0]=0x00063902;
        data_array[1]=0x52aa55f0;
        data_array[2]=0x00000108;//set page 1
        dsi_set_cmdq(&data_array,3,1); 
		
		MDELAY(200);
		//{REGFLAG_DELAY, 100, {}},

#endif
}
#endif
static void lcm_init(void)
{
    SET_RESET_PIN(1);
    MDELAY(10);
    SET_RESET_PIN(0);
    MDELAY(125);
    SET_RESET_PIN(1);
    MDELAY(125);
    unsigned int data_array[16];

	{
/////////////sleep in////////////
	

	data_array[0]=0x00063902;
	data_array[1]=0x52aa55f0;//SET PAGE1
	data_array[2]=0x00000108;
	dsi_set_cmdq(&data_array,3,1);

	data_array[0]=0x00043902;
	data_array[1]=0x1a7800bc;//set vgmp/vgsp voltages
	dsi_set_cmdq(&data_array,2,1);

	data_array[0]=0x00043902;
	data_array[1]=0x1a7800bd;//set vgmn/vgsn voltages
	dsi_set_cmdq(&data_array,2,1);

	data_array[0]=0x00033902;
	data_array[1]=0x003a00be;//setting DCvcom offset
	dsi_set_cmdq(&data_array,2,1);
   
//////////////gamma2.2
/*
  data_array[0]=0x00353902;
	data_array[1]=0x000000d1;//gamma
	data_array[2]=0x005c002d;
	data_array[3]=0x00ab0080;
	data_array[4]=0x011501e4;
	data_array[5]=0x018e015c;
	data_array[6]=0x020302d3;
	data_array[7]=0x02770245;
	data_array[8]=0x02a40278;
	data_array[9]=0x03ea02d1;
	data_array[10]=0x031a0309;
	data_array[11]=0x03400332;
	data_array[12]=0x03680359;
	data_array[13]=0x03b2037c;
	data_array[14]=0x000000d8;
	dsi_set_cmdq(&data_array,15,1);
	data_array[0]=0x00353902;
	data_array[1]=0x000000d2;
	data_array[2]=0x005c002d;
	data_array[3]=0x00ab0080;
	data_array[4]=0x011501e4;
	data_array[5]=0x018e015c;
	data_array[6]=0x020302d3;
	data_array[7]=0x02770245;
	data_array[8]=0x02a40278;
	data_array[9]=0x03ea02d1;
	data_array[10]=0x031a0309;
	data_array[11]=0x03400332;
	data_array[12]=0x03680359;
	data_array[13]=0x03b2037c;
	data_array[14]=0x000000d8;
	dsi_set_cmdq(&data_array,15,1);
	data_array[0]=0x00353902;
	data_array[1]=0x000000d3;
	data_array[2]=0x005c002d;
	data_array[3]=0x00ab0080;
	data_array[4]=0x011501e4;
	data_array[5]=0x018e015c;
	data_array[6]=0x020302d3;
	data_array[7]=0x02770245;
	data_array[8]=0x02a40278;
	data_array[9]=0x03ea02d1;
	data_array[10]=0x031a0309;
	data_array[11]=0x03400332;
	data_array[12]=0x03680359;
	data_array[13]=0x03b2037c;
	data_array[14]=0x000000d8;
	dsi_set_cmdq(&data_array,15,1);
	data_array[0]=0x00353902;
	data_array[1]=0x000000d4;
	data_array[2]=0x005c002d;
	data_array[3]=0x00ab0080;
	data_array[4]=0x011501e4;
	data_array[5]=0x018e015c;
	data_array[6]=0x020302d3;
	data_array[7]=0x02770245;
	data_array[8]=0x02a40278;
	data_array[9]=0x03ea02d1;
	data_array[10]=0x031a0309;
	data_array[11]=0x03400332;
	data_array[12]=0x03680359;
	data_array[13]=0x03b2037c;
	data_array[14]=0x000000d8;
	dsi_set_cmdq(&data_array,15,1);
	data_array[0]=0x00353902;
	data_array[1]=0x000000d5;
	data_array[2]=0x005c002d;
	data_array[3]=0x00ab0080;
	data_array[4]=0x011501e4;
	data_array[5]=0x018e015c;
	data_array[6]=0x020302d3;
	data_array[7]=0x02770245;
	data_array[8]=0x02a40278;
	data_array[9]=0x03ea02d1;
	data_array[10]=0x031a0309;
	data_array[11]=0x03400332;
	data_array[12]=0x03680359;
	data_array[13]=0x03b2037c;
	data_array[14]=0x000000d8;
	dsi_set_cmdq(&data_array,15,1);
	data_array[0]=0x00353902;
	data_array[1]=0x000000d6;
	data_array[2]=0x005c002d;
	data_array[3]=0x00ab0080;
	data_array[4]=0x011501e4;
	data_array[5]=0x018e015c;
	data_array[6]=0x020302d3;
	data_array[7]=0x02770245;
	data_array[8]=0x02a40278;
	data_array[9]=0x03ea02d1;
	data_array[10]=0x031a0309;
	data_array[11]=0x03400332;
	data_array[12]=0x03680359;
	data_array[13]=0x03b2037c;
	data_array[14]=0x000000d8;
	dsi_set_cmdq(&data_array,15,1);
*/
//////gamma 2.4
  data_array[0]=0x00353902;
	data_array[1]=0x000000d1;//gamma
	data_array[2]=0x00270013;
	data_array[3]=0x0057003e;
	data_array[4]=0x00ad007f;
	data_array[5]=0x013101fa;
	data_array[6]=0x02b50183;
	data_array[7]=0x02410206;
	data_array[8]=0x02750242;
	data_array[9]=0x02c802ab;
	data_array[10]=0x03fc02e8;
	data_array[11]=0x03240315;
	data_array[12]=0x0349033a;
	data_array[13]=0x0390035f;
	data_array[14]=0x000000d8;
	dsi_set_cmdq(&data_array,15,1);
	data_array[0]=0x00353902;
	data_array[1]=0x000000d2;
	data_array[2]=0x00270013;
	data_array[3]=0x0057003e;
	data_array[4]=0x00ad007f;
	data_array[5]=0x013101fa;
	data_array[6]=0x02b50183;
	data_array[7]=0x02410206;
	data_array[8]=0x02750242;
	data_array[9]=0x02c802ab;
	data_array[10]=0x03fc02e8;
	data_array[11]=0x03240315;
	data_array[12]=0x0349033a;
	data_array[13]=0x0390035f;
	data_array[14]=0x000000d8;
	dsi_set_cmdq(&data_array,15,1);
	data_array[0]=0x00353902;
	data_array[1]=0x000000d3;
	data_array[2]=0x00270013;
	data_array[3]=0x0057003e;
	data_array[4]=0x00ad007f;
	data_array[5]=0x013101fa;
	data_array[6]=0x02b50183;
	data_array[7]=0x02410206;
	data_array[8]=0x02750242;
	data_array[9]=0x02c802ab;
	data_array[10]=0x03fc02e8;
	data_array[11]=0x03240315;
	data_array[12]=0x0349033a;
	data_array[13]=0x0390035f;
	data_array[14]=0x000000d8;
	dsi_set_cmdq(&data_array,15,1);
	data_array[0]=0x00353902;
	data_array[1]=0x000000d4;
	data_array[2]=0x00270013;
	data_array[3]=0x0057003e;
	data_array[4]=0x00ad007f;
	data_array[5]=0x013101fa;
	data_array[6]=0x02b50183;
	data_array[7]=0x02410206;
	data_array[8]=0x02750242;
	data_array[9]=0x02c802ab;
	data_array[10]=0x03fc02e8;
	data_array[11]=0x03240315;
	data_array[12]=0x0349033a;
	data_array[13]=0x0390035f;
	data_array[14]=0x000000d8;
	dsi_set_cmdq(&data_array,15,1);
	data_array[0]=0x00353902;
	data_array[1]=0x000000d5;
	data_array[2]=0x00270013;
	data_array[3]=0x0057003e;
	data_array[4]=0x00ad007f;
	data_array[5]=0x013101fa;
	data_array[6]=0x02b50183;
	data_array[7]=0x02410206;
	data_array[8]=0x02750242;
	data_array[9]=0x02c802ab;
	data_array[10]=0x03fc02e8;
	data_array[11]=0x03240315;
	data_array[12]=0x0349033a;
	data_array[13]=0x0390035f;
	data_array[14]=0x000000d8;
	dsi_set_cmdq(&data_array,15,1);
	data_array[0]=0x00353902;
	data_array[1]=0x000000d6;
	data_array[2]=0x00270013;
	data_array[3]=0x0057003e;
	data_array[4]=0x00ad007f;
	data_array[5]=0x013101fa;
	data_array[6]=0x02b50183;
	data_array[7]=0x02410206;
	data_array[8]=0x02750242;
	data_array[9]=0x02c802ab;
	data_array[10]=0x03fc02e8;
	data_array[11]=0x03240315;
	data_array[12]=0x0349033a;
	data_array[13]=0x0390035f;
	data_array[14]=0x000000d8;
	dsi_set_cmdq(&data_array,15,1);

	//////gamma 2.5
/*
	data_array[0]=0x00353902;
	data_array[1]=0x000000d1;//gamma
	data_array[2]=0x001c000d;
	data_array[3]=0x00460027;
	data_array[4]=0x009c006f;
	data_array[5]=0x012001e6;
	data_array[6]=0x01ab0175;
	data_array[7]=0x023b02fe;
	data_array[8]=0x0271023c;
	data_array[9]=0x02c502a7;
	data_array[10]=0x03f902e5;
	data_array[11]=0x03230313;
	data_array[12]=0x03470338;
	data_array[13]=0x0391035e;
	data_array[14]=0x000000d8;
	dsi_set_cmdq(&data_array,15,1);
	data_array[0]=0x00353902;
	data_array[1]=0x000000d2;
	data_array[2]=0x001c000d;
	data_array[3]=0x00460027;
	data_array[4]=0x009c006f;
	data_array[5]=0x012001e6;
	data_array[6]=0x01ab0175;
	data_array[7]=0x023b02fe;
	data_array[8]=0x0271023c;
	data_array[9]=0x02c502a7;
	data_array[10]=0x03f902e5;
	data_array[11]=0x03230313;
	data_array[12]=0x03470338;
	data_array[13]=0x0391035e;
	data_array[14]=0x000000d8;
	dsi_set_cmdq(&data_array,15,1);
	data_array[0]=0x00353902;
	data_array[1]=0x000000d3;
	data_array[2]=0x001c000d;
	data_array[3]=0x00460027;
	data_array[4]=0x009c006f;
	data_array[5]=0x012001e6;
	data_array[6]=0x01ab0175;
	data_array[7]=0x023b02fe;
	data_array[8]=0x0271023c;
	data_array[9]=0x02c502a7;
	data_array[10]=0x03f902e5;
	data_array[11]=0x03230313;
	data_array[12]=0x03470338;
	data_array[13]=0x0391035e;
	data_array[14]=0x000000d8;
	dsi_set_cmdq(&data_array,15,1);
	data_array[0]=0x00353902;
	data_array[1]=0x000000d4;
	data_array[2]=0x001c000d;
	data_array[3]=0x00460027;
	data_array[4]=0x009c006f;
	data_array[5]=0x012001e6;
	data_array[6]=0x01ab0175;
	data_array[7]=0x023b02fe;
	data_array[8]=0x0271023c;
	data_array[9]=0x02c502a7;
	data_array[10]=0x03f902e5;
	data_array[11]=0x03230313;
	data_array[12]=0x03470338;
	data_array[13]=0x0391035e;
	data_array[14]=0x000000d8;
	dsi_set_cmdq(&data_array,15,1);
	data_array[0]=0x00353902;
	data_array[1]=0x000000d5;
	data_array[2]=0x001c000d;
	data_array[3]=0x00460027;
	data_array[4]=0x009c006f;
	data_array[5]=0x012001e6;
	data_array[6]=0x01ab0175;
	data_array[7]=0x023b02fe;
	data_array[8]=0x0271023c;
	data_array[9]=0x02c502a7;
	data_array[10]=0x03f902e5;
	data_array[11]=0x03230313;
	data_array[12]=0x03470338;
	data_array[13]=0x0391035e;
	data_array[14]=0x000000d8;
	dsi_set_cmdq(&data_array,15,1);
	data_array[0]=0x00353902;
	data_array[1]=0x000000d6;
	data_array[2]=0x001c000d;
	data_array[3]=0x00460027;
	data_array[4]=0x009c006f;
	data_array[5]=0x012001e6;
	data_array[6]=0x01ab0175;
	data_array[7]=0x023b02fe;
	data_array[8]=0x0271023c;
	data_array[9]=0x02c502a7;
	data_array[10]=0x03f902e5;
	data_array[11]=0x03230313;
	data_array[12]=0x03470338;
	data_array[13]=0x0391035e;
	data_array[14]=0x000000d8;
	dsi_set_cmdq(&data_array,15,1);
*/


/////gamma 2.6
/*
	data_array[0]=0x00353902;
	data_array[1]=0x000000d1;//gamma
	data_array[2]=0x001c000d;
	data_array[3]=0x003e0027;
	data_array[4]=0x0088005e;
	data_array[5]=0x011101d5;
	data_array[6]=0x01a10167;
	data_array[7]=0x023502f5;
	data_array[8]=0x026c0236;
	data_array[9]=0x02c102a3;
	data_array[10]=0x03f802e3;
	data_array[11]=0x03220311;
	data_array[12]=0x03450338;
	data_array[13]=0x038e035c;
	data_array[14]=0x000000d8;
	dsi_set_cmdq(&data_array,15,1);
	data_array[0]=0x00353902;
	data_array[1]=0x000000d2;
	data_array[2]=0x001c000d;
	data_array[3]=0x003e0027;
	data_array[4]=0x0088005e;
	data_array[5]=0x011101d5;
	data_array[6]=0x01a10167;
	data_array[7]=0x023502f5;
	data_array[8]=0x026c0236;
	data_array[9]=0x02c102a3;
	data_array[10]=0x03f802e3;
	data_array[11]=0x03220311;
	data_array[12]=0x03450338;
	data_array[13]=0x038e035c;
	data_array[14]=0x000000d8;
	dsi_set_cmdq(&data_array,15,1);
	data_array[0]=0x00353902;
	data_array[1]=0x000000d3;
	data_array[2]=0x001c000d;
	data_array[3]=0x003e0027;
	data_array[4]=0x0088005e;
	data_array[5]=0x011101d5;
	data_array[6]=0x01a10167;
	data_array[7]=0x023502f5;
	data_array[8]=0x026c0236;
	data_array[9]=0x02c102a3;
	data_array[10]=0x03f802e3;
	data_array[11]=0x03220311;
	data_array[12]=0x03450338;
	data_array[13]=0x038e035c;
	data_array[14]=0x000000d8;
	dsi_set_cmdq(&data_array,15,1);
	data_array[0]=0x00353902;
	data_array[1]=0x000000d4;
	data_array[2]=0x001c000d;
	data_array[3]=0x003e0027;
	data_array[4]=0x0088005e;
	data_array[5]=0x011101d5;
	data_array[6]=0x01a10167;
	data_array[7]=0x023502f5;
	data_array[8]=0x026c0236;
	data_array[9]=0x02c102a3;
	data_array[10]=0x03f802e3;
	data_array[11]=0x03220311;
	data_array[12]=0x03450338;
	data_array[13]=0x038e035c;
	data_array[14]=0x000000d8;
	dsi_set_cmdq(&data_array,15,1);
	data_array[0]=0x00353902;
	data_array[1]=0x000000d5;
	data_array[2]=0x001c000d;
	data_array[3]=0x003e0027;
	data_array[4]=0x0088005e;
	data_array[5]=0x011101d5;
	data_array[6]=0x01a10167;
	data_array[7]=0x023502f5;
	data_array[8]=0x026c0236;
	data_array[9]=0x02c102a3;
	data_array[10]=0x03f802e3;
	data_array[11]=0x03220311;
	data_array[12]=0x03450338;
	data_array[13]=0x038e035c;
	data_array[14]=0x000000d8;
	dsi_set_cmdq(&data_array,15,1);
	data_array[0]=0x00353902;
	data_array[1]=0x000000d6;
	data_array[2]=0x001c000d;
	data_array[3]=0x003e0027;
	data_array[4]=0x0088005e;
	data_array[5]=0x011101d5;
	data_array[6]=0x01a10167;
	data_array[7]=0x023502f5;
	data_array[8]=0x026c0236;
	data_array[9]=0x02c102a3;
	data_array[10]=0x03f802e3;
	data_array[11]=0x03220311;
	data_array[12]=0x03450338;
	data_array[13]=0x038e035c;
	data_array[14]=0x000000d8;
	dsi_set_cmdq(&data_array,15,1);
	
	*/
	
	data_array[0]=0x00043902;
	data_array[1]=0x000000b0;//set AVDD voltage
	dsi_set_cmdq(&data_array,2,1);

	data_array[0]=0x00043902;
	data_array[1]=0x363636b6;//set AVDD boosting timing
	dsi_set_cmdq(&data_array,2,1);


	data_array[0]=0x00043902;
	data_array[1]=0x262626b8;//
	dsi_set_cmdq(&data_array,2,1);

	data_array[0]=0x00043902;
	data_array[1]=0x000000b1;//set AVEE voltage
	dsi_set_cmdq(&data_array,2,1);

	
	data_array[0]=0x00043902;
	data_array[1]=0x262626b7;//set AVEE boosting timing
	dsi_set_cmdq(&data_array,2,1);

	data_array[0]=0x00043902;
	data_array[1]=0x343434b9;//VGH
	dsi_set_cmdq(&data_array,2,1);
	
    
	data_array[0]=0x00043902;
	data_array[1]=0x161616bA;//set VGLX boosting timg/frequency
	dsi_set_cmdq(&data_array,2,1); 
	
	
/////////////////////////////////***********////////////////
	data_array[0]=0x00063902;
	data_array[1]=0x52aa55f0;
	data_array[2]=0x00000008;//set page0
	dsi_set_cmdq(&data_array,3,1);

	data_array[0]=0xccb11500;//display optianal control
	dsi_set_cmdq(&data_array,1,1);

	data_array[0]=0x10b41500;//control for vivid color function
	dsi_set_cmdq(&data_array,1,1);

///////vivid color add by lizhong
	data_array[0]=0x00053902;
	data_array[1]=0x2555aaff;//source control for EQ function
	data_array[2]=0x00000001;
	dsi_set_cmdq(&data_array,3,1);

	data_array[0]=0x000c3902;
	data_array[1]=0x0d0014f9;
	data_array[2]=0x4033261a;
	data_array[3]=0x73665a4d;
	dsi_set_cmdq(&data_array,4,1);
/////////////vivid color

	data_array[0]=0x03b61500;//set source output data hold time
	dsi_set_cmdq(&data_array,1,1);

	data_array[0]=0x00033902;
	data_array[1]=0x007070b7;//EQ control function for gate signal
	dsi_set_cmdq(&data_array,2,1);  

	data_array[0]=0x00053902;
	data_array[1]=0x050501b8;//source control for EQ function
	data_array[2]=0x00000005;
	dsi_set_cmdq(&data_array,3,1);

	data_array[0]=0x00043902;
	data_array[1]=0x050505bc;//inversion control
	dsi_set_cmdq(&data_array,2,1);

	data_array[0]=0x00063902;
	data_array[1]=0x078401bd;//dispaly timing control in non-rgb interface for normal mode
	data_array[2]=0x00000031;
	dsi_set_cmdq(&data_array,3,1); 

	data_array[0]=0x00063902;
	data_array[1]=0x078401be;//dispaly timing control in non-rgb interface for idle mode
	data_array[2]=0x00000031;
	dsi_set_cmdq(&data_array,3,1);

	data_array[0]=0x00063902;
	data_array[1]=0x078401bf;//dispaly timing control in non-rgb interface for idle/partial mode
	data_array[2]=0x00000031;
	dsi_set_cmdq(&data_array,3,1);

	//data_array[0]=0x00351500;//TE set on
	//dsi_set_cmdq(&data_array,1,1);


    data_array[0]=0x00110500;//SLEEP OUT
	dsi_set_cmdq(&data_array,1,1); 
	MDELAY(220);

     data_array[0]=0x00290500;//dispaly on
	dsi_set_cmdq(&data_array,1,1);

	     data_array[0]=0x773A1500;//dispaly on
	dsi_set_cmdq(&data_array,1,1);

	
    {
        int i;

        for(i = 0; i < 1; i++){
        data_array[0]=0x00063902;
        data_array[1]=0x52aa55f0;
        data_array[2]=0x00000008;//set page 0
        dsi_set_cmdq(&data_array,3,1); 
        MDELAY(20);
        }
        for(i = 0; i < 1; i++){
        data_array[0]=0x02c71500;//select zigzag inversion driving type
        dsi_set_cmdq(&data_array,1,1);
        MDELAY(20);
        }
        for(i = 0; i < 1; i++){
        data_array[0]=0x00053902;
        data_array[1]=0x000011c9;//don't know
        data_array[2]=0x00000000;
        dsi_set_cmdq(&data_array,3,1); 
        MDELAY(20);
        }
        
        
        for(i = 0; i < 1; i++){
        data_array[0]=0x00211500;//display inversion on
        dsi_set_cmdq(&data_array,1,1); 
        MDELAY(20);
        }

  
        MDELAY(20);
        }

	MDELAY(20);
	}
}


static void lcm_suspend(void)
{
#if 0	
	push_table(lcm_deep_sleep_mode_in_setting, sizeof(lcm_deep_sleep_mode_in_setting) / sizeof(struct LCM_setting_table), 1);
#else
  unsigned int data_array[16];
  data_array[0]=0x00280500; // Display Off
	dsi_set_cmdq(&data_array, 1, 1);
	MDELAY(10); 
	data_array[0] = 0x00100500; // Sleep In
	dsi_set_cmdq(&data_array, 1, 1);
	MDELAY(100);
#endif		
}


static void lcm_resume(void)
{
#if 0
	push_table(lcm_sleep_out_setting, sizeof(lcm_sleep_out_setting) / sizeof(struct LCM_setting_table), 1);
#else
  unsigned int data_array[16];
  data_array[0] = 0x00110500; // Sleep Out
	dsi_set_cmdq(&data_array, 1, 1);
   MDELAY(200);
	data_array[0] = 0x00290500; // Display On
	dsi_set_cmdq(&data_array, 1, 1);
	MDELAY(200);
	//data_array[0] = 0x00350500; // Display On
	//dsi_set_cmdq(&data_array, 1, 1);
	//MDELAY(5);

	data_array[0]=0x00063902;
	data_array[1]=0x52aa55f0;
	data_array[2]=0x00000008;//set page 0
	dsi_set_cmdq(&data_array,3,1); 

	data_array[0]=0x02c71500;//select zigzag inversion driving type
	dsi_set_cmdq(&data_array,1,1);

	data_array[0]=0x00063902;
	data_array[1]=0x000011c9;//don't know
	data_array[2]=0x00000000;
	dsi_set_cmdq(&data_array,3,1); 
#endif	

}


static void lcm_update(unsigned int x, unsigned int y,
                       unsigned int width, unsigned int height)
{
	unsigned int x0 = x;
	unsigned int y0 = y;
	unsigned int x1 = x0 + width - 1;
	unsigned int y1 = y0 + height - 1;

	unsigned char x0_MSB = ((x0>>8)&0xFF);
	unsigned char x0_LSB = (x0&0xFF);
	unsigned char x1_MSB = ((x1>>8)&0xFF);
	unsigned char x1_LSB = (x1&0xFF);
	unsigned char y0_MSB = ((y0>>8)&0xFF);
	unsigned char y0_LSB = (y0&0xFF);
	unsigned char y1_MSB = ((y1>>8)&0xFF);
	unsigned char y1_LSB = (y1&0xFF);

	unsigned int data_array[16];

	data_array[0]= 0x00053902;
	data_array[1]= (x1_MSB<<24)|(x0_LSB<<16)|(x0_MSB<<8)|0x2a;
	data_array[2]= (x1_LSB);
	data_array[3]= 0x00053902;
	data_array[4]= (y1_MSB<<24)|(y0_LSB<<16)|(y0_MSB<<8)|0x2b;
	data_array[5]= (y1_LSB);
	data_array[6]= 0x002c3909;

	dsi_set_cmdq(&data_array, 7, 0);

}


static void lcm_setbacklight(unsigned int level)
{
	// Refresh value of backlight level.
	lcm_backlight_level_setting[0].para_list[0] = level;

	//push_table(lcm_backlight_level_setting, sizeof(lcm_backlight_level_setting) / sizeof(struct LCM_setting_table), 1);
}


static void lcm_setpwm(unsigned int divider)
{
	// TBD
}


static unsigned int lcm_getpwm(unsigned int divider)
{
	// ref freq = 15MHz, B0h setting 0x80, so 80.6% * freq is pwm_clk;
	// pwm_clk / 255 / 2(lcm_setpwm() 6th params) = pwm_duration = 23706
	unsigned int pwm_clk = 23706 / (1<<divider);	
	return pwm_clk;
}


// ---------------------------------------------------------------------------
//  Get LCM ID Information
// ---------------------------------------------------------------------------
static unsigned int lcm_compare_id()
    {
        unsigned int id = 0;
        unsigned char buffer[4];
        unsigned int data_array[16];

		SET_RESET_PIN(1);  //NOTE:should reset LCM firstly
		MDELAY(10);
		SET_RESET_PIN(0);
		MDELAY(20);
		SET_RESET_PIN(1);
		MDELAY(150);

#if 1
{
	data_array[0]=0x00063902;
	data_array[1]=0x52AA55F0; // SET password
	data_array[2]=0x00000108; 
	dsi_set_cmdq(&data_array, 3, 1);
	MDELAY(10);

	data_array[0] = 0x00033700;// read id return two byte,version and id 3 byte 
	dsi_set_cmdq(&data_array, 1, 1);
	read_reg_v2(0x04, buffer, 3);
	id = buffer[1]; //we only need ID 0x00 0x80 0x00

#ifndef BUILD_UBOOT
	printk("<6>[lcm_compare_id k buffer[0]:[%x] buffer[1]:[%x] buffer[2]:[%x]\n",buffer[0],buffer[1],buffer[2]);
#else
	printf("<6>[lcm_compare_id f buffer[0]:[%x] buffer[1]:[%x] buffer[2]:[%x]\n",buffer[0],buffer[1],buffer[2]);
#endif
	return (0x80 == id)?1:0;


}
#endif

		
}

// ---------------------------------------------------------------------------
//  Get LCM Driver Hooks
// ---------------------------------------------------------------------------
LCM_DRIVER nt35510h_dsi_BM9000B_lcm_drv = 
{
    	.name		= "nt35510h_dsi_BM9000B",
	.set_util_funcs = lcm_set_util_funcs,
	.get_params     = lcm_get_params,
	.init           = lcm_init,
	.suspend        = lcm_suspend,
	.resume         = lcm_resume,
	.update         = lcm_update,
	.set_backlight	= lcm_setbacklight,
	.set_pwm        = lcm_setpwm,
	.get_pwm        = lcm_getpwm,
	//.esd_check   	= lcm_esd_check,
    	//.esd_recover    = lcm_esd_recover,
	.compare_id     = lcm_compare_id,
};

#include <lcm_drv.h>
extern LCM_DRIVER hx8369_lcm_drv;
extern LCM_DRIVER hx8369_6575_lcm_drv;
extern LCM_DRIVER hx8363_6575_dsi_lcm_drv;
extern LCM_DRIVER hx8363_6575_dsi_hvga_lcm_drv;
extern LCM_DRIVER bm8578_lcm_drv;
extern LCM_DRIVER nt35582_mcu_lcm_drv;
extern LCM_DRIVER nt35582_mcu_6575_lcm_drv;
extern LCM_DRIVER nt35582_rgb_6575_lcm_drv;
extern LCM_DRIVER hx8357b_lcm_drv;
extern LCM_DRIVER hx8369_dsi_lcm_drv;
extern LCM_DRIVER hx8369_dsi_6575_lcm_drv;
extern LCM_DRIVER hx8369_dsi_6575_hvga_lcm_drv;
extern LCM_DRIVER hx8369_dsi_6575_qvga_lcm_drv;
extern LCM_DRIVER hx8369_dsi_vdo_lcm_drv;
extern LCM_DRIVER hx8369b_dsi_vdo_lcm_drv;
extern LCM_DRIVER hx8369_hvga_lcm_drv;
extern LCM_DRIVER ili9481_lcm_drv;
extern LCM_DRIVER nt35582_lcm_drv;
extern LCM_DRIVER s6d0170_lcm_drv;
extern LCM_DRIVER spfd5461a_lcm_drv;
extern LCM_DRIVER ta7601_lcm_drv;
extern LCM_DRIVER tft1p3037_lcm_drv;
extern LCM_DRIVER ha5266_lcm_drv;
extern LCM_DRIVER hsd070idw1_lcm_drv;
extern LCM_DRIVER lg4571_lcm_drv;
extern LCM_DRIVER lvds_wsvga_lcm_drv;
extern LCM_DRIVER lvds_wsvga_ti_lcm_drv;
extern LCM_DRIVER nt35565_3d_lcm_drv;
extern LCM_DRIVER r61408_dsi_pj040ia_lcm_drv; //kaka_12_0117 add
extern LCM_DRIVER hx8369a_dsi_TM040YDZ00_lcm_drv; //kaka_12_0121 add
// a51 start
extern LCM_DRIVER hx8363_dsi_YT40F19B0_lcm_drv;//yashi lcd
extern LCM_DRIVER hx8369a_dsi_DJN90240243010A_lcm_drv;//dijing lcd
extern LCM_DRIVER hx8369a_dsi_TM040YDH11_lcm_drv; 
extern LCM_DRIVER nt35510h_dsi_BM9000B_lcm_drv;//a51 tcl lcd
extern LCM_DRIVER r61408_dsi_3P4460_lcm_drv; 
extern LCM_DRIVER otm8018b_dsi_vdo_lcm_drv; // dijing lcd
// a51 end
extern LCM_DRIVER tm070ddh03_lcm_drv;
extern LCM_DRIVER r61408_lcm_drv;
extern LCM_DRIVER nt35516_dsi_3P2463_lcm_drv;//tzp 120409 for A61
extern LCM_DRIVER r63303_idisplay_lcm_drv;

LCM_DRIVER* lcm_driver_list[] = 
{ 
#if defined(NT35516_DSI_3P2463) //tzp 120409 for A61
        &nt35516_dsi_3P2463_lcm_drv,
#endif

// a51 start lcm
#if defined(OTM8018B_DSI_VDO)
	&otm8018b_dsi_vdo_lcm_drv,
#endif

#if defined(HX8369A_DSI_DJN90240243010A)
	&hx8369a_dsi_DJN90240243010A_lcm_drv,
#endif

#if defined(HX8369A_DSI_TM040YDH11)
        &hx8369a_dsi_TM040YDH11_lcm_drv,
#endif

#if defined(R61408_DSI_3P4460)
        &r61408_dsi_3P4460_lcm_drv,
#endif

#if defined(HX8363_DSI_YT40F19B0)
	&hx8363_dsi_YT40F19B0_lcm_drv,
#endif

#if defined(NT35510H_DSI_BM9000B)
	&nt35510h_dsi_BM9000B_lcm_drv,
#endif
// a51 end lcm
//kaka_12_0121 add
#if defined(HX8369A_DSI_TM040YDZ00)
        &hx8369a_dsi_TM040YDZ00_lcm_drv,
#endif
//kaka_12_0121 end
//kaka_12_0117 add
#if defined(R61408_DSI_PJ040IA)
    &r61408_dsi_pj040ia_lcm_drv,
#endif
//kaka_12_0117 end

#if defined(HX8369)
	&hx8369_lcm_drv,
#endif

#if defined(HX8369_6575)
	&hx8369_6575_lcm_drv,
#endif

#if defined(BM8578)
	&bm8578_lcm_drv,
#endif

#if defined(NT35582_MCU)
	&nt35582_mcu_lcm_drv,
#endif

#if defined(NT35582_MCU_6575)
	&nt35582_mcu_6575_lcm_drv,
#endif

#if defined(NT35582_RGB_6575)
	&nt35582_rgb_6575_lcm_drv,
#endif

#if defined(HX8357B)
	&hx8357b_lcm_drv,
#endif

#if defined(R61408)
	&r61408_lcm_drv,
#endif

#if defined(HX8369_DSI_VDO)
	&hx8369_dsi_vdo_lcm_drv,
#endif

#if defined(HX8369_DSI)
	&hx8369_dsi_lcm_drv,
#endif

#if defined(HX8369_6575_DSI)
	&hx8369_dsi_6575_lcm_drv,
#endif

#if defined(HX8369_6575_DSI_HVGA)
	&hx8369_dsi_6575_hvga_lcm_drv,
#endif

#if defined(HX8369_6575_DSI_QVGA)
	&hx8369_dsi_6575_qvga_lcm_drv,
#endif

#if defined(HX8369_HVGA)
	&hx8369_hvga_lcm_drv,
#endif

#if defined(ILI9481)
	&ili9481_lcm_drv,
#endif

#if defined(NT35582)
	&nt35582_lcm_drv,
#endif

#if defined(S6D0170)
	&s6d0170_lcm_drv,
#endif

#if defined(SPFD5461A)
	&spfd5461a_lcm_drv,
#endif

#if defined(TA7601)
	&ta7601_lcm_drv,
#endif

#if defined(TFT1P3037)
	&tft1p3037_lcm_drv,
#endif

#if defined(HA5266)
	&ha5266_lcm_drv,
#endif

#if defined(HSD070IDW1)
	&hsd070idw1_lcm_drv,
#endif

#if defined(HX8363_6575_DSI_HVGA)
	&hx8363_6575_dsi_hvga_lcm_drv,
#endif

#if defined(HX8363_6575_DSI)
	&hx8363_6575_dsi_lcm_drv,
#endif

#if defined(LG4571)
	&lg4571_lcm_drv,
#endif

#if defined(LVDS_WSVGA)
	&lvds_wsvga_lcm_drv,
#endif

#if defined(LVDS_WSVGA_TI)
	&lvds_wsvga_ti_lcm_drv,
#endif

#if defined(NT35565_3D)
	&nt35565_3d_lcm_drv,
#endif

#if defined(TM070DDH03)
	&tm070ddh03_lcm_drv,
#endif
#if defined(R63303_IDISPLAY)
	&r63303_idisplay_lcm_drv,
#endif

#if defined(HX8369B_DSI_VDO)
	&hx8369b_dsi_vdo_lcm_drv,
#endif
};

#define LCM_COMPILE_ASSERT(condition) LCM_COMPILE_ASSERT_X(condition, __LINE__)
#define LCM_COMPILE_ASSERT_X(condition, line) LCM_COMPILE_ASSERT_XX(condition, line)
#define LCM_COMPILE_ASSERT_XX(condition, line) char assertion_failed_at_line_##line[(condition)?1:-1]

unsigned int lcm_count = sizeof(lcm_driver_list)/sizeof(LCM_DRIVER*);
LCM_COMPILE_ASSERT(0 != sizeof(lcm_driver_list)/sizeof(LCM_DRIVER*));

#################################Lcm End ############################
